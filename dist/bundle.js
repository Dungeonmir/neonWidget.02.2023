/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={948:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(537),r=i.n(n),o=i(645),s=i.n(o)()(r());s.push([t.id,".bar{\n    flex-direction: row;\n    flex-wrap: wrap;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    width: 100%;\n    max-width: 500px;\n    margin: 1em auto;\n}","",{version:3,sources:["webpack://./src/components/Bar/bar.css"],names:[],mappings:"AAAA;IACI,mBAAmB;IACnB,eAAe;IACf,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;IACnB,WAAW;IACX,gBAAgB;IAChB,gBAAgB;AACpB",sourcesContent:[".bar{\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    width: 100%;\r\n    max-width: 500px;\r\n    margin: 1em auto;\r\n}"],sourceRoot:""}]);const a=s},804:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(537),r=i.n(n),o=i(645),s=i.n(o)()(r());s.push([t.id,".colorPickButtons{\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    width: 100%;\n    margin: 0 auto;\n    gap: 10px;\n    justify-content: center;\n}\n\n.colorButton{\n    border: none;\n    border-radius: 2px;\n    filter: brightness(80%);\n    flex-basis: 20%;\n    margin: 0;\n}\n.colorButton:hover{\n    filter: brightness(100%);\n    transform: translate(0%, -5%);\n}\n.colorButton:active{\n    filter: brightness(60%);\n}\n","",{version:3,sources:["webpack://./src/components/ObjectProperties/ColorButtons/colorPickButton.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,mBAAmB;IACnB,eAAe;IACf,WAAW;IACX,cAAc;IACd,SAAS;IACT,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,uBAAuB;IACvB,eAAe;IACf,SAAS;AACb;AACA;IACI,wBAAwB;IACxB,6BAA6B;AACjC;AACA;IACI,uBAAuB;AAC3B",sourcesContent:[".colorPickButtons{\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    gap: 10px;\r\n    justify-content: center;\r\n}\r\n\r\n.colorButton{\r\n    border: none;\r\n    border-radius: 2px;\r\n    filter: brightness(80%);\r\n    flex-basis: 20%;\r\n    margin: 0;\r\n}\r\n.colorButton:hover{\r\n    filter: brightness(100%);\r\n    transform: translate(0%, -5%);\r\n}\r\n.colorButton:active{\r\n    filter: brightness(60%);\r\n}\r\n"],sourceRoot:""}]);const a=s},943:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(537),r=i.n(n),o=i(645),s=i.n(o)()(r());s.push([t.id,".objectProperties{\n    margin: 0 auto;\n}\n.option{\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-evenly;\n    max-width: 500px;\n    margin: 0 auto;\n    padding: 0.5em;\n}\n.subOption{\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 5px;\n    align-items: center;\n    justify-content: space-around;\n    width: 100%;\n}\n.label{\n    color: white;\n    background-color: #101010;\n    min-height: 4em;\n    max-width: 500px;\n    margin: 0 auto;\n    opacity: 1;\n    transition: 0.4s all;\n}\n.hidden{\n    visibility: hidden;\n    opacity: 0;\n    transition: 0.4s all;\n}\n\n.textarea{\n    background-color: #101010;\n    color: white;\n    transition: 0.4s all;\n    border-radius: 8px;\n    padding: 8px;\n    width: 100%;\n    margin: 1em;\n    resize: vertical;\n}\n.textarea:focus{\n    outline: none;\n    border: 1px white solid;\n    transition: 0.4s all;\n}\n\n.fontOption{\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n}\n\n.fontOptionButton{\n    flex: 25%;\n    height: 2.4em;\n    padding: 0.5em;\n    filter: brightness(80%);\n}\n.fontOptionButton:hover{\n    filter: brightness(120%);\n}\n\n.priceDiv{\n    font-size: 24px;\n}","",{version:3,sources:["webpack://./src/components/ObjectProperties/objectProperties.css"],names:[],mappings:"AAAA;IACI,cAAc;AAClB;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,eAAe;IACf,mBAAmB;IACnB,6BAA6B;IAC7B,gBAAgB;IAChB,cAAc;IACd,cAAc;AAClB;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,eAAe;IACf,QAAQ;IACR,mBAAmB;IACnB,6BAA6B;IAC7B,WAAW;AACf;AACA;IACI,YAAY;IACZ,yBAAyB;IACzB,eAAe;IACf,gBAAgB;IAChB,cAAc;IACd,UAAU;IACV,oBAAoB;AACxB;AACA;IACI,kBAAkB;IAClB,UAAU;IACV,oBAAoB;AACxB;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,oBAAoB;IACpB,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,WAAW;IACX,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,eAAe;IACf,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,SAAS;IACT,aAAa;IACb,cAAc;IACd,uBAAuB;AAC3B;AACA;IACI,wBAAwB;AAC5B;;AAEA;IACI,eAAe;AACnB",sourcesContent:[".objectProperties{\r\n    margin: 0 auto;\r\n}\r\n.option{\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    max-width: 500px;\r\n    margin: 0 auto;\r\n    padding: 0.5em;\r\n}\r\n.subOption{\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    gap: 5px;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n}\r\n.label{\r\n    color: white;\r\n    background-color: #101010;\r\n    min-height: 4em;\r\n    max-width: 500px;\r\n    margin: 0 auto;\r\n    opacity: 1;\r\n    transition: 0.4s all;\r\n}\r\n.hidden{\r\n    visibility: hidden;\r\n    opacity: 0;\r\n    transition: 0.4s all;\r\n}\r\n\r\n.textarea{\r\n    background-color: #101010;\r\n    color: white;\r\n    transition: 0.4s all;\r\n    border-radius: 8px;\r\n    padding: 8px;\r\n    width: 100%;\r\n    margin: 1em;\r\n    resize: vertical;\r\n}\r\n.textarea:focus{\r\n    outline: none;\r\n    border: 1px white solid;\r\n    transition: 0.4s all;\r\n}\r\n\r\n.fontOption{\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.fontOptionButton{\r\n    flex: 25%;\r\n    height: 2.4em;\r\n    padding: 0.5em;\r\n    filter: brightness(80%);\r\n}\r\n.fontOptionButton:hover{\r\n    filter: brightness(120%);\r\n}\r\n\r\n.priceDiv{\r\n    font-size: 24px;\r\n}"],sourceRoot:""}]);const a=s},967:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(537),r=i.n(n),o=i(645),s=i.n(o)()(r());s.push([t.id,".btn{\n    border: 2px solid rgb(244, 67, 54);\n    background-color: rgb(3, 3, 3) ;\n    color: white;\n    padding: 3px;\n    margin: 5px;\n    min-width: 30px;\n    min-height: 30px;\n    fill: white;\n}\n.btn:active{\n    border-width: 3px;\n}\n.btn:hover{\n    cursor: pointer;\n}","",{version:3,sources:["webpack://./src/components/UI/Button/button.css"],names:[],mappings:"AAAA;IACI,kCAAkC;IAClC,+BAA+B;IAC/B,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,eAAe;IACf,gBAAgB;IAChB,WAAW;AACf;AACA;IACI,iBAAiB;AACrB;AACA;IACI,eAAe;AACnB",sourcesContent:[".btn{\r\n    border: 2px solid rgb(244, 67, 54);\r\n    background-color: rgb(3, 3, 3) ;\r\n    color: white;\r\n    padding: 3px;\r\n    margin: 5px;\r\n    min-width: 30px;\r\n    min-height: 30px;\r\n    fill: white;\r\n}\r\n.btn:active{\r\n    border-width: 3px;\r\n}\r\n.btn:hover{\r\n    cursor: pointer;\r\n}"],sourceRoot:""}]);const a=s},272:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(537),r=i.n(n),o=i(645),s=i.n(o)()(r());s.push([t.id,'.tooltip{\n    position: relative;\n}\n.tooltipText{\n    width: fit-content;\n    background-color: black;\n    color: #fff;\n    text-align: center;\n    padding: 4px 8px;\n    border-radius: 8px;\n    position: absolute;\n    visibility: hidden;\n    opacity: 0;\n    transition: all 0.4s;\n    top: 100%;\n    left: 50%;\n    transform: translate(-50%, 10px);\n    border: 1px solid rgb(244, 67, 54);\n    pointer-events: none;\n    \n    font-size: 16px;\n}\n.tooltipText::after{\n    content: "";\n    position: absolute;\n    bottom: 100%;\n    left: 50%;\n    margin-left: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: transparent transparent rgb(244, 67, 54) transparent;\n}\n\n.tooltip:hover .tooltipText {\n    visibility: visible;\n    opacity: 1;\n    transition: all 0.4s;\n  }',"",{version:3,sources:["webpack://./src/components/UI/Tooltip/tooltip.css"],names:[],mappings:"AAAA;IACI,kBAAkB;AACtB;AACA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,WAAW;IACX,kBAAkB;IAClB,gBAAgB;IAChB,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,UAAU;IACV,oBAAoB;IACpB,SAAS;IACT,SAAS;IACT,gCAAgC;IAChC,kCAAkC;IAClC,oBAAoB;;IAEpB,eAAe;AACnB;AACA;IACI,WAAW;IACX,kBAAkB;IAClB,YAAY;IACZ,SAAS;IACT,iBAAiB;IACjB,iBAAiB;IACjB,mBAAmB;IACnB,kEAAkE;AACtE;;AAEA;IACI,mBAAmB;IACnB,UAAU;IACV,oBAAoB;EACtB",sourcesContent:['.tooltip{\r\n    position: relative;\r\n}\r\n.tooltipText{\r\n    width: fit-content;\r\n    background-color: black;\r\n    color: #fff;\r\n    text-align: center;\r\n    padding: 4px 8px;\r\n    border-radius: 8px;\r\n    position: absolute;\r\n    visibility: hidden;\r\n    opacity: 0;\r\n    transition: all 0.4s;\r\n    top: 100%;\r\n    left: 50%;\r\n    transform: translate(-50%, 10px);\r\n    border: 1px solid rgb(244, 67, 54);\r\n    pointer-events: none;\r\n    \r\n    font-size: 16px;\r\n}\r\n.tooltipText::after{\r\n    content: "";\r\n    position: absolute;\r\n    bottom: 100%;\r\n    left: 50%;\r\n    margin-left: -5px;\r\n    border-width: 5px;\r\n    border-style: solid;\r\n    border-color: transparent transparent rgb(244, 67, 54) transparent;\r\n}\r\n\r\n.tooltip:hover .tooltipText {\r\n    visibility: visible;\r\n    opacity: 1;\r\n    transition: all 0.4s;\r\n  }'],sourceRoot:""}]);const a=s},890:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(537),r=i.n(n),o=i(645),s=i.n(o)()(r());s.push([t.id,".neonWidget {\n\tbackground-color: rgba(173, 126, 126, 0);\n\tfont-family: cursive;\n}\n\n.canvas-container {\n\tmargin: 0 auto;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;CACC,wCAAwC;CACxC,oBAAoB;AACrB;;AAEA;CACC,cAAc;AACf",sourcesContent:[".neonWidget {\r\n\tbackground-color: rgba(173, 126, 126, 0);\r\n\tfont-family: cursive;\r\n}\r\n\r\n.canvas-container {\r\n\tmargin: 0 auto;\r\n}\r\n"],sourceRoot:""}]);const a=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(s[h]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);n&&s[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),i&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=i):l[2]=i),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},777:(t,e,i)=>{var n,r,o,s,a,h,c,l,u,f,d,g,p,v,m,y,_,x,b,C,S,w,T=T||{version:"5.3.0"};if(e.fabric=T,"undefined"!=typeof document&&"undefined"!=typeof window)document instanceof("undefined"!=typeof HTMLDocument?HTMLDocument:Document)?T.document=document:T.document=document.implementation.createHTMLDocument(""),T.window=window;else{var A=new(i(960).JSDOM)(decodeURIComponent("%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E"),{features:{FetchExternalResources:["img"]},resources:"usable"}).window;T.document=A.document,T.jsdomImplForWrapper=i(759).implForWrapper,T.nodeCanvas=i(137).Canvas,T.window=A,DOMParser=T.window.DOMParser}function O(t,e){var i=t.canvas,n=e.targetCanvas,r=n.getContext("2d");r.translate(0,n.height),r.scale(1,-1);var o=i.height-n.height;r.drawImage(i,0,o,n.width,n.height,0,0,n.width,n.height)}function k(t,e){var i=e.targetCanvas.getContext("2d"),n=e.destinationWidth,r=e.destinationHeight,o=n*r*4,s=new Uint8Array(this.imageBuffer,0,o),a=new Uint8ClampedArray(this.imageBuffer,0,o);t.readPixels(0,0,n,r,t.RGBA,t.UNSIGNED_BYTE,s);var h=new ImageData(a,n,r);i.putImageData(h,0,0)}T.isTouchSupported="ontouchstart"in T.window||"ontouchstart"in T.document||T.window&&T.window.navigator&&T.window.navigator.maxTouchPoints>0,T.isLikelyNode="undefined"!=typeof Buffer&&"undefined"==typeof window,T.SHARED_ATTRIBUTES=["display","transform","fill","fill-opacity","fill-rule","opacity","stroke","stroke-dasharray","stroke-linecap","stroke-dashoffset","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","id","paint-order","vector-effect","instantiated_by_use","clip-path"],T.DPI=96,T.reNum="(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?)",T.commaWsp="(?:\\s+,?\\s*|,\\s*)",T.rePathCommand=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:[eE][-+]?\d+)?)/gi,T.reNonWord=/[ \n\.,;!\?\-]/,T.fontPaths={},T.iMatrix=[1,0,0,1,0,0],T.svgNS="http://www.w3.org/2000/svg",T.perfLimitSizeTotal=2097152,T.maxCacheSideLimit=4096,T.minCacheSideLimit=256,T.charWidthsCache={},T.textureSize=2048,T.disableStyleCopyPaste=!1,T.enableGLFiltering=!0,T.devicePixelRatio=T.window.devicePixelRatio||T.window.webkitDevicePixelRatio||T.window.mozDevicePixelRatio||1,T.browserShadowBlurConstant=1,T.arcToSegmentsCache={},T.boundsOfCurveCache={},T.cachesBoundsOfCurve=!0,T.forceGLPutImageData=!1,T.initFilterBackend=function(){return T.enableGLFiltering&&T.isWebglSupported&&T.isWebglSupported(T.textureSize)?(console.log("max texture size: "+T.maxTextureSize),new T.WebglFilterBackend({tileSize:T.textureSize})):T.Canvas2dFilterBackend?new T.Canvas2dFilterBackend:void 0},"undefined"!=typeof document&&"undefined"!=typeof window&&(window.fabric=T),function(){function t(t,e){if(this.__eventListeners[t]){var i=this.__eventListeners[t];e?i[i.indexOf(e)]=!1:T.util.array.fill(i,!1)}}function e(t,e){var i=function(){e.apply(this,arguments),this.off(t,i)}.bind(this);this.on(t,i)}T.Observable={fire:function(t,e){if(!this.__eventListeners)return this;var i=this.__eventListeners[t];if(!i)return this;for(var n=0,r=i.length;n<r;n++)i[n]&&i[n].call(this,e||{});return this.__eventListeners[t]=i.filter((function(t){return!1!==t})),this},on:function(t,e){if(this.__eventListeners||(this.__eventListeners={}),1===arguments.length)for(var i in t)this.on(i,t[i]);else this.__eventListeners[t]||(this.__eventListeners[t]=[]),this.__eventListeners[t].push(e);return this},once:function(t,i){if(1===arguments.length)for(var n in t)e.call(this,n,t[n]);else e.call(this,t,i);return this},off:function(e,i){if(!this.__eventListeners)return this;if(0===arguments.length)for(e in this.__eventListeners)t.call(this,e);else if(1===arguments.length&&"object"==typeof arguments[0])for(var n in e)t.call(this,n,e[n]);else t.call(this,e,i);return this}}}(),T.Collection={_objects:[],add:function(){if(this._objects.push.apply(this._objects,arguments),this._onObjectAdded)for(var t=0,e=arguments.length;t<e;t++)this._onObjectAdded(arguments[t]);return this.renderOnAddRemove&&this.requestRenderAll(),this},insertAt:function(t,e,i){var n=this._objects;return i?n[e]=t:n.splice(e,0,t),this._onObjectAdded&&this._onObjectAdded(t),this.renderOnAddRemove&&this.requestRenderAll(),this},remove:function(){for(var t,e=this._objects,i=!1,n=0,r=arguments.length;n<r;n++)-1!==(t=e.indexOf(arguments[n]))&&(i=!0,e.splice(t,1),this._onObjectRemoved&&this._onObjectRemoved(arguments[n]));return this.renderOnAddRemove&&i&&this.requestRenderAll(),this},forEachObject:function(t,e){for(var i=this.getObjects(),n=0,r=i.length;n<r;n++)t.call(e,i[n],n,i);return this},getObjects:function(t){return void 0===t?this._objects.concat():this._objects.filter((function(e){return e.type===t}))},item:function(t){return this._objects[t]},isEmpty:function(){return 0===this._objects.length},size:function(){return this._objects.length},contains:function(t,e){return this._objects.indexOf(t)>-1||!!e&&this._objects.some((function(e){return"function"==typeof e.contains&&e.contains(t,!0)}))},complexity:function(){return this._objects.reduce((function(t,e){return t+(e.complexity?e.complexity():0)}),0)}},T.CommonMethods={_setOptions:function(t){for(var e in t)this.set(e,t[e])},_initGradient:function(t,e){!t||!t.colorStops||t instanceof T.Gradient||this.set(e,new T.Gradient(t))},_initPattern:function(t,e,i){!t||!t.source||t instanceof T.Pattern?i&&i():this.set(e,new T.Pattern(t,i))},_setObject:function(t){for(var e in t)this._set(e,t[e])},set:function(t,e){return"object"==typeof t?this._setObject(t):this._set(t,e),this},_set:function(t,e){this[t]=e},toggle:function(t){var e=this.get(t);return"boolean"==typeof e&&this.set(t,!e),this},get:function(t){return this[t]}},n=e,r=Math.sqrt,o=Math.atan2,s=Math.pow,a=Math.PI/180,h=Math.PI/2,T.util={cos:function(t){if(0===t)return 1;switch(t<0&&(t=-t),t/h){case 1:case 3:return 0;case 2:return-1}return Math.cos(t)},sin:function(t){if(0===t)return 0;var e=1;switch(t<0&&(e=-1),t/h){case 1:return e;case 2:return 0;case 3:return-e}return Math.sin(t)},removeFromArray:function(t,e){var i=t.indexOf(e);return-1!==i&&t.splice(i,1),t},getRandomInt:function(t,e){return Math.floor(Math.random()*(e-t+1))+t},degreesToRadians:function(t){return t*a},radiansToDegrees:function(t){return t/a},rotatePoint:function(t,e,i){var n=new T.Point(t.x-e.x,t.y-e.y),r=T.util.rotateVector(n,i);return new T.Point(r.x,r.y).addEquals(e)},rotateVector:function(t,e){var i=T.util.sin(e),n=T.util.cos(e);return{x:t.x*n-t.y*i,y:t.x*i+t.y*n}},createVector:function(t,e){return new T.Point(e.x-t.x,e.y-t.y)},calcAngleBetweenVectors:function(t,e){return Math.acos((t.x*e.x+t.y*e.y)/(Math.hypot(t.x,t.y)*Math.hypot(e.x,e.y)))},getHatVector:function(t){return new T.Point(t.x,t.y).multiply(1/Math.hypot(t.x,t.y))},getBisector:function(t,e,i){var n=T.util.createVector(t,e),r=T.util.createVector(t,i),o=T.util.calcAngleBetweenVectors(n,r),s=o*(0===T.util.calcAngleBetweenVectors(T.util.rotateVector(n,o),r)?1:-1)/2;return{vector:T.util.getHatVector(T.util.rotateVector(n,s)),angle:o}},projectStrokeOnPoints:function(t,e,i){var n=[],r=e.strokeWidth/2,o=e.strokeUniform?new T.Point(1/e.scaleX,1/e.scaleY):new T.Point(1,1),s=function(t){var e=r/Math.hypot(t.x,t.y);return new T.Point(t.x*e*o.x,t.y*e*o.y)};return t.length<=1||t.forEach((function(a,h){var c,l,u=new T.Point(a.x,a.y);0===h?(l=t[h+1],c=i?s(T.util.createVector(l,u)).addEquals(u):t[t.length-1]):h===t.length-1?(c=t[h-1],l=i?s(T.util.createVector(c,u)).addEquals(u):t[0]):(c=t[h-1],l=t[h+1]);var f,d,g=T.util.getBisector(u,c,l),p=g.vector,v=g.angle;if("miter"===e.strokeLineJoin&&(f=-r/Math.sin(v/2),d=new T.Point(p.x*f*o.x,p.y*f*o.y),Math.hypot(d.x,d.y)/r<=e.strokeMiterLimit))return n.push(u.add(d)),void n.push(u.subtract(d));f=-r*Math.SQRT2,d=new T.Point(p.x*f*o.x,p.y*f*o.y),n.push(u.add(d)),n.push(u.subtract(d))})),n},transformPoint:function(t,e,i){return i?new T.Point(e[0]*t.x+e[2]*t.y,e[1]*t.x+e[3]*t.y):new T.Point(e[0]*t.x+e[2]*t.y+e[4],e[1]*t.x+e[3]*t.y+e[5])},makeBoundingBoxFromPoints:function(t,e){if(e)for(var i=0;i<t.length;i++)t[i]=T.util.transformPoint(t[i],e);var n=[t[0].x,t[1].x,t[2].x,t[3].x],r=T.util.array.min(n),o=T.util.array.max(n)-r,s=[t[0].y,t[1].y,t[2].y,t[3].y],a=T.util.array.min(s);return{left:r,top:a,width:o,height:T.util.array.max(s)-a}},invertTransform:function(t){var e=1/(t[0]*t[3]-t[1]*t[2]),i=[e*t[3],-e*t[1],-e*t[2],e*t[0]],n=T.util.transformPoint({x:t[4],y:t[5]},i,!0);return i[4]=-n.x,i[5]=-n.y,i},toFixed:function(t,e){return parseFloat(Number(t).toFixed(e))},parseUnit:function(t,e){var i=/\D{0,2}$/.exec(t),n=parseFloat(t);switch(e||(e=T.Text.DEFAULT_SVG_FONT_SIZE),i[0]){case"mm":return n*T.DPI/25.4;case"cm":return n*T.DPI/2.54;case"in":return n*T.DPI;case"pt":return n*T.DPI/72;case"pc":return n*T.DPI/72*12;case"em":return n*e;default:return n}},falseFunction:function(){return!1},getKlass:function(t,e){return t=T.util.string.camelize(t.charAt(0).toUpperCase()+t.slice(1)),T.util.resolveNamespace(e)[t]},getSvgAttributes:function(t){var e=["instantiated_by_use","style","id","class"];switch(t){case"linearGradient":e=e.concat(["x1","y1","x2","y2","gradientUnits","gradientTransform"]);break;case"radialGradient":e=e.concat(["gradientUnits","gradientTransform","cx","cy","r","fx","fy","fr"]);break;case"stop":e=e.concat(["offset","stop-color","stop-opacity"])}return e},resolveNamespace:function(t){if(!t)return T;var e,i=t.split("."),r=i.length,o=n||T.window;for(e=0;e<r;++e)o=o[i[e]];return o},loadImage:function(t,e,i,n){if(t){var r=T.util.createImage(),o=function(){e&&e.call(i,r,!1),r=r.onload=r.onerror=null};r.onload=o,r.onerror=function(){T.log("Error loading "+r.src),e&&e.call(i,null,!0),r=r.onload=r.onerror=null},0!==t.indexOf("data")&&null!=n&&(r.crossOrigin=n),"data:image/svg"===t.substring(0,14)&&(r.onload=null,T.util.loadImageInDom(r,o)),r.src=t}else e&&e.call(i,t)},loadImageInDom:function(t,e){var i=T.document.createElement("div");i.style.width=i.style.height="1px",i.style.left=i.style.top="-100%",i.style.position="absolute",i.appendChild(t),T.document.querySelector("body").appendChild(i),t.onload=function(){e(),i.parentNode.removeChild(i),i=null}},enlivenObjects:function(t,e,i,n){var r=[],o=0,s=(t=t||[]).length;function a(){++o===s&&e&&e(r.filter((function(t){return t})))}s?t.forEach((function(t,e){t&&t.type?T.util.getKlass(t.type,i).fromObject(t,(function(i,o){o||(r[e]=i),n&&n(t,i,o),a()})):a()})):e&&e(r)},enlivenObjectEnlivables:function(t,e,i){var n=T.Object.ENLIVEN_PROPS.filter((function(e){return!!t[e]}));T.util.enlivenObjects(n.map((function(e){return t[e]})),(function(t){var r={};n.forEach((function(i,n){r[i]=t[n],e&&(e[i]=t[n])})),i&&i(r)}))},enlivenPatterns:function(t,e){function i(){++r===o&&e&&e(n)}var n=[],r=0,o=(t=t||[]).length;o?t.forEach((function(t,e){t&&t.source?new T.Pattern(t,(function(t){n[e]=t,i()})):(n[e]=t,i())})):e&&e(n)},groupSVGElements:function(t,e,i){var n;return t&&1===t.length?(void 0!==i&&(t[0].sourcePath=i),t[0]):(e&&(e.width&&e.height?e.centerPoint={x:e.width/2,y:e.height/2}:(delete e.width,delete e.height)),n=new T.Group(t,e),void 0!==i&&(n.sourcePath=i),n)},populateWithProperties:function(t,e,i){if(i&&Array.isArray(i))for(var n=0,r=i.length;n<r;n++)i[n]in t&&(e[i[n]]=t[i[n]])},createCanvasElement:function(){return T.document.createElement("canvas")},copyCanvasElement:function(t){var e=T.util.createCanvasElement();return e.width=t.width,e.height=t.height,e.getContext("2d").drawImage(t,0,0),e},toDataURL:function(t,e,i){return t.toDataURL("image/"+e,i)},createImage:function(){return T.document.createElement("img")},multiplyTransformMatrices:function(t,e,i){return[t[0]*e[0]+t[2]*e[1],t[1]*e[0]+t[3]*e[1],t[0]*e[2]+t[2]*e[3],t[1]*e[2]+t[3]*e[3],i?0:t[0]*e[4]+t[2]*e[5]+t[4],i?0:t[1]*e[4]+t[3]*e[5]+t[5]]},qrDecompose:function(t){var e=o(t[1],t[0]),i=s(t[0],2)+s(t[1],2),n=r(i),h=(t[0]*t[3]-t[2]*t[1])/n,c=o(t[0]*t[2]+t[1]*t[3],i);return{angle:e/a,scaleX:n,scaleY:h,skewX:c/a,skewY:0,translateX:t[4],translateY:t[5]}},calcRotateMatrix:function(t){if(!t.angle)return T.iMatrix.concat();var e=T.util.degreesToRadians(t.angle),i=T.util.cos(e),n=T.util.sin(e);return[i,n,-n,i,0,0]},calcDimensionsMatrix:function(t){var e=void 0===t.scaleX?1:t.scaleX,i=void 0===t.scaleY?1:t.scaleY,n=[t.flipX?-e:e,0,0,t.flipY?-i:i,0,0],r=T.util.multiplyTransformMatrices,o=T.util.degreesToRadians;return t.skewX&&(n=r(n,[1,0,Math.tan(o(t.skewX)),1],!0)),t.skewY&&(n=r(n,[1,Math.tan(o(t.skewY)),0,1],!0)),n},composeMatrix:function(t){var e=[1,0,0,1,t.translateX||0,t.translateY||0],i=T.util.multiplyTransformMatrices;return t.angle&&(e=i(e,T.util.calcRotateMatrix(t))),(1!==t.scaleX||1!==t.scaleY||t.skewX||t.skewY||t.flipX||t.flipY)&&(e=i(e,T.util.calcDimensionsMatrix(t))),e},resetObjectTransform:function(t){t.scaleX=1,t.scaleY=1,t.skewX=0,t.skewY=0,t.flipX=!1,t.flipY=!1,t.rotate(0)},saveObjectTransform:function(t){return{scaleX:t.scaleX,scaleY:t.scaleY,skewX:t.skewX,skewY:t.skewY,angle:t.angle,left:t.left,flipX:t.flipX,flipY:t.flipY,top:t.top}},isTransparent:function(t,e,i,n){n>0&&(e>n?e-=n:e=0,i>n?i-=n:i=0);var r,o=!0,s=t.getImageData(e,i,2*n||1,2*n||1),a=s.data.length;for(r=3;r<a&&0!=(o=s.data[r]<=0);r+=4);return s=null,o},parsePreserveAspectRatioAttribute:function(t){var e,i="meet",n=t.split(" ");return n&&n.length&&("meet"!==(i=n.pop())&&"slice"!==i?(e=i,i="meet"):n.length&&(e=n.pop())),{meetOrSlice:i,alignX:"none"!==e?e.slice(1,4):"none",alignY:"none"!==e?e.slice(5,8):"none"}},clearFabricFontCache:function(t){(t=(t||"").toLowerCase())?T.charWidthsCache[t]&&delete T.charWidthsCache[t]:T.charWidthsCache={}},limitDimsByArea:function(t,e){var i=Math.sqrt(e*t),n=Math.floor(e/i);return{x:Math.floor(i),y:n}},capValue:function(t,e,i){return Math.max(t,Math.min(e,i))},findScaleToFit:function(t,e){return Math.min(e.width/t.width,e.height/t.height)},findScaleToCover:function(t,e){return Math.max(e.width/t.width,e.height/t.height)},matrixToSVG:function(t){return"matrix("+t.map((function(t){return T.util.toFixed(t,T.Object.NUM_FRACTION_DIGITS)})).join(" ")+")"},removeTransformFromObject:function(t,e){var i=T.util.invertTransform(e),n=T.util.multiplyTransformMatrices(i,t.calcOwnMatrix());T.util.applyTransformToObject(t,n)},addTransformToObject:function(t,e){T.util.applyTransformToObject(t,T.util.multiplyTransformMatrices(e,t.calcOwnMatrix()))},applyTransformToObject:function(t,e){var i=T.util.qrDecompose(e),n=new T.Point(i.translateX,i.translateY);t.flipX=!1,t.flipY=!1,t.set("scaleX",i.scaleX),t.set("scaleY",i.scaleY),t.skewX=i.skewX,t.skewY=i.skewY,t.angle=i.angle,t.setPositionByOrigin(n,"center","center")},sizeAfterTransform:function(t,e,i){var n=t/2,r=e/2,o=[{x:-n,y:-r},{x:n,y:-r},{x:-n,y:r},{x:n,y:r}],s=T.util.calcDimensionsMatrix(i),a=T.util.makeBoundingBoxFromPoints(o,s);return{x:a.width,y:a.height}},mergeClipPaths:function(t,e){var i=t,n=e;i.inverted&&!n.inverted&&(i=e,n=t),T.util.applyTransformToObject(n,T.util.multiplyTransformMatrices(T.util.invertTransform(i.calcTransformMatrix()),n.calcTransformMatrix()));var r=i.inverted&&n.inverted;return r&&(i.inverted=n.inverted=!1),new T.Group([i],{clipPath:n,inverted:r})},hasStyleChanged:function(t,e,i){return i=i||!1,t.fill!==e.fill||t.stroke!==e.stroke||t.strokeWidth!==e.strokeWidth||t.fontSize!==e.fontSize||t.fontFamily!==e.fontFamily||t.fontWeight!==e.fontWeight||t.fontStyle!==e.fontStyle||t.textBackgroundColor!==e.textBackgroundColor||t.deltaY!==e.deltaY||i&&(t.overline!==e.overline||t.underline!==e.underline||t.linethrough!==e.linethrough)},stylesToArray:function(t,e){t=T.util.object.clone(t,!0);for(var i=e.split("\n"),n=-1,r={},o=[],s=0;s<i.length;s++)if(t[s])for(var a=0;a<i[s].length;a++){n++;var h=t[s][a];h&&Object.keys(h).length>0&&(T.util.hasStyleChanged(r,h,!0)?o.push({start:n,end:n+1,style:h}):o[o.length-1].end++),r=h||{}}else n+=i[s].length;return o},stylesFromArray:function(t,e){if(!Array.isArray(t))return t;for(var i=e.split("\n"),n=-1,r=0,o={},s=0;s<i.length;s++)for(var a=0;a<i[s].length;a++)n++,t[r]&&t[r].start<=n&&n<t[r].end&&(o[s]=o[s]||{},o[s][a]=Object.assign({},t[r].style),n===t[r].end-1&&r++);return o}},function(){var t=Array.prototype.join,e={m:2,l:2,h:1,v:1,c:6,s:4,q:4,t:2,a:7},i={m:"l",M:"L"};function n(t,e,i,n,r,o,s,a,h,c,l){var u=T.util.cos(t),f=T.util.sin(t),d=T.util.cos(e),g=T.util.sin(e),p=i*r*d-n*o*g+s,v=n*r*d+i*o*g+a;return["C",c+h*(-i*r*f-n*o*u),l+h*(-n*r*f+i*o*u),p+h*(i*r*g+n*o*d),v+h*(n*r*g-i*o*d),p,v]}function r(t,e,i,n){var r=Math.atan2(e,t),o=Math.atan2(n,i);return o>=r?o-r:2*Math.PI-(r-o)}function o(t,e,i){for(var o=i[1],s=i[2],a=i[3],h=i[4],c=i[5],l=function(t,e,i,o,s,a,h){var c=Math.PI,l=h*c/180,u=T.util.sin(l),f=T.util.cos(l),d=0,g=0,p=-f*t*.5-u*e*.5,v=-f*e*.5+u*t*.5,m=(i=Math.abs(i))*i,y=(o=Math.abs(o))*o,_=v*v,x=p*p,b=m*y-m*_-y*x,C=0;if(b<0){var S=Math.sqrt(1-b/(m*y));i*=S,o*=S}else C=(s===a?-1:1)*Math.sqrt(b/(m*_+y*x));var w=C*i*v/o,A=-C*o*p/i,O=f*w-u*A+.5*t,k=u*w+f*A+.5*e,P=r(1,0,(p-w)/i,(v-A)/o),E=r((p-w)/i,(v-A)/o,(-p-w)/i,(-v-A)/o);0===a&&E>0?E-=2*c:1===a&&E<0&&(E+=2*c);for(var j=Math.ceil(Math.abs(E/c*2)),M=[],D=E/j,I=8/3*Math.sin(D/4)*Math.sin(D/4)/Math.sin(D/2),B=P+D,F=0;F<j;F++)M[F]=n(P,B,f,u,i,o,O,k,I,d,g),d=M[F][5],g=M[F][6],P=B,B+=D;return M}(i[6]-t,i[7]-e,o,s,h,c,a),u=0,f=l.length;u<f;u++)l[u][1]+=t,l[u][2]+=e,l[u][3]+=t,l[u][4]+=e,l[u][5]+=t,l[u][6]+=e;return l}function s(t,e,i,n){return Math.sqrt((i-t)*(i-t)+(n-e)*(n-e))}function a(t,e,i,n,r,o,s,a){return function(h){var c,l=(c=h)*c*c,u=function(t){return 3*t*t*(1-t)}(h),f=function(t){return 3*t*(1-t)*(1-t)}(h),d=function(t){return(1-t)*(1-t)*(1-t)}(h);return{x:s*l+r*u+i*f+t*d,y:a*l+o*u+n*f+e*d}}}function h(t,e,i,n,r,o,s,a){return function(h){var c=1-h,l=3*c*c*(i-t)+6*c*h*(r-i)+3*h*h*(s-r),u=3*c*c*(n-e)+6*c*h*(o-n)+3*h*h*(a-o);return Math.atan2(u,l)}}function c(t,e,i,n,r,o){return function(s){var a,h=(a=s)*a,c=function(t){return 2*t*(1-t)}(s),l=function(t){return(1-t)*(1-t)}(s);return{x:r*h+i*c+t*l,y:o*h+n*c+e*l}}}function l(t,e,i,n,r,o){return function(s){var a=1-s,h=2*a*(i-t)+2*s*(r-i),c=2*a*(n-e)+2*s*(o-n);return Math.atan2(c,h)}}function u(t,e,i){var n,r,o={x:e,y:i},a=0;for(r=1;r<=100;r+=1)n=t(r/100),a+=s(o.x,o.y,n.x,n.y),o=n;return a}function f(t){for(var e,i,n,r,o=0,f=t.length,d=0,g=0,p=0,v=0,m=[],y=0;y<f;y++){switch(n={x:d,y:g,command:(e=t[y])[0]},e[0]){case"M":n.length=0,p=d=e[1],v=g=e[2];break;case"L":n.length=s(d,g,e[1],e[2]),d=e[1],g=e[2];break;case"C":i=a(d,g,e[1],e[2],e[3],e[4],e[5],e[6]),r=h(d,g,e[1],e[2],e[3],e[4],e[5],e[6]),n.iterator=i,n.angleFinder=r,n.length=u(i,d,g),d=e[5],g=e[6];break;case"Q":i=c(d,g,e[1],e[2],e[3],e[4]),r=l(d,g,e[1],e[2],e[3],e[4]),n.iterator=i,n.angleFinder=r,n.length=u(i,d,g),d=e[3],g=e[4];break;case"Z":case"z":n.destX=p,n.destY=v,n.length=s(d,g,p,v),d=p,g=v}o+=n.length,m.push(n)}return m.push({length:o,x:d,y:g}),m}T.util.joinPath=function(t){return t.map((function(t){return t.join(" ")})).join(" ")},T.util.parsePath=function(t){var n,r,o,s,a,h=[],c=[],l=T.rePathCommand,u="[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?\\s*",f="("+u+")"+T.commaWsp,d="([01])"+T.commaWsp+"?",g=new RegExp(f+"?"+f+"?"+f+d+d+f+"?("+u+")","g");if(!t||!t.match)return h;for(var p,v=0,m=(a=t.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi)).length;v<m;v++){s=(n=a[v]).slice(1).trim(),c.length=0;var y=n.charAt(0);if(p=[y],"a"===y.toLowerCase())for(var _;_=g.exec(s);)for(var x=1;x<_.length;x++)c.push(_[x]);else for(;o=l.exec(s);)c.push(o[0]);x=0;for(var b=c.length;x<b;x++)r=parseFloat(c[x]),isNaN(r)||p.push(r);var C=e[y.toLowerCase()],S=i[y]||y;if(p.length-1>C)for(var w=1,A=p.length;w<A;w+=C)h.push([y].concat(p.slice(w,w+C))),y=S;else h.push(p)}return h},T.util.makePathSimpler=function(t){var e,i,n,r,s,a,h=0,c=0,l=t.length,u=0,f=0,d=[];for(i=0;i<l;++i){switch(n=!1,(e=t[i].slice(0))[0]){case"l":e[0]="L",e[1]+=h,e[2]+=c;case"L":h=e[1],c=e[2];break;case"h":e[1]+=h;case"H":e[0]="L",e[2]=c,h=e[1];break;case"v":e[1]+=c;case"V":e[0]="L",c=e[1],e[1]=h,e[2]=c;break;case"m":e[0]="M",e[1]+=h,e[2]+=c;case"M":h=e[1],c=e[2],u=e[1],f=e[2];break;case"c":e[0]="C",e[1]+=h,e[2]+=c,e[3]+=h,e[4]+=c,e[5]+=h,e[6]+=c;case"C":s=e[3],a=e[4],h=e[5],c=e[6];break;case"s":e[0]="S",e[1]+=h,e[2]+=c,e[3]+=h,e[4]+=c;case"S":"C"===r?(s=2*h-s,a=2*c-a):(s=h,a=c),h=e[3],c=e[4],e[0]="C",e[5]=e[3],e[6]=e[4],e[3]=e[1],e[4]=e[2],e[1]=s,e[2]=a,s=e[3],a=e[4];break;case"q":e[0]="Q",e[1]+=h,e[2]+=c,e[3]+=h,e[4]+=c;case"Q":s=e[1],a=e[2],h=e[3],c=e[4];break;case"t":e[0]="T",e[1]+=h,e[2]+=c;case"T":"Q"===r?(s=2*h-s,a=2*c-a):(s=h,a=c),e[0]="Q",h=e[1],c=e[2],e[1]=s,e[2]=a,e[3]=h,e[4]=c;break;case"a":e[0]="A",e[6]+=h,e[7]+=c;case"A":n=!0,d=d.concat(o(h,c,e)),h=e[6],c=e[7];break;case"z":case"Z":h=u,c=f}n||d.push(e),r=e[0]}return d},T.util.getSmoothPathFromPoints=function(t,e){var i,n=[],r=new T.Point(t[0].x,t[0].y),o=new T.Point(t[1].x,t[1].y),s=t.length,a=1,h=0,c=s>2;for(e=e||0,c&&(a=t[2].x<o.x?-1:t[2].x===o.x?0:1,h=t[2].y<o.y?-1:t[2].y===o.y?0:1),n.push(["M",r.x-a*e,r.y-h*e]),i=1;i<s;i++){if(!r.eq(o)){var l=r.midPointFrom(o);n.push(["Q",r.x,r.y,l.x,l.y])}r=t[i],i+1<t.length&&(o=t[i+1])}return c&&(a=r.x>t[i-2].x?1:r.x===t[i-2].x?0:-1,h=r.y>t[i-2].y?1:r.y===t[i-2].y?0:-1),n.push(["L",r.x+a*e,r.y+h*e]),n},T.util.getPathSegmentsInfo=f,T.util.getBoundsOfCurve=function(e,i,n,r,o,s,a,h){var c;if(T.cachesBoundsOfCurve&&(c=t.call(arguments),T.boundsOfCurveCache[c]))return T.boundsOfCurveCache[c];var l,u,f,d,g,p,v,m,y=Math.sqrt,_=Math.min,x=Math.max,b=Math.abs,C=[],S=[[],[]];u=6*e-12*n+6*o,l=-3*e+9*n-9*o+3*a,f=3*n-3*e;for(var w=0;w<2;++w)if(w>0&&(u=6*i-12*r+6*s,l=-3*i+9*r-9*s+3*h,f=3*r-3*i),b(l)<1e-12){if(b(u)<1e-12)continue;0<(d=-f/u)&&d<1&&C.push(d)}else(v=u*u-4*f*l)<0||(0<(g=(-u+(m=y(v)))/(2*l))&&g<1&&C.push(g),0<(p=(-u-m)/(2*l))&&p<1&&C.push(p));for(var A,O,k,P=C.length,E=P;P--;)A=(k=1-(d=C[P]))*k*k*e+3*k*k*d*n+3*k*d*d*o+d*d*d*a,S[0][P]=A,O=k*k*k*i+3*k*k*d*r+3*k*d*d*s+d*d*d*h,S[1][P]=O;S[0][E]=e,S[1][E]=i,S[0][E+1]=a,S[1][E+1]=h;var j=[{x:_.apply(null,S[0]),y:_.apply(null,S[1])},{x:x.apply(null,S[0]),y:x.apply(null,S[1])}];return T.cachesBoundsOfCurve&&(T.boundsOfCurveCache[c]=j),j},T.util.getPointOnPath=function(t,e,i){i||(i=f(t));for(var n=0;e-i[n].length>0&&n<i.length-2;)e-=i[n].length,n++;var r,o=i[n],a=e/o.length,h=o.command,c=t[n];switch(h){case"M":return{x:o.x,y:o.y,angle:0};case"Z":case"z":return(r=new T.Point(o.x,o.y).lerp(new T.Point(o.destX,o.destY),a)).angle=Math.atan2(o.destY-o.y,o.destX-o.x),r;case"L":return(r=new T.Point(o.x,o.y).lerp(new T.Point(c[1],c[2]),a)).angle=Math.atan2(c[2]-o.y,c[1]-o.x),r;case"C":case"Q":return function(t,e){for(var i,n,r,o=0,a=0,h=t.iterator,c={x:t.x,y:t.y},l=.01,u=t.angleFinder;a<e&&l>1e-4;)i=h(o),r=o,(n=s(c.x,c.y,i.x,i.y))+a>e?(o-=l,l/=2):(c=i,o+=l,a+=n);return i.angle=u(r),i}(o,e)}},T.util.transformPath=function(t,e,i){return i&&(e=T.util.multiplyTransformMatrices(e,[1,0,0,1,-i.x,-i.y])),t.map((function(t){for(var i=t.slice(0),n={},r=1;r<t.length-1;r+=2)n.x=t[r],n.y=t[r+1],n=T.util.transformPoint(n,e),i[r]=n.x,i[r+1]=n.y;return i}))}}(),function(){var t=Array.prototype.slice;function e(t,e,i){if(t&&0!==t.length){var n=t.length-1,r=e?t[n][e]:t[n];if(e)for(;n--;)i(t[n][e],r)&&(r=t[n][e]);else for(;n--;)i(t[n],r)&&(r=t[n]);return r}}T.util.array={fill:function(t,e){for(var i=t.length;i--;)t[i]=e;return t},invoke:function(e,i){for(var n=t.call(arguments,2),r=[],o=0,s=e.length;o<s;o++)r[o]=n.length?e[o][i].apply(e[o],n):e[o][i].call(e[o]);return r},min:function(t,i){return e(t,i,(function(t,e){return t<e}))},max:function(t,i){return e(t,i,(function(t,e){return t>=e}))}}}(),function(){function t(e,i,n){if(n)if(!T.isLikelyNode&&i instanceof Element)e=i;else if(i instanceof Array){e=[];for(var r=0,o=i.length;r<o;r++)e[r]=t({},i[r],n)}else if(i&&"object"==typeof i)for(var s in i)"canvas"===s||"group"===s?e[s]=null:i.hasOwnProperty(s)&&(e[s]=t({},i[s],n));else e=i;else for(var s in i)e[s]=i[s];return e}T.util.object={extend:t,clone:function(e,i){return t({},e,i)}},T.util.object.extend(T.util,T.Observable)}(),function(){function t(t,e){var i=t.charCodeAt(e);if(isNaN(i))return"";if(i<55296||i>57343)return t.charAt(e);if(55296<=i&&i<=56319){if(t.length<=e+1)throw"High surrogate without following low surrogate";var n=t.charCodeAt(e+1);if(56320>n||n>57343)throw"High surrogate without following low surrogate";return t.charAt(e)+t.charAt(e+1)}if(0===e)throw"Low surrogate without preceding high surrogate";var r=t.charCodeAt(e-1);if(55296>r||r>56319)throw"Low surrogate without preceding high surrogate";return!1}T.util.string={camelize:function(t){return t.replace(/-+(.)?/g,(function(t,e){return e?e.toUpperCase():""}))},capitalize:function(t,e){return t.charAt(0).toUpperCase()+(e?t.slice(1):t.slice(1).toLowerCase())},escapeXml:function(t){return t.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&apos;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},graphemeSplit:function(e){var i,n=0,r=[];for(n=0;n<e.length;n++)!1!==(i=t(e,n))&&r.push(i);return r}}}(),function(){var t=Array.prototype.slice,e=function(){},i=function(){for(var t in{toString:1})if("toString"===t)return!1;return!0}(),n=function(t,e,n){for(var r in e)r in t.prototype&&"function"==typeof t.prototype[r]&&(e[r]+"").indexOf("callSuper")>-1?t.prototype[r]=function(t){return function(){var i=this.constructor.superclass;this.constructor.superclass=n;var r=e[t].apply(this,arguments);if(this.constructor.superclass=i,"initialize"!==t)return r}}(r):t.prototype[r]=e[r],i&&(e.toString!==Object.prototype.toString&&(t.prototype.toString=e.toString),e.valueOf!==Object.prototype.valueOf&&(t.prototype.valueOf=e.valueOf))};function r(){}function o(e){for(var i=null,n=this;n.constructor.superclass;){var r=n.constructor.superclass.prototype[e];if(n[e]!==r){i=r;break}n=n.constructor.superclass.prototype}return i?arguments.length>1?i.apply(this,t.call(arguments,1)):i.call(this):console.log("tried to callSuper "+e+", method not found in prototype chain",this)}T.util.createClass=function(){var i=null,s=t.call(arguments,0);function a(){this.initialize.apply(this,arguments)}"function"==typeof s[0]&&(i=s.shift()),a.superclass=i,a.subclasses=[],i&&(r.prototype=i.prototype,a.prototype=new r,i.subclasses.push(a));for(var h=0,c=s.length;h<c;h++)n(a,s[h],i);return a.prototype.initialize||(a.prototype.initialize=e),a.prototype.constructor=a,a.prototype.callSuper=o,a}}(),c=!!T.document.createElement("div").attachEvent,l=["touchstart","touchmove","touchend"],T.util.addListener=function(t,e,i,n){t&&t.addEventListener(e,i,!c&&n)},T.util.removeListener=function(t,e,i,n){t&&t.removeEventListener(e,i,!c&&n)},T.util.getPointer=function(t){var e=t.target,i=T.util.getScrollLeftTop(e),n=function(t){var e=t.changedTouches;return e&&e[0]?e[0]:t}(t);return{x:n.clientX+i.left,y:n.clientY+i.top}},T.util.isTouchEvent=function(t){return l.indexOf(t.type)>-1||"touch"===t.pointerType},f="string"==typeof(u=T.document.createElement("div")).style.opacity,d="string"==typeof u.style.filter,g=/alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/,p=function(t){return t},f?p=function(t,e){return t.style.opacity=e,t}:d&&(p=function(t,e){var i=t.style;return t.currentStyle&&!t.currentStyle.hasLayout&&(i.zoom=1),g.test(i.filter)?(e=e>=.9999?"":"alpha(opacity="+100*e+")",i.filter=i.filter.replace(g,e)):i.filter+=" alpha(opacity="+100*e+")",t}),T.util.setStyle=function(t,e){var i=t.style;if(!i)return t;if("string"==typeof e)return t.style.cssText+=";"+e,e.indexOf("opacity")>-1?p(t,e.match(/opacity:\s*(\d?\.?\d*)/)[1]):t;for(var n in e)if("opacity"===n)p(t,e[n]);else{var r="float"===n||"cssFloat"===n?void 0===i.styleFloat?"cssFloat":"styleFloat":n;i.setProperty(r,e[n])}return t},function(){var t,e,i,n,r=Array.prototype.slice,o=function(t){return r.call(t,0)};try{t=o(T.document.childNodes)instanceof Array}catch(t){}function s(t,e){var i=T.document.createElement(t);for(var n in e)"class"===n?i.className=e[n]:"for"===n?i.htmlFor=e[n]:i.setAttribute(n,e[n]);return i}function a(t){for(var e=0,i=0,n=T.document.documentElement,r=T.document.body||{scrollLeft:0,scrollTop:0};t&&(t.parentNode||t.host)&&((t=t.parentNode||t.host)===T.document?(e=r.scrollLeft||n.scrollLeft||0,i=r.scrollTop||n.scrollTop||0):(e+=t.scrollLeft||0,i+=t.scrollTop||0),1!==t.nodeType||"fixed"!==t.style.position););return{left:e,top:i}}t||(o=function(t){for(var e=new Array(t.length),i=t.length;i--;)e[i]=t[i];return e}),e=T.document.defaultView&&T.document.defaultView.getComputedStyle?function(t,e){var i=T.document.defaultView.getComputedStyle(t,null);return i?i[e]:void 0}:function(t,e){var i=t.style[e];return!i&&t.currentStyle&&(i=t.currentStyle[e]),i},i=T.document.documentElement.style,n="userSelect"in i?"userSelect":"MozUserSelect"in i?"MozUserSelect":"WebkitUserSelect"in i?"WebkitUserSelect":"KhtmlUserSelect"in i?"KhtmlUserSelect":"",T.util.makeElementUnselectable=function(t){return void 0!==t.onselectstart&&(t.onselectstart=T.util.falseFunction),n?t.style[n]="none":"string"==typeof t.unselectable&&(t.unselectable="on"),t},T.util.makeElementSelectable=function(t){return void 0!==t.onselectstart&&(t.onselectstart=null),n?t.style[n]="":"string"==typeof t.unselectable&&(t.unselectable=""),t},T.util.setImageSmoothing=function(t,e){t.imageSmoothingEnabled=t.imageSmoothingEnabled||t.webkitImageSmoothingEnabled||t.mozImageSmoothingEnabled||t.msImageSmoothingEnabled||t.oImageSmoothingEnabled,t.imageSmoothingEnabled=e},T.util.getById=function(t){return"string"==typeof t?T.document.getElementById(t):t},T.util.toArray=o,T.util.addClass=function(t,e){t&&-1===(" "+t.className+" ").indexOf(" "+e+" ")&&(t.className+=(t.className?" ":"")+e)},T.util.makeElement=s,T.util.wrapElement=function(t,e,i){return"string"==typeof e&&(e=s(e,i)),t.parentNode&&t.parentNode.replaceChild(e,t),e.appendChild(t),e},T.util.getScrollLeftTop=a,T.util.getElementOffset=function(t){var i,n,r=t&&t.ownerDocument,o={left:0,top:0},s={left:0,top:0},h={borderLeftWidth:"left",borderTopWidth:"top",paddingLeft:"left",paddingTop:"top"};if(!r)return s;for(var c in h)s[h[c]]+=parseInt(e(t,c),10)||0;return i=r.documentElement,void 0!==t.getBoundingClientRect&&(o=t.getBoundingClientRect()),n=a(t),{left:o.left+n.left-(i.clientLeft||0)+s.left,top:o.top+n.top-(i.clientTop||0)+s.top}},T.util.getNodeCanvas=function(t){var e=T.jsdomImplForWrapper(t);return e._canvas||e._image},T.util.cleanUpJsdomNode=function(t){if(T.isLikelyNode){var e=T.jsdomImplForWrapper(t);e&&(e._image=null,e._canvas=null,e._currentSrc=null,e._attributes=null,e._classList=null)}}}(),function(){function t(){}T.util.request=function(e,i){i||(i={});var n=i.method?i.method.toUpperCase():"GET",r=i.onComplete||function(){},o=new T.window.XMLHttpRequest,s=i.body||i.parameters;return o.onreadystatechange=function(){4===o.readyState&&(r(o),o.onreadystatechange=t)},"GET"===n&&(s=null,"string"==typeof i.parameters&&(e=function(t,e){return t+(/\?/.test(t)?"&":"?")+e}(e,i.parameters))),o.open(n,e,!0),"POST"!==n&&"PUT"!==n||o.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),o.send(s),o}}(),T.log=console.log,T.warn=console.warn,function(){var t=T.util.object.extend,e=T.util.object.clone,i=[];function n(){return!1}function r(t,e,i,n){return-i*Math.cos(t/n*(Math.PI/2))+i+e}T.util.object.extend(i,{cancelAll:function(){var t=this.splice(0);return t.forEach((function(t){t.cancel()})),t},cancelByCanvas:function(t){if(!t)return[];var e=this.filter((function(e){return"object"==typeof e.target&&e.target.canvas===t}));return e.forEach((function(t){t.cancel()})),e},cancelByTarget:function(t){var e=this.findAnimationsByTarget(t);return e.forEach((function(t){t.cancel()})),e},findAnimationIndex:function(t){return this.indexOf(this.findAnimation(t))},findAnimation:function(t){return this.find((function(e){return e.cancel===t}))},findAnimationsByTarget:function(t){return t?this.filter((function(e){return e.target===t})):[]}});var o=T.window.requestAnimationFrame||T.window.webkitRequestAnimationFrame||T.window.mozRequestAnimationFrame||T.window.oRequestAnimationFrame||T.window.msRequestAnimationFrame||function(t){return T.window.setTimeout(t,1e3/60)},s=T.window.cancelAnimationFrame||T.window.clearTimeout;function a(){return o.apply(T.window,arguments)}T.util.animate=function(i){i||(i={});var o,s=!1,h=function(){var t=T.runningAnimations.indexOf(o);return t>-1&&T.runningAnimations.splice(t,1)[0]};return o=t(e(i),{cancel:function(){return s=!0,h()},currentValue:"startValue"in i?i.startValue:0,completionRate:0,durationRate:0}),T.runningAnimations.push(o),a((function(t){var e,c=t||+new Date,l=i.duration||500,u=c+l,f=i.onChange||n,d=i.abort||n,g=i.onComplete||n,p=i.easing||r,v="startValue"in i&&i.startValue.length>0,m="startValue"in i?i.startValue:0,y="endValue"in i?i.endValue:100,_=i.byValue||(v?m.map((function(t,e){return y[e]-m[e]})):y-m);i.onStart&&i.onStart(),function t(i){var n=(e=i||+new Date)>u?l:e-c,r=n/l,x=v?m.map((function(t,e){return p(n,m[e],_[e],l)})):p(n,m,_,l),b=v?Math.abs((x[0]-m[0])/_[0]):Math.abs((x-m)/_);if(o.currentValue=v?x.slice():x,o.completionRate=b,o.durationRate=r,!s){if(!d(x,b,r))return e>u?(o.currentValue=v?y.slice():y,o.completionRate=1,o.durationRate=1,f(v?y.slice():y,1,1),g(y,1,1),void h()):(f(x,b,r),void a(t));h()}}(c)})),o.cancel},T.util.requestAnimFrame=a,T.util.cancelAnimFrame=function(){return s.apply(T.window,arguments)},T.runningAnimations=i}(),function(){function t(t,e,i){var n="rgba("+parseInt(t[0]+i*(e[0]-t[0]),10)+","+parseInt(t[1]+i*(e[1]-t[1]),10)+","+parseInt(t[2]+i*(e[2]-t[2]),10);return(n+=","+(t&&e?parseFloat(t[3]+i*(e[3]-t[3])):1))+")"}T.util.animateColor=function(e,i,n,r){var o=new T.Color(e).getSource(),s=new T.Color(i).getSource(),a=r.onComplete,h=r.onChange;return r=r||{},T.util.animate(T.util.object.extend(r,{duration:n||500,startValue:o,endValue:s,byValue:s,easing:function(e,i,n,o){return t(i,n,r.colorEasing?r.colorEasing(e,o):1-Math.cos(e/o*(Math.PI/2)))},onComplete:function(e,i,n){if(a)return a(t(s,s,0),i,n)},onChange:function(e,i,n){if(h){if(Array.isArray(e))return h(t(e,e,0),i,n);h(e,i,n)}}}))}}(),function(){function t(t,e,i,n){return t<Math.abs(e)?(t=e,n=i/4):n=0===e&&0===t?i/(2*Math.PI)*Math.asin(1):i/(2*Math.PI)*Math.asin(e/t),{a:t,c:e,p:i,s:n}}function e(t,e,i){return t.a*Math.pow(2,10*(e-=1))*Math.sin((e*i-t.s)*(2*Math.PI)/t.p)}function i(t,e,i,r){return i-n(r-t,0,i,r)+e}function n(t,e,i,n){return(t/=n)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e}T.util.ease={easeInQuad:function(t,e,i,n){return i*(t/=n)*t+e},easeOutQuad:function(t,e,i,n){return-i*(t/=n)*(t-2)+e},easeInOutQuad:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e},easeInCubic:function(t,e,i,n){return i*(t/=n)*t*t+e},easeOutCubic:function(t,e,i,n){return i*((t=t/n-1)*t*t+1)+e},easeInOutCubic:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t+e:i/2*((t-=2)*t*t+2)+e},easeInQuart:function(t,e,i,n){return i*(t/=n)*t*t*t+e},easeOutQuart:function(t,e,i,n){return-i*((t=t/n-1)*t*t*t-1)+e},easeInOutQuart:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t*t+e:-i/2*((t-=2)*t*t*t-2)+e},easeInQuint:function(t,e,i,n){return i*(t/=n)*t*t*t*t+e},easeOutQuint:function(t,e,i,n){return i*((t=t/n-1)*t*t*t*t+1)+e},easeInOutQuint:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e},easeInSine:function(t,e,i,n){return-i*Math.cos(t/n*(Math.PI/2))+i+e},easeOutSine:function(t,e,i,n){return i*Math.sin(t/n*(Math.PI/2))+e},easeInOutSine:function(t,e,i,n){return-i/2*(Math.cos(Math.PI*t/n)-1)+e},easeInExpo:function(t,e,i,n){return 0===t?e:i*Math.pow(2,10*(t/n-1))+e},easeOutExpo:function(t,e,i,n){return t===n?e+i:i*(1-Math.pow(2,-10*t/n))+e},easeInOutExpo:function(t,e,i,n){return 0===t?e:t===n?e+i:(t/=n/2)<1?i/2*Math.pow(2,10*(t-1))+e:i/2*(2-Math.pow(2,-10*--t))+e},easeInCirc:function(t,e,i,n){return-i*(Math.sqrt(1-(t/=n)*t)-1)+e},easeOutCirc:function(t,e,i,n){return i*Math.sqrt(1-(t=t/n-1)*t)+e},easeInOutCirc:function(t,e,i,n){return(t/=n/2)<1?-i/2*(Math.sqrt(1-t*t)-1)+e:i/2*(Math.sqrt(1-(t-=2)*t)+1)+e},easeInElastic:function(i,n,r,o){var s=0;return 0===i?n:1==(i/=o)?n+r:(s||(s=.3*o),-e(t(r,r,s,1.70158),i,o)+n)},easeOutElastic:function(e,i,n,r){var o=0;if(0===e)return i;if(1==(e/=r))return i+n;o||(o=.3*r);var s=t(n,n,o,1.70158);return s.a*Math.pow(2,-10*e)*Math.sin((e*r-s.s)*(2*Math.PI)/s.p)+s.c+i},easeInOutElastic:function(i,n,r,o){var s=0;if(0===i)return n;if(2==(i/=o/2))return n+r;s||(s=o*(.3*1.5));var a=t(r,r,s,1.70158);return i<1?-.5*e(a,i,o)+n:a.a*Math.pow(2,-10*(i-=1))*Math.sin((i*o-a.s)*(2*Math.PI)/a.p)*.5+a.c+n},easeInBack:function(t,e,i,n,r){return void 0===r&&(r=1.70158),i*(t/=n)*t*((r+1)*t-r)+e},easeOutBack:function(t,e,i,n,r){return void 0===r&&(r=1.70158),i*((t=t/n-1)*t*((r+1)*t+r)+1)+e},easeInOutBack:function(t,e,i,n,r){return void 0===r&&(r=1.70158),(t/=n/2)<1?i/2*(t*t*((1+(r*=1.525))*t-r))+e:i/2*((t-=2)*t*((1+(r*=1.525))*t+r)+2)+e},easeInBounce:i,easeOutBounce:n,easeInOutBounce:function(t,e,r,o){return t<o/2?.5*i(2*t,0,r,o)+e:.5*n(2*t-o,0,r,o)+.5*r+e}}}(),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.util.object.clone,r=e.util.toFixed,o=e.util.parseUnit,s=e.util.multiplyTransformMatrices,a={cx:"left",x:"left",r:"radius",cy:"top",y:"top",display:"visible",visibility:"visible",transform:"transformMatrix","fill-opacity":"fillOpacity","fill-rule":"fillRule","font-family":"fontFamily","font-size":"fontSize","font-style":"fontStyle","font-weight":"fontWeight","letter-spacing":"charSpacing","paint-order":"paintFirst","stroke-dasharray":"strokeDashArray","stroke-dashoffset":"strokeDashOffset","stroke-linecap":"strokeLineCap","stroke-linejoin":"strokeLineJoin","stroke-miterlimit":"strokeMiterLimit","stroke-opacity":"strokeOpacity","stroke-width":"strokeWidth","text-decoration":"textDecoration","text-anchor":"textAnchor",opacity:"opacity","clip-path":"clipPath","clip-rule":"clipRule","vector-effect":"strokeUniform","image-rendering":"imageSmoothing"},h={stroke:"strokeOpacity",fill:"fillOpacity"},c="font-size",l="clip-path";function u(t){return t in a?a[t]:t}function f(t,i,n,r){var a,h=Array.isArray(i);if("fill"!==t&&"stroke"!==t||"none"!==i){if("strokeUniform"===t)return"non-scaling-stroke"===i;if("strokeDashArray"===t)i="none"===i?null:i.replace(/,/g," ").split(/\s+/).map(parseFloat);else if("transformMatrix"===t)i=n&&n.transformMatrix?s(n.transformMatrix,e.parseTransformAttribute(i)):e.parseTransformAttribute(i);else if("visible"===t)i="none"!==i&&"hidden"!==i,n&&!1===n.visible&&(i=!1);else if("opacity"===t)i=parseFloat(i),n&&void 0!==n.opacity&&(i*=n.opacity);else if("textAnchor"===t)i="start"===i?"left":"end"===i?"right":"center";else if("charSpacing"===t)a=o(i,r)/r*1e3;else if("paintFirst"===t){var c=i.indexOf("fill"),l=i.indexOf("stroke");i="fill",(c>-1&&l>-1&&l<c||-1===c&&l>-1)&&(i="stroke")}else{if("href"===t||"xlink:href"===t||"font"===t)return i;if("imageSmoothing"===t)return"optimizeQuality"===i;a=h?i.map(o):o(i,r)}}else i="";return!h&&isNaN(a)?i:a}function d(t){return new RegExp("^("+t.join("|")+")\\b","i")}function g(t,e){var i,n,r,o,s=[];for(r=0,o=e.length;r<o;r++)i=e[r],n=t.getElementsByTagName(i),s=s.concat(Array.prototype.slice.call(n));return s}function p(t,e){var i,n=!0;return(i=v(t,e.pop()))&&e.length&&(n=function(t,e){for(var i,n=!0;t.parentNode&&1===t.parentNode.nodeType&&e.length;)n&&(i=e.pop()),n=v(t=t.parentNode,i);return 0===e.length}(t,e)),i&&n&&0===e.length}function v(t,e){var i,n,r=t.nodeName,o=t.getAttribute("class"),s=t.getAttribute("id");if(i=new RegExp("^"+r,"i"),e=e.replace(i,""),s&&e.length&&(i=new RegExp("#"+s+"(?![a-zA-Z\\-]+)","i"),e=e.replace(i,"")),o&&e.length)for(n=(o=o.split(" ")).length;n--;)i=new RegExp("\\."+o[n]+"(?![a-zA-Z\\-]+)","i"),e=e.replace(i,"");return 0===e.length}function m(t,e){var i;if(t.getElementById&&(i=t.getElementById(e)),i)return i;var n,r,o,s=t.getElementsByTagName("*");for(r=0,o=s.length;r<o;r++)if(e===(n=s[r]).getAttribute("id"))return n}e.svgValidTagNamesRegEx=d(["path","circle","polygon","polyline","ellipse","rect","line","image","text"]),e.svgViewBoxElementsRegEx=d(["symbol","image","marker","pattern","view","svg"]),e.svgInvalidAncestorsRegEx=d(["pattern","defs","symbol","metadata","clipPath","mask","desc"]),e.svgValidParentsRegEx=d(["symbol","g","a","svg","clipPath","defs"]),e.cssRules={},e.gradientDefs={},e.clipPaths={},e.parseTransformAttribute=function(){function t(t,i,n){t[n]=Math.tan(e.util.degreesToRadians(i[0]))}var i=e.iMatrix,n=e.reNum,r=e.commaWsp,o="(?:(?:(matrix)\\s*\\(\\s*("+n+")"+r+"("+n+")"+r+"("+n+")"+r+"("+n+")"+r+"("+n+")"+r+"("+n+")\\s*\\))|(?:(translate)\\s*\\(\\s*("+n+")(?:"+r+"("+n+"))?\\s*\\))|(?:(scale)\\s*\\(\\s*("+n+")(?:"+r+"("+n+"))?\\s*\\))|(?:(rotate)\\s*\\(\\s*("+n+")(?:"+r+"("+n+")"+r+"("+n+"))?\\s*\\))|(?:(skewX)\\s*\\(\\s*("+n+")\\s*\\))|(?:(skewY)\\s*\\(\\s*("+n+")\\s*\\)))",s=new RegExp("^\\s*(?:(?:"+o+"(?:"+r+"*"+o+")*)?)\\s*$"),a=new RegExp(o,"g");return function(n){var r=i.concat(),h=[];if(!n||n&&!s.test(n))return r;n.replace(a,(function(n){var s=new RegExp(o).exec(n).filter((function(t){return!!t})),a=s[1],c=s.slice(2).map(parseFloat);switch(a){case"translate":!function(t,e){t[4]=e[0],2===e.length&&(t[5]=e[1])}(r,c);break;case"rotate":c[0]=e.util.degreesToRadians(c[0]),function(t,i){var n=e.util.cos(i[0]),r=e.util.sin(i[0]),o=0,s=0;3===i.length&&(o=i[1],s=i[2]),t[0]=n,t[1]=r,t[2]=-r,t[3]=n,t[4]=o-(n*o-r*s),t[5]=s-(r*o+n*s)}(r,c);break;case"scale":!function(t,e){var i=e[0],n=2===e.length?e[1]:e[0];t[0]=i,t[3]=n}(r,c);break;case"skewX":t(r,c,2);break;case"skewY":t(r,c,1);break;case"matrix":r=c}h.push(r.concat()),r=i.concat()}));for(var c=h[0];h.length>1;)h.shift(),c=e.util.multiplyTransformMatrices(c,h[0]);return c}}();var y=new RegExp("^\\s*("+e.reNum+"+)\\s*,?\\s*("+e.reNum+"+)\\s*,?\\s*("+e.reNum+"+)\\s*,?\\s*("+e.reNum+"+)\\s*$");function _(t){if(!e.svgViewBoxElementsRegEx.test(t.nodeName))return{};var i,n,r,s,a,h,c=t.getAttribute("viewBox"),l=1,u=1,f=t.getAttribute("width"),d=t.getAttribute("height"),g=t.getAttribute("x")||0,p=t.getAttribute("y")||0,v=t.getAttribute("preserveAspectRatio")||"",m=!c||!(c=c.match(y)),_=!f||!d||"100%"===f||"100%"===d,x=m&&_,b={},C="",S=0,w=0;if(b.width=0,b.height=0,b.toBeParsed=x,m&&(g||p)&&t.parentNode&&"#document"!==t.parentNode.nodeName&&(C=" translate("+o(g)+" "+o(p)+") ",a=(t.getAttribute("transform")||"")+C,t.setAttribute("transform",a),t.removeAttribute("x"),t.removeAttribute("y")),x)return b;if(m)return b.width=o(f),b.height=o(d),b;if(i=-parseFloat(c[1]),n=-parseFloat(c[2]),r=parseFloat(c[3]),s=parseFloat(c[4]),b.minX=i,b.minY=n,b.viewBoxWidth=r,b.viewBoxHeight=s,_?(b.width=r,b.height=s):(b.width=o(f),b.height=o(d),l=b.width/r,u=b.height/s),"none"!==(v=e.util.parsePreserveAspectRatioAttribute(v)).alignX&&("meet"===v.meetOrSlice&&(u=l=l>u?u:l),"slice"===v.meetOrSlice&&(u=l=l>u?l:u),S=b.width-r*l,w=b.height-s*l,"Mid"===v.alignX&&(S/=2),"Mid"===v.alignY&&(w/=2),"Min"===v.alignX&&(S=0),"Min"===v.alignY&&(w=0)),1===l&&1===u&&0===i&&0===n&&0===g&&0===p)return b;if((g||p)&&"#document"!==t.parentNode.nodeName&&(C=" translate("+o(g)+" "+o(p)+") "),a=C+" matrix("+l+" 0 0 "+u+" "+(i*l+S)+" "+(n*u+w)+") ","svg"===t.nodeName){for(h=t.ownerDocument.createElementNS(e.svgNS,"g");t.firstChild;)h.appendChild(t.firstChild);t.appendChild(h)}else(h=t).removeAttribute("x"),h.removeAttribute("y"),a=h.getAttribute("transform")+a;return h.setAttribute("transform",a),b}function x(t,e){var i="xlink:href",n=m(t,e.getAttribute(i).slice(1));if(n&&n.getAttribute(i)&&x(t,n),["gradientTransform","x1","x2","y1","y2","gradientUnits","cx","cy","r","fx","fy"].forEach((function(t){n&&!e.hasAttribute(t)&&n.hasAttribute(t)&&e.setAttribute(t,n.getAttribute(t))})),!e.children.length)for(var r=n.cloneNode(!0);r.firstChild;)e.appendChild(r.firstChild);e.removeAttribute(i)}e.parseSVGDocument=function(t,i,r,o){if(t){!function(t){for(var i=g(t,["use","svg:use"]),n=0;i.length&&n<i.length;){var r=i[n],o=r.getAttribute("xlink:href")||r.getAttribute("href");if(null===o)return;var s,a,h,c,l=o.slice(1),u=r.getAttribute("x")||0,f=r.getAttribute("y")||0,d=m(t,l).cloneNode(!0),p=(d.getAttribute("transform")||"")+" translate("+u+", "+f+")",v=i.length,y=e.svgNS;if(_(d),/^svg$/i.test(d.nodeName)){var x=d.ownerDocument.createElementNS(y,"g");for(a=0,c=(h=d.attributes).length;a<c;a++)s=h.item(a),x.setAttributeNS(y,s.nodeName,s.nodeValue);for(;d.firstChild;)x.appendChild(d.firstChild);d=x}for(a=0,c=(h=r.attributes).length;a<c;a++)"x"!==(s=h.item(a)).nodeName&&"y"!==s.nodeName&&"xlink:href"!==s.nodeName&&"href"!==s.nodeName&&("transform"===s.nodeName?p=s.nodeValue+" "+p:d.setAttribute(s.nodeName,s.nodeValue));d.setAttribute("transform",p),d.setAttribute("instantiated_by_use","1"),d.removeAttribute("id"),r.parentNode.replaceChild(d,r),i.length===v&&n++}}(t);var s,a,h=e.Object.__uid++,c=_(t),l=e.util.toArray(t.getElementsByTagName("*"));if(c.crossOrigin=o&&o.crossOrigin,c.svgUid=h,0===l.length&&e.isLikelyNode){var u=[];for(s=0,a=(l=t.selectNodes('//*[name(.)!="svg"]')).length;s<a;s++)u[s]=l[s];l=u}var f=l.filter((function(t){return _(t),e.svgValidTagNamesRegEx.test(t.nodeName.replace("svg:",""))&&!function(t,e){for(;t&&(t=t.parentNode);)if(t.nodeName&&e.test(t.nodeName.replace("svg:",""))&&!t.getAttribute("instantiated_by_use"))return!0;return!1}(t,e.svgInvalidAncestorsRegEx)}));if(!f||f&&!f.length)i&&i([],{});else{var d={};l.filter((function(t){return"clipPath"===t.nodeName.replace("svg:","")})).forEach((function(t){var i=t.getAttribute("id");d[i]=e.util.toArray(t.getElementsByTagName("*")).filter((function(t){return e.svgValidTagNamesRegEx.test(t.nodeName.replace("svg:",""))}))})),e.gradientDefs[h]=e.getGradientDefs(t),e.cssRules[h]=e.getCSSRules(t),e.clipPaths[h]=d,e.parseElements(f,(function(t,n){i&&(i(t,c,n,l),delete e.gradientDefs[h],delete e.cssRules[h],delete e.clipPaths[h])}),n(c),r,o)}}};var b=new RegExp("(normal|italic)?\\s*(normal|small-caps)?\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*("+e.reNum+"(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|"+e.reNum+"))?\\s+(.*)");i(e,{parseFontDeclaration:function(t,e){var i=t.match(b);if(i){var n=i[1],r=i[3],s=i[4],a=i[5],h=i[6];n&&(e.fontStyle=n),r&&(e.fontWeight=isNaN(parseFloat(r))?r:parseFloat(r)),s&&(e.fontSize=o(s)),h&&(e.fontFamily=h),a&&(e.lineHeight="normal"===a?1:a)}},getGradientDefs:function(t){var e,i=g(t,["linearGradient","radialGradient","svg:linearGradient","svg:radialGradient"]),n=0,r={};for(n=i.length;n--;)(e=i[n]).getAttribute("xlink:href")&&x(t,e),r[e.getAttribute("id")]=e;return r},parseAttributes:function(t,n,s){if(t){var a,d,g,v={};void 0===s&&(s=t.getAttribute("svgUid")),t.parentNode&&e.svgValidParentsRegEx.test(t.parentNode.nodeName)&&(v=e.parseAttributes(t.parentNode,n,s));var m=n.reduce((function(e,i){return(a=t.getAttribute(i))&&(e[i]=a),e}),{}),y=i(function(t,i){var n={};for(var r in e.cssRules[i])if(p(t,r.split(" ")))for(var o in e.cssRules[i][r])n[o]=e.cssRules[i][r][o];return n}(t,s),e.parseStyleAttribute(t));m=i(m,y),y[l]&&t.setAttribute(l,y[l]),d=g=v.fontSize||e.Text.DEFAULT_SVG_FONT_SIZE,m[c]&&(m[c]=d=o(m[c],g));var _,x,b={};for(var C in m)x=f(_=u(C),m[C],v,d),b[_]=x;b&&b.font&&e.parseFontDeclaration(b.font,b);var S=i(v,b);return e.svgValidParentsRegEx.test(t.nodeName)?S:function(t){for(var i in h)if(void 0!==t[h[i]]&&""!==t[i]){if(void 0===t[i]){if(!e.Object.prototype[i])continue;t[i]=e.Object.prototype[i]}if(0!==t[i].indexOf("url(")){var n=new e.Color(t[i]);t[i]=n.setAlpha(r(n.getAlpha()*t[h[i]],2)).toRgba()}}return t}(S)}},parseElements:function(t,i,n,r,o){new e.ElementsParser(t,i,n,r,o).parse()},parseStyleAttribute:function(t){var e={},i=t.getAttribute("style");return i?("string"==typeof i?function(t,e){var i,n;t.replace(/;\s*$/,"").split(";").forEach((function(t){var r=t.split(":");i=r[0].trim().toLowerCase(),n=r[1].trim(),e[i]=n}))}(i,e):function(t,e){var i,n;for(var r in t)void 0!==t[r]&&(i=r.toLowerCase(),n=t[r],e[i]=n)}(i,e),e):e},parsePointsAttribute:function(t){if(!t)return null;var e,i,n=[];for(e=0,i=(t=(t=t.replace(/,/g," ").trim()).split(/\s+/)).length;e<i;e+=2)n.push({x:parseFloat(t[e]),y:parseFloat(t[e+1])});return n},getCSSRules:function(t){var i,n,r=t.getElementsByTagName("style"),o={};for(i=0,n=r.length;i<n;i++){var s=r[i].textContent;""!==(s=s.replace(/\/\*[\s\S]*?\*\//g,"")).trim()&&s.split("}").filter((function(t){return t.trim()})).forEach((function(t){var r=t.split("{"),s={},a=r[1].trim().split(";").filter((function(t){return t.trim()}));for(i=0,n=a.length;i<n;i++){var h=a[i].split(":"),c=h[0].trim(),l=h[1].trim();s[c]=l}(t=r[0].trim()).split(",").forEach((function(t){""!==(t=t.replace(/^svg/i,"").trim())&&(o[t]?e.util.object.extend(o[t],s):o[t]=e.util.object.clone(s))}))}))}return o},loadSVGFromURL:function(t,i,n,r){t=t.replace(/^\n\s*/,"").trim(),new e.util.request(t,{method:"get",onComplete:function(t){var o=t.responseXML;if(!o||!o.documentElement)return i&&i(null),!1;e.parseSVGDocument(o.documentElement,(function(t,e,n,r){i&&i(t,e,n,r)}),n,r)}})},loadSVGFromString:function(t,i,n,r){var o=(new e.window.DOMParser).parseFromString(t.trim(),"text/xml");e.parseSVGDocument(o.documentElement,(function(t,e,n,r){i(t,e,n,r)}),n,r)}})}(e),T.ElementsParser=function(t,e,i,n,r,o){this.elements=t,this.callback=e,this.options=i,this.reviver=n,this.svgUid=i&&i.svgUid||0,this.parsingOptions=r,this.regexUrl=/^url\(['"]?#([^'"]+)['"]?\)/g,this.doc=o},(v=T.ElementsParser.prototype).parse=function(){this.instances=new Array(this.elements.length),this.numElements=this.elements.length,this.createObjects()},v.createObjects=function(){var t=this;this.elements.forEach((function(e,i){e.setAttribute("svgUid",t.svgUid),t.createObject(e,i)}))},v.findTag=function(t){return T[T.util.string.capitalize(t.tagName.replace("svg:",""))]},v.createObject=function(t,e){var i=this.findTag(t);if(i&&i.fromElement)try{i.fromElement(t,this.createCallback(e,t),this.options)}catch(t){T.log(t)}else this.checkIfDone()},v.createCallback=function(t,e){var i=this;return function(n){var r;i.resolveGradient(n,e,"fill"),i.resolveGradient(n,e,"stroke"),n instanceof T.Image&&n._originalElement&&(r=n.parsePreserveAspectRatioAttribute(e)),n._removeTransformMatrix(r),i.resolveClipPath(n,e),i.reviver&&i.reviver(e,n),i.instances[t]=n,i.checkIfDone()}},v.extractPropertyDefinition=function(t,e,i){var n=t[e],r=this.regexUrl;if(r.test(n)){r.lastIndex=0;var o=r.exec(n)[1];return r.lastIndex=0,T[i][this.svgUid][o]}},v.resolveGradient=function(t,e,i){var n=this.extractPropertyDefinition(t,i,"gradientDefs");if(n){var r=e.getAttribute(i+"-opacity"),o=T.Gradient.fromElement(n,t,r,this.options);t.set(i,o)}},v.createClipPathCallback=function(t,e){return function(t){t._removeTransformMatrix(),t.fillRule=t.clipRule,e.push(t)}},v.resolveClipPath=function(t,e){var i,n,r,o,s=this.extractPropertyDefinition(t,"clipPath","clipPaths");if(s){r=[],n=T.util.invertTransform(t.calcTransformMatrix());for(var a=s[0].parentNode,h=e;h.parentNode&&h.getAttribute("clip-path")!==t.clipPath;)h=h.parentNode;h.parentNode.appendChild(a);for(var c=0;c<s.length;c++)i=s[c],this.findTag(i).fromElement(i,this.createClipPathCallback(t,r),this.options);s=1===r.length?r[0]:new T.Group(r),o=T.util.multiplyTransformMatrices(n,s.calcTransformMatrix()),s.clipPath&&this.resolveClipPath(s,h);var l=T.util.qrDecompose(o);s.flipX=!1,s.flipY=!1,s.set("scaleX",l.scaleX),s.set("scaleY",l.scaleY),s.angle=l.angle,s.skewX=l.skewX,s.skewY=0,s.setPositionByOrigin({x:l.translateX,y:l.translateY},"center","center"),t.clipPath=s}else delete t.clipPath},v.checkIfDone=function(){0==--this.numElements&&(this.instances=this.instances.filter((function(t){return null!=t})),this.callback(this.instances,this.elements))},function(t){"use strict";var e=t.fabric||(t.fabric={});function i(t,e){this.x=t,this.y=e}e.Point?e.warn("fabric.Point is already defined"):(e.Point=i,i.prototype={type:"point",constructor:i,add:function(t){return new i(this.x+t.x,this.y+t.y)},addEquals:function(t){return this.x+=t.x,this.y+=t.y,this},scalarAdd:function(t){return new i(this.x+t,this.y+t)},scalarAddEquals:function(t){return this.x+=t,this.y+=t,this},subtract:function(t){return new i(this.x-t.x,this.y-t.y)},subtractEquals:function(t){return this.x-=t.x,this.y-=t.y,this},scalarSubtract:function(t){return new i(this.x-t,this.y-t)},scalarSubtractEquals:function(t){return this.x-=t,this.y-=t,this},multiply:function(t){return new i(this.x*t,this.y*t)},multiplyEquals:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return new i(this.x/t,this.y/t)},divideEquals:function(t){return this.x/=t,this.y/=t,this},eq:function(t){return this.x===t.x&&this.y===t.y},lt:function(t){return this.x<t.x&&this.y<t.y},lte:function(t){return this.x<=t.x&&this.y<=t.y},gt:function(t){return this.x>t.x&&this.y>t.y},gte:function(t){return this.x>=t.x&&this.y>=t.y},lerp:function(t,e){return void 0===e&&(e=.5),e=Math.max(Math.min(1,e),0),new i(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e)},distanceFrom:function(t){var e=this.x-t.x,i=this.y-t.y;return Math.sqrt(e*e+i*i)},midPointFrom:function(t){return this.lerp(t)},min:function(t){return new i(Math.min(this.x,t.x),Math.min(this.y,t.y))},max:function(t){return new i(Math.max(this.x,t.x),Math.max(this.y,t.y))},toString:function(){return this.x+","+this.y},setXY:function(t,e){return this.x=t,this.y=e,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setFromPoint:function(t){return this.x=t.x,this.y=t.y,this},swap:function(t){var e=this.x,i=this.y;this.x=t.x,this.y=t.y,t.x=e,t.y=i},clone:function(){return new i(this.x,this.y)}})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});function i(t){this.status=t,this.points=[]}e.Intersection?e.warn("fabric.Intersection is already defined"):(e.Intersection=i,e.Intersection.prototype={constructor:i,appendPoint:function(t){return this.points.push(t),this},appendPoints:function(t){return this.points=this.points.concat(t),this}},e.Intersection.intersectLineLine=function(t,n,r,o){var s,a=(o.x-r.x)*(t.y-r.y)-(o.y-r.y)*(t.x-r.x),h=(n.x-t.x)*(t.y-r.y)-(n.y-t.y)*(t.x-r.x),c=(o.y-r.y)*(n.x-t.x)-(o.x-r.x)*(n.y-t.y);if(0!==c){var l=a/c,u=h/c;0<=l&&l<=1&&0<=u&&u<=1?(s=new i("Intersection")).appendPoint(new e.Point(t.x+l*(n.x-t.x),t.y+l*(n.y-t.y))):s=new i}else s=new i(0===a||0===h?"Coincident":"Parallel");return s},e.Intersection.intersectLinePolygon=function(t,e,n){var r,o,s,a,h=new i,c=n.length;for(a=0;a<c;a++)r=n[a],o=n[(a+1)%c],s=i.intersectLineLine(t,e,r,o),h.appendPoints(s.points);return h.points.length>0&&(h.status="Intersection"),h},e.Intersection.intersectPolygonPolygon=function(t,e){var n,r=new i,o=t.length;for(n=0;n<o;n++){var s=t[n],a=t[(n+1)%o],h=i.intersectLinePolygon(s,a,e);r.appendPoints(h.points)}return r.points.length>0&&(r.status="Intersection"),r},e.Intersection.intersectPolygonRectangle=function(t,n,r){var o=n.min(r),s=n.max(r),a=new e.Point(s.x,o.y),h=new e.Point(o.x,s.y),c=i.intersectLinePolygon(o,a,t),l=i.intersectLinePolygon(a,s,t),u=i.intersectLinePolygon(s,h,t),f=i.intersectLinePolygon(h,o,t),d=new i;return d.appendPoints(c.points),d.appendPoints(l.points),d.appendPoints(u.points),d.appendPoints(f.points),d.points.length>0&&(d.status="Intersection"),d})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});function i(t){t?this._tryParsingColor(t):this.setSource([0,0,0,1])}function n(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t}e.Color?e.warn("fabric.Color is already defined."):(e.Color=i,e.Color.prototype={_tryParsingColor:function(t){var e;t in i.colorNameMap&&(t=i.colorNameMap[t]),"transparent"===t&&(e=[255,255,255,0]),e||(e=i.sourceFromHex(t)),e||(e=i.sourceFromRgb(t)),e||(e=i.sourceFromHsl(t)),e||(e=[0,0,0,1]),e&&this.setSource(e)},_rgbToHsl:function(t,i,n){t/=255,i/=255,n/=255;var r,o,s,a=e.util.array.max([t,i,n]),h=e.util.array.min([t,i,n]);if(s=(a+h)/2,a===h)r=o=0;else{var c=a-h;switch(o=s>.5?c/(2-a-h):c/(a+h),a){case t:r=(i-n)/c+(i<n?6:0);break;case i:r=(n-t)/c+2;break;case n:r=(t-i)/c+4}r/=6}return[Math.round(360*r),Math.round(100*o),Math.round(100*s)]},getSource:function(){return this._source},setSource:function(t){this._source=t},toRgb:function(){var t=this.getSource();return"rgb("+t[0]+","+t[1]+","+t[2]+")"},toRgba:function(){var t=this.getSource();return"rgba("+t[0]+","+t[1]+","+t[2]+","+t[3]+")"},toHsl:function(){var t=this.getSource(),e=this._rgbToHsl(t[0],t[1],t[2]);return"hsl("+e[0]+","+e[1]+"%,"+e[2]+"%)"},toHsla:function(){var t=this.getSource(),e=this._rgbToHsl(t[0],t[1],t[2]);return"hsla("+e[0]+","+e[1]+"%,"+e[2]+"%,"+t[3]+")"},toHex:function(){var t,e,i,n=this.getSource();return t=1===(t=n[0].toString(16)).length?"0"+t:t,e=1===(e=n[1].toString(16)).length?"0"+e:e,i=1===(i=n[2].toString(16)).length?"0"+i:i,t.toUpperCase()+e.toUpperCase()+i.toUpperCase()},toHexa:function(){var t,e=this.getSource();return t=1===(t=(t=Math.round(255*e[3])).toString(16)).length?"0"+t:t,this.toHex()+t.toUpperCase()},getAlpha:function(){return this.getSource()[3]},setAlpha:function(t){var e=this.getSource();return e[3]=t,this.setSource(e),this},toGrayscale:function(){var t=this.getSource(),e=parseInt((.3*t[0]+.59*t[1]+.11*t[2]).toFixed(0),10),i=t[3];return this.setSource([e,e,e,i]),this},toBlackWhite:function(t){var e=this.getSource(),i=(.3*e[0]+.59*e[1]+.11*e[2]).toFixed(0),n=e[3];return t=t||127,i=Number(i)<Number(t)?0:255,this.setSource([i,i,i,n]),this},overlayWith:function(t){t instanceof i||(t=new i(t));var e,n=[],r=this.getAlpha(),o=this.getSource(),s=t.getSource();for(e=0;e<3;e++)n.push(Math.round(.5*o[e]+.5*s[e]));return n[3]=r,this.setSource(n),this}},e.Color.reRGBa=/^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/i,e.Color.reHSLa=/^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/i,e.Color.reHex=/^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i,e.Color.colorNameMap={aliceblue:"#F0F8FF",antiquewhite:"#FAEBD7",aqua:"#00FFFF",aquamarine:"#7FFFD4",azure:"#F0FFFF",beige:"#F5F5DC",bisque:"#FFE4C4",black:"#000000",blanchedalmond:"#FFEBCD",blue:"#0000FF",blueviolet:"#8A2BE2",brown:"#A52A2A",burlywood:"#DEB887",cadetblue:"#5F9EA0",chartreuse:"#7FFF00",chocolate:"#D2691E",coral:"#FF7F50",cornflowerblue:"#6495ED",cornsilk:"#FFF8DC",crimson:"#DC143C",cyan:"#00FFFF",darkblue:"#00008B",darkcyan:"#008B8B",darkgoldenrod:"#B8860B",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",darkgreen:"#006400",darkkhaki:"#BDB76B",darkmagenta:"#8B008B",darkolivegreen:"#556B2F",darkorange:"#FF8C00",darkorchid:"#9932CC",darkred:"#8B0000",darksalmon:"#E9967A",darkseagreen:"#8FBC8F",darkslateblue:"#483D8B",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",darkturquoise:"#00CED1",darkviolet:"#9400D3",deeppink:"#FF1493",deepskyblue:"#00BFFF",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1E90FF",firebrick:"#B22222",floralwhite:"#FFFAF0",forestgreen:"#228B22",fuchsia:"#FF00FF",gainsboro:"#DCDCDC",ghostwhite:"#F8F8FF",gold:"#FFD700",goldenrod:"#DAA520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#ADFF2F",honeydew:"#F0FFF0",hotpink:"#FF69B4",indianred:"#CD5C5C",indigo:"#4B0082",ivory:"#FFFFF0",khaki:"#F0E68C",lavender:"#E6E6FA",lavenderblush:"#FFF0F5",lawngreen:"#7CFC00",lemonchiffon:"#FFFACD",lightblue:"#ADD8E6",lightcoral:"#F08080",lightcyan:"#E0FFFF",lightgoldenrodyellow:"#FAFAD2",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",lightgreen:"#90EE90",lightpink:"#FFB6C1",lightsalmon:"#FFA07A",lightseagreen:"#20B2AA",lightskyblue:"#87CEFA",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#B0C4DE",lightyellow:"#FFFFE0",lime:"#00FF00",limegreen:"#32CD32",linen:"#FAF0E6",magenta:"#FF00FF",maroon:"#800000",mediumaquamarine:"#66CDAA",mediumblue:"#0000CD",mediumorchid:"#BA55D3",mediumpurple:"#9370DB",mediumseagreen:"#3CB371",mediumslateblue:"#7B68EE",mediumspringgreen:"#00FA9A",mediumturquoise:"#48D1CC",mediumvioletred:"#C71585",midnightblue:"#191970",mintcream:"#F5FFFA",mistyrose:"#FFE4E1",moccasin:"#FFE4B5",navajowhite:"#FFDEAD",navy:"#000080",oldlace:"#FDF5E6",olive:"#808000",olivedrab:"#6B8E23",orange:"#FFA500",orangered:"#FF4500",orchid:"#DA70D6",palegoldenrod:"#EEE8AA",palegreen:"#98FB98",paleturquoise:"#AFEEEE",palevioletred:"#DB7093",papayawhip:"#FFEFD5",peachpuff:"#FFDAB9",peru:"#CD853F",pink:"#FFC0CB",plum:"#DDA0DD",powderblue:"#B0E0E6",purple:"#800080",rebeccapurple:"#663399",red:"#FF0000",rosybrown:"#BC8F8F",royalblue:"#4169E1",saddlebrown:"#8B4513",salmon:"#FA8072",sandybrown:"#F4A460",seagreen:"#2E8B57",seashell:"#FFF5EE",sienna:"#A0522D",silver:"#C0C0C0",skyblue:"#87CEEB",slateblue:"#6A5ACD",slategray:"#708090",slategrey:"#708090",snow:"#FFFAFA",springgreen:"#00FF7F",steelblue:"#4682B4",tan:"#D2B48C",teal:"#008080",thistle:"#D8BFD8",tomato:"#FF6347",turquoise:"#40E0D0",violet:"#EE82EE",wheat:"#F5DEB3",white:"#FFFFFF",whitesmoke:"#F5F5F5",yellow:"#FFFF00",yellowgreen:"#9ACD32"},e.Color.fromRgb=function(t){return i.fromSource(i.sourceFromRgb(t))},e.Color.sourceFromRgb=function(t){var e=t.match(i.reRGBa);if(e){var n=parseInt(e[1],10)/(/%$/.test(e[1])?100:1)*(/%$/.test(e[1])?255:1),r=parseInt(e[2],10)/(/%$/.test(e[2])?100:1)*(/%$/.test(e[2])?255:1),o=parseInt(e[3],10)/(/%$/.test(e[3])?100:1)*(/%$/.test(e[3])?255:1);return[parseInt(n,10),parseInt(r,10),parseInt(o,10),e[4]?parseFloat(e[4]):1]}},e.Color.fromRgba=i.fromRgb,e.Color.fromHsl=function(t){return i.fromSource(i.sourceFromHsl(t))},e.Color.sourceFromHsl=function(t){var e=t.match(i.reHSLa);if(e){var r,o,s,a=(parseFloat(e[1])%360+360)%360/360,h=parseFloat(e[2])/(/%$/.test(e[2])?100:1),c=parseFloat(e[3])/(/%$/.test(e[3])?100:1);if(0===h)r=o=s=c;else{var l=c<=.5?c*(h+1):c+h-c*h,u=2*c-l;r=n(u,l,a+1/3),o=n(u,l,a),s=n(u,l,a-1/3)}return[Math.round(255*r),Math.round(255*o),Math.round(255*s),e[4]?parseFloat(e[4]):1]}},e.Color.fromHsla=i.fromHsl,e.Color.fromHex=function(t){return i.fromSource(i.sourceFromHex(t))},e.Color.sourceFromHex=function(t){if(t.match(i.reHex)){var e=t.slice(t.indexOf("#")+1),n=3===e.length||4===e.length,r=8===e.length||4===e.length,o=n?e.charAt(0)+e.charAt(0):e.substring(0,2),s=n?e.charAt(1)+e.charAt(1):e.substring(2,4),a=n?e.charAt(2)+e.charAt(2):e.substring(4,6),h=r?n?e.charAt(3)+e.charAt(3):e.substring(6,8):"FF";return[parseInt(o,16),parseInt(s,16),parseInt(a,16),parseFloat((parseInt(h,16)/255).toFixed(2))]}},e.Color.fromSource=function(t){var e=new i;return e.setSource(t),e})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=["e","se","s","sw","w","nw","n","ne","e"],n=["ns","nesw","ew","nwse"],r={},o="left",s="top",a="right",h="bottom",c="center",l={top:h,bottom:s,left:a,right:o,center:c},u=e.util.radiansToDegrees,f=Math.sign||function(t){return(t>0)-(t<0)||+t};function d(t,e){var i=t.angle+u(Math.atan2(e.y,e.x))+360;return Math.round(i%360/45)}function g(t,i){var n=i.transform.target,r=n.canvas,o=e.util.object.clone(i);o.target=n,r&&r.fire("object:"+t,o),n.fire(t,i)}function p(t,e){var i=e.canvas,n=t[i.uniScaleKey];return i.uniformScaling&&!n||!i.uniformScaling&&n}function v(t){return t.originX===c&&t.originY===c}function m(t,e,i){var n=t.lockScalingX,r=t.lockScalingY;return!((!n||!r)&&(e||!n&&!r||!i)&&(!n||"x"!==e)&&(!r||"y"!==e))}function y(t,e,i,n){return{e:t,transform:e,pointer:{x:i,y:n}}}function _(t){return function(e,i,n,r){var o=i.target,s=o.getCenterPoint(),a=o.translateToOriginPoint(s,i.originX,i.originY),h=t(e,i,n,r);return o.setPositionByOrigin(a,i.originX,i.originY),h}}function x(t,e){return function(i,n,r,o){var s=e(i,n,r,o);return s&&g(t,y(i,n,r,o)),s}}function b(t,i,n,r,o){var s=t.target,a=s.controls[t.corner],h=s.canvas.getZoom(),c=s.padding/h,l=s.toLocalPoint(new e.Point(r,o),i,n);return l.x>=c&&(l.x-=c),l.x<=-c&&(l.x+=c),l.y>=c&&(l.y-=c),l.y<=c&&(l.y+=c),l.x-=a.offsetX,l.y-=a.offsetY,l}function C(t){return t.flipX!==t.flipY}function S(t,e,i,n,r){if(0!==t[e]){var o=r/t._getTransformedDimensions()[n]*t[i];t.set(i,o)}}function w(t,e,i,n){var r,c=e.target,l=c._getTransformedDimensions(0,c.skewY),f=b(e,e.originX,e.originY,i,n),d=Math.abs(2*f.x)-l.x,g=c.skewX;d<2?r=0:(r=u(Math.atan2(d/c.scaleX,l.y/c.scaleY)),e.originX===o&&e.originY===h&&(r=-r),e.originX===a&&e.originY===s&&(r=-r),C(c)&&(r=-r));var p=g!==r;if(p){var v=c._getTransformedDimensions().y;c.set("skewX",r),S(c,"skewY","scaleY","y",v)}return p}function T(t,e,i,n){var r,c=e.target,l=c._getTransformedDimensions(c.skewX,0),f=b(e,e.originX,e.originY,i,n),d=Math.abs(2*f.y)-l.y,g=c.skewY;d<2?r=0:(r=u(Math.atan2(d/c.scaleY,l.x/c.scaleX)),e.originX===o&&e.originY===h&&(r=-r),e.originX===a&&e.originY===s&&(r=-r),C(c)&&(r=-r));var p=g!==r;if(p){var v=c._getTransformedDimensions().x;c.set("skewY",r),S(c,"skewX","scaleX","x",v)}return p}function A(t,e,i,n,r){r=r||{};var o,s,a,h,c,u,d=e.target,g=d.lockScalingX,y=d.lockScalingY,_=r.by,x=p(t,d),C=m(d,_,x),S=e.gestureScale;if(C)return!1;if(S)s=e.scaleX*S,a=e.scaleY*S;else{if(o=b(e,e.originX,e.originY,i,n),c="y"!==_?f(o.x):1,u="x"!==_?f(o.y):1,e.signX||(e.signX=c),e.signY||(e.signY=u),d.lockScalingFlip&&(e.signX!==c||e.signY!==u))return!1;if(h=d._getTransformedDimensions(),x&&!_){var w=Math.abs(o.x)+Math.abs(o.y),T=e.original,A=w/(Math.abs(h.x*T.scaleX/d.scaleX)+Math.abs(h.y*T.scaleY/d.scaleY));s=T.scaleX*A,a=T.scaleY*A}else s=Math.abs(o.x*d.scaleX/h.x),a=Math.abs(o.y*d.scaleY/h.y);v(e)&&(s*=2,a*=2),e.signX!==c&&"y"!==_&&(e.originX=l[e.originX],s*=-1,e.signX=c),e.signY!==u&&"x"!==_&&(e.originY=l[e.originY],a*=-1,e.signY=u)}var O=d.scaleX,k=d.scaleY;return _?("x"===_&&d.set("scaleX",s),"y"===_&&d.set("scaleY",a)):(!g&&d.set("scaleX",s),!y&&d.set("scaleY",a)),O!==d.scaleX||k!==d.scaleY}r.scaleCursorStyleHandler=function(t,e,n){var r=p(t,n),o="";if(0!==e.x&&0===e.y?o="x":0===e.x&&0!==e.y&&(o="y"),m(n,o,r))return"not-allowed";var s=d(n,e);return i[s]+"-resize"},r.skewCursorStyleHandler=function(t,e,i){var r="not-allowed";if(0!==e.x&&i.lockSkewingY)return r;if(0!==e.y&&i.lockSkewingX)return r;var o=d(i,e)%4;return n[o]+"-resize"},r.scaleSkewCursorStyleHandler=function(t,e,i){return t[i.canvas.altActionKey]?r.skewCursorStyleHandler(t,e,i):r.scaleCursorStyleHandler(t,e,i)},r.rotationWithSnapping=x("rotating",_((function(t,e,i,n){var r=e,o=r.target,s=o.translateToOriginPoint(o.getCenterPoint(),r.originX,r.originY);if(o.lockRotation)return!1;var a,h=Math.atan2(r.ey-s.y,r.ex-s.x),c=Math.atan2(n-s.y,i-s.x),l=u(c-h+r.theta);if(o.snapAngle>0){var f=o.snapAngle,d=o.snapThreshold||f,g=Math.ceil(l/f)*f,p=Math.floor(l/f)*f;Math.abs(l-p)<d?l=p:Math.abs(l-g)<d&&(l=g)}return l<0&&(l=360+l),l%=360,a=o.angle!==l,o.angle=l,a}))),r.scalingEqually=x("scaling",_((function(t,e,i,n){return A(t,e,i,n)}))),r.scalingX=x("scaling",_((function(t,e,i,n){return A(t,e,i,n,{by:"x"})}))),r.scalingY=x("scaling",_((function(t,e,i,n){return A(t,e,i,n,{by:"y"})}))),r.scalingYOrSkewingX=function(t,e,i,n){return t[e.target.canvas.altActionKey]?r.skewHandlerX(t,e,i,n):r.scalingY(t,e,i,n)},r.scalingXOrSkewingY=function(t,e,i,n){return t[e.target.canvas.altActionKey]?r.skewHandlerY(t,e,i,n):r.scalingX(t,e,i,n)},r.changeWidth=x("resizing",_((function(t,e,i,n){var r=e.target,o=b(e,e.originX,e.originY,i,n),s=r.strokeWidth/(r.strokeUniform?r.scaleX:1),a=v(e)?2:1,h=r.width,c=Math.abs(o.x*a/r.scaleX)-s;return r.set("width",Math.max(c,0)),h!==c}))),r.skewHandlerX=function(t,e,i,n){var r,h=e.target,l=h.skewX,u=e.originY;return!h.lockSkewingX&&(0===l?r=b(e,c,c,i,n).x>0?o:a:(l>0&&(r=u===s?o:a),l<0&&(r=u===s?a:o),C(h)&&(r=r===o?a:o)),e.originX=r,x("skewing",_(w))(t,e,i,n))},r.skewHandlerY=function(t,e,i,n){var r,a=e.target,l=a.skewY,u=e.originX;return!a.lockSkewingY&&(0===l?r=b(e,c,c,i,n).y>0?s:h:(l>0&&(r=u===o?s:h),l<0&&(r=u===o?h:s),C(a)&&(r=r===s?h:s)),e.originY=r,x("skewing",_(T))(t,e,i,n))},r.dragHandler=function(t,e,i,n){var r=e.target,o=i-e.offsetX,s=n-e.offsetY,a=!r.get("lockMovementX")&&r.left!==o,h=!r.get("lockMovementY")&&r.top!==s;return a&&r.set("left",o),h&&r.set("top",s),(a||h)&&g("moving",y(t,e,i,n)),a||h},r.scaleOrSkewActionName=function(t,e,i){var n=t[i.canvas.altActionKey];return 0===e.x?n?"skewX":"scaleY":0===e.y?n?"skewY":"scaleX":void 0},r.rotationStyleHandler=function(t,e,i){return i.lockRotation?"not-allowed":e.cursorStyle},r.fireEvent=g,r.wrapWithFixedAnchor=_,r.wrapWithFireEvent=x,r.getLocalPoint=b,e.controlsUtils=r}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.degreesToRadians,n=e.controlsUtils;n.renderCircleControl=function(t,e,i,n,r){n=n||{};var o,s=this.sizeX||n.cornerSize||r.cornerSize,a=this.sizeY||n.cornerSize||r.cornerSize,h=void 0!==n.transparentCorners?n.transparentCorners:r.transparentCorners,c=h?"stroke":"fill",l=!h&&(n.cornerStrokeColor||r.cornerStrokeColor),u=e,f=i;t.save(),t.fillStyle=n.cornerColor||r.cornerColor,t.strokeStyle=n.cornerStrokeColor||r.cornerStrokeColor,s>a?(o=s,t.scale(1,a/s),f=i*s/a):a>s?(o=a,t.scale(s/a,1),u=e*a/s):o=s,t.lineWidth=1,t.beginPath(),t.arc(u,f,o/2,0,2*Math.PI,!1),t[c](),l&&t.stroke(),t.restore()},n.renderSquareControl=function(t,e,n,r,o){r=r||{};var s=this.sizeX||r.cornerSize||o.cornerSize,a=this.sizeY||r.cornerSize||o.cornerSize,h=void 0!==r.transparentCorners?r.transparentCorners:o.transparentCorners,c=h?"stroke":"fill",l=!h&&(r.cornerStrokeColor||o.cornerStrokeColor),u=s/2,f=a/2;t.save(),t.fillStyle=r.cornerColor||o.cornerColor,t.strokeStyle=r.cornerStrokeColor||o.cornerStrokeColor,t.lineWidth=1,t.translate(e,n),t.rotate(i(o.angle)),t[c+"Rect"](-u,-f,s,a),l&&t.strokeRect(-u,-f,s,a),t.restore()}}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});e.Control=function(t){for(var e in t)this[e]=t[e]},e.Control.prototype={visible:!0,actionName:"scale",angle:0,x:0,y:0,offsetX:0,offsetY:0,sizeX:null,sizeY:null,touchSizeX:null,touchSizeY:null,cursorStyle:"crosshair",withConnection:!1,actionHandler:function(){},mouseDownHandler:function(){},mouseUpHandler:function(){},getActionHandler:function(){return this.actionHandler},getMouseDownHandler:function(){return this.mouseDownHandler},getMouseUpHandler:function(){return this.mouseUpHandler},cursorStyleHandler:function(t,e){return e.cursorStyle},getActionName:function(t,e){return e.actionName},getVisibility:function(t,e){var i=t._controlsVisibility;return i&&void 0!==i[e]?i[e]:this.visible},setVisibility:function(t){this.visible=t},positionHandler:function(t,i){return e.util.transformPoint({x:this.x*t.x+this.offsetX,y:this.y*t.y+this.offsetY},i)},calcCornerCoords:function(t,i,n,r,o){var s,a,h,c,l=o?this.touchSizeX:this.sizeX,u=o?this.touchSizeY:this.sizeY;if(l&&u&&l!==u){var f=Math.atan2(u,l),d=Math.sqrt(l*l+u*u)/2,g=f-e.util.degreesToRadians(t),p=Math.PI/2-f-e.util.degreesToRadians(t);s=d*e.util.cos(g),a=d*e.util.sin(g),h=d*e.util.cos(p),c=d*e.util.sin(p)}else d=.7071067812*(l&&u?l:i),g=e.util.degreesToRadians(45-t),s=h=d*e.util.cos(g),a=c=d*e.util.sin(g);return{tl:{x:n-c,y:r-h},tr:{x:n+s,y:r-a},bl:{x:n-s,y:r+a},br:{x:n+c,y:r+h}}},render:function(t,i,n,r,o){"circle"===((r=r||{}).cornerStyle||o.cornerStyle)?e.controlsUtils.renderCircleControl.call(this,t,i,n,r,o):e.controlsUtils.renderSquareControl.call(this,t,i,n,r,o)}}}(e),function(){function t(t,e){var i,n,r,o,s=t.getAttribute("style"),a=t.getAttribute("offset")||0;if(a=(a=parseFloat(a)/(/%$/.test(a)?100:1))<0?0:a>1?1:a,s){var h=s.split(/\s*;\s*/);for(""===h[h.length-1]&&h.pop(),o=h.length;o--;){var c=h[o].split(/\s*:\s*/),l=c[0].trim(),u=c[1].trim();"stop-color"===l?i=u:"stop-opacity"===l&&(r=u)}}return i||(i=t.getAttribute("stop-color")||"rgb(0,0,0)"),r||(r=t.getAttribute("stop-opacity")),n=(i=new T.Color(i)).getAlpha(),r=isNaN(parseFloat(r))?1:parseFloat(r),r*=n*e,{offset:a,color:i.toRgb(),opacity:r}}var e=T.util.object.clone;T.Gradient=T.util.createClass({offsetX:0,offsetY:0,gradientTransform:null,gradientUnits:"pixels",type:"linear",initialize:function(t){t||(t={}),t.coords||(t.coords={});var e,i=this;Object.keys(t).forEach((function(e){i[e]=t[e]})),this.id?this.id+="_"+T.Object.__uid++:this.id=T.Object.__uid++,e={x1:t.coords.x1||0,y1:t.coords.y1||0,x2:t.coords.x2||0,y2:t.coords.y2||0},"radial"===this.type&&(e.r1=t.coords.r1||0,e.r2=t.coords.r2||0),this.coords=e,this.colorStops=t.colorStops.slice()},addColorStop:function(t){for(var e in t){var i=new T.Color(t[e]);this.colorStops.push({offset:parseFloat(e),color:i.toRgb(),opacity:i.getAlpha()})}return this},toObject:function(t){var e={type:this.type,coords:this.coords,colorStops:this.colorStops,offsetX:this.offsetX,offsetY:this.offsetY,gradientUnits:this.gradientUnits,gradientTransform:this.gradientTransform?this.gradientTransform.concat():this.gradientTransform};return T.util.populateWithProperties(this,e,t),e},toSVG:function(t,i){var n,r,o,s,a=e(this.coords,!0),h=(i=i||{},e(this.colorStops,!0)),c=a.r1>a.r2,l=this.gradientTransform?this.gradientTransform.concat():T.iMatrix.concat(),u=-this.offsetX,f=-this.offsetY,d=!!i.additionalTransform,g="pixels"===this.gradientUnits?"userSpaceOnUse":"objectBoundingBox";if(h.sort((function(t,e){return t.offset-e.offset})),"objectBoundingBox"===g?(u/=t.width,f/=t.height):(u+=t.width/2,f+=t.height/2),"path"===t.type&&"percentage"!==this.gradientUnits&&(u-=t.pathOffset.x,f-=t.pathOffset.y),l[4]-=u,l[5]-=f,s='id="SVGID_'+this.id+'" gradientUnits="'+g+'"',s+=' gradientTransform="'+(d?i.additionalTransform+" ":"")+T.util.matrixToSVG(l)+'" ',"linear"===this.type?o=["<linearGradient ",s,' x1="',a.x1,'" y1="',a.y1,'" x2="',a.x2,'" y2="',a.y2,'">\n']:"radial"===this.type&&(o=["<radialGradient ",s,' cx="',c?a.x1:a.x2,'" cy="',c?a.y1:a.y2,'" r="',c?a.r1:a.r2,'" fx="',c?a.x2:a.x1,'" fy="',c?a.y2:a.y1,'">\n']),"radial"===this.type){if(c)for((h=h.concat()).reverse(),n=0,r=h.length;n<r;n++)h[n].offset=1-h[n].offset;var p=Math.min(a.r1,a.r2);if(p>0){var v=p/Math.max(a.r1,a.r2);for(n=0,r=h.length;n<r;n++)h[n].offset+=v*(1-h[n].offset)}}for(n=0,r=h.length;n<r;n++){var m=h[n];o.push("<stop ",'offset="',100*m.offset+"%",'" style="stop-color:',m.color,void 0!==m.opacity?";stop-opacity: "+m.opacity:";",'"/>\n')}return o.push("linear"===this.type?"</linearGradient>\n":"</radialGradient>\n"),o.join("")},toLive:function(t){var e,i,n,r=T.util.object.clone(this.coords);if(this.type){for("linear"===this.type?e=t.createLinearGradient(r.x1,r.y1,r.x2,r.y2):"radial"===this.type&&(e=t.createRadialGradient(r.x1,r.y1,r.r1,r.x2,r.y2,r.r2)),i=0,n=this.colorStops.length;i<n;i++){var o=this.colorStops[i].color,s=this.colorStops[i].opacity,a=this.colorStops[i].offset;void 0!==s&&(o=new T.Color(o).setAlpha(s).toRgba()),e.addColorStop(a,o)}return e}}}),T.util.object.extend(T.Gradient,{fromElement:function(e,i,n,r){var o=parseFloat(n)/(/%$/.test(n)?100:1);o=o<0?0:o>1?1:o,isNaN(o)&&(o=1);var s,a,h,c,l=e.getElementsByTagName("stop"),u="userSpaceOnUse"===e.getAttribute("gradientUnits")?"pixels":"percentage",f=e.getAttribute("gradientTransform")||"",d=[],g=0,p=0;for("linearGradient"===e.nodeName||"LINEARGRADIENT"===e.nodeName?(s="linear",a=function(t){return{x1:t.getAttribute("x1")||0,y1:t.getAttribute("y1")||0,x2:t.getAttribute("x2")||"100%",y2:t.getAttribute("y2")||0}}(e)):(s="radial",a=function(t){return{x1:t.getAttribute("fx")||t.getAttribute("cx")||"50%",y1:t.getAttribute("fy")||t.getAttribute("cy")||"50%",r1:0,x2:t.getAttribute("cx")||"50%",y2:t.getAttribute("cy")||"50%",r2:t.getAttribute("r")||"50%"}}(e)),h=l.length;h--;)d.push(t(l[h],o));return c=T.parseTransformAttribute(f),function(t,e,i,n){var r,o;Object.keys(e).forEach((function(t){"Infinity"===(r=e[t])?o=1:"-Infinity"===r?o=0:(o=parseFloat(e[t],10),"string"==typeof r&&/^(\d+\.\d+)%|(\d+)%$/.test(r)&&(o*=.01,"pixels"===n&&("x1"!==t&&"x2"!==t&&"r2"!==t||(o*=i.viewBoxWidth||i.width),"y1"!==t&&"y2"!==t||(o*=i.viewBoxHeight||i.height)))),e[t]=o}))}(0,a,r,u),"pixels"===u&&(g=-i.left,p=-i.top),new T.Gradient({id:e.getAttribute("id"),type:s,coords:a,colorStops:d,gradientUnits:u,gradientTransform:c,offsetX:g,offsetY:p})}})}(),function(){"use strict";var t=T.util.toFixed;T.Pattern=T.util.createClass({repeat:"repeat",offsetX:0,offsetY:0,crossOrigin:"",patternTransform:null,initialize:function(t,e){if(t||(t={}),this.id=T.Object.__uid++,this.setOptions(t),!t.source||t.source&&"string"!=typeof t.source)e&&e(this);else{var i=this;this.source=T.util.createImage(),T.util.loadImage(t.source,(function(t,n){i.source=t,e&&e(i,n)}),null,this.crossOrigin)}},toObject:function(e){var i,n,r=T.Object.NUM_FRACTION_DIGITS;return"string"==typeof this.source.src?i=this.source.src:"object"==typeof this.source&&this.source.toDataURL&&(i=this.source.toDataURL()),n={type:"pattern",source:i,repeat:this.repeat,crossOrigin:this.crossOrigin,offsetX:t(this.offsetX,r),offsetY:t(this.offsetY,r),patternTransform:this.patternTransform?this.patternTransform.concat():null},T.util.populateWithProperties(this,n,e),n},toSVG:function(t){var e="function"==typeof this.source?this.source():this.source,i=e.width/t.width,n=e.height/t.height,r=this.offsetX/t.width,o=this.offsetY/t.height,s="";return"repeat-x"!==this.repeat&&"no-repeat"!==this.repeat||(n=1,o&&(n+=Math.abs(o))),"repeat-y"!==this.repeat&&"no-repeat"!==this.repeat||(i=1,r&&(i+=Math.abs(r))),e.src?s=e.src:e.toDataURL&&(s=e.toDataURL()),'<pattern id="SVGID_'+this.id+'" x="'+r+'" y="'+o+'" width="'+i+'" height="'+n+'">\n<image x="0" y="0" width="'+e.width+'" height="'+e.height+'" xlink:href="'+s+'"></image>\n</pattern>\n'},setOptions:function(t){for(var e in t)this[e]=t[e]},toLive:function(t){var e=this.source;if(!e)return"";if(void 0!==e.src){if(!e.complete)return"";if(0===e.naturalWidth||0===e.naturalHeight)return""}return t.createPattern(e,this.repeat)}})}(),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.toFixed;e.Shadow?e.warn("fabric.Shadow is already defined."):(e.Shadow=e.util.createClass({color:"rgb(0,0,0)",blur:0,offsetX:0,offsetY:0,affectStroke:!1,includeDefaultValues:!0,nonScaling:!1,initialize:function(t){for(var i in"string"==typeof t&&(t=this._parseShadow(t)),t)this[i]=t[i];this.id=e.Object.__uid++},_parseShadow:function(t){var i=t.trim(),n=e.Shadow.reOffsetsAndBlur.exec(i)||[];return{color:(i.replace(e.Shadow.reOffsetsAndBlur,"")||"rgb(0,0,0)").trim(),offsetX:parseFloat(n[1],10)||0,offsetY:parseFloat(n[2],10)||0,blur:parseFloat(n[3],10)||0}},toString:function(){return[this.offsetX,this.offsetY,this.blur,this.color].join("px ")},toSVG:function(t){var n=40,r=40,o=e.Object.NUM_FRACTION_DIGITS,s=e.util.rotateVector({x:this.offsetX,y:this.offsetY},e.util.degreesToRadians(-t.angle)),a=new e.Color(this.color);return t.width&&t.height&&(n=100*i((Math.abs(s.x)+this.blur)/t.width,o)+20,r=100*i((Math.abs(s.y)+this.blur)/t.height,o)+20),t.flipX&&(s.x*=-1),t.flipY&&(s.y*=-1),'<filter id="SVGID_'+this.id+'" y="-'+r+'%" height="'+(100+2*r)+'%" x="-'+n+'%" width="'+(100+2*n)+'%" >\n\t<feGaussianBlur in="SourceAlpha" stdDeviation="'+i(this.blur?this.blur/2:0,o)+'"></feGaussianBlur>\n\t<feOffset dx="'+i(s.x,o)+'" dy="'+i(s.y,o)+'" result="oBlur" ></feOffset>\n\t<feFlood flood-color="'+a.toRgb()+'" flood-opacity="'+a.getAlpha()+'"/>\n\t<feComposite in2="oBlur" operator="in" />\n\t<feMerge>\n\t\t<feMergeNode></feMergeNode>\n\t\t<feMergeNode in="SourceGraphic"></feMergeNode>\n\t</feMerge>\n</filter>\n'},toObject:function(){if(this.includeDefaultValues)return{color:this.color,blur:this.blur,offsetX:this.offsetX,offsetY:this.offsetY,affectStroke:this.affectStroke,nonScaling:this.nonScaling};var t={},i=e.Shadow.prototype;return["color","blur","offsetX","offsetY","affectStroke","nonScaling"].forEach((function(e){this[e]!==i[e]&&(t[e]=this[e])}),this),t}}),e.Shadow.reOffsetsAndBlur=/(?:\s|^)(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(\d+(?:\.\d*)?(?:px)?)?(?:\s?|$)(?:$|\s)/)}(e),function(){"use strict";if(T.StaticCanvas)T.warn("fabric.StaticCanvas is already defined.");else{var t=T.util.object.extend,e=T.util.getElementOffset,i=T.util.removeFromArray,n=T.util.toFixed,r=T.util.transformPoint,o=T.util.invertTransform,s=T.util.getNodeCanvas,a=T.util.createCanvasElement,h=new Error("Could not initialize `canvas` element");T.StaticCanvas=T.util.createClass(T.CommonMethods,{initialize:function(t,e){e||(e={}),this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(t,e)},backgroundColor:"",backgroundImage:null,overlayColor:"",overlayImage:null,includeDefaultValues:!0,stateful:!1,renderOnAddRemove:!0,controlsAboveOverlay:!1,allowTouchScrolling:!1,imageSmoothingEnabled:!0,viewportTransform:T.iMatrix.concat(),backgroundVpt:!0,overlayVpt:!0,enableRetinaScaling:!0,vptCoords:{},skipOffscreen:!0,clipPath:void 0,_initStatic:function(t,e){var i=this.requestRenderAllBound;this._objects=[],this._createLowerCanvas(t),this._initOptions(e),this.interactive||this._initRetinaScaling(),e.overlayImage&&this.setOverlayImage(e.overlayImage,i),e.backgroundImage&&this.setBackgroundImage(e.backgroundImage,i),e.backgroundColor&&this.setBackgroundColor(e.backgroundColor,i),e.overlayColor&&this.setOverlayColor(e.overlayColor,i),this.calcOffset()},_isRetinaScaling:function(){return T.devicePixelRatio>1&&this.enableRetinaScaling},getRetinaScaling:function(){return this._isRetinaScaling()?Math.max(1,T.devicePixelRatio):1},_initRetinaScaling:function(){if(this._isRetinaScaling()){var t=T.devicePixelRatio;this.__initRetinaScaling(t,this.lowerCanvasEl,this.contextContainer),this.upperCanvasEl&&this.__initRetinaScaling(t,this.upperCanvasEl,this.contextTop)}},__initRetinaScaling:function(t,e,i){e.setAttribute("width",this.width*t),e.setAttribute("height",this.height*t),i.scale(t,t)},calcOffset:function(){return this._offset=e(this.lowerCanvasEl),this},setOverlayImage:function(t,e,i){return this.__setBgOverlayImage("overlayImage",t,e,i)},setBackgroundImage:function(t,e,i){return this.__setBgOverlayImage("backgroundImage",t,e,i)},setOverlayColor:function(t,e){return this.__setBgOverlayColor("overlayColor",t,e)},setBackgroundColor:function(t,e){return this.__setBgOverlayColor("backgroundColor",t,e)},__setBgOverlayImage:function(t,e,i,n){return"string"==typeof e?T.util.loadImage(e,(function(e,r){if(e){var o=new T.Image(e,n);this[t]=o,o.canvas=this}i&&i(e,r)}),this,n&&n.crossOrigin):(n&&e.setOptions(n),this[t]=e,e&&(e.canvas=this),i&&i(e,!1)),this},__setBgOverlayColor:function(t,e,i){return this[t]=e,this._initGradient(e,t),this._initPattern(e,t,i),this},_createCanvasElement:function(){var t=a();if(!t)throw h;if(t.style||(t.style={}),void 0===t.getContext)throw h;return t},_initOptions:function(t){var e=this.lowerCanvasEl;this._setOptions(t),this.width=this.width||parseInt(e.width,10)||0,this.height=this.height||parseInt(e.height,10)||0,this.lowerCanvasEl.style&&(e.width=this.width,e.height=this.height,e.style.width=this.width+"px",e.style.height=this.height+"px",this.viewportTransform=this.viewportTransform.slice())},_createLowerCanvas:function(t){t&&t.getContext?this.lowerCanvasEl=t:this.lowerCanvasEl=T.util.getById(t)||this._createCanvasElement(),T.util.addClass(this.lowerCanvasEl,"lower-canvas"),this._originalCanvasStyle=this.lowerCanvasEl.style,this.interactive&&this._applyCanvasStyle(this.lowerCanvasEl),this.contextContainer=this.lowerCanvasEl.getContext("2d")},getWidth:function(){return this.width},getHeight:function(){return this.height},setWidth:function(t,e){return this.setDimensions({width:t},e)},setHeight:function(t,e){return this.setDimensions({height:t},e)},setDimensions:function(t,e){var i;for(var n in e=e||{},t)i=t[n],e.cssOnly||(this._setBackstoreDimension(n,t[n]),i+="px",this.hasLostContext=!0),e.backstoreOnly||this._setCssDimension(n,i);return this._isCurrentlyDrawing&&this.freeDrawingBrush&&this.freeDrawingBrush._setBrushStyles(this.contextTop),this._initRetinaScaling(),this.calcOffset(),e.cssOnly||this.requestRenderAll(),this},_setBackstoreDimension:function(t,e){return this.lowerCanvasEl[t]=e,this.upperCanvasEl&&(this.upperCanvasEl[t]=e),this.cacheCanvasEl&&(this.cacheCanvasEl[t]=e),this[t]=e,this},_setCssDimension:function(t,e){return this.lowerCanvasEl.style[t]=e,this.upperCanvasEl&&(this.upperCanvasEl.style[t]=e),this.wrapperEl&&(this.wrapperEl.style[t]=e),this},getZoom:function(){return this.viewportTransform[0]},setViewportTransform:function(t){var e,i,n,r=this._activeObject,o=this.backgroundImage,s=this.overlayImage;for(this.viewportTransform=t,i=0,n=this._objects.length;i<n;i++)(e=this._objects[i]).group||e.setCoords(!0);return r&&r.setCoords(),o&&o.setCoords(!0),s&&s.setCoords(!0),this.calcViewportBoundaries(),this.renderOnAddRemove&&this.requestRenderAll(),this},zoomToPoint:function(t,e){var i=t,n=this.viewportTransform.slice(0);t=r(t,o(this.viewportTransform)),n[0]=e,n[3]=e;var s=r(t,n);return n[4]+=i.x-s.x,n[5]+=i.y-s.y,this.setViewportTransform(n)},setZoom:function(t){return this.zoomToPoint(new T.Point(0,0),t),this},absolutePan:function(t){var e=this.viewportTransform.slice(0);return e[4]=-t.x,e[5]=-t.y,this.setViewportTransform(e)},relativePan:function(t){return this.absolutePan(new T.Point(-t.x-this.viewportTransform[4],-t.y-this.viewportTransform[5]))},getElement:function(){return this.lowerCanvasEl},_onObjectAdded:function(t){this.stateful&&t.setupState(),t._set("canvas",this),t.setCoords(),this.fire("object:added",{target:t}),t.fire("added")},_onObjectRemoved:function(t){this.fire("object:removed",{target:t}),t.fire("removed"),delete t.canvas},clearContext:function(t){return t.clearRect(0,0,this.width,this.height),this},getContext:function(){return this.contextContainer},clear:function(){return this.remove.apply(this,this.getObjects()),this.backgroundImage=null,this.overlayImage=null,this.backgroundColor="",this.overlayColor="",this._hasITextHandlers&&(this.off("mouse:up",this._mouseUpITextHandler),this._iTextInstances=null,this._hasITextHandlers=!1),this.clearContext(this.contextContainer),this.fire("canvas:cleared"),this.renderOnAddRemove&&this.requestRenderAll(),this},renderAll:function(){var t=this.contextContainer;return this.renderCanvas(t,this._objects),this},renderAndReset:function(){this.isRendering=0,this.renderAll()},requestRenderAll:function(){return this.isRendering||(this.isRendering=T.util.requestAnimFrame(this.renderAndResetBound)),this},calcViewportBoundaries:function(){var t={},e=this.width,i=this.height,n=o(this.viewportTransform);return t.tl=r({x:0,y:0},n),t.br=r({x:e,y:i},n),t.tr=new T.Point(t.br.x,t.tl.y),t.bl=new T.Point(t.tl.x,t.br.y),this.vptCoords=t,t},cancelRequestedRender:function(){this.isRendering&&(T.util.cancelAnimFrame(this.isRendering),this.isRendering=0)},renderCanvas:function(t,e){var i=this.viewportTransform,n=this.clipPath;this.cancelRequestedRender(),this.calcViewportBoundaries(),this.clearContext(t),T.util.setImageSmoothing(t,this.imageSmoothingEnabled),this.fire("before:render",{ctx:t}),this._renderBackground(t),t.save(),t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),this._renderObjects(t,e),t.restore(),!this.controlsAboveOverlay&&this.interactive&&this.drawControls(t),n&&(n.canvas=this,n.shouldCache(),n._transformDone=!0,n.renderCache({forClipping:!0}),this.drawClipPathOnCanvas(t)),this._renderOverlay(t),this.controlsAboveOverlay&&this.interactive&&this.drawControls(t),this.fire("after:render",{ctx:t})},drawClipPathOnCanvas:function(t){var e=this.viewportTransform,i=this.clipPath;t.save(),t.transform(e[0],e[1],e[2],e[3],e[4],e[5]),t.globalCompositeOperation="destination-in",i.transform(t),t.scale(1/i.zoomX,1/i.zoomY),t.drawImage(i._cacheCanvas,-i.cacheTranslationX,-i.cacheTranslationY),t.restore()},_renderObjects:function(t,e){var i,n;for(i=0,n=e.length;i<n;++i)e[i]&&e[i].render(t)},_renderBackgroundOrOverlay:function(t,e){var i=this[e+"Color"],n=this[e+"Image"],r=this.viewportTransform,o=this[e+"Vpt"];if(i||n){if(i){t.save(),t.beginPath(),t.moveTo(0,0),t.lineTo(this.width,0),t.lineTo(this.width,this.height),t.lineTo(0,this.height),t.closePath(),t.fillStyle=i.toLive?i.toLive(t,this):i,o&&t.transform(r[0],r[1],r[2],r[3],r[4],r[5]),t.transform(1,0,0,1,i.offsetX||0,i.offsetY||0);var s=i.gradientTransform||i.patternTransform;s&&t.transform(s[0],s[1],s[2],s[3],s[4],s[5]),t.fill(),t.restore()}n&&(t.save(),o&&t.transform(r[0],r[1],r[2],r[3],r[4],r[5]),n.render(t),t.restore())}},_renderBackground:function(t){this._renderBackgroundOrOverlay(t,"background")},_renderOverlay:function(t){this._renderBackgroundOrOverlay(t,"overlay")},getCenter:function(){return{top:this.height/2,left:this.width/2}},getCenterPoint:function(){return new T.Point(this.width/2,this.height/2)},centerObjectH:function(t){return this._centerObject(t,new T.Point(this.getCenterPoint().x,t.getCenterPoint().y))},centerObjectV:function(t){return this._centerObject(t,new T.Point(t.getCenterPoint().x,this.getCenterPoint().y))},centerObject:function(t){var e=this.getCenterPoint();return this._centerObject(t,e)},viewportCenterObject:function(t){var e=this.getVpCenter();return this._centerObject(t,e)},viewportCenterObjectH:function(t){var e=this.getVpCenter();return this._centerObject(t,new T.Point(e.x,t.getCenterPoint().y)),this},viewportCenterObjectV:function(t){var e=this.getVpCenter();return this._centerObject(t,new T.Point(t.getCenterPoint().x,e.y))},getVpCenter:function(){var t=this.getCenterPoint(),e=o(this.viewportTransform);return r(t,e)},_centerObject:function(t,e){return t.setPositionByOrigin(e,"center","center"),t.setCoords(),this.renderOnAddRemove&&this.requestRenderAll(),this},toDatalessJSON:function(t){return this.toDatalessObject(t)},toObject:function(t){return this._toObjectMethod("toObject",t)},toDatalessObject:function(t){return this._toObjectMethod("toDatalessObject",t)},_toObjectMethod:function(e,i){var n=this.clipPath,r={version:T.version,objects:this._toObjects(e,i)};return n&&!n.excludeFromExport&&(r.clipPath=this._toObject(this.clipPath,e,i)),t(r,this.__serializeBgOverlay(e,i)),T.util.populateWithProperties(this,r,i),r},_toObjects:function(t,e){return this._objects.filter((function(t){return!t.excludeFromExport})).map((function(i){return this._toObject(i,t,e)}),this)},_toObject:function(t,e,i){var n;this.includeDefaultValues||(n=t.includeDefaultValues,t.includeDefaultValues=!1);var r=t[e](i);return this.includeDefaultValues||(t.includeDefaultValues=n),r},__serializeBgOverlay:function(t,e){var i={},n=this.backgroundImage,r=this.overlayImage,o=this.backgroundColor,s=this.overlayColor;return o&&o.toObject?o.excludeFromExport||(i.background=o.toObject(e)):o&&(i.background=o),s&&s.toObject?s.excludeFromExport||(i.overlay=s.toObject(e)):s&&(i.overlay=s),n&&!n.excludeFromExport&&(i.backgroundImage=this._toObject(n,t,e)),r&&!r.excludeFromExport&&(i.overlayImage=this._toObject(r,t,e)),i},svgViewportTransformation:!0,toSVG:function(t,e){t||(t={}),t.reviver=e;var i=[];return this._setSVGPreamble(i,t),this._setSVGHeader(i,t),this.clipPath&&i.push('<g clip-path="url(#'+this.clipPath.clipPathId+')" >\n'),this._setSVGBgOverlayColor(i,"background"),this._setSVGBgOverlayImage(i,"backgroundImage",e),this._setSVGObjects(i,e),this.clipPath&&i.push("</g>\n"),this._setSVGBgOverlayColor(i,"overlay"),this._setSVGBgOverlayImage(i,"overlayImage",e),i.push("</svg>"),i.join("")},_setSVGPreamble:function(t,e){e.suppressPreamble||t.push('<?xml version="1.0" encoding="',e.encoding||"UTF-8",'" standalone="no" ?>\n','<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ','"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n')},_setSVGHeader:function(t,e){var i,r=e.width||this.width,o=e.height||this.height,s='viewBox="0 0 '+this.width+" "+this.height+'" ',a=T.Object.NUM_FRACTION_DIGITS;e.viewBox?s='viewBox="'+e.viewBox.x+" "+e.viewBox.y+" "+e.viewBox.width+" "+e.viewBox.height+'" ':this.svgViewportTransformation&&(i=this.viewportTransform,s='viewBox="'+n(-i[4]/i[0],a)+" "+n(-i[5]/i[3],a)+" "+n(this.width/i[0],a)+" "+n(this.height/i[3],a)+'" '),t.push("<svg ",'xmlns="http://www.w3.org/2000/svg" ','xmlns:xlink="http://www.w3.org/1999/xlink" ','version="1.1" ','width="',r,'" ','height="',o,'" ',s,'xml:space="preserve">\n',"<desc>Created with Fabric.js ",T.version,"</desc>\n","<defs>\n",this.createSVGFontFacesMarkup(),this.createSVGRefElementsMarkup(),this.createSVGClipPathMarkup(e),"</defs>\n")},createSVGClipPathMarkup:function(t){var e=this.clipPath;return e?(e.clipPathId="CLIPPATH_"+T.Object.__uid++,'<clipPath id="'+e.clipPathId+'" >\n'+this.clipPath.toClipPathSVG(t.reviver)+"</clipPath>\n"):""},createSVGRefElementsMarkup:function(){var t=this;return["background","overlay"].map((function(e){var i=t[e+"Color"];if(i&&i.toLive){var n=t[e+"Vpt"],r=t.viewportTransform,o={width:t.width/(n?r[0]:1),height:t.height/(n?r[3]:1)};return i.toSVG(o,{additionalTransform:n?T.util.matrixToSVG(r):""})}})).join("")},createSVGFontFacesMarkup:function(){var t,e,i,n,r,o,s,a,h="",c={},l=T.fontPaths,u=[];for(this._objects.forEach((function t(e){u.push(e),e._objects&&e._objects.forEach(t)})),s=0,a=u.length;s<a;s++)if(e=(t=u[s]).fontFamily,-1!==t.type.indexOf("text")&&!c[e]&&l[e]&&(c[e]=!0,t.styles))for(r in i=t.styles)for(o in n=i[r])!c[e=n[o].fontFamily]&&l[e]&&(c[e]=!0);for(var f in c)h+=["\t\t@font-face {\n","\t\t\tfont-family: '",f,"';\n","\t\t\tsrc: url('",l[f],"');\n","\t\t}\n"].join("");return h&&(h=['\t<style type="text/css">',"<![CDATA[\n",h,"]]>","</style>\n"].join("")),h},_setSVGObjects:function(t,e){var i,n,r,o=this._objects;for(n=0,r=o.length;n<r;n++)(i=o[n]).excludeFromExport||this._setSVGObject(t,i,e)},_setSVGObject:function(t,e,i){t.push(e.toSVG(i))},_setSVGBgOverlayImage:function(t,e,i){this[e]&&!this[e].excludeFromExport&&this[e].toSVG&&t.push(this[e].toSVG(i))},_setSVGBgOverlayColor:function(t,e){var i=this[e+"Color"],n=this.viewportTransform,r=this.width,o=this.height;if(i)if(i.toLive){var s=i.repeat,a=T.util.invertTransform(n),h=this[e+"Vpt"]?T.util.matrixToSVG(a):"";t.push('<rect transform="'+h+" translate(",r/2,",",o/2,')"',' x="',i.offsetX-r/2,'" y="',i.offsetY-o/2,'" ','width="',"repeat-y"===s||"no-repeat"===s?i.source.width:r,'" height="',"repeat-x"===s||"no-repeat"===s?i.source.height:o,'" fill="url(#SVGID_'+i.id+')"',"></rect>\n")}else t.push('<rect x="0" y="0" width="100%" height="100%" ','fill="',i,'"',"></rect>\n")},sendToBack:function(t){if(!t)return this;var e,n,r,o=this._activeObject;if(t===o&&"activeSelection"===t.type)for(e=(r=o._objects).length;e--;)n=r[e],i(this._objects,n),this._objects.unshift(n);else i(this._objects,t),this._objects.unshift(t);return this.renderOnAddRemove&&this.requestRenderAll(),this},bringToFront:function(t){if(!t)return this;var e,n,r,o=this._activeObject;if(t===o&&"activeSelection"===t.type)for(r=o._objects,e=0;e<r.length;e++)n=r[e],i(this._objects,n),this._objects.push(n);else i(this._objects,t),this._objects.push(t);return this.renderOnAddRemove&&this.requestRenderAll(),this},sendBackwards:function(t,e){if(!t)return this;var n,r,o,s,a,h=this._activeObject,c=0;if(t===h&&"activeSelection"===t.type)for(a=h._objects,n=0;n<a.length;n++)r=a[n],(o=this._objects.indexOf(r))>0+c&&(s=o-1,i(this._objects,r),this._objects.splice(s,0,r)),c++;else 0!==(o=this._objects.indexOf(t))&&(s=this._findNewLowerIndex(t,o,e),i(this._objects,t),this._objects.splice(s,0,t));return this.renderOnAddRemove&&this.requestRenderAll(),this},_findNewLowerIndex:function(t,e,i){var n,r;if(i){for(n=e,r=e-1;r>=0;--r)if(t.intersectsWithObject(this._objects[r])||t.isContainedWithinObject(this._objects[r])||this._objects[r].isContainedWithinObject(t)){n=r;break}}else n=e-1;return n},bringForward:function(t,e){if(!t)return this;var n,r,o,s,a,h=this._activeObject,c=0;if(t===h&&"activeSelection"===t.type)for(n=(a=h._objects).length;n--;)r=a[n],(o=this._objects.indexOf(r))<this._objects.length-1-c&&(s=o+1,i(this._objects,r),this._objects.splice(s,0,r)),c++;else(o=this._objects.indexOf(t))!==this._objects.length-1&&(s=this._findNewUpperIndex(t,o,e),i(this._objects,t),this._objects.splice(s,0,t));return this.renderOnAddRemove&&this.requestRenderAll(),this},_findNewUpperIndex:function(t,e,i){var n,r,o;if(i){for(n=e,r=e+1,o=this._objects.length;r<o;++r)if(t.intersectsWithObject(this._objects[r])||t.isContainedWithinObject(this._objects[r])||this._objects[r].isContainedWithinObject(t)){n=r;break}}else n=e+1;return n},moveTo:function(t,e){return i(this._objects,t),this._objects.splice(e,0,t),this.renderOnAddRemove&&this.requestRenderAll()},dispose:function(){return this.isRendering&&(T.util.cancelAnimFrame(this.isRendering),this.isRendering=0),this.forEachObject((function(t){t.dispose&&t.dispose()})),this._objects=[],this.backgroundImage&&this.backgroundImage.dispose&&this.backgroundImage.dispose(),this.backgroundImage=null,this.overlayImage&&this.overlayImage.dispose&&this.overlayImage.dispose(),this.overlayImage=null,this._iTextInstances=null,this.contextContainer=null,this.lowerCanvasEl.classList.remove("lower-canvas"),T.util.setStyle(this.lowerCanvasEl,this._originalCanvasStyle),delete this._originalCanvasStyle,this.lowerCanvasEl.setAttribute("width",this.width),this.lowerCanvasEl.setAttribute("height",this.height),T.util.cleanUpJsdomNode(this.lowerCanvasEl),this.lowerCanvasEl=void 0,this},toString:function(){return"#<fabric.Canvas ("+this.complexity()+"): { objects: "+this._objects.length+" }>"}}),t(T.StaticCanvas.prototype,T.Observable),t(T.StaticCanvas.prototype,T.Collection),t(T.StaticCanvas.prototype,T.DataURLExporter),t(T.StaticCanvas,{EMPTY_JSON:'{"objects": [], "background": "white"}',supports:function(t){var e=a();if(!e||!e.getContext)return null;var i=e.getContext("2d");return i&&"setLineDash"===t?void 0!==i.setLineDash:null}}),T.StaticCanvas.prototype.toJSON=T.StaticCanvas.prototype.toObject,T.isLikelyNode&&(T.StaticCanvas.prototype.createPNGStream=function(){var t=s(this.lowerCanvasEl);return t&&t.createPNGStream()},T.StaticCanvas.prototype.createJPEGStream=function(t){var e=s(this.lowerCanvasEl);return e&&e.createJPEGStream(t)})}}(),T.BaseBrush=T.util.createClass({color:"rgb(0, 0, 0)",width:1,shadow:null,strokeLineCap:"round",strokeLineJoin:"round",strokeMiterLimit:10,strokeDashArray:null,limitedToCanvasSize:!1,_setBrushStyles:function(t){t.strokeStyle=this.color,t.lineWidth=this.width,t.lineCap=this.strokeLineCap,t.miterLimit=this.strokeMiterLimit,t.lineJoin=this.strokeLineJoin,t.setLineDash(this.strokeDashArray||[])},_saveAndTransform:function(t){var e=this.canvas.viewportTransform;t.save(),t.transform(e[0],e[1],e[2],e[3],e[4],e[5])},_setShadow:function(){if(this.shadow){var t=this.canvas,e=this.shadow,i=t.contextTop,n=t.getZoom();t&&t._isRetinaScaling()&&(n*=T.devicePixelRatio),i.shadowColor=e.color,i.shadowBlur=e.blur*n,i.shadowOffsetX=e.offsetX*n,i.shadowOffsetY=e.offsetY*n}},needsFullRender:function(){return new T.Color(this.color).getAlpha()<1||!!this.shadow},_resetShadow:function(){var t=this.canvas.contextTop;t.shadowColor="",t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0},_isOutSideCanvas:function(t){return t.x<0||t.x>this.canvas.getWidth()||t.y<0||t.y>this.canvas.getHeight()}}),T.PencilBrush=T.util.createClass(T.BaseBrush,{decimate:.4,drawStraightLine:!1,straightLineKey:"shiftKey",initialize:function(t){this.canvas=t,this._points=[]},needsFullRender:function(){return this.callSuper("needsFullRender")||this._hasStraightLine},_drawSegment:function(t,e,i){var n=e.midPointFrom(i);return t.quadraticCurveTo(e.x,e.y,n.x,n.y),n},onMouseDown:function(t,e){this.canvas._isMainEvent(e.e)&&(this.drawStraightLine=e.e[this.straightLineKey],this._prepareForDrawing(t),this._captureDrawingPath(t),this._render())},onMouseMove:function(t,e){if(this.canvas._isMainEvent(e.e)&&(this.drawStraightLine=e.e[this.straightLineKey],(!0!==this.limitedToCanvasSize||!this._isOutSideCanvas(t))&&this._captureDrawingPath(t)&&this._points.length>1))if(this.needsFullRender())this.canvas.clearContext(this.canvas.contextTop),this._render();else{var i=this._points,n=i.length,r=this.canvas.contextTop;this._saveAndTransform(r),this.oldEnd&&(r.beginPath(),r.moveTo(this.oldEnd.x,this.oldEnd.y)),this.oldEnd=this._drawSegment(r,i[n-2],i[n-1],!0),r.stroke(),r.restore()}},onMouseUp:function(t){return!this.canvas._isMainEvent(t.e)||(this.drawStraightLine=!1,this.oldEnd=void 0,this._finalizeAndAddPath(),!1)},_prepareForDrawing:function(t){var e=new T.Point(t.x,t.y);this._reset(),this._addPoint(e),this.canvas.contextTop.moveTo(e.x,e.y)},_addPoint:function(t){return!(this._points.length>1&&t.eq(this._points[this._points.length-1])||(this.drawStraightLine&&this._points.length>1&&(this._hasStraightLine=!0,this._points.pop()),this._points.push(t),0))},_reset:function(){this._points=[],this._setBrushStyles(this.canvas.contextTop),this._setShadow(),this._hasStraightLine=!1},_captureDrawingPath:function(t){var e=new T.Point(t.x,t.y);return this._addPoint(e)},_render:function(t){var e,i,n=this._points[0],r=this._points[1];if(t=t||this.canvas.contextTop,this._saveAndTransform(t),t.beginPath(),2===this._points.length&&n.x===r.x&&n.y===r.y){var o=this.width/1e3;n=new T.Point(n.x,n.y),r=new T.Point(r.x,r.y),n.x-=o,r.x+=o}for(t.moveTo(n.x,n.y),e=1,i=this._points.length;e<i;e++)this._drawSegment(t,n,r),n=this._points[e],r=this._points[e+1];t.lineTo(n.x,n.y),t.stroke(),t.restore()},convertPointsToSVGPath:function(t){var e=this.width/1e3;return T.util.getSmoothPathFromPoints(t,e)},_isEmptySVGPath:function(t){return"M 0 0 Q 0 0 0 0 L 0 0"===T.util.joinPath(t)},createPath:function(t){var e=new T.Path(t,{fill:null,stroke:this.color,strokeWidth:this.width,strokeLineCap:this.strokeLineCap,strokeMiterLimit:this.strokeMiterLimit,strokeLineJoin:this.strokeLineJoin,strokeDashArray:this.strokeDashArray});return this.shadow&&(this.shadow.affectStroke=!0,e.shadow=new T.Shadow(this.shadow)),e},decimatePoints:function(t,e){if(t.length<=2)return t;var i,n=this.canvas.getZoom(),r=Math.pow(e/n,2),o=t.length-1,s=t[0],a=[s];for(i=1;i<o-1;i++)Math.pow(s.x-t[i].x,2)+Math.pow(s.y-t[i].y,2)>=r&&(s=t[i],a.push(s));return a.push(t[o]),a},_finalizeAndAddPath:function(){this.canvas.contextTop.closePath(),this.decimate&&(this._points=this.decimatePoints(this._points,this.decimate));var t=this.convertPointsToSVGPath(this._points);if(this._isEmptySVGPath(t))this.canvas.requestRenderAll();else{var e=this.createPath(t);this.canvas.clearContext(this.canvas.contextTop),this.canvas.fire("before:path:created",{path:e}),this.canvas.add(e),this.canvas.requestRenderAll(),e.setCoords(),this._resetShadow(),this.canvas.fire("path:created",{path:e})}}}),T.CircleBrush=T.util.createClass(T.BaseBrush,{width:10,initialize:function(t){this.canvas=t,this.points=[]},drawDot:function(t){var e=this.addPoint(t),i=this.canvas.contextTop;this._saveAndTransform(i),this.dot(i,e),i.restore()},dot:function(t,e){t.fillStyle=e.fill,t.beginPath(),t.arc(e.x,e.y,e.radius,0,2*Math.PI,!1),t.closePath(),t.fill()},onMouseDown:function(t){this.points.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.drawDot(t)},_render:function(){var t,e,i=this.canvas.contextTop,n=this.points;for(this._saveAndTransform(i),t=0,e=n.length;t<e;t++)this.dot(i,n[t]);i.restore()},onMouseMove:function(t){!0===this.limitedToCanvasSize&&this._isOutSideCanvas(t)||(this.needsFullRender()?(this.canvas.clearContext(this.canvas.contextTop),this.addPoint(t),this._render()):this.drawDot(t))},onMouseUp:function(){var t,e,i=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=!1;var n=[];for(t=0,e=this.points.length;t<e;t++){var r=this.points[t],o=new T.Circle({radius:r.radius,left:r.x,top:r.y,originX:"center",originY:"center",fill:r.fill});this.shadow&&(o.shadow=new T.Shadow(this.shadow)),n.push(o)}var s=new T.Group(n);s.canvas=this.canvas,this.canvas.fire("before:path:created",{path:s}),this.canvas.add(s),this.canvas.fire("path:created",{path:s}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=i,this.canvas.requestRenderAll()},addPoint:function(t){var e=new T.Point(t.x,t.y),i=T.util.getRandomInt(Math.max(0,this.width-20),this.width+20)/2,n=new T.Color(this.color).setAlpha(T.util.getRandomInt(0,100)/100).toRgba();return e.radius=i,e.fill=n,this.points.push(e),e}}),T.SprayBrush=T.util.createClass(T.BaseBrush,{width:10,density:20,dotWidth:1,dotWidthVariance:1,randomOpacity:!1,optimizeOverlapping:!0,initialize:function(t){this.canvas=t,this.sprayChunks=[]},onMouseDown:function(t){this.sprayChunks.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.addSprayChunk(t),this.render(this.sprayChunkPoints)},onMouseMove:function(t){!0===this.limitedToCanvasSize&&this._isOutSideCanvas(t)||(this.addSprayChunk(t),this.render(this.sprayChunkPoints))},onMouseUp:function(){var t=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=!1;for(var e=[],i=0,n=this.sprayChunks.length;i<n;i++)for(var r=this.sprayChunks[i],o=0,s=r.length;o<s;o++){var a=new T.Rect({width:r[o].width,height:r[o].width,left:r[o].x+1,top:r[o].y+1,originX:"center",originY:"center",fill:this.color});e.push(a)}this.optimizeOverlapping&&(e=this._getOptimizedRects(e));var h=new T.Group(e);this.shadow&&h.set("shadow",new T.Shadow(this.shadow)),this.canvas.fire("before:path:created",{path:h}),this.canvas.add(h),this.canvas.fire("path:created",{path:h}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=t,this.canvas.requestRenderAll()},_getOptimizedRects:function(t){var e,i,n,r={};for(i=0,n=t.length;i<n;i++)r[e=t[i].left+""+t[i].top]||(r[e]=t[i]);var o=[];for(e in r)o.push(r[e]);return o},render:function(t){var e,i,n=this.canvas.contextTop;for(n.fillStyle=this.color,this._saveAndTransform(n),e=0,i=t.length;e<i;e++){var r=t[e];void 0!==r.opacity&&(n.globalAlpha=r.opacity),n.fillRect(r.x,r.y,r.width,r.width)}n.restore()},_render:function(){var t,e,i=this.canvas.contextTop;for(i.fillStyle=this.color,this._saveAndTransform(i),t=0,e=this.sprayChunks.length;t<e;t++)this.render(this.sprayChunks[t]);i.restore()},addSprayChunk:function(t){this.sprayChunkPoints=[];var e,i,n,r,o=this.width/2;for(r=0;r<this.density;r++){e=T.util.getRandomInt(t.x-o,t.x+o),i=T.util.getRandomInt(t.y-o,t.y+o),n=this.dotWidthVariance?T.util.getRandomInt(Math.max(1,this.dotWidth-this.dotWidthVariance),this.dotWidth+this.dotWidthVariance):this.dotWidth;var s=new T.Point(e,i);s.width=n,this.randomOpacity&&(s.opacity=T.util.getRandomInt(0,100)/100),this.sprayChunkPoints.push(s)}this.sprayChunks.push(this.sprayChunkPoints)}}),T.PatternBrush=T.util.createClass(T.PencilBrush,{getPatternSrc:function(){var t=T.util.createCanvasElement(),e=t.getContext("2d");return t.width=t.height=25,e.fillStyle=this.color,e.beginPath(),e.arc(10,10,10,0,2*Math.PI,!1),e.closePath(),e.fill(),t},getPatternSrcFunction:function(){return String(this.getPatternSrc).replace("this.color",'"'+this.color+'"')},getPattern:function(t){return t.createPattern(this.source||this.getPatternSrc(),"repeat")},_setBrushStyles:function(t){this.callSuper("_setBrushStyles",t),t.strokeStyle=this.getPattern(t)},createPath:function(t){var e=this.callSuper("createPath",t),i=e._getLeftTopCoords().scalarAdd(e.strokeWidth/2);return e.stroke=new T.Pattern({source:this.source||this.getPatternSrcFunction(),offsetX:-i.x,offsetY:-i.y}),e}}),function(){var t=T.util.getPointer,e=T.util.degreesToRadians,i=T.util.isTouchEvent;for(var n in T.Canvas=T.util.createClass(T.StaticCanvas,{initialize:function(t,e){e||(e={}),this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(t,e),this._initInteractive(),this._createCacheCanvas()},uniformScaling:!0,uniScaleKey:"shiftKey",centeredScaling:!1,centeredRotation:!1,centeredKey:"altKey",altActionKey:"shiftKey",interactive:!0,selection:!0,selectionKey:"shiftKey",altSelectionKey:null,selectionColor:"rgba(100, 100, 255, 0.3)",selectionDashArray:[],selectionBorderColor:"rgba(255, 255, 255, 0.3)",selectionLineWidth:1,selectionFullyContained:!1,hoverCursor:"move",moveCursor:"move",defaultCursor:"default",freeDrawingCursor:"crosshair",notAllowedCursor:"not-allowed",containerClass:"canvas-container",perPixelTargetFind:!1,targetFindTolerance:0,skipTargetFind:!1,isDrawingMode:!1,preserveObjectStacking:!1,snapAngle:0,snapThreshold:null,stopContextMenu:!1,fireRightClick:!1,fireMiddleClick:!1,targets:[],enablePointerEvents:!1,_hoveredTarget:null,_hoveredTargets:[],_initInteractive:function(){this._currentTransform=null,this._groupSelector=null,this._initWrapperElement(),this._createUpperCanvas(),this._initEventListeners(),this._initRetinaScaling(),this.freeDrawingBrush=T.PencilBrush&&new T.PencilBrush(this),this.calcOffset()},_chooseObjectsToRender:function(){var t,e,i,n=this.getActiveObjects();if(n.length>0&&!this.preserveObjectStacking){e=[],i=[];for(var r=0,o=this._objects.length;r<o;r++)t=this._objects[r],-1===n.indexOf(t)?e.push(t):i.push(t);n.length>1&&(this._activeObject._objects=i),e.push.apply(e,i)}else e=this._objects;return e},renderAll:function(){!this.contextTopDirty||this._groupSelector||this.isDrawingMode||(this.clearContext(this.contextTop),this.contextTopDirty=!1),this.hasLostContext&&(this.renderTopLayer(this.contextTop),this.hasLostContext=!1);var t=this.contextContainer;return this.renderCanvas(t,this._chooseObjectsToRender()),this},renderTopLayer:function(t){t.save(),this.isDrawingMode&&this._isCurrentlyDrawing&&(this.freeDrawingBrush&&this.freeDrawingBrush._render(),this.contextTopDirty=!0),this.selection&&this._groupSelector&&(this._drawSelection(t),this.contextTopDirty=!0),t.restore()},renderTop:function(){var t=this.contextTop;return this.clearContext(t),this.renderTopLayer(t),this.fire("after:render"),this},_normalizePointer:function(t,e){var i=t.calcTransformMatrix(),n=T.util.invertTransform(i),r=this.restorePointerVpt(e);return T.util.transformPoint(r,n)},isTargetTransparent:function(t,e,i){if(t.shouldCache()&&t._cacheCanvas&&t!==this._activeObject){var n=this._normalizePointer(t,{x:e,y:i}),r=Math.max(t.cacheTranslationX+n.x*t.zoomX,0),o=Math.max(t.cacheTranslationY+n.y*t.zoomY,0);return T.util.isTransparent(t._cacheContext,Math.round(r),Math.round(o),this.targetFindTolerance)}var s=this.contextCache,a=t.selectionBackgroundColor,h=this.viewportTransform;return t.selectionBackgroundColor="",this.clearContext(s),s.save(),s.transform(h[0],h[1],h[2],h[3],h[4],h[5]),t.render(s),s.restore(),t.selectionBackgroundColor=a,T.util.isTransparent(s,e,i,this.targetFindTolerance)},_isSelectionKeyPressed:function(t){return Array.isArray(this.selectionKey)?!!this.selectionKey.find((function(e){return!0===t[e]})):t[this.selectionKey]},_shouldClearSelection:function(t,e){var i=this.getActiveObjects(),n=this._activeObject;return!e||e&&n&&i.length>1&&-1===i.indexOf(e)&&n!==e&&!this._isSelectionKeyPressed(t)||e&&!e.evented||e&&!e.selectable&&n&&n!==e},_shouldCenterTransform:function(t,e,i){var n;if(t)return"scale"===e||"scaleX"===e||"scaleY"===e||"resizing"===e?n=this.centeredScaling||t.centeredScaling:"rotate"===e&&(n=this.centeredRotation||t.centeredRotation),n?!i:i},_getOriginFromCorner:function(t,e){var i={x:t.originX,y:t.originY};return"ml"===e||"tl"===e||"bl"===e?i.x="right":"mr"!==e&&"tr"!==e&&"br"!==e||(i.x="left"),"tl"===e||"mt"===e||"tr"===e?i.y="bottom":"bl"!==e&&"mb"!==e&&"br"!==e||(i.y="top"),i},_getActionFromCorner:function(t,e,i,n){if(!e||!t)return"drag";var r=n.controls[e];return r.getActionName(i,r,n)},_setupCurrentTransform:function(t,i,n){if(i){var r=this.getPointer(t),o=i.__corner,s=i.controls[o],a=n&&o?s.getActionHandler(t,i,s):T.controlsUtils.dragHandler,h=this._getActionFromCorner(n,o,t,i),c=this._getOriginFromCorner(i,o),l=t[this.centeredKey],u={target:i,action:h,actionHandler:a,corner:o,scaleX:i.scaleX,scaleY:i.scaleY,skewX:i.skewX,skewY:i.skewY,offsetX:r.x-i.left,offsetY:r.y-i.top,originX:c.x,originY:c.y,ex:r.x,ey:r.y,lastX:r.x,lastY:r.y,theta:e(i.angle),width:i.width*i.scaleX,shiftKey:t.shiftKey,altKey:l,original:T.util.saveObjectTransform(i)};this._shouldCenterTransform(i,h,l)&&(u.originX="center",u.originY="center"),u.original.originX=c.x,u.original.originY=c.y,this._currentTransform=u,this._beforeTransform(t)}},setCursor:function(t){this.upperCanvasEl.style.cursor=t},_drawSelection:function(t){var e=this._groupSelector,i=new T.Point(e.ex,e.ey),n=T.util.transformPoint(i,this.viewportTransform),r=new T.Point(e.ex+e.left,e.ey+e.top),o=T.util.transformPoint(r,this.viewportTransform),s=Math.min(n.x,o.x),a=Math.min(n.y,o.y),h=Math.max(n.x,o.x),c=Math.max(n.y,o.y),l=this.selectionLineWidth/2;this.selectionColor&&(t.fillStyle=this.selectionColor,t.fillRect(s,a,h-s,c-a)),this.selectionLineWidth&&this.selectionBorderColor&&(t.lineWidth=this.selectionLineWidth,t.strokeStyle=this.selectionBorderColor,s+=l,a+=l,h-=l,c-=l,T.Object.prototype._setLineDash.call(this,t,this.selectionDashArray),t.strokeRect(s,a,h-s,c-a))},findTarget:function(t,e){if(!this.skipTargetFind){var n,r,o=this.getPointer(t,!0),s=this._activeObject,a=this.getActiveObjects(),h=i(t),c=a.length>1&&!e||1===a.length;if(this.targets=[],c&&s._findTargetCorner(o,h))return s;if(a.length>1&&!e&&s===this._searchPossibleTargets([s],o))return s;if(1===a.length&&s===this._searchPossibleTargets([s],o)){if(!this.preserveObjectStacking)return s;n=s,r=this.targets,this.targets=[]}var l=this._searchPossibleTargets(this._objects,o);return t[this.altSelectionKey]&&l&&n&&l!==n&&(l=n,this.targets=r),l}},_checkTarget:function(t,e,i){if(e&&e.visible&&e.evented&&e.containsPoint(t)){if(!this.perPixelTargetFind&&!e.perPixelTargetFind||e.isEditing)return!0;if(!this.isTargetTransparent(e,i.x,i.y))return!0}},_searchPossibleTargets:function(t,e){for(var i,n,r=t.length;r--;){var o=t[r],s=o.group?this._normalizePointer(o.group,e):e;if(this._checkTarget(s,o,e)){(i=t[r]).subTargetCheck&&i instanceof T.Group&&(n=this._searchPossibleTargets(i._objects,e))&&this.targets.push(n);break}}return i},restorePointerVpt:function(t){return T.util.transformPoint(t,T.util.invertTransform(this.viewportTransform))},getPointer:function(e,i){if(this._absolutePointer&&!i)return this._absolutePointer;if(this._pointer&&i)return this._pointer;var n,r=t(e),o=this.upperCanvasEl,s=o.getBoundingClientRect(),a=s.width||0,h=s.height||0;a&&h||("top"in s&&"bottom"in s&&(h=Math.abs(s.top-s.bottom)),"right"in s&&"left"in s&&(a=Math.abs(s.right-s.left))),this.calcOffset(),r.x=r.x-this._offset.left,r.y=r.y-this._offset.top,i||(r=this.restorePointerVpt(r));var c=this.getRetinaScaling();return 1!==c&&(r.x/=c,r.y/=c),n=0===a||0===h?{width:1,height:1}:{width:o.width/a,height:o.height/h},{x:r.x*n.width,y:r.y*n.height}},_createUpperCanvas:function(){var t=this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/,""),e=this.lowerCanvasEl,i=this.upperCanvasEl;i?i.className="":(i=this._createCanvasElement(),this.upperCanvasEl=i),T.util.addClass(i,"upper-canvas "+t),this.wrapperEl.appendChild(i),this._copyCanvasStyle(e,i),this._applyCanvasStyle(i),this.contextTop=i.getContext("2d")},getTopContext:function(){return this.contextTop},_createCacheCanvas:function(){this.cacheCanvasEl=this._createCanvasElement(),this.cacheCanvasEl.setAttribute("width",this.width),this.cacheCanvasEl.setAttribute("height",this.height),this.contextCache=this.cacheCanvasEl.getContext("2d")},_initWrapperElement:function(){this.wrapperEl=T.util.wrapElement(this.lowerCanvasEl,"div",{class:this.containerClass}),T.util.setStyle(this.wrapperEl,{width:this.width+"px",height:this.height+"px",position:"relative"}),T.util.makeElementUnselectable(this.wrapperEl)},_applyCanvasStyle:function(t){var e=this.width||t.width,i=this.height||t.height;T.util.setStyle(t,{position:"absolute",width:e+"px",height:i+"px",left:0,top:0,"touch-action":this.allowTouchScrolling?"manipulation":"none","-ms-touch-action":this.allowTouchScrolling?"manipulation":"none"}),t.width=e,t.height=i,T.util.makeElementUnselectable(t)},_copyCanvasStyle:function(t,e){e.style.cssText=t.style.cssText},getSelectionContext:function(){return this.contextTop},getSelectionElement:function(){return this.upperCanvasEl},getActiveObject:function(){return this._activeObject},getActiveObjects:function(){var t=this._activeObject;return t?"activeSelection"===t.type&&t._objects?t._objects.slice(0):[t]:[]},_onObjectRemoved:function(t){t===this._activeObject&&(this.fire("before:selection:cleared",{target:t}),this._discardActiveObject(),this.fire("selection:cleared",{target:t}),t.fire("deselected")),t===this._hoveredTarget&&(this._hoveredTarget=null,this._hoveredTargets=[]),this.callSuper("_onObjectRemoved",t)},_fireSelectionEvents:function(t,e){var i=!1,n=this.getActiveObjects(),r=[],o=[];t.forEach((function(t){-1===n.indexOf(t)&&(i=!0,t.fire("deselected",{e,target:t}),o.push(t))})),n.forEach((function(n){-1===t.indexOf(n)&&(i=!0,n.fire("selected",{e,target:n}),r.push(n))})),t.length>0&&n.length>0?i&&this.fire("selection:updated",{e,selected:r,deselected:o}):n.length>0?this.fire("selection:created",{e,selected:r}):t.length>0&&this.fire("selection:cleared",{e,deselected:o})},setActiveObject:function(t,e){var i=this.getActiveObjects();return this._setActiveObject(t,e),this._fireSelectionEvents(i,e),this},_setActiveObject:function(t,e){return this._activeObject!==t&&!!this._discardActiveObject(e,t)&&!t.onSelect({e})&&(this._activeObject=t,!0)},_discardActiveObject:function(t,e){var i=this._activeObject;if(i){if(i.onDeselect({e:t,object:e}))return!1;this._activeObject=null}return!0},discardActiveObject:function(t){var e=this.getActiveObjects(),i=this.getActiveObject();return e.length&&this.fire("before:selection:cleared",{target:i,e:t}),this._discardActiveObject(t),this._fireSelectionEvents(e,t),this},dispose:function(){var t=this.wrapperEl;return this.removeListeners(),t.removeChild(this.upperCanvasEl),t.removeChild(this.lowerCanvasEl),this.contextCache=null,this.contextTop=null,["upperCanvasEl","cacheCanvasEl"].forEach(function(t){T.util.cleanUpJsdomNode(this[t]),this[t]=void 0}.bind(this)),t.parentNode&&t.parentNode.replaceChild(this.lowerCanvasEl,this.wrapperEl),delete this.wrapperEl,T.StaticCanvas.prototype.dispose.call(this),this},clear:function(){return this.discardActiveObject(),this.clearContext(this.contextTop),this.callSuper("clear")},drawControls:function(t){var e=this._activeObject;e&&e._renderControls(t)},_toObject:function(t,e,i){var n=this._realizeGroupTransformOnObject(t),r=this.callSuper("_toObject",t,e,i);return this._unwindGroupTransformOnObject(t,n),r},_realizeGroupTransformOnObject:function(t){if(t.group&&"activeSelection"===t.group.type&&this._activeObject===t.group){var e={};return["angle","flipX","flipY","left","scaleX","scaleY","skewX","skewY","top"].forEach((function(i){e[i]=t[i]})),T.util.addTransformToObject(t,this._activeObject.calcOwnMatrix()),e}return null},_unwindGroupTransformOnObject:function(t,e){e&&t.set(e)},_setSVGObject:function(t,e,i){var n=this._realizeGroupTransformOnObject(e);this.callSuper("_setSVGObject",t,e,i),this._unwindGroupTransformOnObject(e,n)},setViewportTransform:function(t){this.renderOnAddRemove&&this._activeObject&&this._activeObject.isEditing&&this._activeObject.clearContextTop(),T.StaticCanvas.prototype.setViewportTransform.call(this,t)}}),T.StaticCanvas)"prototype"!==n&&(T.Canvas[n]=T.StaticCanvas[n])}(),function(){var t=T.util.addListener,e=T.util.removeListener,i={passive:!1};function n(t,e){return t.button&&t.button===e-1}T.util.object.extend(T.Canvas.prototype,{mainTouchId:null,_initEventListeners:function(){this.removeListeners(),this._bindEvents(),this.addOrRemove(t,"add")},_getEventPrefix:function(){return this.enablePointerEvents?"pointer":"mouse"},addOrRemove:function(t,e){var n=this.upperCanvasEl,r=this._getEventPrefix();t(T.window,"resize",this._onResize),t(n,r+"down",this._onMouseDown),t(n,r+"move",this._onMouseMove,i),t(n,r+"out",this._onMouseOut),t(n,r+"enter",this._onMouseEnter),t(n,"wheel",this._onMouseWheel),t(n,"contextmenu",this._onContextMenu),t(n,"dblclick",this._onDoubleClick),t(n,"dragover",this._onDragOver),t(n,"dragenter",this._onDragEnter),t(n,"dragleave",this._onDragLeave),t(n,"drop",this._onDrop),this.enablePointerEvents||t(n,"touchstart",this._onTouchStart,i),"undefined"!=typeof eventjs&&e in eventjs&&(eventjs[e](n,"gesture",this._onGesture),eventjs[e](n,"drag",this._onDrag),eventjs[e](n,"orientation",this._onOrientationChange),eventjs[e](n,"shake",this._onShake),eventjs[e](n,"longpress",this._onLongPress))},removeListeners:function(){this.addOrRemove(e,"remove");var t=this._getEventPrefix();e(T.document,t+"up",this._onMouseUp),e(T.document,"touchend",this._onTouchEnd,i),e(T.document,t+"move",this._onMouseMove,i),e(T.document,"touchmove",this._onMouseMove,i)},_bindEvents:function(){this.eventsBound||(this._onMouseDown=this._onMouseDown.bind(this),this._onTouchStart=this._onTouchStart.bind(this),this._onMouseMove=this._onMouseMove.bind(this),this._onMouseUp=this._onMouseUp.bind(this),this._onTouchEnd=this._onTouchEnd.bind(this),this._onResize=this._onResize.bind(this),this._onGesture=this._onGesture.bind(this),this._onDrag=this._onDrag.bind(this),this._onShake=this._onShake.bind(this),this._onLongPress=this._onLongPress.bind(this),this._onOrientationChange=this._onOrientationChange.bind(this),this._onMouseWheel=this._onMouseWheel.bind(this),this._onMouseOut=this._onMouseOut.bind(this),this._onMouseEnter=this._onMouseEnter.bind(this),this._onContextMenu=this._onContextMenu.bind(this),this._onDoubleClick=this._onDoubleClick.bind(this),this._onDragOver=this._onDragOver.bind(this),this._onDragEnter=this._simpleEventHandler.bind(this,"dragenter"),this._onDragLeave=this._simpleEventHandler.bind(this,"dragleave"),this._onDrop=this._onDrop.bind(this),this.eventsBound=!0)},_onGesture:function(t,e){this.__onTransformGesture&&this.__onTransformGesture(t,e)},_onDrag:function(t,e){this.__onDrag&&this.__onDrag(t,e)},_onMouseWheel:function(t){this.__onMouseWheel(t)},_onMouseOut:function(t){var e=this._hoveredTarget;this.fire("mouse:out",{target:e,e:t}),this._hoveredTarget=null,e&&e.fire("mouseout",{e:t});var i=this;this._hoveredTargets.forEach((function(n){i.fire("mouse:out",{target:e,e:t}),n&&e.fire("mouseout",{e:t})})),this._hoveredTargets=[]},_onMouseEnter:function(t){this._currentTransform||this.findTarget(t)||(this.fire("mouse:over",{target:null,e:t}),this._hoveredTarget=null,this._hoveredTargets=[])},_onOrientationChange:function(t,e){this.__onOrientationChange&&this.__onOrientationChange(t,e)},_onShake:function(t,e){this.__onShake&&this.__onShake(t,e)},_onLongPress:function(t,e){this.__onLongPress&&this.__onLongPress(t,e)},_onDragOver:function(t){t.preventDefault();var e=this._simpleEventHandler("dragover",t);this._fireEnterLeaveEvents(e,t)},_onDrop:function(t){return this._simpleEventHandler("drop:before",t),this._simpleEventHandler("drop",t)},_onContextMenu:function(t){return this.stopContextMenu&&(t.stopPropagation(),t.preventDefault()),!1},_onDoubleClick:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"dblclick"),this._resetTransformEventData(t)},getPointerId:function(t){var e=t.changedTouches;return e?e[0]&&e[0].identifier:this.enablePointerEvents?t.pointerId:-1},_isMainEvent:function(t){return!0===t.isPrimary||!1!==t.isPrimary&&("touchend"===t.type&&0===t.touches.length||!t.changedTouches||t.changedTouches[0].identifier===this.mainTouchId)},_onTouchStart:function(n){n.preventDefault(),null===this.mainTouchId&&(this.mainTouchId=this.getPointerId(n)),this.__onMouseDown(n),this._resetTransformEventData();var r=this.upperCanvasEl,o=this._getEventPrefix();t(T.document,"touchend",this._onTouchEnd,i),t(T.document,"touchmove",this._onMouseMove,i),e(r,o+"down",this._onMouseDown)},_onMouseDown:function(n){this.__onMouseDown(n),this._resetTransformEventData();var r=this.upperCanvasEl,o=this._getEventPrefix();e(r,o+"move",this._onMouseMove,i),t(T.document,o+"up",this._onMouseUp),t(T.document,o+"move",this._onMouseMove,i)},_onTouchEnd:function(n){if(!(n.touches.length>0)){this.__onMouseUp(n),this._resetTransformEventData(),this.mainTouchId=null;var r=this._getEventPrefix();e(T.document,"touchend",this._onTouchEnd,i),e(T.document,"touchmove",this._onMouseMove,i);var o=this;this._willAddMouseDown&&clearTimeout(this._willAddMouseDown),this._willAddMouseDown=setTimeout((function(){t(o.upperCanvasEl,r+"down",o._onMouseDown),o._willAddMouseDown=0}),400)}},_onMouseUp:function(n){this.__onMouseUp(n),this._resetTransformEventData();var r=this.upperCanvasEl,o=this._getEventPrefix();this._isMainEvent(n)&&(e(T.document,o+"up",this._onMouseUp),e(T.document,o+"move",this._onMouseMove,i),t(r,o+"move",this._onMouseMove,i))},_onMouseMove:function(t){!this.allowTouchScrolling&&t.preventDefault&&t.preventDefault(),this.__onMouseMove(t)},_onResize:function(){this.calcOffset()},_shouldRender:function(t){var e=this._activeObject;return!!(!!e!=!!t||e&&t&&e!==t)||(e&&e.isEditing,!1)},__onMouseUp:function(t){var e,i=this._currentTransform,r=this._groupSelector,o=!1,s=!r||0===r.left&&0===r.top;if(this._cacheTransformEventData(t),e=this._target,this._handleEvent(t,"up:before"),n(t,3))this.fireRightClick&&this._handleEvent(t,"up",3,s);else{if(n(t,2))return this.fireMiddleClick&&this._handleEvent(t,"up",2,s),void this._resetTransformEventData();if(this.isDrawingMode&&this._isCurrentlyDrawing)this._onMouseUpInDrawingMode(t);else if(this._isMainEvent(t)){if(i&&(this._finalizeCurrentTransform(t),o=i.actionPerformed),!s){var a=e===this._activeObject;this._maybeGroupObjects(t),o||(o=this._shouldRender(e)||!a&&e===this._activeObject)}var h,c;if(e){if(h=e._findTargetCorner(this.getPointer(t,!0),T.util.isTouchEvent(t)),e.selectable&&e!==this._activeObject&&"up"===e.activeOn)this.setActiveObject(e,t),o=!0;else{var l=e.controls[h],u=l&&l.getMouseUpHandler(t,e,l);u&&u(t,i,(c=this.getPointer(t)).x,c.y)}e.isMoving=!1}if(i&&(i.target!==e||i.corner!==h)){var f=i.target&&i.target.controls[i.corner],d=f&&f.getMouseUpHandler(t,e,l);c=c||this.getPointer(t),d&&d(t,i,c.x,c.y)}this._setCursorFromEvent(t,e),this._handleEvent(t,"up",1,s),this._groupSelector=null,this._currentTransform=null,e&&(e.__corner=0),o?this.requestRenderAll():s||this.renderTop()}}},_simpleEventHandler:function(t,e){var i=this.findTarget(e),n=this.targets,r={e,target:i,subTargets:n};if(this.fire(t,r),i&&i.fire(t,r),!n)return i;for(var o=0;o<n.length;o++)n[o].fire(t,r);return i},_handleEvent:function(t,e,i,n){var r=this._target,o=this.targets||[],s={e:t,target:r,subTargets:o,button:i||1,isClick:n||!1,pointer:this._pointer,absolutePointer:this._absolutePointer,transform:this._currentTransform};"up"===e&&(s.currentTarget=this.findTarget(t),s.currentSubTargets=this.targets),this.fire("mouse:"+e,s),r&&r.fire("mouse"+e,s);for(var a=0;a<o.length;a++)o[a].fire("mouse"+e,s)},_finalizeCurrentTransform:function(t){var e=this._currentTransform,i=e.target,n={e:t,target:i,transform:e,action:e.action};i._scaling&&(i._scaling=!1),i.setCoords(),(e.actionPerformed||this.stateful&&i.hasStateChanged())&&this._fire("modified",n)},_onMouseDownInDrawingMode:function(t){this._isCurrentlyDrawing=!0,this.getActiveObject()&&this.discardActiveObject(t).requestRenderAll();var e=this.getPointer(t);this.freeDrawingBrush.onMouseDown(e,{e:t,pointer:e}),this._handleEvent(t,"down")},_onMouseMoveInDrawingMode:function(t){if(this._isCurrentlyDrawing){var e=this.getPointer(t);this.freeDrawingBrush.onMouseMove(e,{e:t,pointer:e})}this.setCursor(this.freeDrawingCursor),this._handleEvent(t,"move")},_onMouseUpInDrawingMode:function(t){var e=this.getPointer(t);this._isCurrentlyDrawing=this.freeDrawingBrush.onMouseUp({e:t,pointer:e}),this._handleEvent(t,"up")},__onMouseDown:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"down:before");var e=this._target;if(n(t,3))this.fireRightClick&&this._handleEvent(t,"down",3);else if(n(t,2))this.fireMiddleClick&&this._handleEvent(t,"down",2);else if(this.isDrawingMode)this._onMouseDownInDrawingMode(t);else if(this._isMainEvent(t)&&!this._currentTransform){var i=this._pointer;this._previousPointer=i;var r=this._shouldRender(e),o=this._shouldGroup(t,e);if(this._shouldClearSelection(t,e)?this.discardActiveObject(t):o&&(this._handleGrouping(t,e),e=this._activeObject),!this.selection||e&&(e.selectable||e.isEditing||e===this._activeObject)||(this._groupSelector={ex:this._absolutePointer.x,ey:this._absolutePointer.y,top:0,left:0}),e){var s=e===this._activeObject;e.selectable&&"down"===e.activeOn&&this.setActiveObject(e,t);var a=e._findTargetCorner(this.getPointer(t,!0),T.util.isTouchEvent(t));if(e.__corner=a,e===this._activeObject&&(a||!o)){this._setupCurrentTransform(t,e,s);var h=e.controls[a],c=(i=this.getPointer(t),h&&h.getMouseDownHandler(t,e,h));c&&c(t,this._currentTransform,i.x,i.y)}}this._handleEvent(t,"down"),(r||o)&&this.requestRenderAll()}},_resetTransformEventData:function(){this._target=null,this._pointer=null,this._absolutePointer=null},_cacheTransformEventData:function(t){this._resetTransformEventData(),this._pointer=this.getPointer(t,!0),this._absolutePointer=this.restorePointerVpt(this._pointer),this._target=this._currentTransform?this._currentTransform.target:this.findTarget(t)||null},_beforeTransform:function(t){var e=this._currentTransform;this.stateful&&e.target.saveState(),this.fire("before:transform",{e:t,transform:e})},__onMouseMove:function(t){var e,i;if(this._handleEvent(t,"move:before"),this._cacheTransformEventData(t),this.isDrawingMode)this._onMouseMoveInDrawingMode(t);else if(this._isMainEvent(t)){var n=this._groupSelector;n?(i=this._absolutePointer,n.left=i.x-n.ex,n.top=i.y-n.ey,this.renderTop()):this._currentTransform?this._transformObject(t):(e=this.findTarget(t)||null,this._setCursorFromEvent(t,e),this._fireOverOutEvents(e,t)),this._handleEvent(t,"move"),this._resetTransformEventData()}},_fireOverOutEvents:function(t,e){var i=this._hoveredTarget,n=this._hoveredTargets,r=this.targets,o=Math.max(n.length,r.length);this.fireSyntheticInOutEvents(t,e,{oldTarget:i,evtOut:"mouseout",canvasEvtOut:"mouse:out",evtIn:"mouseover",canvasEvtIn:"mouse:over"});for(var s=0;s<o;s++)this.fireSyntheticInOutEvents(r[s],e,{oldTarget:n[s],evtOut:"mouseout",evtIn:"mouseover"});this._hoveredTarget=t,this._hoveredTargets=this.targets.concat()},_fireEnterLeaveEvents:function(t,e){var i=this._draggedoverTarget,n=this._hoveredTargets,r=this.targets,o=Math.max(n.length,r.length);this.fireSyntheticInOutEvents(t,e,{oldTarget:i,evtOut:"dragleave",evtIn:"dragenter"});for(var s=0;s<o;s++)this.fireSyntheticInOutEvents(r[s],e,{oldTarget:n[s],evtOut:"dragleave",evtIn:"dragenter"});this._draggedoverTarget=t},fireSyntheticInOutEvents:function(t,e,i){var n,r,o,s=i.oldTarget,a=s!==t,h=i.canvasEvtIn,c=i.canvasEvtOut;a&&(n={e,target:t,previousTarget:s},r={e,target:s,nextTarget:t}),o=t&&a,s&&a&&(c&&this.fire(c,r),s.fire(i.evtOut,r)),o&&(h&&this.fire(h,n),t.fire(i.evtIn,n))},__onMouseWheel:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"wheel"),this._resetTransformEventData()},_transformObject:function(t){var e=this.getPointer(t),i=this._currentTransform;i.reset=!1,i.shiftKey=t.shiftKey,i.altKey=t[this.centeredKey],this._performTransformAction(t,i,e),i.actionPerformed&&this.requestRenderAll()},_performTransformAction:function(t,e,i){var n=i.x,r=i.y,o=e.action,s=!1,a=e.actionHandler;a&&(s=a(t,e,n,r)),"drag"===o&&s&&(e.target.isMoving=!0,this.setCursor(e.target.moveCursor||this.moveCursor)),e.actionPerformed=e.actionPerformed||s},_fire:T.controlsUtils.fireEvent,_setCursorFromEvent:function(t,e){if(!e)return this.setCursor(this.defaultCursor),!1;var i=e.hoverCursor||this.hoverCursor,n=this._activeObject&&"activeSelection"===this._activeObject.type?this._activeObject:null,r=(!n||!n.contains(e))&&e._findTargetCorner(this.getPointer(t,!0));r?this.setCursor(this.getCornerCursor(r,e,t)):(e.subTargetCheck&&this.targets.concat().reverse().map((function(t){i=t.hoverCursor||i})),this.setCursor(i))},getCornerCursor:function(t,e,i){var n=e.controls[t];return n.cursorStyleHandler(i,n,e)}})}(),m=Math.min,y=Math.max,T.util.object.extend(T.Canvas.prototype,{_shouldGroup:function(t,e){var i=this._activeObject;return i&&this._isSelectionKeyPressed(t)&&e&&e.selectable&&this.selection&&(i!==e||"activeSelection"===i.type)&&!e.onSelect({e:t})},_handleGrouping:function(t,e){var i=this._activeObject;i.__corner||(e!==i||(e=this.findTarget(t,!0))&&e.selectable)&&(i&&"activeSelection"===i.type?this._updateActiveSelection(e,t):this._createActiveSelection(e,t))},_updateActiveSelection:function(t,e){var i=this._activeObject,n=i._objects.slice(0);i.contains(t)?(i.removeWithUpdate(t),this._hoveredTarget=t,this._hoveredTargets=this.targets.concat(),1===i.size()&&this._setActiveObject(i.item(0),e)):(i.addWithUpdate(t),this._hoveredTarget=i,this._hoveredTargets=this.targets.concat()),this._fireSelectionEvents(n,e)},_createActiveSelection:function(t,e){var i=this.getActiveObjects(),n=this._createGroup(t);this._hoveredTarget=n,this._setActiveObject(n,e),this._fireSelectionEvents(i,e)},_createGroup:function(t){var e=this._objects,i=e.indexOf(this._activeObject)<e.indexOf(t)?[this._activeObject,t]:[t,this._activeObject];return this._activeObject.isEditing&&this._activeObject.exitEditing(),new T.ActiveSelection(i,{canvas:this})},_groupSelectedObjects:function(t){var e,i=this._collectObjects(t);1===i.length?this.setActiveObject(i[0],t):i.length>1&&(e=new T.ActiveSelection(i.reverse(),{canvas:this}),this.setActiveObject(e,t))},_collectObjects:function(t){for(var e,i=[],n=this._groupSelector.ex,r=this._groupSelector.ey,o=n+this._groupSelector.left,s=r+this._groupSelector.top,a=new T.Point(m(n,o),m(r,s)),h=new T.Point(y(n,o),y(r,s)),c=!this.selectionFullyContained,l=n===o&&r===s,u=this._objects.length;u--&&!((e=this._objects[u])&&e.selectable&&e.visible&&(c&&e.intersectsWithRect(a,h,!0)||e.isContainedWithinRect(a,h,!0)||c&&e.containsPoint(a,null,!0)||c&&e.containsPoint(h,null,!0))&&(i.push(e),l)););return i.length>1&&(i=i.filter((function(e){return!e.onSelect({e:t})}))),i},_maybeGroupObjects:function(t){this.selection&&this._groupSelector&&this._groupSelectedObjects(t),this.setCursor(this.defaultCursor),this._groupSelector=null}}),T.util.object.extend(T.StaticCanvas.prototype,{toDataURL:function(t){t||(t={});var e=t.format||"png",i=t.quality||1,n=(t.multiplier||1)*(t.enableRetinaScaling?this.getRetinaScaling():1),r=this.toCanvasElement(n,t);return T.util.toDataURL(r,e,i)},toCanvasElement:function(t,e){t=t||1;var i=((e=e||{}).width||this.width)*t,n=(e.height||this.height)*t,r=this.getZoom(),o=this.width,s=this.height,a=r*t,h=this.viewportTransform,c=(h[4]-(e.left||0))*t,l=(h[5]-(e.top||0))*t,u=this.interactive,f=[a,0,0,a,c,l],d=this.enableRetinaScaling,g=T.util.createCanvasElement(),p=this.contextTop;return g.width=i,g.height=n,this.contextTop=null,this.enableRetinaScaling=!1,this.interactive=!1,this.viewportTransform=f,this.width=i,this.height=n,this.calcViewportBoundaries(),this.renderCanvas(g.getContext("2d"),this._objects),this.viewportTransform=h,this.width=o,this.height=s,this.calcViewportBoundaries(),this.interactive=u,this.enableRetinaScaling=d,this.contextTop=p,g}}),T.util.object.extend(T.StaticCanvas.prototype,{loadFromJSON:function(t,e,i){if(t){var n="string"==typeof t?JSON.parse(t):T.util.object.clone(t),r=this,o=n.clipPath,s=this.renderOnAddRemove;return this.renderOnAddRemove=!1,delete n.clipPath,this._enlivenObjects(n.objects,(function(t){r.clear(),r._setBgOverlay(n,(function(){o?r._enlivenObjects([o],(function(i){r.clipPath=i[0],r.__setupCanvas.call(r,n,t,s,e)})):r.__setupCanvas.call(r,n,t,s,e)}))}),i),this}},__setupCanvas:function(t,e,i,n){var r=this;e.forEach((function(t,e){r.insertAt(t,e)})),this.renderOnAddRemove=i,delete t.objects,delete t.backgroundImage,delete t.overlayImage,delete t.background,delete t.overlay,this._setOptions(t),this.renderAll(),n&&n()},_setBgOverlay:function(t,e){var i={backgroundColor:!1,overlayColor:!1,backgroundImage:!1,overlayImage:!1};if(t.backgroundImage||t.overlayImage||t.background||t.overlay){var n=function(){i.backgroundImage&&i.overlayImage&&i.backgroundColor&&i.overlayColor&&e&&e()};this.__setBgOverlay("backgroundImage",t.backgroundImage,i,n),this.__setBgOverlay("overlayImage",t.overlayImage,i,n),this.__setBgOverlay("backgroundColor",t.background,i,n),this.__setBgOverlay("overlayColor",t.overlay,i,n)}else e&&e()},__setBgOverlay:function(t,e,i,n){var r=this;if(!e)return i[t]=!0,void(n&&n());"backgroundImage"===t||"overlayImage"===t?T.util.enlivenObjects([e],(function(e){r[t]=e[0],i[t]=!0,n&&n()})):this["set"+T.util.string.capitalize(t,!0)](e,(function(){i[t]=!0,n&&n()}))},_enlivenObjects:function(t,e,i){t&&0!==t.length?T.util.enlivenObjects(t,(function(t){e&&e(t)}),null,i):e&&e([])},_toDataURL:function(t,e){this.clone((function(i){e(i.toDataURL(t))}))},_toDataURLWithMultiplier:function(t,e,i){this.clone((function(n){i(n.toDataURLWithMultiplier(t,e))}))},clone:function(t,e){var i=JSON.stringify(this.toJSON(e));this.cloneWithoutData((function(e){e.loadFromJSON(i,(function(){t&&t(e)}))}))},cloneWithoutData:function(t){var e=T.util.createCanvasElement();e.width=this.width,e.height=this.height;var i=new T.Canvas(e);this.backgroundImage?(i.setBackgroundImage(this.backgroundImage.src,(function(){i.renderAll(),t&&t(i)})),i.backgroundImageOpacity=this.backgroundImageOpacity,i.backgroundImageStretch=this.backgroundImageStretch):t&&t(i)}}),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.util.object.clone,r=e.util.toFixed,o=e.util.string.capitalize,s=e.util.degreesToRadians,a=!e.isLikelyNode;e.Object||(e.Object=e.util.createClass(e.CommonMethods,{type:"object",originX:"left",originY:"top",top:0,left:0,width:0,height:0,scaleX:1,scaleY:1,flipX:!1,flipY:!1,opacity:1,angle:0,skewX:0,skewY:0,cornerSize:13,touchCornerSize:24,transparentCorners:!0,hoverCursor:null,moveCursor:null,padding:0,borderColor:"rgb(178,204,255)",borderDashArray:null,cornerColor:"rgb(178,204,255)",cornerStrokeColor:null,cornerStyle:"rect",cornerDashArray:null,centeredScaling:!1,centeredRotation:!0,fill:"rgb(0,0,0)",fillRule:"nonzero",globalCompositeOperation:"source-over",backgroundColor:"",selectionBackgroundColor:"",stroke:null,strokeWidth:1,strokeDashArray:null,strokeDashOffset:0,strokeLineCap:"butt",strokeLineJoin:"miter",strokeMiterLimit:4,shadow:null,borderOpacityWhenMoving:.4,borderScaleFactor:1,minScaleLimit:0,selectable:!0,evented:!0,visible:!0,hasControls:!0,hasBorders:!0,perPixelTargetFind:!1,includeDefaultValues:!0,lockMovementX:!1,lockMovementY:!1,lockRotation:!1,lockScalingX:!1,lockScalingY:!1,lockSkewingX:!1,lockSkewingY:!1,lockScalingFlip:!1,excludeFromExport:!1,objectCaching:a,statefullCache:!1,noScaleCache:!0,strokeUniform:!1,dirty:!0,__corner:0,paintFirst:"fill",activeOn:"down",stateProperties:"top left width height scaleX scaleY flipX flipY originX originY transformMatrix stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit angle opacity fill globalCompositeOperation shadow visible backgroundColor skewX skewY fillRule paintFirst clipPath strokeUniform".split(" "),cacheProperties:"fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath".split(" "),colorProperties:"fill stroke backgroundColor".split(" "),clipPath:void 0,inverted:!1,absolutePositioned:!1,initialize:function(t){t&&this.setOptions(t)},_createCacheCanvas:function(){this._cacheProperties={},this._cacheCanvas=e.util.createCanvasElement(),this._cacheContext=this._cacheCanvas.getContext("2d"),this._updateCacheCanvas(),this.dirty=!0},_limitCacheSize:function(t){var i=e.perfLimitSizeTotal,n=t.width,r=t.height,o=e.maxCacheSideLimit,s=e.minCacheSideLimit;if(n<=o&&r<=o&&n*r<=i)return n<s&&(t.width=s),r<s&&(t.height=s),t;var a=n/r,h=e.util.limitDimsByArea(a,i),c=e.util.capValue,l=c(s,h.x,o),u=c(s,h.y,o);return n>l&&(t.zoomX/=n/l,t.width=l,t.capped=!0),r>u&&(t.zoomY/=r/u,t.height=u,t.capped=!0),t},_getCacheCanvasDimensions:function(){var t=this.getTotalObjectScaling(),e=this._getTransformedDimensions(0,0),i=e.x*t.scaleX/this.scaleX,n=e.y*t.scaleY/this.scaleY;return{width:i+2,height:n+2,zoomX:t.scaleX,zoomY:t.scaleY,x:i,y:n}},_updateCacheCanvas:function(){var t=this.canvas;if(this.noScaleCache&&t&&t._currentTransform){var i=t._currentTransform.target,n=t._currentTransform.action;if(this===i&&n.slice&&"scale"===n.slice(0,5))return!1}var r,o,s=this._cacheCanvas,a=this._limitCacheSize(this._getCacheCanvasDimensions()),h=e.minCacheSideLimit,c=a.width,l=a.height,u=a.zoomX,f=a.zoomY,d=c!==this.cacheWidth||l!==this.cacheHeight,g=this.zoomX!==u||this.zoomY!==f,p=d||g,v=0,m=0,y=!1;if(d){var _=this._cacheCanvas.width,x=this._cacheCanvas.height,b=c>_||l>x;y=b||(c<.9*_||l<.9*x)&&_>h&&x>h,b&&!a.capped&&(c>h||l>h)&&(v=.1*c,m=.1*l)}return this instanceof e.Text&&this.path&&(p=!0,y=!0,v+=this.getHeightOfLine(0)*this.zoomX,m+=this.getHeightOfLine(0)*this.zoomY),!!p&&(y?(s.width=Math.ceil(c+v),s.height=Math.ceil(l+m)):(this._cacheContext.setTransform(1,0,0,1,0,0),this._cacheContext.clearRect(0,0,s.width,s.height)),r=a.x/2,o=a.y/2,this.cacheTranslationX=Math.round(s.width/2-r)+r,this.cacheTranslationY=Math.round(s.height/2-o)+o,this.cacheWidth=c,this.cacheHeight=l,this._cacheContext.translate(this.cacheTranslationX,this.cacheTranslationY),this._cacheContext.scale(u,f),this.zoomX=u,this.zoomY=f,!0)},setOptions:function(t){this._setOptions(t),this._initGradient(t.fill,"fill"),this._initGradient(t.stroke,"stroke"),this._initPattern(t.fill,"fill"),this._initPattern(t.stroke,"stroke")},transform:function(t){var e=this.group&&!this.group._transformDone||this.group&&this.canvas&&t===this.canvas.contextTop,i=this.calcTransformMatrix(!e);t.transform(i[0],i[1],i[2],i[3],i[4],i[5])},toObject:function(t){var i=e.Object.NUM_FRACTION_DIGITS,n={type:this.type,version:e.version,originX:this.originX,originY:this.originY,left:r(this.left,i),top:r(this.top,i),width:r(this.width,i),height:r(this.height,i),fill:this.fill&&this.fill.toObject?this.fill.toObject():this.fill,stroke:this.stroke&&this.stroke.toObject?this.stroke.toObject():this.stroke,strokeWidth:r(this.strokeWidth,i),strokeDashArray:this.strokeDashArray?this.strokeDashArray.concat():this.strokeDashArray,strokeLineCap:this.strokeLineCap,strokeDashOffset:this.strokeDashOffset,strokeLineJoin:this.strokeLineJoin,strokeUniform:this.strokeUniform,strokeMiterLimit:r(this.strokeMiterLimit,i),scaleX:r(this.scaleX,i),scaleY:r(this.scaleY,i),angle:r(this.angle,i),flipX:this.flipX,flipY:this.flipY,opacity:r(this.opacity,i),shadow:this.shadow&&this.shadow.toObject?this.shadow.toObject():this.shadow,visible:this.visible,backgroundColor:this.backgroundColor,fillRule:this.fillRule,paintFirst:this.paintFirst,globalCompositeOperation:this.globalCompositeOperation,skewX:r(this.skewX,i),skewY:r(this.skewY,i)};return this.clipPath&&!this.clipPath.excludeFromExport&&(n.clipPath=this.clipPath.toObject(t),n.clipPath.inverted=this.clipPath.inverted,n.clipPath.absolutePositioned=this.clipPath.absolutePositioned),e.util.populateWithProperties(this,n,t),this.includeDefaultValues||(n=this._removeDefaultValues(n)),n},toDatalessObject:function(t){return this.toObject(t)},_removeDefaultValues:function(t){var i=e.util.getKlass(t.type).prototype;return i.stateProperties.forEach((function(e){"left"!==e&&"top"!==e&&(t[e]===i[e]&&delete t[e],Array.isArray(t[e])&&Array.isArray(i[e])&&0===t[e].length&&0===i[e].length&&delete t[e])})),t},toString:function(){return"#<fabric."+o(this.type)+">"},getObjectScaling:function(){if(!this.group)return{scaleX:this.scaleX,scaleY:this.scaleY};var t=e.util.qrDecompose(this.calcTransformMatrix());return{scaleX:Math.abs(t.scaleX),scaleY:Math.abs(t.scaleY)}},getTotalObjectScaling:function(){var t=this.getObjectScaling(),e=t.scaleX,i=t.scaleY;if(this.canvas){var n=this.canvas.getZoom(),r=this.canvas.getRetinaScaling();e*=n*r,i*=n*r}return{scaleX:e,scaleY:i}},getObjectOpacity:function(){var t=this.opacity;return this.group&&(t*=this.group.getObjectOpacity()),t},_set:function(t,i){var n="scaleX"===t||"scaleY"===t,r=this[t]!==i,o=!1;return n&&(i=this._constrainScale(i)),"scaleX"===t&&i<0?(this.flipX=!this.flipX,i*=-1):"scaleY"===t&&i<0?(this.flipY=!this.flipY,i*=-1):"shadow"!==t||!i||i instanceof e.Shadow?"dirty"===t&&this.group&&this.group.set("dirty",i):i=new e.Shadow(i),this[t]=i,r&&(o=this.group&&this.group.isOnACache(),this.cacheProperties.indexOf(t)>-1?(this.dirty=!0,o&&this.group.set("dirty",!0)):o&&this.stateProperties.indexOf(t)>-1&&this.group.set("dirty",!0)),this},setOnGroup:function(){},getViewportTransform:function(){return this.canvas&&this.canvas.viewportTransform?this.canvas.viewportTransform:e.iMatrix.concat()},isNotVisible:function(){return 0===this.opacity||!this.width&&!this.height&&0===this.strokeWidth||!this.visible},render:function(t){this.isNotVisible()||this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(t.save(),this._setupCompositeOperation(t),this.drawSelectionBackground(t),this.transform(t),this._setOpacity(t),this._setShadow(t,this),this.shouldCache()?(this.renderCache(),this.drawCacheOnCanvas(t)):(this._removeCacheCanvas(),this.dirty=!1,this.drawObject(t),this.objectCaching&&this.statefullCache&&this.saveState({propertySet:"cacheProperties"})),t.restore())},renderCache:function(t){t=t||{},this._cacheCanvas&&this._cacheContext||this._createCacheCanvas(),this.isCacheDirty()&&(this.statefullCache&&this.saveState({propertySet:"cacheProperties"}),this.drawObject(this._cacheContext,t.forClipping),this.dirty=!1)},_removeCacheCanvas:function(){this._cacheCanvas=null,this._cacheContext=null,this.cacheWidth=0,this.cacheHeight=0},hasStroke:function(){return this.stroke&&"transparent"!==this.stroke&&0!==this.strokeWidth},hasFill:function(){return this.fill&&"transparent"!==this.fill},needsItsOwnCache:function(){return!("stroke"!==this.paintFirst||!this.hasFill()||!this.hasStroke()||"object"!=typeof this.shadow)||!!this.clipPath},shouldCache:function(){return this.ownCaching=this.needsItsOwnCache()||this.objectCaching&&(!this.group||!this.group.isOnACache()),this.ownCaching},willDrawShadow:function(){return!!this.shadow&&(0!==this.shadow.offsetX||0!==this.shadow.offsetY)},drawClipPathOnCache:function(t,i){if(t.save(),i.inverted?t.globalCompositeOperation="destination-out":t.globalCompositeOperation="destination-in",i.absolutePositioned){var n=e.util.invertTransform(this.calcTransformMatrix());t.transform(n[0],n[1],n[2],n[3],n[4],n[5])}i.transform(t),t.scale(1/i.zoomX,1/i.zoomY),t.drawImage(i._cacheCanvas,-i.cacheTranslationX,-i.cacheTranslationY),t.restore()},drawObject:function(t,e){var i=this.fill,n=this.stroke;e?(this.fill="black",this.stroke="",this._setClippingProperties(t)):this._renderBackground(t),this._render(t),this._drawClipPath(t,this.clipPath),this.fill=i,this.stroke=n},_drawClipPath:function(t,e){e&&(e.canvas=this.canvas,e.shouldCache(),e._transformDone=!0,e.renderCache({forClipping:!0}),this.drawClipPathOnCache(t,e))},drawCacheOnCanvas:function(t){t.scale(1/this.zoomX,1/this.zoomY),t.drawImage(this._cacheCanvas,-this.cacheTranslationX,-this.cacheTranslationY)},isCacheDirty:function(t){if(this.isNotVisible())return!1;if(this._cacheCanvas&&this._cacheContext&&!t&&this._updateCacheCanvas())return!0;if(this.dirty||this.clipPath&&this.clipPath.absolutePositioned||this.statefullCache&&this.hasStateChanged("cacheProperties")){if(this._cacheCanvas&&this._cacheContext&&!t){var e=this.cacheWidth/this.zoomX,i=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-e/2,-i/2,e,i)}return!0}return!1},_renderBackground:function(t){if(this.backgroundColor){var e=this._getNonTransformedDimensions();t.fillStyle=this.backgroundColor,t.fillRect(-e.x/2,-e.y/2,e.x,e.y),this._removeShadow(t)}},_setOpacity:function(t){this.group&&!this.group._transformDone?t.globalAlpha=this.getObjectOpacity():t.globalAlpha*=this.opacity},_setStrokeStyles:function(t,e){var i=e.stroke;i&&(t.lineWidth=e.strokeWidth,t.lineCap=e.strokeLineCap,t.lineDashOffset=e.strokeDashOffset,t.lineJoin=e.strokeLineJoin,t.miterLimit=e.strokeMiterLimit,i.toLive?"percentage"===i.gradientUnits||i.gradientTransform||i.patternTransform?this._applyPatternForTransformedGradient(t,i):(t.strokeStyle=i.toLive(t,this),this._applyPatternGradientTransform(t,i)):t.strokeStyle=e.stroke)},_setFillStyles:function(t,e){var i=e.fill;i&&(i.toLive?(t.fillStyle=i.toLive(t,this),this._applyPatternGradientTransform(t,e.fill)):t.fillStyle=i)},_setClippingProperties:function(t){t.globalAlpha=1,t.strokeStyle="transparent",t.fillStyle="#000000"},_setLineDash:function(t,e){e&&0!==e.length&&(1&e.length&&e.push.apply(e,e),t.setLineDash(e))},_renderControls:function(t,i){var n,r,o,a=this.getViewportTransform(),h=this.calcTransformMatrix();r=void 0!==(i=i||{}).hasBorders?i.hasBorders:this.hasBorders,o=void 0!==i.hasControls?i.hasControls:this.hasControls,h=e.util.multiplyTransformMatrices(a,h),n=e.util.qrDecompose(h),t.save(),t.translate(n.translateX,n.translateY),t.lineWidth=1*this.borderScaleFactor,this.group||(t.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1),this.flipX&&(n.angle-=180),t.rotate(s(this.group?n.angle:this.angle)),i.forActiveSelection||this.group?r&&this.drawBordersInGroup(t,n,i):r&&this.drawBorders(t,i),o&&this.drawControls(t,i),t.restore()},_setShadow:function(t){if(this.shadow){var i,n=this.shadow,r=this.canvas,o=r&&r.viewportTransform[0]||1,s=r&&r.viewportTransform[3]||1;i=n.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),r&&r._isRetinaScaling()&&(o*=e.devicePixelRatio,s*=e.devicePixelRatio),t.shadowColor=n.color,t.shadowBlur=n.blur*e.browserShadowBlurConstant*(o+s)*(i.scaleX+i.scaleY)/4,t.shadowOffsetX=n.offsetX*o*i.scaleX,t.shadowOffsetY=n.offsetY*s*i.scaleY}},_removeShadow:function(t){this.shadow&&(t.shadowColor="",t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0)},_applyPatternGradientTransform:function(t,e){if(!e||!e.toLive)return{offsetX:0,offsetY:0};var i=e.gradientTransform||e.patternTransform,n=-this.width/2+e.offsetX||0,r=-this.height/2+e.offsetY||0;return"percentage"===e.gradientUnits?t.transform(this.width,0,0,this.height,n,r):t.transform(1,0,0,1,n,r),i&&t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),{offsetX:n,offsetY:r}},_renderPaintInOrder:function(t){"stroke"===this.paintFirst?(this._renderStroke(t),this._renderFill(t)):(this._renderFill(t),this._renderStroke(t))},_render:function(){},_renderFill:function(t){this.fill&&(t.save(),this._setFillStyles(t,this),"evenodd"===this.fillRule?t.fill("evenodd"):t.fill(),t.restore())},_renderStroke:function(t){if(this.stroke&&0!==this.strokeWidth){if(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(t),t.save(),this.strokeUniform&&this.group){var e=this.getObjectScaling();t.scale(1/e.scaleX,1/e.scaleY)}else this.strokeUniform&&t.scale(1/this.scaleX,1/this.scaleY);this._setLineDash(t,this.strokeDashArray),this._setStrokeStyles(t,this),t.stroke(),t.restore()}},_applyPatternForTransformedGradient:function(t,i){var n,r=this._limitCacheSize(this._getCacheCanvasDimensions()),o=e.util.createCanvasElement(),s=this.canvas.getRetinaScaling(),a=r.x/this.scaleX/s,h=r.y/this.scaleY/s;o.width=a,o.height=h,(n=o.getContext("2d")).beginPath(),n.moveTo(0,0),n.lineTo(a,0),n.lineTo(a,h),n.lineTo(0,h),n.closePath(),n.translate(a/2,h/2),n.scale(r.zoomX/this.scaleX/s,r.zoomY/this.scaleY/s),this._applyPatternGradientTransform(n,i),n.fillStyle=i.toLive(t),n.fill(),t.translate(-this.width/2-this.strokeWidth/2,-this.height/2-this.strokeWidth/2),t.scale(s*this.scaleX/r.zoomX,s*this.scaleY/r.zoomY),t.strokeStyle=n.createPattern(o,"no-repeat")},_findCenterFromElement:function(){return{x:this.left+this.width/2,y:this.top+this.height/2}},_assignTransformMatrixProps:function(){if(this.transformMatrix){var t=e.util.qrDecompose(this.transformMatrix);this.flipX=!1,this.flipY=!1,this.set("scaleX",t.scaleX),this.set("scaleY",t.scaleY),this.angle=t.angle,this.skewX=t.skewX,this.skewY=0}},_removeTransformMatrix:function(t){var i=this._findCenterFromElement();this.transformMatrix&&(this._assignTransformMatrixProps(),i=e.util.transformPoint(i,this.transformMatrix)),this.transformMatrix=null,t&&(this.scaleX*=t.scaleX,this.scaleY*=t.scaleY,this.cropX=t.cropX,this.cropY=t.cropY,i.x+=t.offsetLeft,i.y+=t.offsetTop,this.width=t.width,this.height=t.height),this.setPositionByOrigin(i,"center","center")},clone:function(t,i){var n=this.toObject(i);this.constructor.fromObject?this.constructor.fromObject(n,t):e.Object._fromObject("Object",n,t)},cloneAsImage:function(t,i){var n=this.toCanvasElement(i);return t&&t(new e.Image(n)),this},toCanvasElement:function(t){t||(t={});var i=e.util,n=i.saveObjectTransform(this),r=this.group,o=this.shadow,s=Math.abs,a=(t.multiplier||1)*(t.enableRetinaScaling?e.devicePixelRatio:1);delete this.group,t.withoutTransform&&i.resetObjectTransform(this),t.withoutShadow&&(this.shadow=null);var h,c,l,u,f=e.util.createCanvasElement(),d=this.getBoundingRect(!0,!0),g=this.shadow,p={x:0,y:0};g&&(c=g.blur,h=g.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),p.x=2*Math.round(s(g.offsetX)+c)*s(h.scaleX),p.y=2*Math.round(s(g.offsetY)+c)*s(h.scaleY)),l=d.width+p.x,u=d.height+p.y,f.width=Math.ceil(l),f.height=Math.ceil(u);var v=new e.StaticCanvas(f,{enableRetinaScaling:!1,renderOnAddRemove:!1,skipOffscreen:!1});"jpeg"===t.format&&(v.backgroundColor="#fff"),this.setPositionByOrigin(new e.Point(v.width/2,v.height/2),"center","center");var m=this.canvas;v.add(this);var y=v.toCanvasElement(a||1,t);return this.shadow=o,this.set("canvas",m),r&&(this.group=r),this.set(n).setCoords(),v._objects=[],v.dispose(),v=null,y},toDataURL:function(t){return t||(t={}),e.util.toDataURL(this.toCanvasElement(t),t.format||"png",t.quality||1)},isType:function(t){return arguments.length>1?Array.from(arguments).includes(this.type):this.type===t},complexity:function(){return 1},toJSON:function(t){return this.toObject(t)},rotate:function(t){var e=("center"!==this.originX||"center"!==this.originY)&&this.centeredRotation;return e&&this._setOriginToCenter(),this.set("angle",t),e&&this._resetOrigin(),this},centerH:function(){return this.canvas&&this.canvas.centerObjectH(this),this},viewportCenterH:function(){return this.canvas&&this.canvas.viewportCenterObjectH(this),this},centerV:function(){return this.canvas&&this.canvas.centerObjectV(this),this},viewportCenterV:function(){return this.canvas&&this.canvas.viewportCenterObjectV(this),this},center:function(){return this.canvas&&this.canvas.centerObject(this),this},viewportCenter:function(){return this.canvas&&this.canvas.viewportCenterObject(this),this},getLocalPointer:function(t,i){i=i||this.canvas.getPointer(t);var n=new e.Point(i.x,i.y),r=this._getLeftTopCoords();return this.angle&&(n=e.util.rotatePoint(n,r,s(-this.angle))),{x:n.x-r.x,y:n.y-r.y}},_setupCompositeOperation:function(t){this.globalCompositeOperation&&(t.globalCompositeOperation=this.globalCompositeOperation)},dispose:function(){e.runningAnimations&&e.runningAnimations.cancelByTarget(this)}}),e.util.createAccessors&&e.util.createAccessors(e.Object),i(e.Object.prototype,e.Observable),e.Object.NUM_FRACTION_DIGITS=2,e.Object.ENLIVEN_PROPS=["clipPath"],e.Object._fromObject=function(t,i,r,o){var s=e[t];i=n(i,!0),e.util.enlivenPatterns([i.fill,i.stroke],(function(t){void 0!==t[0]&&(i.fill=t[0]),void 0!==t[1]&&(i.stroke=t[1]),e.util.enlivenObjectEnlivables(i,i,(function(){var t=o?new s(i[o],i):new s(i);r&&r(t)}))}))},e.Object.__uid=0)}(e),_=T.util.degreesToRadians,x={left:-.5,center:0,right:.5},b={top:-.5,center:0,bottom:.5},T.util.object.extend(T.Object.prototype,{translateToGivenOrigin:function(t,e,i,n,r){var o,s,a,h=t.x,c=t.y;return"string"==typeof e?e=x[e]:e-=.5,"string"==typeof n?n=x[n]:n-=.5,"string"==typeof i?i=b[i]:i-=.5,"string"==typeof r?r=b[r]:r-=.5,s=r-i,((o=n-e)||s)&&(a=this._getTransformedDimensions(),h=t.x+o*a.x,c=t.y+s*a.y),new T.Point(h,c)},translateToCenterPoint:function(t,e,i){var n=this.translateToGivenOrigin(t,e,i,"center","center");return this.angle?T.util.rotatePoint(n,t,_(this.angle)):n},translateToOriginPoint:function(t,e,i){var n=this.translateToGivenOrigin(t,"center","center",e,i);return this.angle?T.util.rotatePoint(n,t,_(this.angle)):n},getCenterPoint:function(){var t=new T.Point(this.left,this.top);return this.translateToCenterPoint(t,this.originX,this.originY)},getPointByOrigin:function(t,e){var i=this.getCenterPoint();return this.translateToOriginPoint(i,t,e)},toLocalPoint:function(t,e,i){var n,r,o=this.getCenterPoint();return n=void 0!==e&&void 0!==i?this.translateToGivenOrigin(o,"center","center",e,i):new T.Point(this.left,this.top),r=new T.Point(t.x,t.y),this.angle&&(r=T.util.rotatePoint(r,o,-_(this.angle))),r.subtractEquals(n)},setPositionByOrigin:function(t,e,i){var n=this.translateToCenterPoint(t,e,i),r=this.translateToOriginPoint(n,this.originX,this.originY);this.set("left",r.x),this.set("top",r.y)},adjustPosition:function(t){var e,i,n=_(this.angle),r=this.getScaledWidth(),o=T.util.cos(n)*r,s=T.util.sin(n)*r;e="string"==typeof this.originX?x[this.originX]:this.originX-.5,i="string"==typeof t?x[t]:t-.5,this.left+=o*(i-e),this.top+=s*(i-e),this.setCoords(),this.originX=t},_setOriginToCenter:function(){this._originalOriginX=this.originX,this._originalOriginY=this.originY;var t=this.getCenterPoint();this.originX="center",this.originY="center",this.left=t.x,this.top=t.y},_resetOrigin:function(){var t=this.translateToOriginPoint(this.getCenterPoint(),this._originalOriginX,this._originalOriginY);this.originX=this._originalOriginX,this.originY=this._originalOriginY,this.left=t.x,this.top=t.y,this._originalOriginX=null,this._originalOriginY=null},_getLeftTopCoords:function(){return this.translateToOriginPoint(this.getCenterPoint(),"left","top")}}),function(){var t=T.util,e=t.degreesToRadians,i=t.multiplyTransformMatrices,n=t.transformPoint;t.object.extend(T.Object.prototype,{oCoords:null,aCoords:null,lineCoords:null,ownMatrixCache:null,matrixCache:null,controls:{},_getCoords:function(t,e){return e?t?this.calcACoords():this.calcLineCoords():(this.aCoords&&this.lineCoords||this.setCoords(!0),t?this.aCoords:this.lineCoords)},getCoords:function(t,e){return i=this._getCoords(t,e),[new T.Point(i.tl.x,i.tl.y),new T.Point(i.tr.x,i.tr.y),new T.Point(i.br.x,i.br.y),new T.Point(i.bl.x,i.bl.y)];var i},intersectsWithRect:function(t,e,i,n){var r=this.getCoords(i,n);return"Intersection"===T.Intersection.intersectPolygonRectangle(r,t,e).status},intersectsWithObject:function(t,e,i){return"Intersection"===T.Intersection.intersectPolygonPolygon(this.getCoords(e,i),t.getCoords(e,i)).status||t.isContainedWithinObject(this,e,i)||this.isContainedWithinObject(t,e,i)},isContainedWithinObject:function(t,e,i){for(var n=this.getCoords(e,i),r=e?t.aCoords:t.lineCoords,o=0,s=t._getImageLines(r);o<4;o++)if(!t.containsPoint(n[o],s))return!1;return!0},isContainedWithinRect:function(t,e,i,n){var r=this.getBoundingRect(i,n);return r.left>=t.x&&r.left+r.width<=e.x&&r.top>=t.y&&r.top+r.height<=e.y},containsPoint:function(t,e,i,n){var r=this._getCoords(i,n),o=(e=e||this._getImageLines(r),this._findCrossPoints(t,e));return 0!==o&&o%2==1},isOnScreen:function(t){if(!this.canvas)return!1;var e=this.canvas.vptCoords.tl,i=this.canvas.vptCoords.br;return!!this.getCoords(!0,t).some((function(t){return t.x<=i.x&&t.x>=e.x&&t.y<=i.y&&t.y>=e.y}))||!!this.intersectsWithRect(e,i,!0,t)||this._containsCenterOfCanvas(e,i,t)},_containsCenterOfCanvas:function(t,e,i){var n={x:(t.x+e.x)/2,y:(t.y+e.y)/2};return!!this.containsPoint(n,null,!0,i)},isPartiallyOnScreen:function(t){if(!this.canvas)return!1;var e=this.canvas.vptCoords.tl,i=this.canvas.vptCoords.br;return!!this.intersectsWithRect(e,i,!0,t)||this.getCoords(!0,t).every((function(t){return(t.x>=i.x||t.x<=e.x)&&(t.y>=i.y||t.y<=e.y)}))&&this._containsCenterOfCanvas(e,i,t)},_getImageLines:function(t){return{topline:{o:t.tl,d:t.tr},rightline:{o:t.tr,d:t.br},bottomline:{o:t.br,d:t.bl},leftline:{o:t.bl,d:t.tl}}},_findCrossPoints:function(t,e){var i,n,r,o=0;for(var s in e)if(!((r=e[s]).o.y<t.y&&r.d.y<t.y||r.o.y>=t.y&&r.d.y>=t.y||(r.o.x===r.d.x&&r.o.x>=t.x?n=r.o.x:(i=(r.d.y-r.o.y)/(r.d.x-r.o.x),n=-(t.y-0*t.x-(r.o.y-i*r.o.x))/(0-i)),n>=t.x&&(o+=1),2!==o)))break;return o},getBoundingRect:function(e,i){var n=this.getCoords(e,i);return t.makeBoundingBoxFromPoints(n)},getScaledWidth:function(){return this._getTransformedDimensions().x},getScaledHeight:function(){return this._getTransformedDimensions().y},_constrainScale:function(t){return Math.abs(t)<this.minScaleLimit?t<0?-this.minScaleLimit:this.minScaleLimit:0===t?1e-4:t},scale:function(t){return this._set("scaleX",t),this._set("scaleY",t),this.setCoords()},scaleToWidth:function(t,e){var i=this.getBoundingRect(e).width/this.getScaledWidth();return this.scale(t/this.width/i)},scaleToHeight:function(t,e){var i=this.getBoundingRect(e).height/this.getScaledHeight();return this.scale(t/this.height/i)},calcLineCoords:function(){var i=this.getViewportTransform(),r=this.padding,o=e(this.angle),s=t.cos(o)*r,a=t.sin(o)*r,h=s+a,c=s-a,l=this.calcACoords(),u={tl:n(l.tl,i),tr:n(l.tr,i),bl:n(l.bl,i),br:n(l.br,i)};return r&&(u.tl.x-=c,u.tl.y-=h,u.tr.x+=h,u.tr.y-=c,u.bl.x-=h,u.bl.y+=c,u.br.x+=c,u.br.y+=h),u},calcOCoords:function(){var t=this._calcRotateMatrix(),e=this._calcTranslateMatrix(),n=this.getViewportTransform(),r=i(n,e),o=i(r,t),s=(o=i(o,[1/n[0],0,0,1/n[3],0,0]),this._calculateCurrentDimensions()),a={};return this.forEachControl((function(t,e,i){a[e]=t.positionHandler(s,o,i)})),a},calcACoords:function(){var t=this._calcRotateMatrix(),e=this._calcTranslateMatrix(),r=i(e,t),o=this._getTransformedDimensions(),s=o.x/2,a=o.y/2;return{tl:n({x:-s,y:-a},r),tr:n({x:s,y:-a},r),bl:n({x:-s,y:a},r),br:n({x:s,y:a},r)}},setCoords:function(t){return this.aCoords=this.calcACoords(),this.lineCoords=this.group?this.aCoords:this.calcLineCoords(),t||(this.oCoords=this.calcOCoords(),this._setCornerCoords&&this._setCornerCoords()),this},_calcRotateMatrix:function(){return t.calcRotateMatrix(this)},_calcTranslateMatrix:function(){var t=this.getCenterPoint();return[1,0,0,1,t.x,t.y]},transformMatrixKey:function(t){var e="_",i="";return!t&&this.group&&(i=this.group.transformMatrixKey(t)+e),i+this.top+e+this.left+e+this.scaleX+e+this.scaleY+e+this.skewX+e+this.skewY+e+this.angle+e+this.originX+e+this.originY+e+this.width+e+this.height+e+this.strokeWidth+this.flipX+this.flipY},calcTransformMatrix:function(t){var e=this.calcOwnMatrix();if(t||!this.group)return e;var n=this.transformMatrixKey(t),r=this.matrixCache||(this.matrixCache={});return r.key===n?r.value:(this.group&&(e=i(this.group.calcTransformMatrix(!1),e)),r.key=n,r.value=e,e)},calcOwnMatrix:function(){var e=this.transformMatrixKey(!0),i=this.ownMatrixCache||(this.ownMatrixCache={});if(i.key===e)return i.value;var n=this._calcTranslateMatrix(),r={angle:this.angle,translateX:n[4],translateY:n[5],scaleX:this.scaleX,scaleY:this.scaleY,skewX:this.skewX,skewY:this.skewY,flipX:this.flipX,flipY:this.flipY};return i.key=e,i.value=t.composeMatrix(r),i.value},_getNonTransformedDimensions:function(){var t=this.strokeWidth;return{x:this.width+t,y:this.height+t}},_getTransformedDimensions:function(e,i){void 0===e&&(e=this.skewX),void 0===i&&(i=this.skewY);var n,r,o,s=0===e&&0===i;if(this.strokeUniform?(r=this.width,o=this.height):(r=(n=this._getNonTransformedDimensions()).x,o=n.y),s)return this._finalizeDimensions(r*this.scaleX,o*this.scaleY);var a=t.sizeAfterTransform(r,o,{scaleX:this.scaleX,scaleY:this.scaleY,skewX:e,skewY:i});return this._finalizeDimensions(a.x,a.y)},_finalizeDimensions:function(t,e){return this.strokeUniform?{x:t+this.strokeWidth,y:e+this.strokeWidth}:{x:t,y:e}},_calculateCurrentDimensions:function(){var t=this.getViewportTransform(),e=this._getTransformedDimensions();return n(e,t,!0).scalarAdd(2*this.padding)}})}(),T.util.object.extend(T.Object.prototype,{sendToBack:function(){return this.group?T.StaticCanvas.prototype.sendToBack.call(this.group,this):this.canvas&&this.canvas.sendToBack(this),this},bringToFront:function(){return this.group?T.StaticCanvas.prototype.bringToFront.call(this.group,this):this.canvas&&this.canvas.bringToFront(this),this},sendBackwards:function(t){return this.group?T.StaticCanvas.prototype.sendBackwards.call(this.group,this,t):this.canvas&&this.canvas.sendBackwards(this,t),this},bringForward:function(t){return this.group?T.StaticCanvas.prototype.bringForward.call(this.group,this,t):this.canvas&&this.canvas.bringForward(this,t),this},moveTo:function(t){return this.group&&"activeSelection"!==this.group.type?T.StaticCanvas.prototype.moveTo.call(this.group,this,t):this.canvas&&this.canvas.moveTo(this,t),this}}),function(){function t(t,e){if(e){if(e.toLive)return t+": url(#SVGID_"+e.id+"); ";var i=new T.Color(e),n=t+": "+i.toRgb()+"; ",r=i.getAlpha();return 1!==r&&(n+=t+"-opacity: "+r.toString()+"; "),n}return t+": none; "}var e=T.util.toFixed;T.util.object.extend(T.Object.prototype,{getSvgStyles:function(e){var i=this.fillRule?this.fillRule:"nonzero",n=this.strokeWidth?this.strokeWidth:"0",r=this.strokeDashArray?this.strokeDashArray.join(" "):"none",o=this.strokeDashOffset?this.strokeDashOffset:"0",s=this.strokeLineCap?this.strokeLineCap:"butt",a=this.strokeLineJoin?this.strokeLineJoin:"miter",h=this.strokeMiterLimit?this.strokeMiterLimit:"4",c=void 0!==this.opacity?this.opacity:"1",l=this.visible?"":" visibility: hidden;",u=e?"":this.getSvgFilter(),f=t("fill",this.fill);return[t("stroke",this.stroke),"stroke-width: ",n,"; ","stroke-dasharray: ",r,"; ","stroke-linecap: ",s,"; ","stroke-dashoffset: ",o,"; ","stroke-linejoin: ",a,"; ","stroke-miterlimit: ",h,"; ",f,"fill-rule: ",i,"; ","opacity: ",c,";",u,l].join("")},getSvgSpanStyles:function(e,i){var n="; ",r=e.fontFamily?"font-family: "+(-1===e.fontFamily.indexOf("'")&&-1===e.fontFamily.indexOf('"')?"'"+e.fontFamily+"'":e.fontFamily)+n:"",o=e.strokeWidth?"stroke-width: "+e.strokeWidth+n:"",s=e.fontSize?"font-size: "+e.fontSize+"px"+n:"",a=e.fontStyle?"font-style: "+e.fontStyle+n:"",h=e.fontWeight?"font-weight: "+e.fontWeight+n:"",c=e.fill?t("fill",e.fill):"",l=e.stroke?t("stroke",e.stroke):"",u=this.getSvgTextDecoration(e);return u&&(u="text-decoration: "+u+n),[l,o,r,s,a,h,u,c,e.deltaY?"baseline-shift: "+-e.deltaY+"; ":"",i?"white-space: pre; ":""].join("")},getSvgTextDecoration:function(t){return["overline","underline","line-through"].filter((function(e){return t[e.replace("-","")]})).join(" ")},getSvgFilter:function(){return this.shadow?"filter: url(#SVGID_"+this.shadow.id+");":""},getSvgCommons:function(){return[this.id?'id="'+this.id+'" ':"",this.clipPath?'clip-path="url(#'+this.clipPath.clipPathId+')" ':""].join("")},getSvgTransform:function(t,e){var i=t?this.calcTransformMatrix():this.calcOwnMatrix();return'transform="'+T.util.matrixToSVG(i)+(e||"")+'" '},_setSVGBg:function(t){if(this.backgroundColor){var i=T.Object.NUM_FRACTION_DIGITS;t.push("\t\t<rect ",this._getFillAttributes(this.backgroundColor),' x="',e(-this.width/2,i),'" y="',e(-this.height/2,i),'" width="',e(this.width,i),'" height="',e(this.height,i),'"></rect>\n')}},toSVG:function(t){return this._createBaseSVGMarkup(this._toSVG(t),{reviver:t})},toClipPathSVG:function(t){return"\t"+this._createBaseClipPathSVGMarkup(this._toSVG(t),{reviver:t})},_createBaseClipPathSVGMarkup:function(t,e){var i=(e=e||{}).reviver,n=e.additionalTransform||"",r=[this.getSvgTransform(!0,n),this.getSvgCommons()].join(""),o=t.indexOf("COMMON_PARTS");return t[o]=r,i?i(t.join("")):t.join("")},_createBaseSVGMarkup:function(t,e){var i,n,r=(e=e||{}).noStyle,o=e.reviver,s=r?"":'style="'+this.getSvgStyles()+'" ',a=e.withShadow?'style="'+this.getSvgFilter()+'" ':"",h=this.clipPath,c=this.strokeUniform?'vector-effect="non-scaling-stroke" ':"",l=h&&h.absolutePositioned,u=this.stroke,f=this.fill,d=this.shadow,g=[],p=t.indexOf("COMMON_PARTS"),v=e.additionalTransform;return h&&(h.clipPathId="CLIPPATH_"+T.Object.__uid++,n='<clipPath id="'+h.clipPathId+'" >\n'+h.toClipPathSVG(o)+"</clipPath>\n"),l&&g.push("<g ",a,this.getSvgCommons()," >\n"),g.push("<g ",this.getSvgTransform(!1),l?"":a+this.getSvgCommons()," >\n"),i=[s,c,r?"":this.addPaintOrder()," ",v?'transform="'+v+'" ':""].join(""),t[p]=i,f&&f.toLive&&g.push(f.toSVG(this)),u&&u.toLive&&g.push(u.toSVG(this)),d&&g.push(d.toSVG(this)),h&&g.push(n),g.push(t.join("")),g.push("</g>\n"),l&&g.push("</g>\n"),o?o(g.join("")):g.join("")},addPaintOrder:function(){return"fill"!==this.paintFirst?' paint-order="'+this.paintFirst+'" ':""}})}(),function(){var t=T.util.object.extend,e="stateProperties";function i(e,i,n){var r={};n.forEach((function(t){r[t]=e[t]})),t(e[i],r,!0)}function n(t,e,i){if(t===e)return!0;if(Array.isArray(t)){if(!Array.isArray(e)||t.length!==e.length)return!1;for(var r=0,o=t.length;r<o;r++)if(!n(t[r],e[r]))return!1;return!0}if(t&&"object"==typeof t){var s,a=Object.keys(t);if(!e||"object"!=typeof e||!i&&a.length!==Object.keys(e).length)return!1;for(r=0,o=a.length;r<o;r++)if("canvas"!==(s=a[r])&&"group"!==s&&!n(t[s],e[s]))return!1;return!0}}T.util.object.extend(T.Object.prototype,{hasStateChanged:function(t){var i="_"+(t=t||e);return Object.keys(this[i]).length<this[t].length||!n(this[i],this,!0)},saveState:function(t){var n=t&&t.propertySet||e,r="_"+n;return this[r]?(i(this,r,this[n]),t&&t.stateProperties&&i(this,r,t.stateProperties),this):this.setupState(t)},setupState:function(t){var i=(t=t||{}).propertySet||e;return t.propertySet=i,this["_"+i]={},this.saveState(t),this}})}(),function(){var t=T.util.degreesToRadians;T.util.object.extend(T.Object.prototype,{_findTargetCorner:function(t,e){if(!this.hasControls||this.group||!this.canvas||this.canvas._activeObject!==this)return!1;var i,n,r,o=t.x,s=t.y,a=Object.keys(this.oCoords),h=a.length-1;for(this.__corner=0;h>=0;h--)if(r=a[h],this.isControlVisible(r)&&(n=this._getImageLines(e?this.oCoords[r].touchCorner:this.oCoords[r].corner),0!==(i=this._findCrossPoints({x:o,y:s},n))&&i%2==1))return this.__corner=r,r;return!1},forEachControl:function(t){for(var e in this.controls)t(this.controls[e],e,this)},_setCornerCoords:function(){var t=this.oCoords;for(var e in t){var i=this.controls[e];t[e].corner=i.calcCornerCoords(this.angle,this.cornerSize,t[e].x,t[e].y,!1),t[e].touchCorner=i.calcCornerCoords(this.angle,this.touchCornerSize,t[e].x,t[e].y,!0)}},drawSelectionBackground:function(e){if(!this.selectionBackgroundColor||this.canvas&&!this.canvas.interactive||this.canvas&&this.canvas._activeObject!==this)return this;e.save();var i=this.getCenterPoint(),n=this._calculateCurrentDimensions(),r=this.canvas.viewportTransform;return e.translate(i.x,i.y),e.scale(1/r[0],1/r[3]),e.rotate(t(this.angle)),e.fillStyle=this.selectionBackgroundColor,e.fillRect(-n.x/2,-n.y/2,n.x,n.y),e.restore(),this},drawBorders:function(t,e){e=e||{};var i=this._calculateCurrentDimensions(),n=this.borderScaleFactor,r=i.x+n,o=i.y+n,s=void 0!==e.hasControls?e.hasControls:this.hasControls,a=!1;return t.save(),t.strokeStyle=e.borderColor||this.borderColor,this._setLineDash(t,e.borderDashArray||this.borderDashArray),t.strokeRect(-r/2,-o/2,r,o),s&&(t.beginPath(),this.forEachControl((function(e,i,n){e.withConnection&&e.getVisibility(n,i)&&(a=!0,t.moveTo(e.x*r,e.y*o),t.lineTo(e.x*r+e.offsetX,e.y*o+e.offsetY))})),a&&t.stroke()),t.restore(),this},drawBordersInGroup:function(t,e,i){i=i||{};var n=T.util.sizeAfterTransform(this.width,this.height,e),r=this.strokeWidth,o=this.strokeUniform,s=this.borderScaleFactor,a=n.x+r*(o?this.canvas.getZoom():e.scaleX)+s,h=n.y+r*(o?this.canvas.getZoom():e.scaleY)+s;return t.save(),this._setLineDash(t,i.borderDashArray||this.borderDashArray),t.strokeStyle=i.borderColor||this.borderColor,t.strokeRect(-a/2,-h/2,a,h),t.restore(),this},drawControls:function(t,e){e=e||{},t.save();var i,n,r=this.canvas.getRetinaScaling();return t.setTransform(r,0,0,r,0,0),t.strokeStyle=t.fillStyle=e.cornerColor||this.cornerColor,this.transparentCorners||(t.strokeStyle=e.cornerStrokeColor||this.cornerStrokeColor),this._setLineDash(t,e.cornerDashArray||this.cornerDashArray),this.setCoords(),this.group&&(i=this.group.calcTransformMatrix()),this.forEachControl((function(r,o,s){n=s.oCoords[o],r.getVisibility(s,o)&&(i&&(n=T.util.transformPoint(n,i)),r.render(t,n.x,n.y,e,s))})),t.restore(),this},isControlVisible:function(t){return this.controls[t]&&this.controls[t].getVisibility(this,t)},setControlVisible:function(t,e){return this._controlsVisibility||(this._controlsVisibility={}),this._controlsVisibility[t]=e,this},setControlsVisibility:function(t){for(var e in t||(t={}),t)this.setControlVisible(e,t[e]);return this},onDeselect:function(){},onSelect:function(){}})}(),T.util.object.extend(T.StaticCanvas.prototype,{FX_DURATION:500,fxCenterObjectH:function(t,e){var i=function(){},n=(e=e||{}).onComplete||i,r=e.onChange||i,o=this;return T.util.animate({target:this,startValue:t.left,endValue:this.getCenterPoint().x,duration:this.FX_DURATION,onChange:function(e){t.set("left",e),o.requestRenderAll(),r()},onComplete:function(){t.setCoords(),n()}})},fxCenterObjectV:function(t,e){var i=function(){},n=(e=e||{}).onComplete||i,r=e.onChange||i,o=this;return T.util.animate({target:this,startValue:t.top,endValue:this.getCenterPoint().y,duration:this.FX_DURATION,onChange:function(e){t.set("top",e),o.requestRenderAll(),r()},onComplete:function(){t.setCoords(),n()}})},fxRemove:function(t,e){var i=function(){},n=(e=e||{}).onComplete||i,r=e.onChange||i,o=this;return T.util.animate({target:this,startValue:t.opacity,endValue:0,duration:this.FX_DURATION,onChange:function(e){t.set("opacity",e),o.requestRenderAll(),r()},onComplete:function(){o.remove(t),n()}})}}),T.util.object.extend(T.Object.prototype,{animate:function(){if(arguments[0]&&"object"==typeof arguments[0]){var t,e,i=[],n=[];for(t in arguments[0])i.push(t);for(var r=0,o=i.length;r<o;r++)t=i[r],e=r!==o-1,n.push(this._animate(t,arguments[0][t],arguments[1],e));return n}return this._animate.apply(this,arguments)},_animate:function(t,e,i,n){var r,o=this;e=e.toString(),i=i?T.util.object.clone(i):{},~t.indexOf(".")&&(r=t.split("."));var s=o.colorProperties.indexOf(t)>-1||r&&o.colorProperties.indexOf(r[1])>-1,a=r?this.get(r[0])[r[1]]:this.get(t);"from"in i||(i.from=a),s||(e=~e.indexOf("=")?a+parseFloat(e.replace("=","")):parseFloat(e));var h={target:this,startValue:i.from,endValue:e,byValue:i.by,easing:i.easing,duration:i.duration,abort:i.abort&&function(t,e,n){return i.abort.call(o,t,e,n)},onChange:function(e,s,a){r?o[r[0]][r[1]]=e:o.set(t,e),n||i.onChange&&i.onChange(e,s,a)},onComplete:function(t,e,r){n||(o.setCoords(),i.onComplete&&i.onComplete(t,e,r))}};return s?T.util.animateColor(h.startValue,h.endValue,h.duration,h):T.util.animate(h)}}),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.util.object.clone,r={x1:1,x2:1,y1:1,y2:1};function o(t,e){var i=t.origin,n=t.axis1,r=t.axis2,o=t.dimension,s=e.nearest,a=e.center,h=e.farthest;return function(){switch(this.get(i)){case s:return Math.min(this.get(n),this.get(r));case a:return Math.min(this.get(n),this.get(r))+.5*this.get(o);case h:return Math.max(this.get(n),this.get(r))}}}e.Line?e.warn("fabric.Line is already defined"):(e.Line=e.util.createClass(e.Object,{type:"line",x1:0,y1:0,x2:0,y2:0,cacheProperties:e.Object.prototype.cacheProperties.concat("x1","x2","y1","y2"),initialize:function(t,e){t||(t=[0,0,0,0]),this.callSuper("initialize",e),this.set("x1",t[0]),this.set("y1",t[1]),this.set("x2",t[2]),this.set("y2",t[3]),this._setWidthHeight(e)},_setWidthHeight:function(t){t||(t={}),this.width=Math.abs(this.x2-this.x1),this.height=Math.abs(this.y2-this.y1),this.left="left"in t?t.left:this._getLeftToOriginX(),this.top="top"in t?t.top:this._getTopToOriginY()},_set:function(t,e){return this.callSuper("_set",t,e),void 0!==r[t]&&this._setWidthHeight(),this},_getLeftToOriginX:o({origin:"originX",axis1:"x1",axis2:"x2",dimension:"width"},{nearest:"left",center:"center",farthest:"right"}),_getTopToOriginY:o({origin:"originY",axis1:"y1",axis2:"y2",dimension:"height"},{nearest:"top",center:"center",farthest:"bottom"}),_render:function(t){t.beginPath();var e=this.calcLinePoints();t.moveTo(e.x1,e.y1),t.lineTo(e.x2,e.y2),t.lineWidth=this.strokeWidth;var i=t.strokeStyle;t.strokeStyle=this.stroke||t.fillStyle,this.stroke&&this._renderStroke(t),t.strokeStyle=i},_findCenterFromElement:function(){return{x:(this.x1+this.x2)/2,y:(this.y1+this.y2)/2}},toObject:function(t){return i(this.callSuper("toObject",t),this.calcLinePoints())},_getNonTransformedDimensions:function(){var t=this.callSuper("_getNonTransformedDimensions");return"butt"===this.strokeLineCap&&(0===this.width&&(t.y-=this.strokeWidth),0===this.height&&(t.x-=this.strokeWidth)),t},calcLinePoints:function(){var t=this.x1<=this.x2?-1:1,e=this.y1<=this.y2?-1:1,i=t*this.width*.5,n=e*this.height*.5;return{x1:i,x2:t*this.width*-.5,y1:n,y2:e*this.height*-.5}},_toSVG:function(){var t=this.calcLinePoints();return["<line ","COMMON_PARTS",'x1="',t.x1,'" y1="',t.y1,'" x2="',t.x2,'" y2="',t.y2,'" />\n']}}),e.Line.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("x1 y1 x2 y2".split(" ")),e.Line.fromElement=function(t,n,r){r=r||{};var o=e.parseAttributes(t,e.Line.ATTRIBUTE_NAMES),s=[o.x1||0,o.y1||0,o.x2||0,o.y2||0];n(new e.Line(s,i(o,r)))},e.Line.fromObject=function(t,i){var r=n(t,!0);r.points=[t.x1,t.y1,t.x2,t.y2],e.Object._fromObject("Line",r,(function(t){delete t.points,i&&i(t)}),"points")})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.degreesToRadians;e.Circle?e.warn("fabric.Circle is already defined."):(e.Circle=e.util.createClass(e.Object,{type:"circle",radius:0,startAngle:0,endAngle:360,cacheProperties:e.Object.prototype.cacheProperties.concat("radius","startAngle","endAngle"),_set:function(t,e){return this.callSuper("_set",t,e),"radius"===t&&this.setRadius(e),this},toObject:function(t){return this.callSuper("toObject",["radius","startAngle","endAngle"].concat(t))},_toSVG:function(){var t,n=(this.endAngle-this.startAngle)%360;if(0===n)t=["<circle ","COMMON_PARTS",'cx="0" cy="0" ','r="',this.radius,'" />\n'];else{var r=i(this.startAngle),o=i(this.endAngle),s=this.radius;t=['<path d="M '+e.util.cos(r)*s+" "+e.util.sin(r)*s," A "+s+" "+s," 0 ",+(n>180?"1":"0")+" 1"," "+e.util.cos(o)*s+" "+e.util.sin(o)*s,'" ',"COMMON_PARTS"," />\n"]}return t},_render:function(t){t.beginPath(),t.arc(0,0,this.radius,i(this.startAngle),i(this.endAngle),!1),this._renderPaintInOrder(t)},getRadiusX:function(){return this.get("radius")*this.get("scaleX")},getRadiusY:function(){return this.get("radius")*this.get("scaleY")},setRadius:function(t){return this.radius=t,this.set("width",2*t).set("height",2*t)}}),e.Circle.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("cx cy r".split(" ")),e.Circle.fromElement=function(t,i){var n,r=e.parseAttributes(t,e.Circle.ATTRIBUTE_NAMES);if(!("radius"in(n=r)&&n.radius>=0))throw new Error("value of `r` attribute is required and can not be negative");r.left=(r.left||0)-r.radius,r.top=(r.top||0)-r.radius,i(new e.Circle(r))},e.Circle.fromObject=function(t,i){e.Object._fromObject("Circle",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});e.Triangle?e.warn("fabric.Triangle is already defined"):(e.Triangle=e.util.createClass(e.Object,{type:"triangle",width:100,height:100,_render:function(t){var e=this.width/2,i=this.height/2;t.beginPath(),t.moveTo(-e,i),t.lineTo(0,-i),t.lineTo(e,i),t.closePath(),this._renderPaintInOrder(t)},_toSVG:function(){var t=this.width/2,e=this.height/2;return["<polygon ","COMMON_PARTS",'points="',[-t+" "+e,"0 "+-e,t+" "+e].join(","),'" />']}}),e.Triangle.fromObject=function(t,i){return e.Object._fromObject("Triangle",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=2*Math.PI;e.Ellipse?e.warn("fabric.Ellipse is already defined."):(e.Ellipse=e.util.createClass(e.Object,{type:"ellipse",rx:0,ry:0,cacheProperties:e.Object.prototype.cacheProperties.concat("rx","ry"),initialize:function(t){this.callSuper("initialize",t),this.set("rx",t&&t.rx||0),this.set("ry",t&&t.ry||0)},_set:function(t,e){switch(this.callSuper("_set",t,e),t){case"rx":this.rx=e,this.set("width",2*e);break;case"ry":this.ry=e,this.set("height",2*e)}return this},getRx:function(){return this.get("rx")*this.get("scaleX")},getRy:function(){return this.get("ry")*this.get("scaleY")},toObject:function(t){return this.callSuper("toObject",["rx","ry"].concat(t))},_toSVG:function(){return["<ellipse ","COMMON_PARTS",'cx="0" cy="0" ','rx="',this.rx,'" ry="',this.ry,'" />\n']},_render:function(t){t.beginPath(),t.save(),t.transform(1,0,0,this.ry/this.rx,0,0),t.arc(0,0,this.rx,0,i,!1),t.restore(),this._renderPaintInOrder(t)}}),e.Ellipse.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("cx cy rx ry".split(" ")),e.Ellipse.fromElement=function(t,i){var n=e.parseAttributes(t,e.Ellipse.ATTRIBUTE_NAMES);n.left=(n.left||0)-n.rx,n.top=(n.top||0)-n.ry,i(new e.Ellipse(n))},e.Ellipse.fromObject=function(t,i){e.Object._fromObject("Ellipse",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend;e.Rect?e.warn("fabric.Rect is already defined"):(e.Rect=e.util.createClass(e.Object,{stateProperties:e.Object.prototype.stateProperties.concat("rx","ry"),type:"rect",rx:0,ry:0,cacheProperties:e.Object.prototype.cacheProperties.concat("rx","ry"),initialize:function(t){this.callSuper("initialize",t),this._initRxRy()},_initRxRy:function(){this.rx&&!this.ry?this.ry=this.rx:this.ry&&!this.rx&&(this.rx=this.ry)},_render:function(t){var e=this.rx?Math.min(this.rx,this.width/2):0,i=this.ry?Math.min(this.ry,this.height/2):0,n=this.width,r=this.height,o=-this.width/2,s=-this.height/2,a=0!==e||0!==i,h=.4477152502;t.beginPath(),t.moveTo(o+e,s),t.lineTo(o+n-e,s),a&&t.bezierCurveTo(o+n-h*e,s,o+n,s+h*i,o+n,s+i),t.lineTo(o+n,s+r-i),a&&t.bezierCurveTo(o+n,s+r-h*i,o+n-h*e,s+r,o+n-e,s+r),t.lineTo(o+e,s+r),a&&t.bezierCurveTo(o+h*e,s+r,o,s+r-h*i,o,s+r-i),t.lineTo(o,s+i),a&&t.bezierCurveTo(o,s+h*i,o+h*e,s,o+e,s),t.closePath(),this._renderPaintInOrder(t)},toObject:function(t){return this.callSuper("toObject",["rx","ry"].concat(t))},_toSVG:function(){return["<rect ","COMMON_PARTS",'x="',-this.width/2,'" y="',-this.height/2,'" rx="',this.rx,'" ry="',this.ry,'" width="',this.width,'" height="',this.height,'" />\n']}}),e.Rect.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("x y rx ry width height".split(" ")),e.Rect.fromElement=function(t,n,r){if(!t)return n(null);r=r||{};var o=e.parseAttributes(t,e.Rect.ATTRIBUTE_NAMES);o.left=o.left||0,o.top=o.top||0,o.height=o.height||0,o.width=o.width||0;var s=new e.Rect(i(r?e.util.object.clone(r):{},o));s.visible=s.visible&&s.width>0&&s.height>0,n(s)},e.Rect.fromObject=function(t,i){return e.Object._fromObject("Rect",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.util.array.min,r=e.util.array.max,o=e.util.toFixed,s=e.util.projectStrokeOnPoints;e.Polyline?e.warn("fabric.Polyline is already defined"):(e.Polyline=e.util.createClass(e.Object,{type:"polyline",points:null,exactBoundingBox:!1,cacheProperties:e.Object.prototype.cacheProperties.concat("points"),initialize:function(t,e){e=e||{},this.points=t||[],this.callSuper("initialize",e),this._setPositionDimensions(e)},_projectStrokeOnPoints:function(){return s(this.points,this,!0)},_setPositionDimensions:function(t){var e,i=this._calcDimensions(t),n=this.exactBoundingBox?this.strokeWidth:0;this.width=i.width-n,this.height=i.height-n,t.fromSVG||(e=this.translateToGivenOrigin({x:i.left-this.strokeWidth/2+n/2,y:i.top-this.strokeWidth/2+n/2},"left","top",this.originX,this.originY)),void 0===t.left&&(this.left=t.fromSVG?i.left:e.x),void 0===t.top&&(this.top=t.fromSVG?i.top:e.y),this.pathOffset={x:i.left+this.width/2+n/2,y:i.top+this.height/2+n/2}},_calcDimensions:function(){var t=this.exactBoundingBox?this._projectStrokeOnPoints():this.points,e=n(t,"x")||0,i=n(t,"y")||0;return{left:e,top:i,width:(r(t,"x")||0)-e,height:(r(t,"y")||0)-i}},toObject:function(t){return i(this.callSuper("toObject",t),{points:this.points.concat()})},_toSVG:function(){for(var t=[],i=this.pathOffset.x,n=this.pathOffset.y,r=e.Object.NUM_FRACTION_DIGITS,s=0,a=this.points.length;s<a;s++)t.push(o(this.points[s].x-i,r),",",o(this.points[s].y-n,r)," ");return["<"+this.type+" ","COMMON_PARTS",'points="',t.join(""),'" />\n']},commonRender:function(t){var e,i=this.points.length,n=this.pathOffset.x,r=this.pathOffset.y;if(!i||isNaN(this.points[i-1].y))return!1;t.beginPath(),t.moveTo(this.points[0].x-n,this.points[0].y-r);for(var o=0;o<i;o++)e=this.points[o],t.lineTo(e.x-n,e.y-r);return!0},_render:function(t){this.commonRender(t)&&this._renderPaintInOrder(t)},complexity:function(){return this.get("points").length}}),e.Polyline.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(),e.Polyline.fromElementGenerator=function(t){return function(n,r,o){if(!n)return r(null);o||(o={});var s=e.parsePointsAttribute(n.getAttribute("points")),a=e.parseAttributes(n,e[t].ATTRIBUTE_NAMES);a.fromSVG=!0,r(new e[t](s,i(a,o)))}},e.Polyline.fromElement=e.Polyline.fromElementGenerator("Polyline"),e.Polyline.fromObject=function(t,i){return e.Object._fromObject("Polyline",t,i,"points")})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.projectStrokeOnPoints;e.Polygon?e.warn("fabric.Polygon is already defined"):(e.Polygon=e.util.createClass(e.Polyline,{type:"polygon",_projectStrokeOnPoints:function(){return i(this.points,this)},_render:function(t){this.commonRender(t)&&(t.closePath(),this._renderPaintInOrder(t))}}),e.Polygon.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(),e.Polygon.fromElement=e.Polyline.fromElementGenerator("Polygon"),e.Polygon.fromObject=function(t,i){e.Object._fromObject("Polygon",t,i,"points")})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.array.min,n=e.util.array.max,r=e.util.object.extend,o=e.util.object.clone,s=e.util.toFixed;e.Path?e.warn("fabric.Path is already defined"):(e.Path=e.util.createClass(e.Object,{type:"path",path:null,cacheProperties:e.Object.prototype.cacheProperties.concat("path","fillRule"),stateProperties:e.Object.prototype.stateProperties.concat("path"),initialize:function(t,e){delete(e=o(e||{})).path,this.callSuper("initialize",e),this._setPath(t||[],e)},_setPath:function(t,i){this.path=e.util.makePathSimpler(Array.isArray(t)?t:e.util.parsePath(t)),e.Polyline.prototype._setPositionDimensions.call(this,i||{})},_renderPathCommands:function(t){var e,i=0,n=0,r=0,o=0,s=0,a=0,h=-this.pathOffset.x,c=-this.pathOffset.y;t.beginPath();for(var l=0,u=this.path.length;l<u;++l)switch((e=this.path[l])[0]){case"L":r=e[1],o=e[2],t.lineTo(r+h,o+c);break;case"M":i=r=e[1],n=o=e[2],t.moveTo(r+h,o+c);break;case"C":r=e[5],o=e[6],s=e[3],a=e[4],t.bezierCurveTo(e[1]+h,e[2]+c,s+h,a+c,r+h,o+c);break;case"Q":t.quadraticCurveTo(e[1]+h,e[2]+c,e[3]+h,e[4]+c),r=e[3],o=e[4],s=e[1],a=e[2];break;case"z":case"Z":r=i,o=n,t.closePath()}},_render:function(t){this._renderPathCommands(t),this._renderPaintInOrder(t)},toString:function(){return"#<fabric.Path ("+this.complexity()+'): { "top": '+this.top+', "left": '+this.left+" }>"},toObject:function(t){return r(this.callSuper("toObject",t),{path:this.path.map((function(t){return t.slice()}))})},toDatalessObject:function(t){var e=this.toObject(["sourcePath"].concat(t));return e.sourcePath&&delete e.path,e},_toSVG:function(){return["<path ","COMMON_PARTS",'d="',e.util.joinPath(this.path),'" stroke-linecap="round" ',"/>\n"]},_getOffsetTransform:function(){var t=e.Object.NUM_FRACTION_DIGITS;return" translate("+s(-this.pathOffset.x,t)+", "+s(-this.pathOffset.y,t)+")"},toClipPathSVG:function(t){var e=this._getOffsetTransform();return"\t"+this._createBaseClipPathSVGMarkup(this._toSVG(),{reviver:t,additionalTransform:e})},toSVG:function(t){var e=this._getOffsetTransform();return this._createBaseSVGMarkup(this._toSVG(),{reviver:t,additionalTransform:e})},complexity:function(){return this.path.length},_calcDimensions:function(){for(var t,r,o=[],s=[],a=0,h=0,c=0,l=0,u=0,f=this.path.length;u<f;++u){switch((t=this.path[u])[0]){case"L":c=t[1],l=t[2],r=[];break;case"M":a=c=t[1],h=l=t[2],r=[];break;case"C":r=e.util.getBoundsOfCurve(c,l,t[1],t[2],t[3],t[4],t[5],t[6]),c=t[5],l=t[6];break;case"Q":r=e.util.getBoundsOfCurve(c,l,t[1],t[2],t[1],t[2],t[3],t[4]),c=t[3],l=t[4];break;case"z":case"Z":c=a,l=h}r.forEach((function(t){o.push(t.x),s.push(t.y)})),o.push(c),s.push(l)}var d=i(o)||0,g=i(s)||0;return{left:d,top:g,width:(n(o)||0)-d,height:(n(s)||0)-g}}}),e.Path.fromObject=function(t,i){if("string"==typeof t.sourcePath){var n=t.sourcePath;e.loadSVGFromURL(n,(function(n){var r=n[0];r.setOptions(t),t.clipPath?e.util.enlivenObjects([t.clipPath],(function(t){r.clipPath=t[0],i&&i(r)})):i&&i(r)}))}else e.Object._fromObject("Path",t,i,"path")},e.Path.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(["d"]),e.Path.fromElement=function(t,i,n){var o=e.parseAttributes(t,e.Path.ATTRIBUTE_NAMES);o.fromSVG=!0,i(new e.Path(o.d,r(o,n)))})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.array.min,n=e.util.array.max;e.Group||(e.Group=e.util.createClass(e.Object,e.Collection,{type:"group",strokeWidth:0,subTargetCheck:!1,cacheProperties:[],useSetOnGroup:!1,initialize:function(t,e,i){e=e||{},this._objects=[],i&&this.callSuper("initialize",e),this._objects=t||[];for(var n=this._objects.length;n--;)this._objects[n].group=this;if(i)this._updateObjectsACoords();else{var r=e&&e.centerPoint;void 0!==e.originX&&(this.originX=e.originX),void 0!==e.originY&&(this.originY=e.originY),r||this._calcBounds(),this._updateObjectsCoords(r),delete e.centerPoint,this.callSuper("initialize",e)}this.setCoords()},_updateObjectsACoords:function(){for(var t=this._objects.length;t--;)this._objects[t].setCoords(!0)},_updateObjectsCoords:function(t){t=t||this.getCenterPoint();for(var e=this._objects.length;e--;)this._updateObjectCoords(this._objects[e],t)},_updateObjectCoords:function(t,e){var i=t.left,n=t.top;t.set({left:i-e.x,top:n-e.y}),t.group=this,t.setCoords(!0)},toString:function(){return"#<fabric.Group: ("+this.complexity()+")>"},addWithUpdate:function(t){var i=!!this.group;return this._restoreObjectsState(),e.util.resetObjectTransform(this),t&&(i&&e.util.removeTransformFromObject(t,this.group.calcTransformMatrix()),this._objects.push(t),t.group=this,t._set("canvas",this.canvas)),this._calcBounds(),this._updateObjectsCoords(),this.dirty=!0,i?this.group.addWithUpdate():this.setCoords(),this},removeWithUpdate:function(t){return this._restoreObjectsState(),e.util.resetObjectTransform(this),this.remove(t),this._calcBounds(),this._updateObjectsCoords(),this.setCoords(),this.dirty=!0,this},_onObjectAdded:function(t){this.dirty=!0,t.group=this,t._set("canvas",this.canvas)},_onObjectRemoved:function(t){this.dirty=!0,delete t.group},_set:function(t,i){var n=this._objects.length;if(this.useSetOnGroup)for(;n--;)this._objects[n].setOnGroup(t,i);if("canvas"===t)for(;n--;)this._objects[n]._set(t,i);e.Object.prototype._set.call(this,t,i)},toObject:function(t){var i=this.includeDefaultValues,n=this._objects.filter((function(t){return!t.excludeFromExport})).map((function(e){var n=e.includeDefaultValues;e.includeDefaultValues=i;var r=e.toObject(t);return e.includeDefaultValues=n,r})),r=e.Object.prototype.toObject.call(this,t);return r.objects=n,r},toDatalessObject:function(t){var i,n=this.sourcePath;if(n)i=n;else{var r=this.includeDefaultValues;i=this._objects.map((function(e){var i=e.includeDefaultValues;e.includeDefaultValues=r;var n=e.toDatalessObject(t);return e.includeDefaultValues=i,n}))}var o=e.Object.prototype.toDatalessObject.call(this,t);return o.objects=i,o},render:function(t){this._transformDone=!0,this.callSuper("render",t),this._transformDone=!1},shouldCache:function(){var t=e.Object.prototype.shouldCache.call(this);if(t)for(var i=0,n=this._objects.length;i<n;i++)if(this._objects[i].willDrawShadow())return this.ownCaching=!1,!1;return t},willDrawShadow:function(){if(e.Object.prototype.willDrawShadow.call(this))return!0;for(var t=0,i=this._objects.length;t<i;t++)if(this._objects[t].willDrawShadow())return!0;return!1},isOnACache:function(){return this.ownCaching||this.group&&this.group.isOnACache()},drawObject:function(t){for(var e=0,i=this._objects.length;e<i;e++)this._objects[e].render(t);this._drawClipPath(t,this.clipPath)},isCacheDirty:function(t){if(this.callSuper("isCacheDirty",t))return!0;if(!this.statefullCache)return!1;for(var e=0,i=this._objects.length;e<i;e++)if(this._objects[e].isCacheDirty(!0)){if(this._cacheCanvas){var n=this.cacheWidth/this.zoomX,r=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-n/2,-r/2,n,r)}return!0}return!1},_restoreObjectsState:function(){var t=this.calcOwnMatrix();return this._objects.forEach((function(i){e.util.addTransformToObject(i,t),delete i.group,i.setCoords()})),this},destroy:function(){return this._objects.forEach((function(t){t.set("dirty",!0)})),this._restoreObjectsState()},dispose:function(){this.callSuper("dispose"),this.forEachObject((function(t){t.dispose&&t.dispose()})),this._objects=[]},toActiveSelection:function(){if(this.canvas){var t=this._objects,i=this.canvas;this._objects=[];var n=this.toObject();delete n.objects;var r=new e.ActiveSelection([]);return r.set(n),r.type="activeSelection",i.remove(this),t.forEach((function(t){t.group=r,t.dirty=!0,i.add(t)})),r.canvas=i,r._objects=t,i._activeObject=r,r.setCoords(),r}},ungroupOnCanvas:function(){return this._restoreObjectsState()},setObjectsCoords:function(){return this.forEachObject((function(t){t.setCoords(!0)})),this},_calcBounds:function(t){for(var e,i,n,r,o=[],s=[],a=["tr","br","bl","tl"],h=0,c=this._objects.length,l=a.length;h<c;++h){for(n=(e=this._objects[h]).calcACoords(),r=0;r<l;r++)i=a[r],o.push(n[i].x),s.push(n[i].y);e.aCoords=n}this._getBounds(o,s,t)},_getBounds:function(t,r,o){var s=new e.Point(i(t),i(r)),a=new e.Point(n(t),n(r)),h=s.y||0,c=s.x||0,l=a.x-s.x||0,u=a.y-s.y||0;this.width=l,this.height=u,o||this.setPositionByOrigin({x:c,y:h},"left","top")},_toSVG:function(t){for(var e=["<g ","COMMON_PARTS"," >\n"],i=0,n=this._objects.length;i<n;i++)e.push("\t\t",this._objects[i].toSVG(t));return e.push("</g>\n"),e},getSvgStyles:function(){var t=void 0!==this.opacity&&1!==this.opacity?"opacity: "+this.opacity+";":"",e=this.visible?"":" visibility: hidden;";return[t,this.getSvgFilter(),e].join("")},toClipPathSVG:function(t){for(var e=[],i=0,n=this._objects.length;i<n;i++)e.push("\t",this._objects[i].toClipPathSVG(t));return this._createBaseClipPathSVGMarkup(e,{reviver:t})}}),e.Group.fromObject=function(t,i){var n=t.objects,r=e.util.object.clone(t,!0);delete r.objects,"string"!=typeof n?e.util.enlivenObjects(n,(function(n){e.util.enlivenObjectEnlivables(t,r,(function(){i&&i(new e.Group(n,r,!0))}))})):e.loadSVGFromURL(n,(function(o){var s=e.util.groupSVGElements(o,t,n),a=r.clipPath;delete r.clipPath,s.set(r),a?e.util.enlivenObjects([a],(function(t){s.clipPath=t[0],i&&i(s)})):i&&i(s)}))})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});e.ActiveSelection||(e.ActiveSelection=e.util.createClass(e.Group,{type:"activeSelection",initialize:function(t,i){i=i||{},this._objects=t||[];for(var n=this._objects.length;n--;)this._objects[n].group=this;i.originX&&(this.originX=i.originX),i.originY&&(this.originY=i.originY),this._calcBounds(),this._updateObjectsCoords(),e.Object.prototype.initialize.call(this,i),this.setCoords()},toGroup:function(){var t=this._objects.concat();this._objects=[];var i=e.Object.prototype.toObject.call(this),n=new e.Group([]);if(delete i.type,n.set(i),t.forEach((function(t){t.canvas.remove(t),t.group=n})),n._objects=t,!this.canvas)return n;var r=this.canvas;return r.add(n),r._activeObject=n,n.setCoords(),n},onDeselect:function(){return this.destroy(),!1},toString:function(){return"#<fabric.ActiveSelection: ("+this.complexity()+")>"},shouldCache:function(){return!1},isOnACache:function(){return!1},_renderControls:function(t,e,i){t.save(),t.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1,this.callSuper("_renderControls",t,e),void 0===(i=i||{}).hasControls&&(i.hasControls=!1),i.forActiveSelection=!0;for(var n=0,r=this._objects.length;n<r;n++)this._objects[n]._renderControls(t,i);t.restore()}}),e.ActiveSelection.fromObject=function(t,i){e.util.enlivenObjects(t.objects,(function(n){delete t.objects,i&&i(new e.ActiveSelection(n,t,!0))}))})}(e),function(t){"use strict";var e=T.util.object.extend;t.fabric||(t.fabric={}),t.fabric.Image?T.warn("fabric.Image is already defined."):(T.Image=T.util.createClass(T.Object,{type:"image",strokeWidth:0,srcFromAttribute:!1,_lastScaleX:1,_lastScaleY:1,_filterScalingX:1,_filterScalingY:1,minimumScaleTrigger:.5,stateProperties:T.Object.prototype.stateProperties.concat("cropX","cropY"),cacheProperties:T.Object.prototype.cacheProperties.concat("cropX","cropY"),cacheKey:"",cropX:0,cropY:0,imageSmoothing:!0,initialize:function(t,e){e||(e={}),this.filters=[],this.cacheKey="texture"+T.Object.__uid++,this.callSuper("initialize",e),this._initElement(t,e)},getElement:function(){return this._element||{}},setElement:function(t,e){return this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+"_filtered"),this._element=t,this._originalElement=t,this._initConfig(e),0!==this.filters.length&&this.applyFilters(),this.resizeFilter&&this.applyResizeFilters(),this},removeTexture:function(t){var e=T.filterBackend;e&&e.evictCachesForKey&&e.evictCachesForKey(t)},dispose:function(){this.callSuper("dispose"),this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+"_filtered"),this._cacheContext=void 0,["_originalElement","_element","_filteredEl","_cacheCanvas"].forEach(function(t){T.util.cleanUpJsdomNode(this[t]),this[t]=void 0}.bind(this))},getCrossOrigin:function(){return this._originalElement&&(this._originalElement.crossOrigin||null)},getOriginalSize:function(){var t=this.getElement();return{width:t.naturalWidth||t.width,height:t.naturalHeight||t.height}},_stroke:function(t){if(this.stroke&&0!==this.strokeWidth){var e=this.width/2,i=this.height/2;t.beginPath(),t.moveTo(-e,-i),t.lineTo(e,-i),t.lineTo(e,i),t.lineTo(-e,i),t.lineTo(-e,-i),t.closePath()}},toObject:function(t){var i=[];this.filters.forEach((function(t){t&&i.push(t.toObject())}));var n=e(this.callSuper("toObject",["cropX","cropY"].concat(t)),{src:this.getSrc(),crossOrigin:this.getCrossOrigin(),filters:i});return this.resizeFilter&&(n.resizeFilter=this.resizeFilter.toObject()),n},hasCrop:function(){return this.cropX||this.cropY||this.width<this._element.width||this.height<this._element.height},_toSVG:function(){var t,e=[],i=[],n=this._element,r=-this.width/2,o=-this.height/2,s="",a="";if(!n)return[];if(this.hasCrop()){var h=T.Object.__uid++;e.push('<clipPath id="imageCrop_'+h+'">\n','\t<rect x="'+r+'" y="'+o+'" width="'+this.width+'" height="'+this.height+'" />\n',"</clipPath>\n"),s=' clip-path="url(#imageCrop_'+h+')" '}if(this.imageSmoothing||(a='" image-rendering="optimizeSpeed'),i.push("\t<image ","COMMON_PARTS",'xlink:href="',this.getSvgSrc(!0),'" x="',r-this.cropX,'" y="',o-this.cropY,'" width="',n.width||n.naturalWidth,'" height="',n.height||n.height,a,'"',s,"></image>\n"),this.stroke||this.strokeDashArray){var c=this.fill;this.fill=null,t=["\t<rect ",'x="',r,'" y="',o,'" width="',this.width,'" height="',this.height,'" style="',this.getSvgStyles(),'"/>\n'],this.fill=c}return"fill"!==this.paintFirst?e.concat(t,i):e.concat(i,t)},getSrc:function(t){var e=t?this._element:this._originalElement;return e?e.toDataURL?e.toDataURL():this.srcFromAttribute?e.getAttribute("src"):e.src:this.src||""},setSrc:function(t,e,i){return T.util.loadImage(t,(function(t,n){this.setElement(t,i),this._setWidthHeight(),e&&e(this,n)}),this,i&&i.crossOrigin),this},toString:function(){return'#<fabric.Image: { src: "'+this.getSrc()+'" }>'},applyResizeFilters:function(){var t=this.resizeFilter,e=this.minimumScaleTrigger,i=this.getTotalObjectScaling(),n=i.scaleX,r=i.scaleY,o=this._filteredEl||this._originalElement;if(this.group&&this.set("dirty",!0),!t||n>e&&r>e)return this._element=o,this._filterScalingX=1,this._filterScalingY=1,this._lastScaleX=n,void(this._lastScaleY=r);T.filterBackend||(T.filterBackend=T.initFilterBackend());var s=T.util.createCanvasElement(),a=this._filteredEl?this.cacheKey+"_filtered":this.cacheKey,h=o.width,c=o.height;s.width=h,s.height=c,this._element=s,this._lastScaleX=t.scaleX=n,this._lastScaleY=t.scaleY=r,T.filterBackend.applyFilters([t],o,h,c,this._element,a),this._filterScalingX=s.width/this._originalElement.width,this._filterScalingY=s.height/this._originalElement.height},applyFilters:function(t){if(t=(t=t||this.filters||[]).filter((function(t){return t&&!t.isNeutralState()})),this.set("dirty",!0),this.removeTexture(this.cacheKey+"_filtered"),0===t.length)return this._element=this._originalElement,this._filteredEl=null,this._filterScalingX=1,this._filterScalingY=1,this;var e=this._originalElement,i=e.naturalWidth||e.width,n=e.naturalHeight||e.height;if(this._element===this._originalElement){var r=T.util.createCanvasElement();r.width=i,r.height=n,this._element=r,this._filteredEl=r}else this._element=this._filteredEl,this._filteredEl.getContext("2d").clearRect(0,0,i,n),this._lastScaleX=1,this._lastScaleY=1;return T.filterBackend||(T.filterBackend=T.initFilterBackend()),T.filterBackend.applyFilters(t,this._originalElement,i,n,this._element,this.cacheKey),this._originalElement.width===this._element.width&&this._originalElement.height===this._element.height||(this._filterScalingX=this._element.width/this._originalElement.width,this._filterScalingY=this._element.height/this._originalElement.height),this},_render:function(t){T.util.setImageSmoothing(t,this.imageSmoothing),!0!==this.isMoving&&this.resizeFilter&&this._needsResize()&&this.applyResizeFilters(),this._stroke(t),this._renderPaintInOrder(t)},drawCacheOnCanvas:function(t){T.util.setImageSmoothing(t,this.imageSmoothing),T.Object.prototype.drawCacheOnCanvas.call(this,t)},shouldCache:function(){return this.needsItsOwnCache()},_renderFill:function(t){var e=this._element;if(e){var i=this._filterScalingX,n=this._filterScalingY,r=this.width,o=this.height,s=Math.min,a=Math.max,h=a(this.cropX,0),c=a(this.cropY,0),l=e.naturalWidth||e.width,u=e.naturalHeight||e.height,f=h*i,d=c*n,g=s(r*i,l-f),p=s(o*n,u-d),v=-r/2,m=-o/2,y=s(r,l/i-h),_=s(o,u/n-c);e&&t.drawImage(e,f,d,g,p,v,m,y,_)}},_needsResize:function(){var t=this.getTotalObjectScaling();return t.scaleX!==this._lastScaleX||t.scaleY!==this._lastScaleY},_resetWidthHeight:function(){this.set(this.getOriginalSize())},_initElement:function(t,e){this.setElement(T.util.getById(t),e),T.util.addClass(this.getElement(),T.Image.CSS_CANVAS)},_initConfig:function(t){t||(t={}),this.setOptions(t),this._setWidthHeight(t)},_initFilters:function(t,e){t&&t.length?T.util.enlivenObjects(t,(function(t){e&&e(t)}),"fabric.Image.filters"):e&&e()},_setWidthHeight:function(t){t||(t={});var e=this.getElement();this.width=t.width||e.naturalWidth||e.width||0,this.height=t.height||e.naturalHeight||e.height||0},parsePreserveAspectRatioAttribute:function(){var t,e=T.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio||""),i=this._element.width,n=this._element.height,r=1,o=1,s=0,a=0,h=0,c=0,l=this.width,u=this.height,f={width:l,height:u};return!e||"none"===e.alignX&&"none"===e.alignY?(r=l/i,o=u/n):("meet"===e.meetOrSlice&&(t=(l-i*(r=o=T.util.findScaleToFit(this._element,f)))/2,"Min"===e.alignX&&(s=-t),"Max"===e.alignX&&(s=t),t=(u-n*o)/2,"Min"===e.alignY&&(a=-t),"Max"===e.alignY&&(a=t)),"slice"===e.meetOrSlice&&(t=i-l/(r=o=T.util.findScaleToCover(this._element,f)),"Mid"===e.alignX&&(h=t/2),"Max"===e.alignX&&(h=t),t=n-u/o,"Mid"===e.alignY&&(c=t/2),"Max"===e.alignY&&(c=t),i=l/r,n=u/o)),{width:i,height:n,scaleX:r,scaleY:o,offsetLeft:s,offsetTop:a,cropX:h,cropY:c}}}),T.Image.CSS_CANVAS="canvas-img",T.Image.prototype.getSvgSrc=T.Image.prototype.getSrc,T.Image.fromObject=function(t,e){var i=T.util.object.clone(t);T.util.loadImage(i.src,(function(t,n){n?e&&e(null,!0):T.Image.prototype._initFilters.call(i,i.filters,(function(n){i.filters=n||[],T.Image.prototype._initFilters.call(i,[i.resizeFilter],(function(n){i.resizeFilter=n[0],T.util.enlivenObjectEnlivables(i,i,(function(){var n=new T.Image(t,i);e(n,!1)}))}))}))}),null,i.crossOrigin)},T.Image.fromURL=function(t,e,i){T.util.loadImage(t,(function(t,n){e&&e(new T.Image(t,i),n)}),null,i&&i.crossOrigin)},T.Image.ATTRIBUTE_NAMES=T.SHARED_ATTRIBUTES.concat("x y width height preserveAspectRatio xlink:href crossOrigin image-rendering".split(" ")),T.Image.fromElement=function(t,i,n){var r=T.parseAttributes(t,T.Image.ATTRIBUTE_NAMES);T.Image.fromURL(r["xlink:href"],i,e(n?T.util.object.clone(n):{},r))})}(e),T.util.object.extend(T.Object.prototype,{_getAngleValueForStraighten:function(){var t=this.angle%360;return t>0?90*Math.round((t-1)/90):90*Math.round(t/90)},straighten:function(){return this.rotate(this._getAngleValueForStraighten())},fxStraighten:function(t){var e=function(){},i=(t=t||{}).onComplete||e,n=t.onChange||e,r=this;return T.util.animate({target:this,startValue:this.get("angle"),endValue:this._getAngleValueForStraighten(),duration:this.FX_DURATION,onChange:function(t){r.rotate(t),n()},onComplete:function(){r.setCoords(),i()}})}}),T.util.object.extend(T.StaticCanvas.prototype,{straightenObject:function(t){return t.straighten(),this.requestRenderAll(),this},fxStraightenObject:function(t){return t.fxStraighten({onChange:this.requestRenderAllBound})}}),function(){"use strict";function t(t,e){var i="precision "+e+" float;\nvoid main(){}",n=t.createShader(t.FRAGMENT_SHADER);return t.shaderSource(n,i),t.compileShader(n),!!t.getShaderParameter(n,t.COMPILE_STATUS)}function e(t){t&&t.tileSize&&(this.tileSize=t.tileSize),this.setupGLContext(this.tileSize,this.tileSize),this.captureGPUInfo()}T.isWebglSupported=function(e){if(T.isLikelyNode)return!1;e=e||T.WebglFilterBackend.prototype.tileSize;var i=document.createElement("canvas"),n=i.getContext("webgl")||i.getContext("experimental-webgl"),r=!1;if(n){T.maxTextureSize=n.getParameter(n.MAX_TEXTURE_SIZE),r=T.maxTextureSize>=e;for(var o=["highp","mediump","lowp"],s=0;s<3;s++)if(t(n,o[s])){T.webGlPrecision=o[s];break}}return this.isSupported=r,r},T.WebglFilterBackend=e,e.prototype={tileSize:2048,resources:{},setupGLContext:function(t,e){this.dispose(),this.createWebGLCanvas(t,e),this.aPosition=new Float32Array([0,0,0,1,1,0,1,1]),this.chooseFastestCopyGLTo2DMethod(t,e)},chooseFastestCopyGLTo2DMethod:function(t,e){var i,n=void 0!==window.performance;try{new ImageData(1,1),i=!0}catch(t){i=!1}var r="undefined"!=typeof ArrayBuffer,o="undefined"!=typeof Uint8ClampedArray;if(n&&i&&r&&o){var s=T.util.createCanvasElement(),a=new ArrayBuffer(t*e*4);if(T.forceGLPutImageData)return this.imageBuffer=a,void(this.copyGLTo2D=k);var h,c,l={imageBuffer:a,destinationWidth:t,destinationHeight:e,targetCanvas:s};s.width=t,s.height=e,h=window.performance.now(),O.call(l,this.gl,l),c=window.performance.now()-h,h=window.performance.now(),k.call(l,this.gl,l),c>window.performance.now()-h?(this.imageBuffer=a,this.copyGLTo2D=k):this.copyGLTo2D=O}},createWebGLCanvas:function(t,e){var i=T.util.createCanvasElement();i.width=t,i.height=e;var n={alpha:!0,premultipliedAlpha:!1,depth:!1,stencil:!1,antialias:!1},r=i.getContext("webgl",n);r||(r=i.getContext("experimental-webgl",n)),r&&(r.clearColor(0,0,0,0),this.canvas=i,this.gl=r)},applyFilters:function(t,e,i,n,r,o){var s,a=this.gl;o&&(s=this.getCachedTexture(o,e));var h={originalWidth:e.width||e.originalWidth,originalHeight:e.height||e.originalHeight,sourceWidth:i,sourceHeight:n,destinationWidth:i,destinationHeight:n,context:a,sourceTexture:this.createTexture(a,i,n,!s&&e),targetTexture:this.createTexture(a,i,n),originalTexture:s||this.createTexture(a,i,n,!s&&e),passes:t.length,webgl:!0,aPosition:this.aPosition,programCache:this.programCache,pass:0,filterBackend:this,targetCanvas:r},c=a.createFramebuffer();return a.bindFramebuffer(a.FRAMEBUFFER,c),t.forEach((function(t){t&&t.applyTo(h)})),function(t){var e=t.targetCanvas,i=e.width,n=e.height,r=t.destinationWidth,o=t.destinationHeight;i===r&&n===o||(e.width=r,e.height=o)}(h),this.copyGLTo2D(a,h),a.bindTexture(a.TEXTURE_2D,null),a.deleteTexture(h.sourceTexture),a.deleteTexture(h.targetTexture),a.deleteFramebuffer(c),r.getContext("2d").setTransform(1,0,0,1,0,0),h},dispose:function(){this.canvas&&(this.canvas=null,this.gl=null),this.clearWebGLCaches()},clearWebGLCaches:function(){this.programCache={},this.textureCache={}},createTexture:function(t,e,i,n,r){var o=t.createTexture();return t.bindTexture(t.TEXTURE_2D,o),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,r||t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,r||t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),n?t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e,i,0,t.RGBA,t.UNSIGNED_BYTE,null),o},getCachedTexture:function(t,e){if(this.textureCache[t])return this.textureCache[t];var i=this.createTexture(this.gl,e.width,e.height,e);return this.textureCache[t]=i,i},evictCachesForKey:function(t){this.textureCache[t]&&(this.gl.deleteTexture(this.textureCache[t]),delete this.textureCache[t])},copyGLTo2D:O,captureGPUInfo:function(){if(this.gpuInfo)return this.gpuInfo;var t=this.gl,e={renderer:"",vendor:""};if(!t)return e;var i=t.getExtension("WEBGL_debug_renderer_info");if(i){var n=t.getParameter(i.UNMASKED_RENDERER_WEBGL),r=t.getParameter(i.UNMASKED_VENDOR_WEBGL);n&&(e.renderer=n.toLowerCase()),r&&(e.vendor=r.toLowerCase())}return this.gpuInfo=e,e}}}(),function(){"use strict";var t=function(){};function e(){}T.Canvas2dFilterBackend=e,e.prototype={evictCachesForKey:t,dispose:t,clearWebGLCaches:t,resources:{},applyFilters:function(t,e,i,n,r){var o=r.getContext("2d");o.drawImage(e,0,0,i,n);var s={sourceWidth:i,sourceHeight:n,imageData:o.getImageData(0,0,i,n),originalEl:e,originalImageData:o.getImageData(0,0,i,n),canvasEl:r,ctx:o,filterBackend:this};return t.forEach((function(t){t.applyTo(s)})),s.imageData.width===i&&s.imageData.height===n||(r.width=s.imageData.width,r.height=s.imageData.height),o.putImageData(s.imageData,0,0),s}}}(),T.Image=T.Image||{},T.Image.filters=T.Image.filters||{},T.Image.filters.BaseFilter=T.util.createClass({type:"BaseFilter",vertexSource:"attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvoid main() {\nvTexCoord = aPosition;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",fragmentSource:"precision highp float;\nvarying vec2 vTexCoord;\nuniform sampler2D uTexture;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\n}",initialize:function(t){t&&this.setOptions(t)},setOptions:function(t){for(var e in t)this[e]=t[e]},createProgram:function(t,e,i){e=e||this.fragmentSource,i=i||this.vertexSource,"highp"!==T.webGlPrecision&&(e=e.replace(/precision highp float/g,"precision "+T.webGlPrecision+" float"));var n=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(n,i),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw new Error("Vertex shader compile error for "+this.type+": "+t.getShaderInfoLog(n));var r=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(r,e),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error("Fragment shader compile error for "+this.type+": "+t.getShaderInfoLog(r));var o=t.createProgram();if(t.attachShader(o,n),t.attachShader(o,r),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS))throw new Error('Shader link error for "${this.type}" '+t.getProgramInfoLog(o));var s=this.getAttributeLocations(t,o),a=this.getUniformLocations(t,o)||{};return a.uStepW=t.getUniformLocation(o,"uStepW"),a.uStepH=t.getUniformLocation(o,"uStepH"),{program:o,attributeLocations:s,uniformLocations:a}},getAttributeLocations:function(t,e){return{aPosition:t.getAttribLocation(e,"aPosition")}},getUniformLocations:function(){return{}},sendAttributeData:function(t,e,i){var n=e.aPosition,r=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,r),t.enableVertexAttribArray(n),t.vertexAttribPointer(n,2,t.FLOAT,!1,0,0),t.bufferData(t.ARRAY_BUFFER,i,t.STATIC_DRAW)},_setupFrameBuffer:function(t){var e,i,n=t.context;t.passes>1?(e=t.destinationWidth,i=t.destinationHeight,t.sourceWidth===e&&t.sourceHeight===i||(n.deleteTexture(t.targetTexture),t.targetTexture=t.filterBackend.createTexture(n,e,i)),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t.targetTexture,0)):(n.bindFramebuffer(n.FRAMEBUFFER,null),n.finish())},_swapTextures:function(t){t.passes--,t.pass++;var e=t.targetTexture;t.targetTexture=t.sourceTexture,t.sourceTexture=e},isNeutralState:function(){var t=this.mainParameter,e=T.Image.filters[this.type].prototype;if(t){if(Array.isArray(e[t])){for(var i=e[t].length;i--;)if(this[t][i]!==e[t][i])return!1;return!0}return e[t]===this[t]}return!1},applyTo:function(t){t.webgl?(this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t)):this.applyTo2d(t)},retrieveShader:function(t){return t.programCache.hasOwnProperty(this.type)||(t.programCache[this.type]=this.createProgram(t.context)),t.programCache[this.type]},applyToWebGL:function(t){var e=t.context,i=this.retrieveShader(t);0===t.pass&&t.originalTexture?e.bindTexture(e.TEXTURE_2D,t.originalTexture):e.bindTexture(e.TEXTURE_2D,t.sourceTexture),e.useProgram(i.program),this.sendAttributeData(e,i.attributeLocations,t.aPosition),e.uniform1f(i.uniformLocations.uStepW,1/t.sourceWidth),e.uniform1f(i.uniformLocations.uStepH,1/t.sourceHeight),this.sendUniformData(e,i.uniformLocations),e.viewport(0,0,t.destinationWidth,t.destinationHeight),e.drawArrays(e.TRIANGLE_STRIP,0,4)},bindAdditionalTexture:function(t,e,i){t.activeTexture(i),t.bindTexture(t.TEXTURE_2D,e),t.activeTexture(t.TEXTURE0)},unbindAdditionalTexture:function(t,e){t.activeTexture(e),t.bindTexture(t.TEXTURE_2D,null),t.activeTexture(t.TEXTURE0)},getMainParameter:function(){return this[this.mainParameter]},setMainParameter:function(t){this[this.mainParameter]=t},sendUniformData:function(){},createHelpLayer:function(t){if(!t.helpLayer){var e=document.createElement("canvas");e.width=t.sourceWidth,e.height=t.sourceHeight,t.helpLayer=e}},toObject:function(){var t={type:this.type},e=this.mainParameter;return e&&(t[e]=this[e]),t},toJSON:function(){return this.toObject()}}),T.Image.filters.BaseFilter.fromObject=function(t,e){var i=new T.Image.filters[t.type](t);return e&&e(i),i},function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.ColorMatrix=n(i.BaseFilter,{type:"ColorMatrix",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nuniform mat4 uColorMatrix;\nuniform vec4 uConstants;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor *= uColorMatrix;\ncolor += uConstants;\ngl_FragColor = color;\n}",matrix:[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],mainParameter:"matrix",colorsOnly:!0,initialize:function(t){this.callSuper("initialize",t),this.matrix=this.matrix.slice(0)},applyTo2d:function(t){var e,i,n,r,o,s=t.imageData.data,a=s.length,h=this.matrix,c=this.colorsOnly;for(o=0;o<a;o+=4)e=s[o],i=s[o+1],n=s[o+2],c?(s[o]=e*h[0]+i*h[1]+n*h[2]+255*h[4],s[o+1]=e*h[5]+i*h[6]+n*h[7]+255*h[9],s[o+2]=e*h[10]+i*h[11]+n*h[12]+255*h[14]):(r=s[o+3],s[o]=e*h[0]+i*h[1]+n*h[2]+r*h[3]+255*h[4],s[o+1]=e*h[5]+i*h[6]+n*h[7]+r*h[8]+255*h[9],s[o+2]=e*h[10]+i*h[11]+n*h[12]+r*h[13]+255*h[14],s[o+3]=e*h[15]+i*h[16]+n*h[17]+r*h[18]+255*h[19])},getUniformLocations:function(t,e){return{uColorMatrix:t.getUniformLocation(e,"uColorMatrix"),uConstants:t.getUniformLocation(e,"uConstants")}},sendUniformData:function(t,e){var i=this.matrix,n=[i[0],i[1],i[2],i[3],i[5],i[6],i[7],i[8],i[10],i[11],i[12],i[13],i[15],i[16],i[17],i[18]],r=[i[4],i[9],i[14],i[19]];t.uniformMatrix4fv(e.uColorMatrix,!1,n),t.uniform4fv(e.uConstants,r)}}),e.Image.filters.ColorMatrix.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Brightness=n(i.BaseFilter,{type:"Brightness",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uBrightness;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += uBrightness;\ngl_FragColor = color;\n}",brightness:0,mainParameter:"brightness",applyTo2d:function(t){if(0!==this.brightness){var e,i=t.imageData.data,n=i.length,r=Math.round(255*this.brightness);for(e=0;e<n;e+=4)i[e]=i[e]+r,i[e+1]=i[e+1]+r,i[e+2]=i[e+2]+r}},getUniformLocations:function(t,e){return{uBrightness:t.getUniformLocation(e,"uBrightness")}},sendUniformData:function(t,e){t.uniform1f(e.uBrightness,this.brightness)}}),e.Image.filters.Brightness.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.Image.filters,r=e.util.createClass;n.Convolute=r(n.BaseFilter,{type:"Convolute",opaque:!1,matrix:[0,0,0,0,1,0,0,0,0],fragmentSource:{Convolute_3_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_3_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_5_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_5_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_7_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_7_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_9_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_9_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}"},retrieveShader:function(t){var e=Math.sqrt(this.matrix.length),i=this.type+"_"+e+"_"+(this.opaque?1:0),n=this.fragmentSource[i];return t.programCache.hasOwnProperty(i)||(t.programCache[i]=this.createProgram(t.context,n)),t.programCache[i]},applyTo2d:function(t){var e,i,n,r,o,s,a,h,c,l,u,f,d,g=t.imageData,p=g.data,v=this.matrix,m=Math.round(Math.sqrt(v.length)),y=Math.floor(m/2),_=g.width,x=g.height,b=t.ctx.createImageData(_,x),C=b.data,S=this.opaque?1:0;for(u=0;u<x;u++)for(l=0;l<_;l++){for(o=4*(u*_+l),e=0,i=0,n=0,r=0,d=0;d<m;d++)for(f=0;f<m;f++)s=l+f-y,(a=u+d-y)<0||a>=x||s<0||s>=_||(h=4*(a*_+s),c=v[d*m+f],e+=p[h]*c,i+=p[h+1]*c,n+=p[h+2]*c,S||(r+=p[h+3]*c));C[o]=e,C[o+1]=i,C[o+2]=n,C[o+3]=S?p[o+3]:r}t.imageData=b},getUniformLocations:function(t,e){return{uMatrix:t.getUniformLocation(e,"uMatrix"),uOpaque:t.getUniformLocation(e,"uOpaque"),uHalfSize:t.getUniformLocation(e,"uHalfSize"),uSize:t.getUniformLocation(e,"uSize")}},sendUniformData:function(t,e){t.uniform1fv(e.uMatrix,this.matrix)},toObject:function(){return i(this.callSuper("toObject"),{opaque:this.opaque,matrix:this.matrix})}}),e.Image.filters.Convolute.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Grayscale=n(i.BaseFilter,{type:"Grayscale",fragmentSource:{average:"precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat average = (color.r + color.b + color.g) / 3.0;\ngl_FragColor = vec4(average, average, average, color.a);\n}",lightness:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\ngl_FragColor = vec4(average, average, average, col.a);\n}",luminosity:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\ngl_FragColor = vec4(average, average, average, col.a);\n}"},mode:"average",mainParameter:"mode",applyTo2d:function(t){var e,i,n=t.imageData.data,r=n.length,o=this.mode;for(e=0;e<r;e+=4)"average"===o?i=(n[e]+n[e+1]+n[e+2])/3:"lightness"===o?i=(Math.min(n[e],n[e+1],n[e+2])+Math.max(n[e],n[e+1],n[e+2]))/2:"luminosity"===o&&(i=.21*n[e]+.72*n[e+1]+.07*n[e+2]),n[e]=i,n[e+1]=i,n[e+2]=i},retrieveShader:function(t){var e=this.type+"_"+this.mode;if(!t.programCache.hasOwnProperty(e)){var i=this.fragmentSource[this.mode];t.programCache[e]=this.createProgram(t.context,i)}return t.programCache[e]},getUniformLocations:function(t,e){return{uMode:t.getUniformLocation(e,"uMode")}},sendUniformData:function(t,e){t.uniform1i(e.uMode,1)},isNeutralState:function(){return!1}}),e.Image.filters.Grayscale.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Invert=n(i.BaseFilter,{type:"Invert",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uInvert;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nif (uInvert == 1) {\ngl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n} else {\ngl_FragColor = color;\n}\n}",invert:!0,mainParameter:"invert",applyTo2d:function(t){var e,i=t.imageData.data,n=i.length;for(e=0;e<n;e+=4)i[e]=255-i[e],i[e+1]=255-i[e+1],i[e+2]=255-i[e+2]},isNeutralState:function(){return!this.invert},getUniformLocations:function(t,e){return{uInvert:t.getUniformLocation(e,"uInvert")}},sendUniformData:function(t,e){t.uniform1i(e.uInvert,this.invert)}}),e.Image.filters.Invert.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.Image.filters,r=e.util.createClass;n.Noise=r(n.BaseFilter,{type:"Noise",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uStepH;\nuniform float uNoise;\nuniform float uSeed;\nvarying vec2 vTexCoord;\nfloat rand(vec2 co, float seed, float vScale) {\nreturn fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n}\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\ngl_FragColor = color;\n}",mainParameter:"noise",noise:0,applyTo2d:function(t){if(0!==this.noise){var e,i,n=t.imageData.data,r=n.length,o=this.noise;for(e=0,r=n.length;e<r;e+=4)i=(.5-Math.random())*o,n[e]+=i,n[e+1]+=i,n[e+2]+=i}},getUniformLocations:function(t,e){return{uNoise:t.getUniformLocation(e,"uNoise"),uSeed:t.getUniformLocation(e,"uSeed")}},sendUniformData:function(t,e){t.uniform1f(e.uNoise,this.noise/255),t.uniform1f(e.uSeed,Math.random())},toObject:function(){return i(this.callSuper("toObject"),{noise:this.noise})}}),e.Image.filters.Noise.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Pixelate=n(i.BaseFilter,{type:"Pixelate",blocksize:4,mainParameter:"blocksize",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uBlocksize;\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nfloat blockW = uBlocksize * uStepW;\nfloat blockH = uBlocksize * uStepW;\nint posX = int(vTexCoord.x / blockW);\nint posY = int(vTexCoord.y / blockH);\nfloat fposX = float(posX);\nfloat fposY = float(posY);\nvec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\nvec4 color = texture2D(uTexture, squareCoords);\ngl_FragColor = color;\n}",applyTo2d:function(t){var e,i,n,r,o,s,a,h,c,l,u,f=t.imageData,d=f.data,g=f.height,p=f.width;for(i=0;i<g;i+=this.blocksize)for(n=0;n<p;n+=this.blocksize)for(r=d[e=4*i*p+4*n],o=d[e+1],s=d[e+2],a=d[e+3],l=Math.min(i+this.blocksize,g),u=Math.min(n+this.blocksize,p),h=i;h<l;h++)for(c=n;c<u;c++)d[e=4*h*p+4*c]=r,d[e+1]=o,d[e+2]=s,d[e+3]=a},isNeutralState:function(){return 1===this.blocksize},getUniformLocations:function(t,e){return{uBlocksize:t.getUniformLocation(e,"uBlocksize"),uStepW:t.getUniformLocation(e,"uStepW"),uStepH:t.getUniformLocation(e,"uStepH")}},sendUniformData:function(t,e){t.uniform1f(e.uBlocksize,this.blocksize)}}),e.Image.filters.Pixelate.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.Image.filters,r=e.util.createClass;n.RemoveColor=r(n.BaseFilter,{type:"RemoveColor",color:"#FFFFFF",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\nif(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\ngl_FragColor.a = 0.0;\n}\n}",distance:.02,useAlpha:!1,applyTo2d:function(t){var i,n,r,o,s=t.imageData.data,a=255*this.distance,h=new e.Color(this.color).getSource(),c=[h[0]-a,h[1]-a,h[2]-a],l=[h[0]+a,h[1]+a,h[2]+a];for(i=0;i<s.length;i+=4)n=s[i],r=s[i+1],o=s[i+2],n>c[0]&&r>c[1]&&o>c[2]&&n<l[0]&&r<l[1]&&o<l[2]&&(s[i+3]=0)},getUniformLocations:function(t,e){return{uLow:t.getUniformLocation(e,"uLow"),uHigh:t.getUniformLocation(e,"uHigh")}},sendUniformData:function(t,i){var n=new e.Color(this.color).getSource(),r=parseFloat(this.distance),o=[0+n[0]/255-r,0+n[1]/255-r,0+n[2]/255-r,1],s=[n[0]/255+r,n[1]/255+r,n[2]/255+r,1];t.uniform4fv(i.uLow,o),t.uniform4fv(i.uHigh,s)},toObject:function(){return i(this.callSuper("toObject"),{color:this.color,distance:this.distance})}}),e.Image.filters.RemoveColor.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass,r={Brownie:[.5997,.34553,-.27082,0,.186,-.0377,.86095,.15059,0,-.1449,.24113,-.07441,.44972,0,-.02965,0,0,0,1,0],Vintage:[.62793,.32021,-.03965,0,.03784,.02578,.64411,.03259,0,.02926,.0466,-.08512,.52416,0,.02023,0,0,0,1,0],Kodachrome:[1.12855,-.39673,-.03992,0,.24991,-.16404,1.08352,-.05498,0,.09698,-.16786,-.56034,1.60148,0,.13972,0,0,0,1,0],Technicolor:[1.91252,-.85453,-.09155,0,.04624,-.30878,1.76589,-.10601,0,-.27589,-.2311,-.75018,1.84759,0,.12137,0,0,0,1,0],Polaroid:[1.438,-.062,-.062,0,0,-.122,1.378,-.122,0,0,-.016,-.016,1.483,0,0,0,0,0,1,0],Sepia:[.393,.769,.189,0,0,.349,.686,.168,0,0,.272,.534,.131,0,0,0,0,0,1,0],BlackWhite:[1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,0,0,0,1,0]};for(var o in r)i[o]=n(i.ColorMatrix,{type:o,matrix:r[o],mainParameter:!1,colorsOnly:!0}),e.Image.filters[o].fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric,i=e.Image.filters,n=e.util.createClass;i.BlendColor=n(i.BaseFilter,{type:"BlendColor",color:"#F95C63",mode:"multiply",alpha:1,fragmentSource:{multiply:"gl_FragColor.rgb *= uColor.rgb;\n",screen:"gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\n",add:"gl_FragColor.rgb += uColor.rgb;\n",diff:"gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\n",subtract:"gl_FragColor.rgb -= uColor.rgb;\n",lighten:"gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\n",darken:"gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\n",exclusion:"gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\n",overlay:"if (uColor.r < 0.5) {\ngl_FragColor.r *= 2.0 * uColor.r;\n} else {\ngl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n}\nif (uColor.g < 0.5) {\ngl_FragColor.g *= 2.0 * uColor.g;\n} else {\ngl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n}\nif (uColor.b < 0.5) {\ngl_FragColor.b *= 2.0 * uColor.b;\n} else {\ngl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n}\n",tint:"gl_FragColor.rgb *= (1.0 - uColor.a);\ngl_FragColor.rgb += uColor.rgb;\n"},buildSource:function(t){return"precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ngl_FragColor = color;\nif (color.a > 0.0) {\n"+this.fragmentSource[t]+"}\n}"},retrieveShader:function(t){var e,i=this.type+"_"+this.mode;return t.programCache.hasOwnProperty(i)||(e=this.buildSource(this.mode),t.programCache[i]=this.createProgram(t.context,e)),t.programCache[i]},applyTo2d:function(t){var i,n,r,o,s,a,h,c=t.imageData.data,l=c.length,u=1-this.alpha;i=(h=new e.Color(this.color).getSource())[0]*this.alpha,n=h[1]*this.alpha,r=h[2]*this.alpha;for(var f=0;f<l;f+=4)switch(o=c[f],s=c[f+1],a=c[f+2],this.mode){case"multiply":c[f]=o*i/255,c[f+1]=s*n/255,c[f+2]=a*r/255;break;case"screen":c[f]=255-(255-o)*(255-i)/255,c[f+1]=255-(255-s)*(255-n)/255,c[f+2]=255-(255-a)*(255-r)/255;break;case"add":c[f]=o+i,c[f+1]=s+n,c[f+2]=a+r;break;case"diff":case"difference":c[f]=Math.abs(o-i),c[f+1]=Math.abs(s-n),c[f+2]=Math.abs(a-r);break;case"subtract":c[f]=o-i,c[f+1]=s-n,c[f+2]=a-r;break;case"darken":c[f]=Math.min(o,i),c[f+1]=Math.min(s,n),c[f+2]=Math.min(a,r);break;case"lighten":c[f]=Math.max(o,i),c[f+1]=Math.max(s,n),c[f+2]=Math.max(a,r);break;case"overlay":c[f]=i<128?2*o*i/255:255-2*(255-o)*(255-i)/255,c[f+1]=n<128?2*s*n/255:255-2*(255-s)*(255-n)/255,c[f+2]=r<128?2*a*r/255:255-2*(255-a)*(255-r)/255;break;case"exclusion":c[f]=i+o-2*i*o/255,c[f+1]=n+s-2*n*s/255,c[f+2]=r+a-2*r*a/255;break;case"tint":c[f]=i+o*u,c[f+1]=n+s*u,c[f+2]=r+a*u}},getUniformLocations:function(t,e){return{uColor:t.getUniformLocation(e,"uColor")}},sendUniformData:function(t,i){var n=new e.Color(this.color).getSource();n[0]=this.alpha*n[0]/255,n[1]=this.alpha*n[1]/255,n[2]=this.alpha*n[2]/255,n[3]=this.alpha,t.uniform4fv(i.uColor,n)},toObject:function(){return{type:this.type,color:this.color,mode:this.mode,alpha:this.alpha}}}),e.Image.filters.BlendColor.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric,i=e.Image.filters,n=e.util.createClass;i.BlendImage=n(i.BaseFilter,{type:"BlendImage",image:null,mode:"multiply",alpha:1,vertexSource:"attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nuniform mat3 uTransformMatrix;\nvoid main() {\nvTexCoord = aPosition;\nvTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",fragmentSource:{multiply:"precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.rgba *= color2.rgba;\ngl_FragColor = color;\n}",mask:"precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.a = color2.a;\ngl_FragColor = color;\n}"},retrieveShader:function(t){var e=this.type+"_"+this.mode,i=this.fragmentSource[this.mode];return t.programCache.hasOwnProperty(e)||(t.programCache[e]=this.createProgram(t.context,i)),t.programCache[e]},applyToWebGL:function(t){var e=t.context,i=this.createTexture(t.filterBackend,this.image);this.bindAdditionalTexture(e,i,e.TEXTURE1),this.callSuper("applyToWebGL",t),this.unbindAdditionalTexture(e,e.TEXTURE1)},createTexture:function(t,e){return t.getCachedTexture(e.cacheKey,e._element)},calculateMatrix:function(){var t=this.image,e=t._element.width,i=t._element.height;return[1/t.scaleX,0,0,0,1/t.scaleY,0,-t.left/e,-t.top/i,1]},applyTo2d:function(t){var i,n,r,o,s,a,h,c,l,u,f,d=t.imageData,g=t.filterBackend.resources,p=d.data,v=p.length,m=d.width,y=d.height,_=this.image;g.blendImage||(g.blendImage=e.util.createCanvasElement()),u=(l=g.blendImage).getContext("2d"),l.width!==m||l.height!==y?(l.width=m,l.height=y):u.clearRect(0,0,m,y),u.setTransform(_.scaleX,0,0,_.scaleY,_.left,_.top),u.drawImage(_._element,0,0,m,y),f=u.getImageData(0,0,m,y).data;for(var x=0;x<v;x+=4)switch(s=p[x],a=p[x+1],h=p[x+2],c=p[x+3],i=f[x],n=f[x+1],r=f[x+2],o=f[x+3],this.mode){case"multiply":p[x]=s*i/255,p[x+1]=a*n/255,p[x+2]=h*r/255,p[x+3]=c*o/255;break;case"mask":p[x+3]=o}},getUniformLocations:function(t,e){return{uTransformMatrix:t.getUniformLocation(e,"uTransformMatrix"),uImage:t.getUniformLocation(e,"uImage")}},sendUniformData:function(t,e){var i=this.calculateMatrix();t.uniform1i(e.uImage,1),t.uniformMatrix3fv(e.uTransformMatrix,!1,i)},toObject:function(){return{type:this.type,image:this.image&&this.image.toObject(),mode:this.mode,alpha:this.alpha}}}),e.Image.filters.BlendImage.fromObject=function(t,i){e.Image.fromObject(t.image,(function(n){var r=e.util.object.clone(t);r.image=n,i(new e.Image.filters.BlendImage(r))}))}}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=Math.pow,n=Math.floor,r=Math.sqrt,o=Math.abs,s=Math.round,a=Math.sin,h=Math.ceil,c=e.Image.filters,l=e.util.createClass;c.Resize=l(c.BaseFilter,{type:"Resize",resizeType:"hermite",scaleX:1,scaleY:1,lanczosLobes:3,getUniformLocations:function(t,e){return{uDelta:t.getUniformLocation(e,"uDelta"),uTaps:t.getUniformLocation(e,"uTaps")}},sendUniformData:function(t,e){t.uniform2fv(e.uDelta,this.horizontal?[1/this.width,0]:[0,1/this.height]),t.uniform1fv(e.uTaps,this.taps)},retrieveShader:function(t){var e=this.getFilterWindow(),i=this.type+"_"+e;if(!t.programCache.hasOwnProperty(i)){var n=this.generateShader(e);t.programCache[i]=this.createProgram(t.context,n)}return t.programCache[i]},getFilterWindow:function(){var t=this.tempScale;return Math.ceil(this.lanczosLobes/t)},getTaps:function(){for(var t=this.lanczosCreate(this.lanczosLobes),e=this.tempScale,i=this.getFilterWindow(),n=new Array(i),r=1;r<=i;r++)n[r-1]=t(r*e);return n},generateShader:function(t){for(var e=new Array(t),i=this.fragmentSourceTOP,n=1;n<=t;n++)e[n-1]=n+".0 * uDelta";return i+="uniform float uTaps["+t+"];\n",i+="void main() {\n",i+="  vec4 color = texture2D(uTexture, vTexCoord);\n",i+="  float sum = 1.0;\n",e.forEach((function(t,e){i+="  color += texture2D(uTexture, vTexCoord + "+t+") * uTaps["+e+"];\n",i+="  color += texture2D(uTexture, vTexCoord - "+t+") * uTaps["+e+"];\n",i+="  sum += 2.0 * uTaps["+e+"];\n"})),i+="  gl_FragColor = color / sum;\n",i+="}"},fragmentSourceTOP:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\n",applyTo:function(t){t.webgl?(t.passes++,this.width=t.sourceWidth,this.horizontal=!0,this.dW=Math.round(this.width*this.scaleX),this.dH=t.sourceHeight,this.tempScale=this.dW/this.width,this.taps=this.getTaps(),t.destinationWidth=this.dW,this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t),t.sourceWidth=t.destinationWidth,this.height=t.sourceHeight,this.horizontal=!1,this.dH=Math.round(this.height*this.scaleY),this.tempScale=this.dH/this.height,this.taps=this.getTaps(),t.destinationHeight=this.dH,this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t),t.sourceHeight=t.destinationHeight):this.applyTo2d(t)},isNeutralState:function(){return 1===this.scaleX&&1===this.scaleY},lanczosCreate:function(t){return function(e){if(e>=t||e<=-t)return 0;if(e<1.1920929e-7&&e>-1.1920929e-7)return 1;var i=(e*=Math.PI)/t;return a(e)/e*a(i)/i}},applyTo2d:function(t){var e=t.imageData,i=this.scaleX,n=this.scaleY;this.rcpScaleX=1/i,this.rcpScaleY=1/n;var r,o=e.width,a=e.height,h=s(o*i),c=s(a*n);"sliceHack"===this.resizeType?r=this.sliceByTwo(t,o,a,h,c):"hermite"===this.resizeType?r=this.hermiteFastResize(t,o,a,h,c):"bilinear"===this.resizeType?r=this.bilinearFiltering(t,o,a,h,c):"lanczos"===this.resizeType&&(r=this.lanczosResize(t,o,a,h,c)),t.imageData=r},sliceByTwo:function(t,i,r,o,s){var a,h,c=t.imageData,l=.5,u=!1,f=!1,d=i*l,g=r*l,p=e.filterBackend.resources,v=0,m=0,y=i,_=0;for(p.sliceByTwo||(p.sliceByTwo=document.createElement("canvas")),((a=p.sliceByTwo).width<1.5*i||a.height<r)&&(a.width=1.5*i,a.height=r),(h=a.getContext("2d")).clearRect(0,0,1.5*i,r),h.putImageData(c,0,0),o=n(o),s=n(s);!u||!f;)i=d,r=g,o<n(d*l)?d=n(d*l):(d=o,u=!0),s<n(g*l)?g=n(g*l):(g=s,f=!0),h.drawImage(a,v,m,i,r,y,_,d,g),v=y,m=_,_+=g;return h.getImageData(v,m,o,s)},lanczosResize:function(t,e,s,a,c){var l=t.imageData.data,u=t.ctx.createImageData(a,c),f=u.data,d=this.lanczosCreate(this.lanczosLobes),g=this.rcpScaleX,p=this.rcpScaleY,v=2/this.rcpScaleX,m=2/this.rcpScaleY,y=h(g*this.lanczosLobes/2),_=h(p*this.lanczosLobes/2),x={},b={},C={};return function t(h){var S,w,T,A,O,k,P,E,j,M,D;for(b.x=(h+.5)*g,C.x=n(b.x),S=0;S<c;S++){for(b.y=(S+.5)*p,C.y=n(b.y),O=0,k=0,P=0,E=0,j=0,w=C.x-y;w<=C.x+y;w++)if(!(w<0||w>=e)){M=n(1e3*o(w-b.x)),x[M]||(x[M]={});for(var I=C.y-_;I<=C.y+_;I++)I<0||I>=s||(D=n(1e3*o(I-b.y)),x[M][D]||(x[M][D]=d(r(i(M*v,2)+i(D*m,2))/1e3)),(T=x[M][D])>0&&(O+=T,k+=T*l[A=4*(I*e+w)],P+=T*l[A+1],E+=T*l[A+2],j+=T*l[A+3]))}f[A=4*(S*a+h)]=k/O,f[A+1]=P/O,f[A+2]=E/O,f[A+3]=j/O}return++h<a?t(h):u}(0)},bilinearFiltering:function(t,e,i,r,o){var s,a,h,c,l,u,f,d,g,p=0,v=this.rcpScaleX,m=this.rcpScaleY,y=4*(e-1),_=t.imageData.data,x=t.ctx.createImageData(r,o),b=x.data;for(h=0;h<o;h++)for(c=0;c<r;c++)for(l=v*c-(s=n(v*c)),u=m*h-(a=n(m*h)),g=4*(a*e+s),f=0;f<4;f++)d=_[g+f]*(1-l)*(1-u)+_[g+4+f]*l*(1-u)+_[g+y+f]*u*(1-l)+_[g+y+4+f]*l*u,b[p++]=d;return x},hermiteFastResize:function(t,e,i,s,a){for(var c=this.rcpScaleX,l=this.rcpScaleY,u=h(c/2),f=h(l/2),d=t.imageData.data,g=t.ctx.createImageData(s,a),p=g.data,v=0;v<a;v++)for(var m=0;m<s;m++){for(var y=4*(m+v*s),_=0,x=0,b=0,C=0,S=0,w=0,T=0,A=(v+.5)*l,O=n(v*l);O<(v+1)*l;O++)for(var k=o(A-(O+.5))/f,P=(m+.5)*c,E=k*k,j=n(m*c);j<(m+1)*c;j++){var M=o(P-(j+.5))/u,D=r(E+M*M);D>1&&D<-1||(_=2*D*D*D-3*D*D+1)>0&&(T+=_*d[3+(M=4*(j+O*e))],b+=_,d[M+3]<255&&(_=_*d[M+3]/250),C+=_*d[M],S+=_*d[M+1],w+=_*d[M+2],x+=_)}p[y]=C/x,p[y+1]=S/x,p[y+2]=w/x,p[y+3]=T/b}return g},toObject:function(){return{type:this.type,scaleX:this.scaleX,scaleY:this.scaleY,resizeType:this.resizeType,lanczosLobes:this.lanczosLobes}}}),e.Image.filters.Resize.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Contrast=n(i.BaseFilter,{type:"Contrast",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uContrast;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\ncolor.rgb = contrastF * (color.rgb - 0.5) + 0.5;\ngl_FragColor = color;\n}",contrast:0,mainParameter:"contrast",applyTo2d:function(t){if(0!==this.contrast){var e,i=t.imageData.data,n=i.length,r=Math.floor(255*this.contrast),o=259*(r+255)/(255*(259-r));for(e=0;e<n;e+=4)i[e]=o*(i[e]-128)+128,i[e+1]=o*(i[e+1]-128)+128,i[e+2]=o*(i[e+2]-128)+128}},getUniformLocations:function(t,e){return{uContrast:t.getUniformLocation(e,"uContrast")}},sendUniformData:function(t,e){t.uniform1f(e.uContrast,this.contrast)}}),e.Image.filters.Contrast.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Saturation=n(i.BaseFilter,{type:"Saturation",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uSaturation;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat rgMax = max(color.r, color.g);\nfloat rgbMax = max(rgMax, color.b);\ncolor.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\ncolor.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\ncolor.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\ngl_FragColor = color;\n}",saturation:0,mainParameter:"saturation",applyTo2d:function(t){if(0!==this.saturation){var e,i,n=t.imageData.data,r=n.length,o=-this.saturation;for(e=0;e<r;e+=4)i=Math.max(n[e],n[e+1],n[e+2]),n[e]+=i!==n[e]?(i-n[e])*o:0,n[e+1]+=i!==n[e+1]?(i-n[e+1])*o:0,n[e+2]+=i!==n[e+2]?(i-n[e+2])*o:0}},getUniformLocations:function(t,e){return{uSaturation:t.getUniformLocation(e,"uSaturation")}},sendUniformData:function(t,e){t.uniform1f(e.uSaturation,-this.saturation)}}),e.Image.filters.Saturation.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Vibrance=n(i.BaseFilter,{type:"Vibrance",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uVibrance;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat max = max(color.r, max(color.g, color.b));\nfloat avg = (color.r + color.g + color.b) / 3.0;\nfloat amt = (abs(max - avg) * 2.0) * uVibrance;\ncolor.r += max != color.r ? (max - color.r) * amt : 0.00;\ncolor.g += max != color.g ? (max - color.g) * amt : 0.00;\ncolor.b += max != color.b ? (max - color.b) * amt : 0.00;\ngl_FragColor = color;\n}",vibrance:0,mainParameter:"vibrance",applyTo2d:function(t){if(0!==this.vibrance){var e,i,n,r,o=t.imageData.data,s=o.length,a=-this.vibrance;for(e=0;e<s;e+=4)i=Math.max(o[e],o[e+1],o[e+2]),n=(o[e]+o[e+1]+o[e+2])/3,r=2*Math.abs(i-n)/255*a,o[e]+=i!==o[e]?(i-o[e])*r:0,o[e+1]+=i!==o[e+1]?(i-o[e+1])*r:0,o[e+2]+=i!==o[e+2]?(i-o[e+2])*r:0}},getUniformLocations:function(t,e){return{uVibrance:t.getUniformLocation(e,"uVibrance")}},sendUniformData:function(t,e){t.uniform1f(e.uVibrance,-this.vibrance)}}),e.Image.filters.Vibrance.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Blur=n(i.BaseFilter,{type:"Blur",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\nconst float nSamples = 15.0;\nvec3 v3offset = vec3(12.9898, 78.233, 151.7182);\nfloat random(vec3 scale) {\nreturn fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n}\nvoid main() {\nvec4 color = vec4(0.0);\nfloat total = 0.0;\nfloat offset = random(v3offset);\nfor (float t = -nSamples; t <= nSamples; t++) {\nfloat percent = (t + offset - 0.5) / nSamples;\nfloat weight = 1.0 - abs(percent);\ncolor += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\ntotal += weight;\n}\ngl_FragColor = color / total;\n}",blur:0,mainParameter:"blur",applyTo:function(t){t.webgl?(this.aspectRatio=t.sourceWidth/t.sourceHeight,t.passes++,this._setupFrameBuffer(t),this.horizontal=!0,this.applyToWebGL(t),this._swapTextures(t),this._setupFrameBuffer(t),this.horizontal=!1,this.applyToWebGL(t),this._swapTextures(t)):this.applyTo2d(t)},applyTo2d:function(t){t.imageData=this.simpleBlur(t)},simpleBlur:function(t){var i,n,r=t.filterBackend.resources,o=t.imageData.width,s=t.imageData.height;r.blurLayer1||(r.blurLayer1=e.util.createCanvasElement(),r.blurLayer2=e.util.createCanvasElement()),i=r.blurLayer1,n=r.blurLayer2,i.width===o&&i.height===s||(n.width=i.width=o,n.height=i.height=s);var a,h,c,l,u=i.getContext("2d"),f=n.getContext("2d"),d=.06*this.blur*.5;for(u.putImageData(t.imageData,0,0),f.clearRect(0,0,o,s),l=-15;l<=15;l++)c=d*(h=l/15)*o+(a=(Math.random()-.5)/4),f.globalAlpha=1-Math.abs(h),f.drawImage(i,c,a),u.drawImage(n,0,0),f.globalAlpha=1,f.clearRect(0,0,n.width,n.height);for(l=-15;l<=15;l++)c=d*(h=l/15)*s+(a=(Math.random()-.5)/4),f.globalAlpha=1-Math.abs(h),f.drawImage(i,a,c),u.drawImage(n,0,0),f.globalAlpha=1,f.clearRect(0,0,n.width,n.height);t.ctx.drawImage(i,0,0);var g=t.ctx.getImageData(0,0,i.width,i.height);return u.globalAlpha=1,u.clearRect(0,0,i.width,i.height),g},getUniformLocations:function(t,e){return{delta:t.getUniformLocation(e,"uDelta")}},sendUniformData:function(t,e){var i=this.chooseRightDelta();t.uniform2fv(e.delta,i)},chooseRightDelta:function(){var t,e=1,i=[0,0];return this.horizontal?this.aspectRatio>1&&(e=1/this.aspectRatio):this.aspectRatio<1&&(e=this.aspectRatio),t=e*this.blur*.12,this.horizontal?i[0]=t:i[1]=t,i}}),i.Blur.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Gamma=n(i.BaseFilter,{type:"Gamma",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec3 uGamma;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec3 correction = (1.0 / uGamma);\ncolor.r = pow(color.r, correction.r);\ncolor.g = pow(color.g, correction.g);\ncolor.b = pow(color.b, correction.b);\ngl_FragColor = color;\ngl_FragColor.rgb *= color.a;\n}",gamma:[1,1,1],mainParameter:"gamma",initialize:function(t){this.gamma=[1,1,1],i.BaseFilter.prototype.initialize.call(this,t)},applyTo2d:function(t){var e,i=t.imageData.data,n=this.gamma,r=i.length,o=1/n[0],s=1/n[1],a=1/n[2];for(this.rVals||(this.rVals=new Uint8Array(256),this.gVals=new Uint8Array(256),this.bVals=new Uint8Array(256)),e=0,r=256;e<r;e++)this.rVals[e]=255*Math.pow(e/255,o),this.gVals[e]=255*Math.pow(e/255,s),this.bVals[e]=255*Math.pow(e/255,a);for(e=0,r=i.length;e<r;e+=4)i[e]=this.rVals[i[e]],i[e+1]=this.gVals[i[e+1]],i[e+2]=this.bVals[i[e+2]]},getUniformLocations:function(t,e){return{uGamma:t.getUniformLocation(e,"uGamma")}},sendUniformData:function(t,e){t.uniform3fv(e.uGamma,this.gamma)}}),e.Image.filters.Gamma.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Composed=n(i.BaseFilter,{type:"Composed",subFilters:[],initialize:function(t){this.callSuper("initialize",t),this.subFilters=this.subFilters.slice(0)},applyTo:function(t){t.passes+=this.subFilters.length-1,this.subFilters.forEach((function(e){e.applyTo(t)}))},toObject:function(){return e.util.object.extend(this.callSuper("toObject"),{subFilters:this.subFilters.map((function(t){return t.toObject()}))})},isNeutralState:function(){return!this.subFilters.some((function(t){return!t.isNeutralState()}))}}),e.Image.filters.Composed.fromObject=function(t,i){var n=(t.subFilters||[]).map((function(t){return new e.Image.filters[t.type](t)})),r=new e.Image.filters.Composed({subFilters:n});return i&&i(r),r}}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.HueRotation=n(i.ColorMatrix,{type:"HueRotation",rotation:0,mainParameter:"rotation",calculateMatrix:function(){var t=this.rotation*Math.PI,i=e.util.cos(t),n=e.util.sin(t),r=1/3,o=Math.sqrt(r)*n,s=1-i;this.matrix=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],this.matrix[0]=i+s/3,this.matrix[1]=r*s-o,this.matrix[2]=r*s+o,this.matrix[5]=r*s+o,this.matrix[6]=i+r*s,this.matrix[7]=r*s-o,this.matrix[10]=r*s-o,this.matrix[11]=r*s+o,this.matrix[12]=i+r*s},isNeutralState:function(t){return this.calculateMatrix(),i.BaseFilter.prototype.isNeutralState.call(this,t)},applyTo:function(t){this.calculateMatrix(),i.BaseFilter.prototype.applyTo.call(this,t)}}),e.Image.filters.HueRotation.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.clone;if(e.Text)e.warn("fabric.Text is already defined");else{var n="fontFamily fontWeight fontSize text underline overline linethrough textAlign fontStyle lineHeight textBackgroundColor charSpacing styles direction path pathStartOffset pathSide pathAlign".split(" ");e.Text=e.util.createClass(e.Object,{_dimensionAffectingProps:["fontSize","fontWeight","fontFamily","fontStyle","lineHeight","text","charSpacing","textAlign","styles","path","pathStartOffset","pathSide","pathAlign"],_reNewline:/\r?\n/,_reSpacesAndTabs:/[ \t\r]/g,_reSpaceAndTab:/[ \t\r]/,_reWords:/\S+/g,type:"text",fontSize:40,fontWeight:"normal",fontFamily:"Times New Roman",underline:!1,overline:!1,linethrough:!1,textAlign:"left",fontStyle:"normal",lineHeight:1.16,superscript:{size:.6,baseline:-.35},subscript:{size:.6,baseline:.11},textBackgroundColor:"",stateProperties:e.Object.prototype.stateProperties.concat(n),cacheProperties:e.Object.prototype.cacheProperties.concat(n),stroke:null,shadow:null,path:null,pathStartOffset:0,pathSide:"left",pathAlign:"baseline",_fontSizeFraction:.222,offsets:{underline:.1,linethrough:-.315,overline:-.88},_fontSizeMult:1.13,charSpacing:0,styles:null,_measuringContext:null,deltaY:0,direction:"ltr",_styleProperties:["stroke","strokeWidth","fill","fontFamily","fontSize","fontWeight","fontStyle","underline","overline","linethrough","deltaY","textBackgroundColor"],__charBounds:[],CACHE_FONT_SIZE:400,MIN_TEXT_WIDTH:2,initialize:function(t,e){this.styles=e&&e.styles||{},this.text=t,this.__skipDimension=!0,this.callSuper("initialize",e),this.path&&this.setPathInfo(),this.__skipDimension=!1,this.initDimensions(),this.setCoords(),this.setupState({propertySet:"_dimensionAffectingProps"})},setPathInfo:function(){var t=this.path;t&&(t.segmentsInfo=e.util.getPathSegmentsInfo(t.path))},getMeasuringContext:function(){return e._measuringContext||(e._measuringContext=this.canvas&&this.canvas.contextCache||e.util.createCanvasElement().getContext("2d")),e._measuringContext},_splitText:function(){var t=this._splitTextIntoLines(this.text);return this.textLines=t.lines,this._textLines=t.graphemeLines,this._unwrappedTextLines=t._unwrappedLines,this._text=t.graphemeText,t},initDimensions:function(){this.__skipDimension||(this._splitText(),this._clearCache(),this.path?(this.width=this.path.width,this.height=this.path.height):(this.width=this.calcTextWidth()||this.cursorWidth||this.MIN_TEXT_WIDTH,this.height=this.calcTextHeight()),-1!==this.textAlign.indexOf("justify")&&this.enlargeSpaces(),this.saveState({propertySet:"_dimensionAffectingProps"}))},enlargeSpaces:function(){for(var t,e,i,n,r,o,s,a=0,h=this._textLines.length;a<h;a++)if(("justify"===this.textAlign||a!==h-1&&!this.isEndOfWrapping(a))&&(n=0,r=this._textLines[a],(e=this.getLineWidth(a))<this.width&&(s=this.textLines[a].match(this._reSpacesAndTabs)))){i=s.length,t=(this.width-e)/i;for(var c=0,l=r.length;c<=l;c++)o=this.__charBounds[a][c],this._reSpaceAndTab.test(r[c])?(o.width+=t,o.kernedWidth+=t,o.left+=n,n+=t):o.left+=n}},isEndOfWrapping:function(t){return t===this._textLines.length-1},missingNewlineOffset:function(){return 1},toString:function(){return"#<fabric.Text ("+this.complexity()+'): { "text": "'+this.text+'", "fontFamily": "'+this.fontFamily+'" }>'},_getCacheCanvasDimensions:function(){var t=this.callSuper("_getCacheCanvasDimensions"),e=this.fontSize;return t.width+=e*t.zoomX,t.height+=e*t.zoomY,t},_render:function(t){var e=this.path;e&&!e.isNotVisible()&&e._render(t),this._setTextStyles(t),this._renderTextLinesBackground(t),this._renderTextDecoration(t,"underline"),this._renderText(t),this._renderTextDecoration(t,"overline"),this._renderTextDecoration(t,"linethrough")},_renderText:function(t){"stroke"===this.paintFirst?(this._renderTextStroke(t),this._renderTextFill(t)):(this._renderTextFill(t),this._renderTextStroke(t))},_setTextStyles:function(t,e,i){if(t.textBaseline="alphabetical",this.path)switch(this.pathAlign){case"center":t.textBaseline="middle";break;case"ascender":t.textBaseline="top";break;case"descender":t.textBaseline="bottom"}t.font=this._getFontDeclaration(e,i)},calcTextWidth:function(){for(var t=this.getLineWidth(0),e=1,i=this._textLines.length;e<i;e++){var n=this.getLineWidth(e);n>t&&(t=n)}return t},_renderTextLine:function(t,e,i,n,r,o){this._renderChars(t,e,i,n,r,o)},_renderTextLinesBackground:function(t){if(this.textBackgroundColor||this.styleHas("textBackgroundColor")){for(var e,i,n,r,o,s,a,h=t.fillStyle,c=this._getLeftOffset(),l=this._getTopOffset(),u=0,f=0,d=this.path,g=0,p=this._textLines.length;g<p;g++)if(e=this.getHeightOfLine(g),this.textBackgroundColor||this.styleHas("textBackgroundColor",g)){n=this._textLines[g],i=this._getLineLeftOffset(g),f=0,u=0,r=this.getValueOfPropertyAt(g,0,"textBackgroundColor");for(var v=0,m=n.length;v<m;v++)o=this.__charBounds[g][v],s=this.getValueOfPropertyAt(g,v,"textBackgroundColor"),d?(t.save(),t.translate(o.renderLeft,o.renderTop),t.rotate(o.angle),t.fillStyle=s,s&&t.fillRect(-o.width/2,-e/this.lineHeight*(1-this._fontSizeFraction),o.width,e/this.lineHeight),t.restore()):s!==r?(a=c+i+u,"rtl"===this.direction&&(a=this.width-a-f),t.fillStyle=r,r&&t.fillRect(a,l,f,e/this.lineHeight),u=o.left,f=o.width,r=s):f+=o.kernedWidth;s&&!d&&(a=c+i+u,"rtl"===this.direction&&(a=this.width-a-f),t.fillStyle=s,t.fillRect(a,l,f,e/this.lineHeight)),l+=e}else l+=e;t.fillStyle=h,this._removeShadow(t)}},getFontCache:function(t){var i=t.fontFamily.toLowerCase();e.charWidthsCache[i]||(e.charWidthsCache[i]={});var n=e.charWidthsCache[i],r=t.fontStyle.toLowerCase()+"_"+(t.fontWeight+"").toLowerCase();return n[r]||(n[r]={}),n[r]},_measureChar:function(t,e,i,n){var r,o,s,a,h=this.getFontCache(e),c=i+t,l=this._getFontDeclaration(e)===this._getFontDeclaration(n),u=e.fontSize/this.CACHE_FONT_SIZE;if(i&&void 0!==h[i]&&(s=h[i]),void 0!==h[t]&&(a=r=h[t]),l&&void 0!==h[c]&&(a=(o=h[c])-s),void 0===r||void 0===s||void 0===o){var f=this.getMeasuringContext();this._setTextStyles(f,e,!0)}return void 0===r&&(a=r=f.measureText(t).width,h[t]=r),void 0===s&&l&&i&&(s=f.measureText(i).width,h[i]=s),l&&void 0===o&&(o=f.measureText(c).width,h[c]=o,a=o-s),{width:r*u,kernedWidth:a*u}},getHeightOfChar:function(t,e){return this.getValueOfPropertyAt(t,e,"fontSize")},measureLine:function(t){var e=this._measureLine(t);return 0!==this.charSpacing&&(e.width-=this._getWidthOfCharSpacing()),e.width<0&&(e.width=0),e},_measureLine:function(t){var i,n,r,o,s,a,h=0,c=this._textLines[t],l=new Array(c.length),u=0,f=this.path,d="right"===this.pathSide;for(this.__charBounds[t]=l,i=0;i<c.length;i++)n=c[i],o=this._getGraphemeBox(n,t,i,r),l[i]=o,h+=o.kernedWidth,r=n;if(l[i]={left:o?o.left+o.width:0,width:0,kernedWidth:0,height:this.fontSize},f){switch(a=f.segmentsInfo[f.segmentsInfo.length-1].length,(s=e.util.getPointOnPath(f.path,0,f.segmentsInfo)).x+=f.pathOffset.x,s.y+=f.pathOffset.y,this.textAlign){case"left":u=d?a-h:0;break;case"center":u=(a-h)/2;break;case"right":u=d?0:a-h}for(u+=this.pathStartOffset*(d?-1:1),i=d?c.length-1:0;d?i>=0:i<c.length;d?i--:i++)o=l[i],u>a?u%=a:u<0&&(u+=a),this._setGraphemeOnPath(u,o,s),u+=o.kernedWidth}return{width:h,numOfSpaces:0}},_setGraphemeOnPath:function(t,i,n){var r=t+i.kernedWidth/2,o=this.path,s=e.util.getPointOnPath(o.path,r,o.segmentsInfo);i.renderLeft=s.x-n.x,i.renderTop=s.y-n.y,i.angle=s.angle+("right"===this.pathSide?Math.PI:0)},_getGraphemeBox:function(t,e,i,n,r){var o,s=this.getCompleteStyleDeclaration(e,i),a=n?this.getCompleteStyleDeclaration(e,i-1):{},h=this._measureChar(t,s,n,a),c=h.kernedWidth,l=h.width;0!==this.charSpacing&&(l+=o=this._getWidthOfCharSpacing(),c+=o);var u={width:l,left:0,height:s.fontSize,kernedWidth:c,deltaY:s.deltaY};if(i>0&&!r){var f=this.__charBounds[e][i-1];u.left=f.left+f.width+h.kernedWidth-h.width}return u},getHeightOfLine:function(t){if(this.__lineHeights[t])return this.__lineHeights[t];for(var e=this._textLines[t],i=this.getHeightOfChar(t,0),n=1,r=e.length;n<r;n++)i=Math.max(this.getHeightOfChar(t,n),i);return this.__lineHeights[t]=i*this.lineHeight*this._fontSizeMult},calcTextHeight:function(){for(var t,e=0,i=0,n=this._textLines.length;i<n;i++)t=this.getHeightOfLine(i),e+=i===n-1?t/this.lineHeight:t;return e},_getLeftOffset:function(){return"ltr"===this.direction?-this.width/2:this.width/2},_getTopOffset:function(){return-this.height/2},_renderTextCommon:function(t,e){t.save();for(var i=0,n=this._getLeftOffset(),r=this._getTopOffset(),o=0,s=this._textLines.length;o<s;o++){var a=this.getHeightOfLine(o),h=a/this.lineHeight,c=this._getLineLeftOffset(o);this._renderTextLine(e,t,this._textLines[o],n+c,r+i+h,o),i+=a}t.restore()},_renderTextFill:function(t){(this.fill||this.styleHas("fill"))&&this._renderTextCommon(t,"fillText")},_renderTextStroke:function(t){(this.stroke&&0!==this.strokeWidth||!this.isEmptyStyles())&&(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(t),t.save(),this._setLineDash(t,this.strokeDashArray),t.beginPath(),this._renderTextCommon(t,"strokeText"),t.closePath(),t.restore())},_renderChars:function(t,i,n,r,o,s){var a,h,c,l,u,f=this.getHeightOfLine(s),d=-1!==this.textAlign.indexOf("justify"),g="",p=0,v=this.path,m=!d&&0===this.charSpacing&&this.isEmptyStyles(s)&&!v,y="ltr"===this.direction,_="ltr"===this.direction?1:-1,x=i.canvas.getAttribute("dir");if(i.save(),x!==this.direction&&(i.canvas.setAttribute("dir",y?"ltr":"rtl"),i.direction=y?"ltr":"rtl",i.textAlign=y?"left":"right"),o-=f*this._fontSizeFraction/this.lineHeight,m)return this._renderChar(t,i,s,0,n.join(""),r,o,f),void i.restore();for(var b=0,C=n.length-1;b<=C;b++)l=b===C||this.charSpacing||v,g+=n[b],c=this.__charBounds[s][b],0===p?(r+=_*(c.kernedWidth-c.width),p+=c.width):p+=c.kernedWidth,d&&!l&&this._reSpaceAndTab.test(n[b])&&(l=!0),l||(a=a||this.getCompleteStyleDeclaration(s,b),h=this.getCompleteStyleDeclaration(s,b+1),l=e.util.hasStyleChanged(a,h,!1)),l&&(v?(i.save(),i.translate(c.renderLeft,c.renderTop),i.rotate(c.angle),this._renderChar(t,i,s,b,g,-p/2,0,f),i.restore()):(u=r,this._renderChar(t,i,s,b,g,u,o,f)),g="",a=h,r+=_*p,p=0);i.restore()},_applyPatternGradientTransformText:function(t){var i,n=e.util.createCanvasElement(),r=this.width+this.strokeWidth,o=this.height+this.strokeWidth;return n.width=r,n.height=o,(i=n.getContext("2d")).beginPath(),i.moveTo(0,0),i.lineTo(r,0),i.lineTo(r,o),i.lineTo(0,o),i.closePath(),i.translate(r/2,o/2),i.fillStyle=t.toLive(i),this._applyPatternGradientTransform(i,t),i.fill(),i.createPattern(n,"no-repeat")},handleFiller:function(t,e,i){var n,r;return i.toLive?"percentage"===i.gradientUnits||i.gradientTransform||i.patternTransform?(n=-this.width/2,r=-this.height/2,t.translate(n,r),t[e]=this._applyPatternGradientTransformText(i),{offsetX:n,offsetY:r}):(t[e]=i.toLive(t,this),this._applyPatternGradientTransform(t,i)):(t[e]=i,{offsetX:0,offsetY:0})},_setStrokeStyles:function(t,e){return t.lineWidth=e.strokeWidth,t.lineCap=this.strokeLineCap,t.lineDashOffset=this.strokeDashOffset,t.lineJoin=this.strokeLineJoin,t.miterLimit=this.strokeMiterLimit,this.handleFiller(t,"strokeStyle",e.stroke)},_setFillStyles:function(t,e){return this.handleFiller(t,"fillStyle",e.fill)},_renderChar:function(t,e,i,n,r,o,s){var a,h,c=this._getStyleDeclaration(i,n),l=this.getCompleteStyleDeclaration(i,n),u="fillText"===t&&l.fill,f="strokeText"===t&&l.stroke&&l.strokeWidth;(f||u)&&(e.save(),u&&(a=this._setFillStyles(e,l)),f&&(h=this._setStrokeStyles(e,l)),e.font=this._getFontDeclaration(l),c&&c.textBackgroundColor&&this._removeShadow(e),c&&c.deltaY&&(s+=c.deltaY),u&&e.fillText(r,o-a.offsetX,s-a.offsetY),f&&e.strokeText(r,o-h.offsetX,s-h.offsetY),e.restore())},setSuperscript:function(t,e){return this._setScript(t,e,this.superscript)},setSubscript:function(t,e){return this._setScript(t,e,this.subscript)},_setScript:function(t,e,i){var n=this.get2DCursorLocation(t,!0),r=this.getValueOfPropertyAt(n.lineIndex,n.charIndex,"fontSize"),o=this.getValueOfPropertyAt(n.lineIndex,n.charIndex,"deltaY"),s={fontSize:r*i.size,deltaY:o+r*i.baseline};return this.setSelectionStyles(s,t,e),this},_getLineLeftOffset:function(t){var e=this.getLineWidth(t),i=this.width-e,n=this.textAlign,r=this.direction,o=0,s=this.isEndOfWrapping(t);return"justify"===n||"justify-center"===n&&!s||"justify-right"===n&&!s||"justify-left"===n&&!s?0:("center"===n&&(o=i/2),"right"===n&&(o=i),"justify-center"===n&&(o=i/2),"justify-right"===n&&(o=i),"rtl"===r&&(o-=i),o)},_clearCache:function(){this.__lineWidths=[],this.__lineHeights=[],this.__charBounds=[]},_shouldClearDimensionCache:function(){var t=this._forceClearCache;return t||(t=this.hasStateChanged("_dimensionAffectingProps")),t&&(this.dirty=!0,this._forceClearCache=!1),t},getLineWidth:function(t){if(void 0!==this.__lineWidths[t])return this.__lineWidths[t];var e=this.measureLine(t).width;return this.__lineWidths[t]=e,e},_getWidthOfCharSpacing:function(){return 0!==this.charSpacing?this.fontSize*this.charSpacing/1e3:0},getValueOfPropertyAt:function(t,e,i){var n=this._getStyleDeclaration(t,e);return n&&void 0!==n[i]?n[i]:this[i]},_renderTextDecoration:function(t,e){if(this[e]||this.styleHas(e)){for(var i,n,r,o,s,a,h,c,l,u,f,d,g,p,v,m,y=this._getLeftOffset(),_=this._getTopOffset(),x=this.path,b=this._getWidthOfCharSpacing(),C=this.offsets[e],S=0,w=this._textLines.length;S<w;S++)if(i=this.getHeightOfLine(S),this[e]||this.styleHas(e,S)){h=this._textLines[S],p=i/this.lineHeight,o=this._getLineLeftOffset(S),u=0,f=0,c=this.getValueOfPropertyAt(S,0,e),m=this.getValueOfPropertyAt(S,0,"fill"),l=_+p*(1-this._fontSizeFraction),n=this.getHeightOfChar(S,0),s=this.getValueOfPropertyAt(S,0,"deltaY");for(var T=0,A=h.length;T<A;T++)if(d=this.__charBounds[S][T],g=this.getValueOfPropertyAt(S,T,e),v=this.getValueOfPropertyAt(S,T,"fill"),r=this.getHeightOfChar(S,T),a=this.getValueOfPropertyAt(S,T,"deltaY"),x&&g&&v)t.save(),t.fillStyle=m,t.translate(d.renderLeft,d.renderTop),t.rotate(d.angle),t.fillRect(-d.kernedWidth/2,C*r+a,d.kernedWidth,this.fontSize/15),t.restore();else if((g!==c||v!==m||r!==n||a!==s)&&f>0){var O=y+o+u;"rtl"===this.direction&&(O=this.width-O-f),c&&m&&(t.fillStyle=m,t.fillRect(O,l+C*n+s,f,this.fontSize/15)),u=d.left,f=d.width,c=g,m=v,n=r,s=a}else f+=d.kernedWidth;O=y+o+u,"rtl"===this.direction&&(O=this.width-O-f),t.fillStyle=v,g&&v&&t.fillRect(O,l+C*n+s,f-b,this.fontSize/15),_+=i}else _+=i;this._removeShadow(t)}},_getFontDeclaration:function(t,i){var n=t||this,r=this.fontFamily,o=e.Text.genericFonts.indexOf(r.toLowerCase())>-1,s=void 0===r||r.indexOf("'")>-1||r.indexOf(",")>-1||r.indexOf('"')>-1||o?n.fontFamily:'"'+n.fontFamily+'"';return[e.isLikelyNode?n.fontWeight:n.fontStyle,e.isLikelyNode?n.fontStyle:n.fontWeight,i?this.CACHE_FONT_SIZE+"px":n.fontSize+"px",s].join(" ")},render:function(t){this.visible&&(this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(this._shouldClearDimensionCache()&&this.initDimensions(),this.callSuper("render",t)))},_splitTextIntoLines:function(t){for(var i=t.split(this._reNewline),n=new Array(i.length),r=["\n"],o=[],s=0;s<i.length;s++)n[s]=e.util.string.graphemeSplit(i[s]),o=o.concat(n[s],r);return o.pop(),{_unwrappedLines:n,lines:i,graphemeText:o,graphemeLines:n}},toObject:function(t){var i=n.concat(t),r=this.callSuper("toObject",i);return r.styles=e.util.stylesToArray(this.styles,this.text),r.path&&(r.path=this.path.toObject()),r},set:function(t,e){this.callSuper("set",t,e);var i=!1,n=!1;if("object"==typeof t)for(var r in t)"path"===r&&this.setPathInfo(),i=i||-1!==this._dimensionAffectingProps.indexOf(r),n=n||"path"===r;else i=-1!==this._dimensionAffectingProps.indexOf(t),n="path"===t;return n&&this.setPathInfo(),i&&(this.initDimensions(),this.setCoords()),this},complexity:function(){return 1}}),e.Text.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor".split(" ")),e.Text.DEFAULT_SVG_FONT_SIZE=16,e.Text.fromElement=function(t,n,r){if(!t)return n(null);var o=e.parseAttributes(t,e.Text.ATTRIBUTE_NAMES),s=o.textAnchor||"left";if((r=e.util.object.extend(r?i(r):{},o)).top=r.top||0,r.left=r.left||0,o.textDecoration){var a=o.textDecoration;-1!==a.indexOf("underline")&&(r.underline=!0),-1!==a.indexOf("overline")&&(r.overline=!0),-1!==a.indexOf("line-through")&&(r.linethrough=!0),delete r.textDecoration}"dx"in o&&(r.left+=o.dx),"dy"in o&&(r.top+=o.dy),"fontSize"in r||(r.fontSize=e.Text.DEFAULT_SVG_FONT_SIZE);var h="";"textContent"in t?h=t.textContent:"firstChild"in t&&null!==t.firstChild&&"data"in t.firstChild&&null!==t.firstChild.data&&(h=t.firstChild.data),h=h.replace(/^\s+|\s+$|\n+/g,"").replace(/\s+/g," ");var c=r.strokeWidth;r.strokeWidth=0;var l=new e.Text(h,r),u=l.getScaledHeight()/l.height,f=((l.height+l.strokeWidth)*l.lineHeight-l.height)*u,d=l.getScaledHeight()+f,g=0;"center"===s&&(g=l.getScaledWidth()/2),"right"===s&&(g=l.getScaledWidth()),l.set({left:l.left-g,top:l.top-(d-l.fontSize*(.07+l._fontSizeFraction))/l.lineHeight,strokeWidth:void 0!==c?c:1}),n(l)},e.Text.fromObject=function(t,n){var r=i(t),o=t.path;return delete r.path,e.Object._fromObject("Text",r,(function(i){i.styles=e.util.stylesFromArray(t.styles,t.text),o?e.Object._fromObject("Path",o,(function(t){i.set("path",t),n(i)}),"path"):n(i)}),"text")},e.Text.genericFonts=["sans-serif","serif","cursive","fantasy","monospace"],e.util.createAccessors&&e.util.createAccessors(e.Text)}}(e),T.util.object.extend(T.Text.prototype,{isEmptyStyles:function(t){if(!this.styles)return!0;if(void 0!==t&&!this.styles[t])return!0;var e=void 0===t?this.styles:{line:this.styles[t]};for(var i in e)for(var n in e[i])for(var r in e[i][n])return!1;return!0},styleHas:function(t,e){if(!this.styles||!t||""===t)return!1;if(void 0!==e&&!this.styles[e])return!1;var i=void 0===e?this.styles:{0:this.styles[e]};for(var n in i)for(var r in i[n])if(void 0!==i[n][r][t])return!0;return!1},cleanStyle:function(t){if(!this.styles||!t||""===t)return!1;var e,i,n=this.styles,r=0,o=!0,s=0;for(var a in n){for(var h in e=0,n[a]){var c;r++,(c=n[a][h]).hasOwnProperty(t)?(i?c[t]!==i&&(o=!1):i=c[t],c[t]===this[t]&&delete c[t]):o=!1,0!==Object.keys(c).length?e++:delete n[a][h]}0===e&&delete n[a]}for(var l=0;l<this._textLines.length;l++)s+=this._textLines[l].length;o&&r===s&&(this[t]=i,this.removeStyle(t))},removeStyle:function(t){if(this.styles&&t&&""!==t){var e,i,n,r=this.styles;for(i in r){for(n in e=r[i])delete e[n][t],0===Object.keys(e[n]).length&&delete e[n];0===Object.keys(e).length&&delete r[i]}}},_extendStyles:function(t,e){var i=this.get2DCursorLocation(t);this._getLineStyle(i.lineIndex)||this._setLineStyle(i.lineIndex),this._getStyleDeclaration(i.lineIndex,i.charIndex)||this._setStyleDeclaration(i.lineIndex,i.charIndex,{}),T.util.object.extend(this._getStyleDeclaration(i.lineIndex,i.charIndex),e)},get2DCursorLocation:function(t,e){void 0===t&&(t=this.selectionStart);for(var i=e?this._unwrappedTextLines:this._textLines,n=i.length,r=0;r<n;r++){if(t<=i[r].length)return{lineIndex:r,charIndex:t};t-=i[r].length+this.missingNewlineOffset(r)}return{lineIndex:r-1,charIndex:i[r-1].length<t?i[r-1].length:t}},getSelectionStyles:function(t,e,i){void 0===t&&(t=this.selectionStart||0),void 0===e&&(e=this.selectionEnd||t);for(var n=[],r=t;r<e;r++)n.push(this.getStyleAtPosition(r,i));return n},getStyleAtPosition:function(t,e){var i=this.get2DCursorLocation(t);return(e?this.getCompleteStyleDeclaration(i.lineIndex,i.charIndex):this._getStyleDeclaration(i.lineIndex,i.charIndex))||{}},setSelectionStyles:function(t,e,i){void 0===e&&(e=this.selectionStart||0),void 0===i&&(i=this.selectionEnd||e);for(var n=e;n<i;n++)this._extendStyles(n,t);return this._forceClearCache=!0,this},_getStyleDeclaration:function(t,e){var i=this.styles&&this.styles[t];return i?i[e]:null},getCompleteStyleDeclaration:function(t,e){for(var i,n=this._getStyleDeclaration(t,e)||{},r={},o=0;o<this._styleProperties.length;o++)r[i=this._styleProperties[o]]=void 0===n[i]?this[i]:n[i];return r},_setStyleDeclaration:function(t,e,i){this.styles[t][e]=i},_deleteStyleDeclaration:function(t,e){delete this.styles[t][e]},_getLineStyle:function(t){return!!this.styles[t]},_setLineStyle:function(t){this.styles[t]={}},_deleteLineStyle:function(t){delete this.styles[t]}}),function(){function t(t){t.textDecoration&&(t.textDecoration.indexOf("underline")>-1&&(t.underline=!0),t.textDecoration.indexOf("line-through")>-1&&(t.linethrough=!0),t.textDecoration.indexOf("overline")>-1&&(t.overline=!0),delete t.textDecoration)}T.IText=T.util.createClass(T.Text,T.Observable,{type:"i-text",selectionStart:0,selectionEnd:0,selectionColor:"rgba(17,119,255,0.3)",isEditing:!1,editable:!0,editingBorderColor:"rgba(102,153,255,0.25)",cursorWidth:2,cursorColor:"",cursorDelay:1e3,cursorDuration:600,caching:!0,hiddenTextareaContainer:null,_reSpace:/\s|\n/,_currentCursorOpacity:0,_selectionDirection:null,_abortCursorAnimation:!1,__widthOfSpace:[],inCompositionMode:!1,initialize:function(t,e){this.callSuper("initialize",t,e),this.initBehavior()},setSelectionStart:function(t){t=Math.max(t,0),this._updateAndFire("selectionStart",t)},setSelectionEnd:function(t){t=Math.min(t,this.text.length),this._updateAndFire("selectionEnd",t)},_updateAndFire:function(t,e){this[t]!==e&&(this._fireSelectionChanged(),this[t]=e),this._updateTextarea()},_fireSelectionChanged:function(){this.fire("selection:changed"),this.canvas&&this.canvas.fire("text:selection:changed",{target:this})},initDimensions:function(){this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this.callSuper("initDimensions")},render:function(t){this.clearContextTop(),this.callSuper("render",t),this.cursorOffsetCache={},this.renderCursorOrSelection()},_render:function(t){this.callSuper("_render",t)},clearContextTop:function(t){if(this.isEditing&&this.canvas&&this.canvas.contextTop){var e=this.canvas.contextTop,i=this.canvas.viewportTransform;e.save(),e.transform(i[0],i[1],i[2],i[3],i[4],i[5]),this.transform(e),this._clearTextArea(e),t||e.restore()}},renderCursorOrSelection:function(){if(this.isEditing&&this.canvas&&this.canvas.contextTop){var t=this._getCursorBoundaries(),e=this.canvas.contextTop;this.clearContextTop(!0),this.selectionStart===this.selectionEnd?this.renderCursor(t,e):this.renderSelection(t,e),e.restore()}},_clearTextArea:function(t){var e=this.width+4,i=this.height+4;t.clearRect(-e/2,-i/2,e,i)},_getCursorBoundaries:function(t){void 0===t&&(t=this.selectionStart);var e=this._getLeftOffset(),i=this._getTopOffset(),n=this._getCursorBoundariesOffsets(t);return{left:e,top:i,leftOffset:n.left,topOffset:n.top}},_getCursorBoundariesOffsets:function(t){if(this.cursorOffsetCache&&"top"in this.cursorOffsetCache)return this.cursorOffsetCache;var e,i,n,r,o=0,s=0,a=this.get2DCursorLocation(t);n=a.charIndex,i=a.lineIndex;for(var h=0;h<i;h++)o+=this.getHeightOfLine(h);e=this._getLineLeftOffset(i);var c=this.__charBounds[i][n];return c&&(s=c.left),0!==this.charSpacing&&n===this._textLines[i].length&&(s-=this._getWidthOfCharSpacing()),r={top:o,left:e+(s>0?s:0)},"rtl"===this.direction&&(r.left*=-1),this.cursorOffsetCache=r,this.cursorOffsetCache},renderCursor:function(t,e){var i=this.get2DCursorLocation(),n=i.lineIndex,r=i.charIndex>0?i.charIndex-1:0,o=this.getValueOfPropertyAt(n,r,"fontSize"),s=this.scaleX*this.canvas.getZoom(),a=this.cursorWidth/s,h=t.topOffset,c=this.getValueOfPropertyAt(n,r,"deltaY");h+=(1-this._fontSizeFraction)*this.getHeightOfLine(n)/this.lineHeight-o*(1-this._fontSizeFraction),this.inCompositionMode&&this.renderSelection(t,e),e.fillStyle=this.cursorColor||this.getValueOfPropertyAt(n,r,"fill"),e.globalAlpha=this.__isMousedown?1:this._currentCursorOpacity,e.fillRect(t.left+t.leftOffset-a/2,h+t.top+c,a,o)},renderSelection:function(t,e){for(var i=this.inCompositionMode?this.hiddenTextarea.selectionStart:this.selectionStart,n=this.inCompositionMode?this.hiddenTextarea.selectionEnd:this.selectionEnd,r=-1!==this.textAlign.indexOf("justify"),o=this.get2DCursorLocation(i),s=this.get2DCursorLocation(n),a=o.lineIndex,h=s.lineIndex,c=o.charIndex<0?0:o.charIndex,l=s.charIndex<0?0:s.charIndex,u=a;u<=h;u++){var f,d=this._getLineLeftOffset(u)||0,g=this.getHeightOfLine(u),p=0,v=0;if(u===a&&(p=this.__charBounds[a][c].left),u>=a&&u<h)v=r&&!this.isEndOfWrapping(u)?this.width:this.getLineWidth(u)||5;else if(u===h)if(0===l)v=this.__charBounds[h][l].left;else{var m=this._getWidthOfCharSpacing();v=this.__charBounds[h][l-1].left+this.__charBounds[h][l-1].width-m}f=g,(this.lineHeight<1||u===h&&this.lineHeight>1)&&(g/=this.lineHeight);var y=t.left+d+p,_=v-p,x=g,b=0;this.inCompositionMode?(e.fillStyle=this.compositionColor||"black",x=1,b=g):e.fillStyle=this.selectionColor,"rtl"===this.direction&&(y=this.width-y-_),e.fillRect(y,t.top+t.topOffset+b,_,x),t.topOffset+=f}},getCurrentCharFontSize:function(){var t=this._getCurrentCharIndex();return this.getValueOfPropertyAt(t.l,t.c,"fontSize")},getCurrentCharColor:function(){var t=this._getCurrentCharIndex();return this.getValueOfPropertyAt(t.l,t.c,"fill")},_getCurrentCharIndex:function(){var t=this.get2DCursorLocation(this.selectionStart,!0),e=t.charIndex>0?t.charIndex-1:0;return{l:t.lineIndex,c:e}}}),T.IText.fromObject=function(e,i){var n=T.util.stylesFromArray(e.styles,e.text),r=Object.assign({},e,{styles:n});if(t(r),r.styles)for(var o in r.styles)for(var s in r.styles[o])t(r.styles[o][s]);T.Object._fromObject("IText",r,i,"text")}}(),C=T.util.object.clone,T.util.object.extend(T.IText.prototype,{initBehavior:function(){this.initAddedHandler(),this.initRemovedHandler(),this.initCursorSelectionHandlers(),this.initDoubleClickSimulation(),this.mouseMoveHandler=this.mouseMoveHandler.bind(this)},onDeselect:function(){this.isEditing&&this.exitEditing(),this.selected=!1},initAddedHandler:function(){var t=this;this.on("added",(function(){var e=t.canvas;e&&(e._hasITextHandlers||(e._hasITextHandlers=!0,t._initCanvasHandlers(e)),e._iTextInstances=e._iTextInstances||[],e._iTextInstances.push(t))}))},initRemovedHandler:function(){var t=this;this.on("removed",(function(){var e=t.canvas;e&&(e._iTextInstances=e._iTextInstances||[],T.util.removeFromArray(e._iTextInstances,t),0===e._iTextInstances.length&&(e._hasITextHandlers=!1,t._removeCanvasHandlers(e)))}))},_initCanvasHandlers:function(t){t._mouseUpITextHandler=function(){t._iTextInstances&&t._iTextInstances.forEach((function(t){t.__isMousedown=!1}))},t.on("mouse:up",t._mouseUpITextHandler)},_removeCanvasHandlers:function(t){t.off("mouse:up",t._mouseUpITextHandler)},_tick:function(){this._currentTickState=this._animateCursor(this,1,this.cursorDuration,"_onTickComplete")},_animateCursor:function(t,e,i,n){var r;return r={isAborted:!1,abort:function(){this.isAborted=!0}},t.animate("_currentCursorOpacity",e,{duration:i,onComplete:function(){r.isAborted||t[n]()},onChange:function(){t.canvas&&t.selectionStart===t.selectionEnd&&t.renderCursorOrSelection()},abort:function(){return r.isAborted}}),r},_onTickComplete:function(){var t=this;this._cursorTimeout1&&clearTimeout(this._cursorTimeout1),this._cursorTimeout1=setTimeout((function(){t._currentTickCompleteState=t._animateCursor(t,0,this.cursorDuration/2,"_tick")}),100)},initDelayedCursor:function(t){var e=this,i=t?0:this.cursorDelay;this.abortCursorAnimation(),this._currentCursorOpacity=1,this._cursorTimeout2=setTimeout((function(){e._tick()}),i)},abortCursorAnimation:function(){var t=this._currentTickState||this._currentTickCompleteState,e=this.canvas;this._currentTickState&&this._currentTickState.abort(),this._currentTickCompleteState&&this._currentTickCompleteState.abort(),clearTimeout(this._cursorTimeout1),clearTimeout(this._cursorTimeout2),this._currentCursorOpacity=0,t&&e&&e.clearContext(e.contextTop||e.contextContainer)},selectAll:function(){return this.selectionStart=0,this.selectionEnd=this._text.length,this._fireSelectionChanged(),this._updateTextarea(),this},getSelectedText:function(){return this._text.slice(this.selectionStart,this.selectionEnd).join("")},findWordBoundaryLeft:function(t){var e=0,i=t-1;if(this._reSpace.test(this._text[i]))for(;this._reSpace.test(this._text[i]);)e++,i--;for(;/\S/.test(this._text[i])&&i>-1;)e++,i--;return t-e},findWordBoundaryRight:function(t){var e=0,i=t;if(this._reSpace.test(this._text[i]))for(;this._reSpace.test(this._text[i]);)e++,i++;for(;/\S/.test(this._text[i])&&i<this._text.length;)e++,i++;return t+e},findLineBoundaryLeft:function(t){for(var e=0,i=t-1;!/\n/.test(this._text[i])&&i>-1;)e++,i--;return t-e},findLineBoundaryRight:function(t){for(var e=0,i=t;!/\n/.test(this._text[i])&&i<this._text.length;)e++,i++;return t+e},searchWordBoundary:function(t,e){for(var i=this._text,n=this._reSpace.test(i[t])?t-1:t,r=i[n],o=T.reNonWord;!o.test(r)&&n>0&&n<i.length;)r=i[n+=e];return o.test(r)&&(n+=1===e?0:1),n},selectWord:function(t){t=t||this.selectionStart;var e=this.searchWordBoundary(t,-1),i=this.searchWordBoundary(t,1);this.selectionStart=e,this.selectionEnd=i,this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection()},selectLine:function(t){t=t||this.selectionStart;var e=this.findLineBoundaryLeft(t),i=this.findLineBoundaryRight(t);return this.selectionStart=e,this.selectionEnd=i,this._fireSelectionChanged(),this._updateTextarea(),this},enterEditing:function(t){if(!this.isEditing&&this.editable)return this.canvas&&(this.canvas.calcOffset(),this.exitEditingOnOthers(this.canvas)),this.isEditing=!0,this.initHiddenTextarea(t),this.hiddenTextarea.focus(),this.hiddenTextarea.value=this.text,this._updateTextarea(),this._saveEditingProps(),this._setEditingProps(),this._textBeforeEdit=this.text,this._tick(),this.fire("editing:entered"),this._fireSelectionChanged(),this.canvas?(this.canvas.fire("text:editing:entered",{target:this}),this.initMouseMoveHandler(),this.canvas.requestRenderAll(),this):this},exitEditingOnOthers:function(t){t._iTextInstances&&t._iTextInstances.forEach((function(t){t.selected=!1,t.isEditing&&t.exitEditing()}))},initMouseMoveHandler:function(){this.canvas.on("mouse:move",this.mouseMoveHandler)},mouseMoveHandler:function(t){if(this.__isMousedown&&this.isEditing){document.activeElement!==this.hiddenTextarea&&this.hiddenTextarea.focus();var e=this.getSelectionStartFromPointer(t.e),i=this.selectionStart,n=this.selectionEnd;(e===this.__selectionStartOnMouseDown&&i!==n||i!==e&&n!==e)&&(e>this.__selectionStartOnMouseDown?(this.selectionStart=this.__selectionStartOnMouseDown,this.selectionEnd=e):(this.selectionStart=e,this.selectionEnd=this.__selectionStartOnMouseDown),this.selectionStart===i&&this.selectionEnd===n||(this.restartCursorIfNeeded(),this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection()))}},_setEditingProps:function(){this.hoverCursor="text",this.canvas&&(this.canvas.defaultCursor=this.canvas.moveCursor="text"),this.borderColor=this.editingBorderColor,this.hasControls=this.selectable=!1,this.lockMovementX=this.lockMovementY=!0},fromStringToGraphemeSelection:function(t,e,i){var n=i.slice(0,t),r=T.util.string.graphemeSplit(n).length;if(t===e)return{selectionStart:r,selectionEnd:r};var o=i.slice(t,e);return{selectionStart:r,selectionEnd:r+T.util.string.graphemeSplit(o).length}},fromGraphemeToStringSelection:function(t,e,i){var n=i.slice(0,t).join("").length;return t===e?{selectionStart:n,selectionEnd:n}:{selectionStart:n,selectionEnd:n+i.slice(t,e).join("").length}},_updateTextarea:function(){if(this.cursorOffsetCache={},this.hiddenTextarea){if(!this.inCompositionMode){var t=this.fromGraphemeToStringSelection(this.selectionStart,this.selectionEnd,this._text);this.hiddenTextarea.selectionStart=t.selectionStart,this.hiddenTextarea.selectionEnd=t.selectionEnd}this.updateTextareaPosition()}},updateFromTextArea:function(){if(this.hiddenTextarea){this.cursorOffsetCache={},this.text=this.hiddenTextarea.value,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords());var t=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value);this.selectionEnd=this.selectionStart=t.selectionEnd,this.inCompositionMode||(this.selectionStart=t.selectionStart),this.updateTextareaPosition()}},updateTextareaPosition:function(){if(this.selectionStart===this.selectionEnd){var t=this._calcTextareaPosition();this.hiddenTextarea.style.left=t.left,this.hiddenTextarea.style.top=t.top}},_calcTextareaPosition:function(){if(!this.canvas)return{x:1,y:1};var t=this.inCompositionMode?this.compositionStart:this.selectionStart,e=this._getCursorBoundaries(t),i=this.get2DCursorLocation(t),n=i.lineIndex,r=i.charIndex,o=this.getValueOfPropertyAt(n,r,"fontSize")*this.lineHeight,s=e.leftOffset,a=this.calcTransformMatrix(),h={x:e.left+s,y:e.top+e.topOffset+o},c=this.canvas.getRetinaScaling(),l=this.canvas.upperCanvasEl,u=l.width/c,f=l.height/c,d=u-o,g=f-o,p=l.clientWidth/u,v=l.clientHeight/f;return h=T.util.transformPoint(h,a),(h=T.util.transformPoint(h,this.canvas.viewportTransform)).x*=p,h.y*=v,h.x<0&&(h.x=0),h.x>d&&(h.x=d),h.y<0&&(h.y=0),h.y>g&&(h.y=g),h.x+=this.canvas._offset.left,h.y+=this.canvas._offset.top,{left:h.x+"px",top:h.y+"px",fontSize:o+"px",charHeight:o}},_saveEditingProps:function(){this._savedProps={hasControls:this.hasControls,borderColor:this.borderColor,lockMovementX:this.lockMovementX,lockMovementY:this.lockMovementY,hoverCursor:this.hoverCursor,selectable:this.selectable,defaultCursor:this.canvas&&this.canvas.defaultCursor,moveCursor:this.canvas&&this.canvas.moveCursor}},_restoreEditingProps:function(){this._savedProps&&(this.hoverCursor=this._savedProps.hoverCursor,this.hasControls=this._savedProps.hasControls,this.borderColor=this._savedProps.borderColor,this.selectable=this._savedProps.selectable,this.lockMovementX=this._savedProps.lockMovementX,this.lockMovementY=this._savedProps.lockMovementY,this.canvas&&(this.canvas.defaultCursor=this._savedProps.defaultCursor,this.canvas.moveCursor=this._savedProps.moveCursor))},exitEditing:function(){var t=this._textBeforeEdit!==this.text,e=this.hiddenTextarea;return this.selected=!1,this.isEditing=!1,this.selectionEnd=this.selectionStart,e&&(e.blur&&e.blur(),e.parentNode&&e.parentNode.removeChild(e)),this.hiddenTextarea=null,this.abortCursorAnimation(),this._restoreEditingProps(),this._currentCursorOpacity=0,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this.fire("editing:exited"),t&&this.fire("modified"),this.canvas&&(this.canvas.off("mouse:move",this.mouseMoveHandler),this.canvas.fire("text:editing:exited",{target:this}),t&&this.canvas.fire("object:modified",{target:this})),this},_removeExtraneousStyles:function(){for(var t in this.styles)this._textLines[t]||delete this.styles[t]},removeStyleFromTo:function(t,e){var i,n,r=this.get2DCursorLocation(t,!0),o=this.get2DCursorLocation(e,!0),s=r.lineIndex,a=r.charIndex,h=o.lineIndex,c=o.charIndex;if(s!==h){if(this.styles[s])for(i=a;i<this._unwrappedTextLines[s].length;i++)delete this.styles[s][i];if(this.styles[h])for(i=c;i<this._unwrappedTextLines[h].length;i++)(n=this.styles[h][i])&&(this.styles[s]||(this.styles[s]={}),this.styles[s][a+i-c]=n);for(i=s+1;i<=h;i++)delete this.styles[i];this.shiftLineStyles(h,s-h)}else if(this.styles[s]){n=this.styles[s];var l,u,f=c-a;for(i=a;i<c;i++)delete n[i];for(u in this.styles[s])(l=parseInt(u,10))>=c&&(n[l-f]=n[u],delete n[u])}},shiftLineStyles:function(t,e){var i=C(this.styles);for(var n in this.styles){var r=parseInt(n,10);r>t&&(this.styles[r+e]=i[r],i[r-e]||delete this.styles[r])}},restartCursorIfNeeded:function(){this._currentTickState&&!this._currentTickState.isAborted&&this._currentTickCompleteState&&!this._currentTickCompleteState.isAborted||this.initDelayedCursor()},insertNewlineStyleObject:function(t,e,i,n){var r,o={},s=!1,a=this._unwrappedTextLines[t].length===e;for(var h in i||(i=1),this.shiftLineStyles(t,i),this.styles[t]&&(r=this.styles[t][0===e?e:e-1]),this.styles[t]){var c=parseInt(h,10);c>=e&&(s=!0,o[c-e]=this.styles[t][h],a&&0===e||delete this.styles[t][h])}var l=!1;for(s&&!a&&(this.styles[t+i]=o,l=!0),l&&i--;i>0;)n&&n[i-1]?this.styles[t+i]={0:C(n[i-1])}:r?this.styles[t+i]={0:C(r)}:delete this.styles[t+i],i--;this._forceClearCache=!0},insertCharStyleObject:function(t,e,i,n){this.styles||(this.styles={});var r=this.styles[t],o=r?C(r):{};for(var s in i||(i=1),o){var a=parseInt(s,10);a>=e&&(r[a+i]=o[a],o[a-i]||delete r[a])}if(this._forceClearCache=!0,n)for(;i--;)Object.keys(n[i]).length&&(this.styles[t]||(this.styles[t]={}),this.styles[t][e+i]=C(n[i]));else if(r)for(var h=r[e?e-1:1];h&&i--;)this.styles[t][e+i]=C(h)},insertNewStyleBlock:function(t,e,i){for(var n=this.get2DCursorLocation(e,!0),r=[0],o=0,s=0;s<t.length;s++)"\n"===t[s]?r[++o]=0:r[o]++;for(r[0]>0&&(this.insertCharStyleObject(n.lineIndex,n.charIndex,r[0],i),i=i&&i.slice(r[0]+1)),o&&this.insertNewlineStyleObject(n.lineIndex,n.charIndex+r[0],o),s=1;s<o;s++)r[s]>0?this.insertCharStyleObject(n.lineIndex+s,0,r[s],i):i&&this.styles[n.lineIndex+s]&&i[0]&&(this.styles[n.lineIndex+s][0]=i[0]),i=i&&i.slice(r[s]+1);r[s]>0&&this.insertCharStyleObject(n.lineIndex+s,0,r[s],i)},setSelectionStartEndWithShift:function(t,e,i){i<=t?(e===t?this._selectionDirection="left":"right"===this._selectionDirection&&(this._selectionDirection="left",this.selectionEnd=t),this.selectionStart=i):i>t&&i<e?"right"===this._selectionDirection?this.selectionEnd=i:this.selectionStart=i:(e===t?this._selectionDirection="right":"left"===this._selectionDirection&&(this._selectionDirection="right",this.selectionStart=e),this.selectionEnd=i)},setSelectionInBoundaries:function(){var t=this.text.length;this.selectionStart>t?this.selectionStart=t:this.selectionStart<0&&(this.selectionStart=0),this.selectionEnd>t?this.selectionEnd=t:this.selectionEnd<0&&(this.selectionEnd=0)}}),T.util.object.extend(T.IText.prototype,{initDoubleClickSimulation:function(){this.__lastClickTime=+new Date,this.__lastLastClickTime=+new Date,this.__lastPointer={},this.on("mousedown",this.onMouseDown)},onMouseDown:function(t){if(this.canvas){this.__newClickTime=+new Date;var e=t.pointer;this.isTripleClick(e)&&(this.fire("tripleclick",t),this._stopEvent(t.e)),this.__lastLastClickTime=this.__lastClickTime,this.__lastClickTime=this.__newClickTime,this.__lastPointer=e,this.__lastIsEditing=this.isEditing,this.__lastSelected=this.selected}},isTripleClick:function(t){return this.__newClickTime-this.__lastClickTime<500&&this.__lastClickTime-this.__lastLastClickTime<500&&this.__lastPointer.x===t.x&&this.__lastPointer.y===t.y},_stopEvent:function(t){t.preventDefault&&t.preventDefault(),t.stopPropagation&&t.stopPropagation()},initCursorSelectionHandlers:function(){this.initMousedownHandler(),this.initMouseupHandler(),this.initClicks()},doubleClickHandler:function(t){this.isEditing&&this.selectWord(this.getSelectionStartFromPointer(t.e))},tripleClickHandler:function(t){this.isEditing&&this.selectLine(this.getSelectionStartFromPointer(t.e))},initClicks:function(){this.on("mousedblclick",this.doubleClickHandler),this.on("tripleclick",this.tripleClickHandler)},_mouseDownHandler:function(t){!this.canvas||!this.editable||t.e.button&&1!==t.e.button||(this.__isMousedown=!0,this.selected&&(this.inCompositionMode=!1,this.setCursorByClick(t.e)),this.isEditing&&(this.__selectionStartOnMouseDown=this.selectionStart,this.selectionStart===this.selectionEnd&&this.abortCursorAnimation(),this.renderCursorOrSelection()))},_mouseDownHandlerBefore:function(t){!this.canvas||!this.editable||t.e.button&&1!==t.e.button||(this.selected=this===this.canvas._activeObject)},initMousedownHandler:function(){this.on("mousedown",this._mouseDownHandler),this.on("mousedown:before",this._mouseDownHandlerBefore)},initMouseupHandler:function(){this.on("mouseup",this.mouseUpHandler)},mouseUpHandler:function(t){if(this.__isMousedown=!1,!(!this.editable||this.group||t.transform&&t.transform.actionPerformed||t.e.button&&1!==t.e.button)){if(this.canvas){var e=this.canvas._activeObject;if(e&&e!==this)return}this.__lastSelected&&!this.__corner?(this.selected=!1,this.__lastSelected=!1,this.enterEditing(t.e),this.selectionStart===this.selectionEnd?this.initDelayedCursor(!0):this.renderCursorOrSelection()):this.selected=!0}},setCursorByClick:function(t){var e=this.getSelectionStartFromPointer(t),i=this.selectionStart,n=this.selectionEnd;t.shiftKey?this.setSelectionStartEndWithShift(i,n,e):(this.selectionStart=e,this.selectionEnd=e),this.isEditing&&(this._fireSelectionChanged(),this._updateTextarea())},getSelectionStartFromPointer:function(t){for(var e,i=this.getLocalPointer(t),n=0,r=0,o=0,s=0,a=0,h=0,c=this._textLines.length;h<c&&o<=i.y;h++)o+=this.getHeightOfLine(h)*this.scaleY,a=h,h>0&&(s+=this._textLines[h-1].length+this.missingNewlineOffset(h-1));r=this._getLineLeftOffset(a)*this.scaleX,e=this._textLines[a],"rtl"===this.direction&&(i.x=this.width*this.scaleX-i.x+r);for(var l=0,u=e.length;l<u&&(n=r,(r+=this.__charBounds[a][l].kernedWidth*this.scaleX)<=i.x);l++)s++;return this._getNewSelectionStartFromOffset(i,n,r,s,u)},_getNewSelectionStartFromOffset:function(t,e,i,n,r){var o=t.x-e,s=i-t.x,a=n+(s>o||s<0?0:1);return this.flipX&&(a=r-a),a>this._text.length&&(a=this._text.length),a}}),T.util.object.extend(T.IText.prototype,{initHiddenTextarea:function(){this.hiddenTextarea=T.document.createElement("textarea"),this.hiddenTextarea.setAttribute("autocapitalize","off"),this.hiddenTextarea.setAttribute("autocorrect","off"),this.hiddenTextarea.setAttribute("autocomplete","off"),this.hiddenTextarea.setAttribute("spellcheck","false"),this.hiddenTextarea.setAttribute("data-fabric-hiddentextarea",""),this.hiddenTextarea.setAttribute("wrap","off");var t=this._calcTextareaPosition();this.hiddenTextarea.style.cssText="position: absolute; top: "+t.top+"; left: "+t.left+"; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: "+t.fontSize+";",this.hiddenTextareaContainer?this.hiddenTextareaContainer.appendChild(this.hiddenTextarea):T.document.body.appendChild(this.hiddenTextarea),T.util.addListener(this.hiddenTextarea,"keydown",this.onKeyDown.bind(this)),T.util.addListener(this.hiddenTextarea,"keyup",this.onKeyUp.bind(this)),T.util.addListener(this.hiddenTextarea,"input",this.onInput.bind(this)),T.util.addListener(this.hiddenTextarea,"copy",this.copy.bind(this)),T.util.addListener(this.hiddenTextarea,"cut",this.copy.bind(this)),T.util.addListener(this.hiddenTextarea,"paste",this.paste.bind(this)),T.util.addListener(this.hiddenTextarea,"compositionstart",this.onCompositionStart.bind(this)),T.util.addListener(this.hiddenTextarea,"compositionupdate",this.onCompositionUpdate.bind(this)),T.util.addListener(this.hiddenTextarea,"compositionend",this.onCompositionEnd.bind(this)),!this._clickHandlerInitialized&&this.canvas&&(T.util.addListener(this.canvas.upperCanvasEl,"click",this.onClick.bind(this)),this._clickHandlerInitialized=!0)},keysMap:{9:"exitEditing",27:"exitEditing",33:"moveCursorUp",34:"moveCursorDown",35:"moveCursorRight",36:"moveCursorLeft",37:"moveCursorLeft",38:"moveCursorUp",39:"moveCursorRight",40:"moveCursorDown"},keysMapRtl:{9:"exitEditing",27:"exitEditing",33:"moveCursorUp",34:"moveCursorDown",35:"moveCursorLeft",36:"moveCursorRight",37:"moveCursorRight",38:"moveCursorUp",39:"moveCursorLeft",40:"moveCursorDown"},ctrlKeysMapUp:{67:"copy",88:"cut"},ctrlKeysMapDown:{65:"selectAll"},onClick:function(){this.hiddenTextarea&&this.hiddenTextarea.focus()},onKeyDown:function(t){if(this.isEditing){var e="rtl"===this.direction?this.keysMapRtl:this.keysMap;if(t.keyCode in e)this[e[t.keyCode]](t);else{if(!(t.keyCode in this.ctrlKeysMapDown)||!t.ctrlKey&&!t.metaKey)return;this[this.ctrlKeysMapDown[t.keyCode]](t)}t.stopImmediatePropagation(),t.preventDefault(),t.keyCode>=33&&t.keyCode<=40?(this.inCompositionMode=!1,this.clearContextTop(),this.renderCursorOrSelection()):this.canvas&&this.canvas.requestRenderAll()}},onKeyUp:function(t){!this.isEditing||this._copyDone||this.inCompositionMode?this._copyDone=!1:t.keyCode in this.ctrlKeysMapUp&&(t.ctrlKey||t.metaKey)&&(this[this.ctrlKeysMapUp[t.keyCode]](t),t.stopImmediatePropagation(),t.preventDefault(),this.canvas&&this.canvas.requestRenderAll())},onInput:function(t){var e=this.fromPaste;if(this.fromPaste=!1,t&&t.stopPropagation(),this.isEditing){var i,n,r,o,s,a=this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,h=this._text.length,c=a.length,l=c-h,u=this.selectionStart,f=this.selectionEnd,d=u!==f;if(""===this.hiddenTextarea.value)return this.styles={},this.updateFromTextArea(),this.fire("changed"),void(this.canvas&&(this.canvas.fire("text:changed",{target:this}),this.canvas.requestRenderAll()));var g=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value),p=u>g.selectionStart;d?(i=this._text.slice(u,f),l+=f-u):c<h&&(i=p?this._text.slice(f+l,f):this._text.slice(u,u-l)),n=a.slice(g.selectionEnd-l,g.selectionEnd),i&&i.length&&(n.length&&(r=this.getSelectionStyles(u,u+1,!1),r=n.map((function(){return r[0]}))),d?(o=u,s=f):p?(o=f-i.length,s=f):(o=f,s=f+i.length),this.removeStyleFromTo(o,s)),n.length&&(e&&n.join("")===T.copiedText&&!T.disableStyleCopyPaste&&(r=T.copiedTextStyle),this.insertNewStyleBlock(n,u,r)),this.updateFromTextArea(),this.fire("changed"),this.canvas&&(this.canvas.fire("text:changed",{target:this}),this.canvas.requestRenderAll())}},onCompositionStart:function(){this.inCompositionMode=!0},onCompositionEnd:function(){this.inCompositionMode=!1},onCompositionUpdate:function(t){this.compositionStart=t.target.selectionStart,this.compositionEnd=t.target.selectionEnd,this.updateTextareaPosition()},copy:function(){this.selectionStart!==this.selectionEnd&&(T.copiedText=this.getSelectedText(),T.disableStyleCopyPaste?T.copiedTextStyle=null:T.copiedTextStyle=this.getSelectionStyles(this.selectionStart,this.selectionEnd,!0),this._copyDone=!0)},paste:function(){this.fromPaste=!0},_getClipboardData:function(t){return t&&t.clipboardData||T.window.clipboardData},_getWidthBeforeCursor:function(t,e){var i,n=this._getLineLeftOffset(t);return e>0&&(n+=(i=this.__charBounds[t][e-1]).left+i.width),n},getDownCursorOffset:function(t,e){var i=this._getSelectionForOffset(t,e),n=this.get2DCursorLocation(i),r=n.lineIndex;if(r===this._textLines.length-1||t.metaKey||34===t.keyCode)return this._text.length-i;var o=n.charIndex,s=this._getWidthBeforeCursor(r,o),a=this._getIndexOnLine(r+1,s);return this._textLines[r].slice(o).length+a+1+this.missingNewlineOffset(r)},_getSelectionForOffset:function(t,e){return t.shiftKey&&this.selectionStart!==this.selectionEnd&&e?this.selectionEnd:this.selectionStart},getUpCursorOffset:function(t,e){var i=this._getSelectionForOffset(t,e),n=this.get2DCursorLocation(i),r=n.lineIndex;if(0===r||t.metaKey||33===t.keyCode)return-i;var o=n.charIndex,s=this._getWidthBeforeCursor(r,o),a=this._getIndexOnLine(r-1,s),h=this._textLines[r].slice(0,o),c=this.missingNewlineOffset(r-1);return-this._textLines[r-1].length+a-h.length+(1-c)},_getIndexOnLine:function(t,e){for(var i,n,r=this._textLines[t],o=this._getLineLeftOffset(t),s=0,a=0,h=r.length;a<h;a++)if((o+=i=this.__charBounds[t][a].width)>e){n=!0;var c=o-i,l=o,u=Math.abs(c-e);s=Math.abs(l-e)<u?a:a-1;break}return n||(s=r.length-1),s},moveCursorDown:function(t){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorUpOrDown("Down",t)},moveCursorUp:function(t){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorUpOrDown("Up",t)},_moveCursorUpOrDown:function(t,e){var i=this["get"+t+"CursorOffset"](e,"right"===this._selectionDirection);e.shiftKey?this.moveCursorWithShift(i):this.moveCursorWithoutShift(i),0!==i&&(this.setSelectionInBoundaries(),this.abortCursorAnimation(),this._currentCursorOpacity=1,this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},moveCursorWithShift:function(t){var e="left"===this._selectionDirection?this.selectionStart+t:this.selectionEnd+t;return this.setSelectionStartEndWithShift(this.selectionStart,this.selectionEnd,e),0!==t},moveCursorWithoutShift:function(t){return t<0?(this.selectionStart+=t,this.selectionEnd=this.selectionStart):(this.selectionEnd+=t,this.selectionStart=this.selectionEnd),0!==t},moveCursorLeft:function(t){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorLeftOrRight("Left",t)},_move:function(t,e,i){var n;if(t.altKey)n=this["findWordBoundary"+i](this[e]);else{if(!t.metaKey&&35!==t.keyCode&&36!==t.keyCode)return this[e]+="Left"===i?-1:1,!0;n=this["findLineBoundary"+i](this[e])}if(void 0!==n&&this[e]!==n)return this[e]=n,!0},_moveLeft:function(t,e){return this._move(t,e,"Left")},_moveRight:function(t,e){return this._move(t,e,"Right")},moveCursorLeftWithoutShift:function(t){var e=!0;return this._selectionDirection="left",this.selectionEnd===this.selectionStart&&0!==this.selectionStart&&(e=this._moveLeft(t,"selectionStart")),this.selectionEnd=this.selectionStart,e},moveCursorLeftWithShift:function(t){return"right"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveLeft(t,"selectionEnd"):0!==this.selectionStart?(this._selectionDirection="left",this._moveLeft(t,"selectionStart")):void 0},moveCursorRight:function(t){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorLeftOrRight("Right",t)},_moveCursorLeftOrRight:function(t,e){var i="moveCursor"+t+"With";this._currentCursorOpacity=1,e.shiftKey?i+="Shift":i+="outShift",this[i](e)&&(this.abortCursorAnimation(),this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},moveCursorRightWithShift:function(t){return"left"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveRight(t,"selectionStart"):this.selectionEnd!==this._text.length?(this._selectionDirection="right",this._moveRight(t,"selectionEnd")):void 0},moveCursorRightWithoutShift:function(t){var e=!0;return this._selectionDirection="right",this.selectionStart===this.selectionEnd?(e=this._moveRight(t,"selectionStart"),this.selectionEnd=this.selectionStart):this.selectionStart=this.selectionEnd,e},removeChars:function(t,e){void 0===e&&(e=t+1),this.removeStyleFromTo(t,e),this._text.splice(t,e-t),this.text=this._text.join(""),this.set("dirty",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()},insertChars:function(t,e,i,n){void 0===n&&(n=i),n>i&&this.removeStyleFromTo(i,n);var r=T.util.string.graphemeSplit(t);this.insertNewStyleBlock(r,i,e),this._text=[].concat(this._text.slice(0,i),r,this._text.slice(n)),this.text=this._text.join(""),this.set("dirty",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()}}),S=T.util.toFixed,w=/  +/g,T.util.object.extend(T.Text.prototype,{_toSVG:function(){var t=this._getSVGLeftTopOffsets(),e=this._getSVGTextAndBg(t.textTop,t.textLeft);return this._wrapSVGTextAndBg(e)},toSVG:function(t){return this._createBaseSVGMarkup(this._toSVG(),{reviver:t,noStyle:!0,withShadow:!0})},_getSVGLeftTopOffsets:function(){return{textLeft:-this.width/2,textTop:-this.height/2,lineTop:this.getHeightOfLine(0)}},_wrapSVGTextAndBg:function(t){var e=this.getSvgTextDecoration(this);return[t.textBgRects.join(""),'\t\t<text xml:space="preserve" ',this.fontFamily?'font-family="'+this.fontFamily.replace(/"/g,"'")+'" ':"",this.fontSize?'font-size="'+this.fontSize+'" ':"",this.fontStyle?'font-style="'+this.fontStyle+'" ':"",this.fontWeight?'font-weight="'+this.fontWeight+'" ':"",e?'text-decoration="'+e+'" ':"",'style="',this.getSvgStyles(!0),'"',this.addPaintOrder()," >",t.textSpans.join(""),"</text>\n"]},_getSVGTextAndBg:function(t,e){var i,n=[],r=[],o=t;this._setSVGBg(r);for(var s=0,a=this._textLines.length;s<a;s++)i=this._getLineLeftOffset(s),(this.textBackgroundColor||this.styleHas("textBackgroundColor",s))&&this._setSVGTextLineBg(r,s,e+i,o),this._setSVGTextLineText(n,s,e+i,o),o+=this.getHeightOfLine(s);return{textSpans:n,textBgRects:r}},_createTextCharSpan:function(t,e,i,n){var r=t!==t.trim()||t.match(w),o=this.getSvgSpanStyles(e,r),s=o?'style="'+o+'"':"",a=e.deltaY,h="",c=T.Object.NUM_FRACTION_DIGITS;return a&&(h=' dy="'+S(a,c)+'" '),['<tspan x="',S(i,c),'" y="',S(n,c),'" ',h,s,">",T.util.string.escapeXml(t),"</tspan>"].join("")},_setSVGTextLineText:function(t,e,i,n){var r,o,s,a,h,c=this.getHeightOfLine(e),l=-1!==this.textAlign.indexOf("justify"),u="",f=0,d=this._textLines[e];n+=c*(1-this._fontSizeFraction)/this.lineHeight;for(var g=0,p=d.length-1;g<=p;g++)h=g===p||this.charSpacing,u+=d[g],s=this.__charBounds[e][g],0===f?(i+=s.kernedWidth-s.width,f+=s.width):f+=s.kernedWidth,l&&!h&&this._reSpaceAndTab.test(d[g])&&(h=!0),h||(r=r||this.getCompleteStyleDeclaration(e,g),o=this.getCompleteStyleDeclaration(e,g+1),h=T.util.hasStyleChanged(r,o,!0)),h&&(a=this._getStyleDeclaration(e,g)||{},t.push(this._createTextCharSpan(u,a,i,n)),u="",r=o,i+=f,f=0)},_pushTextBgRect:function(t,e,i,n,r,o){var s=T.Object.NUM_FRACTION_DIGITS;t.push("\t\t<rect ",this._getFillAttributes(e),' x="',S(i,s),'" y="',S(n,s),'" width="',S(r,s),'" height="',S(o,s),'"></rect>\n')},_setSVGTextLineBg:function(t,e,i,n){for(var r,o,s=this._textLines[e],a=this.getHeightOfLine(e)/this.lineHeight,h=0,c=0,l=this.getValueOfPropertyAt(e,0,"textBackgroundColor"),u=0,f=s.length;u<f;u++)r=this.__charBounds[e][u],(o=this.getValueOfPropertyAt(e,u,"textBackgroundColor"))!==l?(l&&this._pushTextBgRect(t,l,i+c,n,h,a),c=r.left,h=r.width,l=o):h+=r.kernedWidth;o&&this._pushTextBgRect(t,o,i+c,n,h,a)},_getFillAttributes:function(t){var e=t&&"string"==typeof t?new T.Color(t):"";return e&&e.getSource()&&1!==e.getAlpha()?'opacity="'+e.getAlpha()+'" fill="'+e.setAlpha(1).toRgb()+'"':'fill="'+t+'"'},_getSVGLineTopOffset:function(t){for(var e,i=0,n=0;n<t;n++)i+=this.getHeightOfLine(n);return e=this.getHeightOfLine(n),{lineTop:i,offset:(this._fontSizeMult-this._fontSizeFraction)*e/(this.lineHeight*this._fontSizeMult)}},getSvgStyles:function(t){return T.Object.prototype.getSvgStyles.call(this,t)+" white-space: pre;"}}),function(t){"use strict";var e=t.fabric||(t.fabric={});e.Textbox=e.util.createClass(e.IText,e.Observable,{type:"textbox",minWidth:20,dynamicMinWidth:2,__cachedLines:null,lockScalingFlip:!0,noScaleCache:!1,_dimensionAffectingProps:e.Text.prototype._dimensionAffectingProps.concat("width"),_wordJoiners:/[ \t\r]/,splitByGrapheme:!1,initDimensions:function(){this.__skipDimension||(this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this._clearCache(),this.dynamicMinWidth=0,this._styleMap=this._generateStyleMap(this._splitText()),this.dynamicMinWidth>this.width&&this._set("width",this.dynamicMinWidth),-1!==this.textAlign.indexOf("justify")&&this.enlargeSpaces(),this.height=this.calcTextHeight(),this.saveState({propertySet:"_dimensionAffectingProps"}))},_generateStyleMap:function(t){for(var e=0,i=0,n=0,r={},o=0;o<t.graphemeLines.length;o++)"\n"===t.graphemeText[n]&&o>0?(i=0,n++,e++):!this.splitByGrapheme&&this._reSpaceAndTab.test(t.graphemeText[n])&&o>0&&(i++,n++),r[o]={line:e,offset:i},n+=t.graphemeLines[o].length,i+=t.graphemeLines[o].length;return r},styleHas:function(t,i){if(this._styleMap&&!this.isWrapping){var n=this._styleMap[i];n&&(i=n.line)}return e.Text.prototype.styleHas.call(this,t,i)},isEmptyStyles:function(t){if(!this.styles)return!0;var e,i,n=0,r=!1,o=this._styleMap[t],s=this._styleMap[t+1];for(var a in o&&(t=o.line,n=o.offset),s&&(r=s.line===t,e=s.offset),i=void 0===t?this.styles:{line:this.styles[t]})for(var h in i[a])if(h>=n&&(!r||h<e))for(var c in i[a][h])return!1;return!0},_getStyleDeclaration:function(t,e){if(this._styleMap&&!this.isWrapping){var i=this._styleMap[t];if(!i)return null;t=i.line,e=i.offset+e}return this.callSuper("_getStyleDeclaration",t,e)},_setStyleDeclaration:function(t,e,i){var n=this._styleMap[t];t=n.line,e=n.offset+e,this.styles[t][e]=i},_deleteStyleDeclaration:function(t,e){var i=this._styleMap[t];t=i.line,e=i.offset+e,delete this.styles[t][e]},_getLineStyle:function(t){var e=this._styleMap[t];return!!this.styles[e.line]},_setLineStyle:function(t){var e=this._styleMap[t];this.styles[e.line]={}},_wrapText:function(t,e){var i,n=[];for(this.isWrapping=!0,i=0;i<t.length;i++)n=n.concat(this._wrapLine(t[i],i,e));return this.isWrapping=!1,n},_measureWord:function(t,e,i){var n,r=0;i=i||0;for(var o=0,s=t.length;o<s;o++)r+=this._getGraphemeBox(t[o],e,o+i,n,!0).kernedWidth,n=t[o];return r},_wrapLine:function(t,i,n,r){var o=0,s=this.splitByGrapheme,a=[],h=[],c=s?e.util.string.graphemeSplit(t):t.split(this._wordJoiners),l="",u=0,f=s?"":" ",d=0,g=0,p=0,v=!0,m=this._getWidthOfCharSpacing();r=r||0,0===c.length&&c.push([]),n-=r;for(var y=0;y<c.length;y++)l=s?c[y]:e.util.string.graphemeSplit(c[y]),d=this._measureWord(l,i,u),u+=l.length,(o+=g+d-m)>n&&!v?(a.push(h),h=[],o=d,v=!0):o+=m,v||s||h.push(f),h=h.concat(l),g=s?0:this._measureWord([f],i,u),u++,v=!1,d>p&&(p=d);return y&&a.push(h),p+r>this.dynamicMinWidth&&(this.dynamicMinWidth=p-m+r),a},isEndOfWrapping:function(t){return!this._styleMap[t+1]||this._styleMap[t+1].line!==this._styleMap[t].line},missingNewlineOffset:function(t){return this.splitByGrapheme?this.isEndOfWrapping(t)?1:0:1},_splitTextIntoLines:function(t){for(var i=e.Text.prototype._splitTextIntoLines.call(this,t),n=this._wrapText(i.lines,this.width),r=new Array(n.length),o=0;o<n.length;o++)r[o]=n[o].join("");return i.lines=r,i.graphemeLines=n,i},getMinWidth:function(){return Math.max(this.minWidth,this.dynamicMinWidth)},_removeExtraneousStyles:function(){var t={};for(var e in this._styleMap)this._textLines[e]&&(t[this._styleMap[e].line]=1);for(var e in this.styles)t[e]||delete this.styles[e]},toObject:function(t){return this.callSuper("toObject",["minWidth","splitByGrapheme"].concat(t))}}),e.Textbox.fromObject=function(t,i){var n=e.util.stylesFromArray(t.styles,t.text),r=Object.assign({},t,{styles:n});return e.Object._fromObject("Textbox",r,i,"text")}}(e),function(){var t=T.controlsUtils,e=t.scaleSkewCursorStyleHandler,i=t.scaleCursorStyleHandler,n=t.scalingEqually,r=t.scalingYOrSkewingX,o=t.scalingXOrSkewingY,s=t.scaleOrSkewActionName,a=T.Object.prototype.controls;if(a.ml=new T.Control({x:-.5,y:0,cursorStyleHandler:e,actionHandler:o,getActionName:s}),a.mr=new T.Control({x:.5,y:0,cursorStyleHandler:e,actionHandler:o,getActionName:s}),a.mb=new T.Control({x:0,y:.5,cursorStyleHandler:e,actionHandler:r,getActionName:s}),a.mt=new T.Control({x:0,y:-.5,cursorStyleHandler:e,actionHandler:r,getActionName:s}),a.tl=new T.Control({x:-.5,y:-.5,cursorStyleHandler:i,actionHandler:n}),a.tr=new T.Control({x:.5,y:-.5,cursorStyleHandler:i,actionHandler:n}),a.bl=new T.Control({x:-.5,y:.5,cursorStyleHandler:i,actionHandler:n}),a.br=new T.Control({x:.5,y:.5,cursorStyleHandler:i,actionHandler:n}),a.mtr=new T.Control({x:0,y:-.5,actionHandler:t.rotationWithSnapping,cursorStyleHandler:t.rotationStyleHandler,offsetY:-40,withConnection:!0,actionName:"rotate"}),T.Textbox){var h=T.Textbox.prototype.controls={};h.mtr=a.mtr,h.tr=a.tr,h.br=a.br,h.tl=a.tl,h.bl=a.bl,h.mt=a.mt,h.mb=a.mb,h.mr=new T.Control({x:.5,y:0,actionHandler:t.changeWidth,cursorStyleHandler:e,actionName:"resizing"}),h.ml=new T.Control({x:-.5,y:0,actionHandler:t.changeWidth,cursorStyleHandler:e,actionName:"resizing"})}}()},419:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>m});var n=i(379),r=i.n(n),o=i(795),s=i.n(o),a=i(569),h=i.n(a),c=i(565),l=i.n(c),u=i(216),f=i.n(u),d=i(589),g=i.n(d),p=i(948),v={};v.styleTagTransform=g(),v.setAttributes=l(),v.insert=h().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=f(),r()(p.Z,v);const m=p.Z&&p.Z.locals?p.Z.locals:void 0},445:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>m});var n=i(379),r=i.n(n),o=i(795),s=i.n(o),a=i(569),h=i.n(a),c=i(565),l=i.n(c),u=i(216),f=i.n(u),d=i(589),g=i.n(d),p=i(804),v={};v.styleTagTransform=g(),v.setAttributes=l(),v.insert=h().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=f(),r()(p.Z,v);const m=p.Z&&p.Z.locals?p.Z.locals:void 0},646:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>m});var n=i(379),r=i.n(n),o=i(795),s=i.n(o),a=i(569),h=i.n(a),c=i(565),l=i.n(c),u=i(216),f=i.n(u),d=i(589),g=i.n(d),p=i(943),v={};v.styleTagTransform=g(),v.setAttributes=l(),v.insert=h().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=f(),r()(p.Z,v);const m=p.Z&&p.Z.locals?p.Z.locals:void 0},223:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>m});var n=i(379),r=i.n(n),o=i(795),s=i.n(o),a=i(569),h=i.n(a),c=i(565),l=i.n(c),u=i(216),f=i.n(u),d=i(589),g=i.n(d),p=i(967),v={};v.styleTagTransform=g(),v.setAttributes=l(),v.insert=h().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=f(),r()(p.Z,v);const m=p.Z&&p.Z.locals?p.Z.locals:void 0},797:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>m});var n=i(379),r=i.n(n),o=i(795),s=i.n(o),a=i(569),h=i.n(a),c=i(565),l=i.n(c),u=i(216),f=i.n(u),d=i(589),g=i.n(d),p=i(272),v={};v.styleTagTransform=g(),v.setAttributes=l(),v.insert=h().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=f(),r()(p.Z,v);const m=p.Z&&p.Z.locals?p.Z.locals:void 0},915:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>m});var n=i(379),r=i.n(n),o=i(795),s=i.n(o),a=i(569),h=i.n(a),c=i(565),l=i.n(c),u=i(216),f=i.n(u),d=i(589),g=i.n(d),p=i(890),v={};v.styleTagTransform=g(),v.setAttributes=l(),v.insert=h().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=f(),r()(p.Z,v);const m=p.Z&&p.Z.locals?p.Z.locals:void 0},379:t=>{"use strict";var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var o={},s=[],a=0;a<t.length;a++){var h=t[a],c=n.base?h[0]+n.base:h[0],l=o[c]||0,u="".concat(c," ").concat(l);o[c]=l+1;var f=i(u),d={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==f)e[f].references++,e[f].updater(d);else{var g=r(d,n);n.byIndex=a,e.splice(a,0,{identifier:u,updater:g,references:1})}s.push(u)}return s}function r(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,r){var o=n(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=i(o[s]);e[a].references--}for(var h=n(t,r),c=0;c<o.length;c++){var l=i(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=h}}},569:t=>{"use strict";var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{"use strict";t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var r=void 0!==i.layer;r&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,r&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},756:t=>{t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12.501 14.792l3.854 3.854-.707.707L13 16.705V23h-1v-6.293l-2.646 2.646-.707-.707zM8.647 6.354l3.854 3.854 3.854-3.854-.707-.707L13 8.295V2h-1v6.293L9.354 5.647zM6 13h13v-1H6z"></path><path fill="none" d="M0 0h24v24H0z"></path></svg>'},460:t=>{t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M16.707 12H23v1h-6.295l2.648 2.647-.707.707-3.854-3.853 3.854-3.854.707.707zM5.647 9.354L8.293 12H2v1h6.295l-2.648 2.647.707.707 3.854-3.853-3.854-3.854zM12 19h1V6h-1z"></path><path fill="none" d="M0 0h24v24H0z"></path></svg>'},549:t=>{t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M13 3v12.294l2.647-2.647.707.707-3.853 3.854-3.854-3.854.707-.707L12 15.292V3zM6 21h13v-1H6z"></path><path fill="none" d="M0 0h24v24H0z"></path></svg>'},152:t=>{t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M22 5H12V4h10zm0 3h-8v1h8zm0 5v-1h-6v1zM2 17h20v-1H2zm0 4h20v-1H2zm.234-8L7.042 2.049h.916L12.766 13h-1.093L9.917 9H5.083l-1.756 4zm3.288-5h3.956L7.5 3.494z"></path><path fill="none" d="M0 0h24v24H0z"></path></svg>'},617:t=>{t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.87 6h1.007l-.988 16.015A1.051 1.051 0 0 1 17.84 23H6.158a1.052 1.052 0 0 1-1.048-.984v-.001L4.123 6h1.003l.982 15.953a.05.05 0 0 0 .05.047h11.683zM9.5 19a.5.5 0 0 0 .5-.5v-10a.5.5 0 0 0-1 0v10a.5.5 0 0 0 .5.5zm5 0a.5.5 0 0 0 .5-.5v-10a.5.5 0 0 0-1 0v10a.5.5 0 0 0 .5.5zM5.064 5H3V4h5v-.75A1.251 1.251 0 0 1 9.25 2h5.5A1.251 1.251 0 0 1 16 3.25V4h5v1H5.064zM9 4h6v-.75a.25.25 0 0 0-.25-.25h-5.5a.25.25 0 0 0-.25.25z"></path><path fill="none" d="M0 0h24v24H0z"></path></svg>'},562:function(t,e,i){"use strict";var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(r,o){function s(t){try{h(n.next(t))}catch(t){o(t)}}function a(t){try{h(n.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,a)}h((n=n.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var i,n,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(h){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(i=1,n&&(r=2&a[0]?n.return:a[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,a[1])).done)return r;switch(n=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,h])}}},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=o(i(244)),a=o(i(638)),h=o(i(484)),c=i(923),l=function(){function t(){this._element=document.createElement("div"),document.querySelector("body").appendChild(this._element)}return t.prototype.initialize=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return this._canvas=new h.default(this._element),[4,(0,c.getData)()];case 1:return t.sent(),(0,c.getColors)(),this._upbar=new s.default(this._element,this._canvas),this._objectPropertiesBar=new a.default(this._element,this._canvas),[2]}}))}))},t.prototype.loadFonts=function(t){var e=this;t.map((function(t){var i=document.createElement("p");i.innerHTML="&ensp;",i.style.fontFamily=t,i.style.position="absolute",e._element.appendChild(i)}))},t.prototype.createSelect=function(){},t.prototype.getCanvas=function(){return this._canvas},t}();e.default=l},244:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),i(419);var r=n(i(901)),o=n(i(321)),s=n(i(152)),a=n(i(617)),h=n(i(756)),c=n(i(460)),l=n(i(549)),u=n(i(634));e.default=function(t,e){var i=this;this._element=document.createElement("div"),t.appendChild(this._element),this._element.classList.add("bar"),this._downloader=new u.default(t),[{name:"Добавить текст",func:function(){e.addText("Текст")},icon:s.default},{name:"Выровнять по горизонтали",func:function(){var t;null===(t=e._selectedObjects)||void 0===t||t.map((function(t){e.alignObject(t,!0,!1)}))},icon:h.default},{name:"Выровнять по вертикали",func:function(){var t;null===(t=e._selectedObjects)||void 0===t||t.map((function(t){e.alignObject(t,!1,!0)}))},icon:c.default},{name:"Сохранить в PNG",func:function(){i._downloader.dowload(i._downloader.render(e))},icon:l.default},{name:"Удалить элемент",func:function(){e.deleteLastActiveObject()},icon:a.default}].map((function(t){var e=new o.default("",t.func,i._element);e.getElement().innerHTML=t.icon,new r.default(t.name,e.getElement())}))}},634:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this._element=document.createElement("a"),t.appendChild(this._element)}return t.prototype.render=function(t,e){return void 0===e&&(e=!0),e?t._canvasElement.toDataURL("image/png"):t._canvas.toDataURL({format:"png",multiplier:2,withoutTransform:!0})},t.prototype.dowload=function(t){this._element.href=t,this._element.download="NEONES.RU.png",this._element.click()},t}();e.default=i},337:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var r=i(923),o=n(i(321)),s=n(i(901));i(445);e.default=function(t){var e=this,i=(0,r.getColors)();this.element=document.createElement("div"),this.element.classList.add("colorPickButtons"),Object.keys(i).map((function(n,r){var a=Object.values(i)[r],h=new o.default("",(function(){var e;null===(e=null==t?void 0:t._selectedObjects)||void 0===e||e.map((function(t){t.changeShadow(a)})),t.update()}),e.element);h.getElement().classList.add("colorButton"),new s.default(n,h.getElement()),h.getElement().style.backgroundColor=a}))}},638:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var r=i(923),o=n(i(11)),s=n(i(321)),a=n(i(901)),h=n(i(337));i(646);var c=function(){function t(t,e){var i=this;this._element=document.createElement("div"),this._element.classList.add("objectProperties","hidden"),this._canvas=e,t.appendChild(this._element),e._canvas.on("selection:created",(function(){i.updateVisibility()})),e._canvas.on("selection:cleared",(function(){i.updateVisibility()})),e._canvas.on("selection:updated",(function(){i.updateVisibility()})),this.optionText(),this.optionColors(),this.optionFonts(),this.optionPrice()}return t.prototype.addOptionDiv=function(){var t=document.createElement("div");return t.classList.add("option"),t},t.prototype.addOption=function(t){void 0===t&&(t="");var e=document.createElement("div");e.classList.add(t),e.classList.add("label"),this._element.appendChild(e);var i=this.addOptionDiv();return e.appendChild(i),i},t.prototype.addRange=function(t,e,i,n){var r=document.createElement("input");r.type="range",r.min=t,r.max=e,r.step=i,n.appendChild(r)},t.prototype.updateVisibility=function(){this._element.classList.toggle("hidden"),this.showPrice()},t.prototype.optionText=function(){var t=this,e=this.addOption("Текст"),i=document.createElement("textarea");i.classList.add("textarea"),i.placeholder="Ваш текст",i.rows=3,e.appendChild(i),i.oninput=function(e){var i=e.target.value;t._canvas._selectedObjects.map((function(t){t.changeText(i)})),t._canvas.update()}},t.prototype.optionColors=function(){var t=this.addOption("Цвет"),e=new h.default(this._canvas);t.appendChild(e.element)},t.prototype.optionFonts=function(){var t=this,e=this.addOption("Шрифт");e.classList.add("fontOption"),r.fonts.map((function(i){var n=new s.default(i,(function(){t._canvas._selectedObjects.map((function(t){t.changeFont(i)})),t._canvas.update(),t.showPrice()}),e);n.getElement().classList.add("fontOptionButton"),n.getElement().style.fontFamily=i,n.getElement().style.fontSize="1em"}))},t.prototype.changeShadow=function(t){this._canvas._selectedObjects.map((function(e){e.changeShadow(t),e.dirty=!0})),this._canvas.update()},t.prototype.optionPrice=function(){var t=this,e=this.addOption("Стоимость"),i=document.createElement("div");i.classList.add("priceDiv"),i.textContent="",e.appendChild(i),this._canvas._canvas.on("object:modified",(function(){t.showPrice()}))},t.prototype.showPrice=function(){var t=this._canvas.selectAll();t.ungroupOnCanvas();var e=0,i=0,n=Number.parseFloat((Math.round(100*(t.width+Number.EPSILON))/100).toString()),s=Number.parseFloat((Math.round(100*(t.height+Number.EPSILON))/100).toString());t.getObjects().map((function(t){t instanceof o.default&&(i+=t.getText().trim().replace(" ","").length)})),e=n*(0,r.getPriceTextSize)()+s*(0,r.getPriceTextSize)()+i*(0,r.getPriceElement)(),e=Math.floor(e);var h=document.querySelector(".priceDiv");e&&(h.textContent=(null==e?void 0:e.toString())+" р."),new a.default("Примерная стоимость вывески",h)},t}();e.default=c},11:function(t,e,i){"use strict";var n,r=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=i(777),s=function(t){function e(e,i,n){void 0===i&&(i=5);var r=t.call(this)||this;r._colorOfShadow=n;for(var s=0;s<i;s++)r.addWithUpdate(new o.fabric.Text(e,{fill:"white"}));return r.changeShadow(),r}return r(e,t),e.prototype.changeShadow=function(t){void 0===t&&(t=this._colorOfShadow),this.getObjects().map((function(e,i){e.shadow=new o.fabric.Shadow({color:t,blur:3*i,nonScaling:!0}),e.set({dirty:!0})})),this.dirty=!0},e.prototype.changeText=function(t){void 0===t&&(t=""),this.getObjects().map((function(e){e.set({text:t})})),this.addWithUpdate()},e.prototype.getText=function(){return this.getObjects()[0].text},e.prototype.changeFont=function(t){this.getObjects().map((function(e){e.set({fontFamily:t})})),this.set("dirty",!0),this.addWithUpdate()},e}(o.fabric.Group);e.default=s},321:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i(223);var n=function(){function t(t,e,i){void 0===t&&(t=""),this._text=t,this._onClick=e,this._buttonDiv=document.createElement("button"),this._buttonDiv.classList.add("btn"),this._buttonDiv.textContent=t,this._buttonDiv.addEventListener("click",(function(){e()})),i.appendChild(this._buttonDiv)}return Object.defineProperty(t.prototype,"text",{get:function(){return this._text},set:function(t){this._text=t},enumerable:!1,configurable:!0}),t.prototype.getElement=function(){return this._buttonDiv},t}();e.default=n},901:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i(797);var n=function(){function t(t,e){this._text=t,this._spanElement=document.createElement("span"),this._spanElement.classList.add("tooltipText"),this._spanElement.textContent=t,e.classList.add("tooltip"),this.onHoverShowHigher(e),e.appendChild(this._spanElement)}return Object.defineProperty(t.prototype,"text",{get:function(){return this._text},set:function(t){this._text=t},enumerable:!1,configurable:!0}),t.prototype.onHoverShowHigher=function(t,e,i){void 0===e&&(e="5"),void 0===i&&(i="1"),t.addEventListener("mouseover",(function(){t.style.zIndex=e})),t.addEventListener("mouseout",(function(){t.style.zIndex=i}))},t}();e.default=n},222:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i(777),r=i(923);e.default=function(){var t="12px Arial";function e(t){return t.toFixed(2).toString().replace(".",",")+" мм"}n.fabric.Object.prototype.objectCaching=!1,n.fabric.Object.prototype.controls.h=new n.fabric.Control({x:-.5,cursorStyle:"pointer",render:function(i,n,o,s,a){i.font=t,i.fillStyle=r.colorScheme.blue;var h=e(a.getScaledWidth()),c=i.measureText(h).width,l=1.2*i.measureText("M").width,u=n+a.getScaledWidth()/2-c/2,f=o+a.getScaledHeight()/2+l+8;i.fillText(h,u,f)}}),n.fabric.Object.prototype.controls.w=new n.fabric.Control({y:-.5,cursorStyle:"pointer",render:function(i,n,o,s,a){i.font=t,i.fillStyle=r.colorScheme.blue;var h=e(a.getScaledHeight()),c=i.measureText(h).width,l=1.2*i.measureText("M").width,u=n-a.getScaledWidth()/2-8-l/2,f=o+a.getScaledHeight()/2+c/2;i.save(),i.rotate(-Math.PI/2),i.fillText(h,-f,u),i.restore()}}),n.fabric.Object.prototype.setControlsVisibility({mb:!1,ml:!1,mr:!1,mt:!1,mtr:!1}),n.fabric.Object.prototype.cornerColor=r.colorScheme.blue}},484:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var r=i(777),o=n(i(11)),s=i(923),a=n(i(222)),h=function(){function t(t){var e=this,i="canvasFabric";this.makeCanvasDiv(t,i),this._canvas=new r.fabric.Canvas(i),this._canvas.setBackgroundColor("#101010",(function(){})),this._canvas.setDimensions({height:500,width:500}),this._canvas.on("selection:created",(function(){e._selectedObjects=e._canvas.getActiveObjects()})),this._canvas.on("selection:updated",(function(){e._selectedObjects=e._canvas.getActiveObjects()})),this._canvas.on("selection:cleared",(function(){e._selectedObjects=null})),this._canvas.on("rotating",(function(){e._selectedObjects.map((function(t){t.setCoords()}))})),(0,a.default)()}return t.prototype.makeCanvasDiv=function(t,e){var i=document.createElement("canvas");t.appendChild(i),i.id=e,this._canvasElement=i},t.prototype.resize=function(t,e){this._canvas.setWidth(t),this._canvas.setHeight(e),this.update()},t.prototype.getSize=function(){return{width:this._canvas.width,height:this._canvas.height}},t.prototype.getCenter=function(){return{x:this.getSize().width/2,y:this.getSize().height/2}},t.prototype.addToScene=function(t,e){var i;void 0===e&&(e=!0),(i=this._canvas).add.apply(i,t),e&&this.update()},t.prototype.addRect=function(t,e,i){void 0===i&&(i="blue");var n=new r.fabric.Rect({left:this.getCenter().x,top:this.getCenter().y,fill:"transparent",width:t,height:e,strokeWidth:1,stroke:i,strokeUniform:!0});return this.addToScene([n]),n},t.prototype.addText=function(t){var e=new o.default(t,8,"red");return e.changeFont(s.fonts[0]),this.alignObject(e),this.addToScene([e]),e.changeShadow("red"),e},t.prototype.alignObject=function(t,e,i){void 0===e&&(e=!0),void 0===i&&(i=!0),i&&t.set("left",this._canvas.width/2-t.getScaledWidth()/2),e&&t.set("top",this._canvas.height/2-t.getScaledHeight()/2),this.update()},t.prototype.deleteLastActiveObject=function(){var t;this._selectedObjects&&(t=this._canvas).remove.apply(t,this._selectedObjects)},t.prototype.update=function(){this._canvas.renderAll()},t.prototype.selectAll=function(){return new r.fabric.ActiveSelection(this._canvas.getObjects(),{canvas:this._canvas})},t}();e.default=h},607:function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),i(915);var r=i(923),o=n(i(562));window.addEventListener("load",(function(){s.initialize()}));var s=new o.default;s.loadFonts(r.fonts)},923:function(t,e){"use strict";var i=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(r,o){function s(t){try{h(n.next(t))}catch(t){o(t)}}function a(t){try{h(n.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,a)}h((n=n.apply(t,e||[])).next())}))},n=this&&this.__generator||function(t,e){var i,n,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(h){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(i=1,n&&(r=2&a[0]?n.return:a[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,a[1])).done)return r;switch(n=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{i=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,h])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.getData=e.getColors=e.getPriceTextSize=e.getPriceElement=e.prices=e.colorScheme=e.colors=e.fonts=e.serverUrl=e.baseLocation=void 0,e.baseLocation=".neonWidget",e.serverUrl="https://neon-widget-back.onrender.com",e.fonts=["MADELikes","RosaMarena","Veles","PFHandbookPro","Nickainley","StudioScriptCTT","LDSlender","Helvetica","CitricaCyrillic","BloggerSans","Birch","AmericanRetro"],e.colors={Красный:"rgb(255,0,0)",Оранжевый:"rgb(255,165,0)",Фуксия:"rgb(255,0,255)",Розовый:"rgb(255,192,203)",Желтый:"rgb(255,235,0)",Лаймовый:"rgb(255,255,102)",Фиолетовый:"rgb(128, 0, 128)",Синий:"rgb(0,0,139)",Голубой:"rgb(173, 216, 230)",Зеленый:"rgb(50,205,50)","Теплый белый":"rgb(253, 244, 220)","Холодный белый":"rgb(244, 253, 255)"},e.colorScheme={blue:"rgb(153, 204, 255)"},e.prices={price1mm:5,priceforElement:150},e.getPriceElement=function(){var t=JSON.parse(localStorage.getItem("data"));return t?t[0][1]:e.prices.priceforElement},e.getPriceTextSize=function(){var t=JSON.parse(localStorage.getItem("data"));return t?t[1][1]:e.prices.price1mm},e.getColors=function(){var t={},i=JSON.parse(localStorage.getItem("data"));return i?(i[2].map((function(e,n){0!=n&&(t[i[2][n]]="rgb("+i[3][n]+")")})),t):e.colors},e.getData=function(){return i(void 0,void 0,void 0,(function(){var t;return n(this,(function(i){switch(i.label){case 0:return[4,fetch(e.serverUrl+"/data",{method:"GET",mode:"cors"})];case 1:return[4,i.sent().json()];case 2:return t=i.sent(),console.log(t),localStorage.setItem("data",JSON.stringify(t)),[2]}}))}))}},960:()=>{},759:()=>{},137:()=>{}},e={};function i(n){var r=e[n];if(void 0!==r)return r.exports;var o=e[n]={id:n,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.nc=void 0,i(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vc3JjL2NvbXBvbmVudHMvT2JqZWN0UHJvcGVydGllcy9Db2xvckJ1dHRvbnMvY29sb3JQaWNrQnV0dG9uLmNzcyIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vc3JjL2NvbXBvbmVudHMvT2JqZWN0UHJvcGVydGllcy9vYmplY3RQcm9wZXJ0aWVzLmNzcyIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vc3JjL2NvbXBvbmVudHMvVUkvQnV0dG9uL2J1dHRvbi5jc3MiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC8uL3NyYy9jb21wb25lbnRzL1VJL1Rvb2x0aXAvdG9vbHRpcC5jc3MiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC8uL3NyYy9zdHlsZXMvc3R5bGUuY3NzIiwid2VicGFjazovL25lb253aWRnZXQvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL25lb253aWRnZXQvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2ZhYnJpYy9kaXN0L2ZhYnJpYy5qcyIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vc3JjL2NvbXBvbmVudHMvQmFyL2Jhci5jc3M/YTY4OSIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vc3JjL2NvbXBvbmVudHMvT2JqZWN0UHJvcGVydGllcy9Db2xvckJ1dHRvbnMvY29sb3JQaWNrQnV0dG9uLmNzcz8zN2E0Iiwid2VicGFjazovL25lb253aWRnZXQvLi9zcmMvY29tcG9uZW50cy9PYmplY3RQcm9wZXJ0aWVzL29iamVjdFByb3BlcnRpZXMuY3NzP2I0YTUiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC8uL3NyYy9jb21wb25lbnRzL1VJL0J1dHRvbi9idXR0b24uY3NzPzA1N2IiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC8uL3NyYy9jb21wb25lbnRzL1VJL1Rvb2x0aXAvdG9vbHRpcC5jc3M/NmMwNSIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vc3JjL3N0eWxlcy9zdHlsZS5jc3M/ZmY5NCIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL25lb253aWRnZXQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL25lb253aWRnZXQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL25lb253aWRnZXQvLi9zcmMvaWNvbnMvY2VudGVyLWhvcml6b250YWwuc3ZnIiwid2VicGFjazovL25lb253aWRnZXQvLi9zcmMvaWNvbnMvY2VudGVyLXZlcnRpY2FsLnN2ZyIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vc3JjL2ljb25zL2Rvd25sb2FkLnN2ZyIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vc3JjL2ljb25zL3RleHQuc3ZnIiwid2VicGFjazovL25lb253aWRnZXQvLi9zcmMvaWNvbnMvdHJhc2guc3ZnIiwid2VicGFjazovL25lb253aWRnZXQvLi9zcmMvV2lkZ2V0LnRzIiwid2VicGFjazovL25lb253aWRnZXQvLi9zcmMvY29tcG9uZW50cy9CYXIvQmFyLnRzIiwid2VicGFjazovL25lb253aWRnZXQvLi9zcmMvY29tcG9uZW50cy9CYXIvRG93bmxvZGVyLnRzIiwid2VicGFjazovL25lb253aWRnZXQvLi9zcmMvY29tcG9uZW50cy9PYmplY3RQcm9wZXJ0aWVzL0NvbG9yQnV0dG9ucy9Db2xvclBpY2tCdXR0b25zLnRzIiwid2VicGFjazovL25lb253aWRnZXQvLi9zcmMvY29tcG9uZW50cy9PYmplY3RQcm9wZXJ0aWVzL09iamVjdFByb3BlcnRpZXMudHMiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC8uL3NyYy9jb21wb25lbnRzL1NoYWRvd1RleHQudHMiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC8uL3NyYy9jb21wb25lbnRzL1VJL0J1dHRvbi9CdXR0b24udHMiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC8uL3NyYy9jb21wb25lbnRzL1VJL1Rvb2x0aXAvVG9vbHRpcC50cyIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0Ly4vc3JjL2NvbXBvbmVudHMvV2lkZ2V0Q2FudmFzL09iamVjdENvbnRyb2xzLnRzIiwid2VicGFjazovL25lb253aWRnZXQvLi9zcmMvY29tcG9uZW50cy9XaWRnZXRDYW52YXMvV2lkZ2V0Q2FudmFzLnRzIiwid2VicGFjazovL25lb253aWRnZXQvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC8uL3NyYy9yZXNvdXJjZXMvY29uc3RhbnRzLnRzIiwid2VicGFjazovL25lb253aWRnZXQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9uZW9ud2lkZ2V0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbmVvbndpZGdldC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL25lb253aWRnZXQvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL25lb253aWRnZXQvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuYmFye1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBtYXJnaW46IDFlbSBhdXRvO1xyXG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9CYXIvYmFyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsYUFBYTtJQUNiLDZCQUE2QjtJQUM3QixtQkFBbUI7SUFDbkIsV0FBVztJQUNYLGdCQUFnQjtJQUNoQixnQkFBZ0I7QUFDcEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmJhcntcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIG1heC13aWR0aDogNTAwcHg7XFxyXFxuICAgIG1hcmdpbjogMWVtIGF1dG87XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmNvbG9yUGlja0J1dHRvbnN7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBnYXA6IDEwcHg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG5cclxuLmNvbG9yQnV0dG9ue1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xyXG4gICAgZmlsdGVyOiBicmlnaHRuZXNzKDgwJSk7XHJcbiAgICBmbGV4LWJhc2lzOiAyMCU7XHJcbiAgICBtYXJnaW46IDA7XHJcbn1cclxuLmNvbG9yQnV0dG9uOmhvdmVye1xyXG4gICAgZmlsdGVyOiBicmlnaHRuZXNzKDEwMCUpO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCUsIC01JSk7XHJcbn1cclxuLmNvbG9yQnV0dG9uOmFjdGl2ZXtcclxuICAgIGZpbHRlcjogYnJpZ2h0bmVzcyg2MCUpO1xyXG59XHJcbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvT2JqZWN0UHJvcGVydGllcy9Db2xvckJ1dHRvbnMvY29sb3JQaWNrQnV0dG9uLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLFdBQVc7SUFDWCxjQUFjO0lBQ2QsU0FBUztJQUNULHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZixTQUFTO0FBQ2I7QUFDQTtJQUNJLHdCQUF3QjtJQUN4Qiw2QkFBNkI7QUFDakM7QUFDQTtJQUNJLHVCQUF1QjtBQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29sb3JQaWNrQnV0dG9uc3tcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxyXFxuICAgIGdhcDogMTBweDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5jb2xvckJ1dHRvbntcXHJcXG4gICAgYm9yZGVyOiBub25lO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XFxyXFxuICAgIGZpbHRlcjogYnJpZ2h0bmVzcyg4MCUpO1xcclxcbiAgICBmbGV4LWJhc2lzOiAyMCU7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuLmNvbG9yQnV0dG9uOmhvdmVye1xcclxcbiAgICBmaWx0ZXI6IGJyaWdodG5lc3MoMTAwJSk7XFxyXFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAlLCAtNSUpO1xcclxcbn1cXHJcXG4uY29sb3JCdXR0b246YWN0aXZle1xcclxcbiAgICBmaWx0ZXI6IGJyaWdodG5lc3MoNjAlKTtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAub2JqZWN0UHJvcGVydGllc3tcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG59XHJcbi5vcHRpb257XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIHBhZGRpbmc6IDAuNWVtO1xyXG59XHJcbi5zdWJPcHRpb257XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgIGdhcDogNXB4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuLmxhYmVse1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzEwMTAxMDtcclxuICAgIG1pbi1oZWlnaHQ6IDRlbTtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIG9wYWNpdHk6IDE7XHJcbiAgICB0cmFuc2l0aW9uOiAwLjRzIGFsbDtcclxufVxyXG4uaGlkZGVue1xyXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgb3BhY2l0eTogMDtcclxuICAgIHRyYW5zaXRpb246IDAuNHMgYWxsO1xyXG59XHJcblxyXG4udGV4dGFyZWF7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTAxMDEwO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgdHJhbnNpdGlvbjogMC40cyBhbGw7XHJcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbjogMWVtO1xyXG4gICAgcmVzaXplOiB2ZXJ0aWNhbDtcclxufVxyXG4udGV4dGFyZWE6Zm9jdXN7XHJcbiAgICBvdXRsaW5lOiBub25lO1xyXG4gICAgYm9yZGVyOiAxcHggd2hpdGUgc29saWQ7XHJcbiAgICB0cmFuc2l0aW9uOiAwLjRzIGFsbDtcclxufVxyXG5cclxuLmZvbnRPcHRpb257XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxufVxyXG5cclxuLmZvbnRPcHRpb25CdXR0b257XHJcbiAgICBmbGV4OiAyNSU7XHJcbiAgICBoZWlnaHQ6IDIuNGVtO1xyXG4gICAgcGFkZGluZzogMC41ZW07XHJcbiAgICBmaWx0ZXI6IGJyaWdodG5lc3MoODAlKTtcclxufVxyXG4uZm9udE9wdGlvbkJ1dHRvbjpob3ZlcntcclxuICAgIGZpbHRlcjogYnJpZ2h0bmVzcygxMjAlKTtcclxufVxyXG5cclxuLnByaWNlRGl2e1xyXG4gICAgZm9udC1zaXplOiAyNHB4O1xyXG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9PYmplY3RQcm9wZXJ0aWVzL29iamVjdFByb3BlcnRpZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksY0FBYztBQUNsQjtBQUNBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsbUJBQW1CO0lBQ25CLDZCQUE2QjtJQUM3QixnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGNBQWM7QUFDbEI7QUFDQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLFFBQVE7SUFDUixtQkFBbUI7SUFDbkIsNkJBQTZCO0lBQzdCLFdBQVc7QUFDZjtBQUNBO0lBQ0ksWUFBWTtJQUNaLHlCQUF5QjtJQUN6QixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxVQUFVO0lBQ1Ysb0JBQW9CO0FBQ3hCO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLG9CQUFvQjtBQUN4Qjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osV0FBVztJQUNYLFdBQVc7SUFDWCxnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLFNBQVM7SUFDVCxhQUFhO0lBQ2IsY0FBYztJQUNkLHVCQUF1QjtBQUMzQjtBQUNBO0lBQ0ksd0JBQXdCO0FBQzVCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIub2JqZWN0UHJvcGVydGllc3tcXHJcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxyXFxufVxcclxcbi5vcHRpb257XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxyXFxuICAgIG1heC13aWR0aDogNTAwcHg7XFxyXFxuICAgIG1hcmdpbjogMCBhdXRvO1xcclxcbiAgICBwYWRkaW5nOiAwLjVlbTtcXHJcXG59XFxyXFxuLnN1Yk9wdGlvbntcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICBnYXA6IDVweDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG4ubGFiZWx7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzEwMTAxMDtcXHJcXG4gICAgbWluLWhlaWdodDogNGVtO1xcclxcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xcclxcbiAgICBtYXJnaW46IDAgYXV0bztcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gICAgdHJhbnNpdGlvbjogMC40cyBhbGw7XFxyXFxufVxcclxcbi5oaWRkZW57XFxyXFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXHJcXG4gICAgb3BhY2l0eTogMDtcXHJcXG4gICAgdHJhbnNpdGlvbjogMC40cyBhbGw7XFxyXFxufVxcclxcblxcclxcbi50ZXh0YXJlYXtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzEwMTAxMDtcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICB0cmFuc2l0aW9uOiAwLjRzIGFsbDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICBwYWRkaW5nOiA4cHg7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBtYXJnaW46IDFlbTtcXHJcXG4gICAgcmVzaXplOiB2ZXJ0aWNhbDtcXHJcXG59XFxyXFxuLnRleHRhcmVhOmZvY3Vze1xcclxcbiAgICBvdXRsaW5lOiBub25lO1xcclxcbiAgICBib3JkZXI6IDFweCB3aGl0ZSBzb2xpZDtcXHJcXG4gICAgdHJhbnNpdGlvbjogMC40cyBhbGw7XFxyXFxufVxcclxcblxcclxcbi5mb250T3B0aW9ue1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uZm9udE9wdGlvbkJ1dHRvbntcXHJcXG4gICAgZmxleDogMjUlO1xcclxcbiAgICBoZWlnaHQ6IDIuNGVtO1xcclxcbiAgICBwYWRkaW5nOiAwLjVlbTtcXHJcXG4gICAgZmlsdGVyOiBicmlnaHRuZXNzKDgwJSk7XFxyXFxufVxcclxcbi5mb250T3B0aW9uQnV0dG9uOmhvdmVye1xcclxcbiAgICBmaWx0ZXI6IGJyaWdodG5lc3MoMTIwJSk7XFxyXFxufVxcclxcblxcclxcbi5wcmljZURpdntcXHJcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5idG57XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZ2IoMjQ0LCA2NywgNTQpO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDMsIDMsIDMpIDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIHBhZGRpbmc6IDNweDtcclxuICAgIG1hcmdpbjogNXB4O1xyXG4gICAgbWluLXdpZHRoOiAzMHB4O1xyXG4gICAgbWluLWhlaWdodDogMzBweDtcclxuICAgIGZpbGw6IHdoaXRlO1xyXG59XHJcbi5idG46YWN0aXZle1xyXG4gICAgYm9yZGVyLXdpZHRoOiAzcHg7XHJcbn1cclxuLmJ0bjpob3ZlcntcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvVUkvQnV0dG9uL2J1dHRvbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxrQ0FBa0M7SUFDbEMsK0JBQStCO0lBQy9CLFlBQVk7SUFDWixZQUFZO0lBQ1osV0FBVztJQUNYLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsV0FBVztBQUNmO0FBQ0E7SUFDSSxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGVBQWU7QUFDbkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmJ0bntcXHJcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmdiKDI0NCwgNjcsIDU0KTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDMsIDMsIDMpIDtcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICBwYWRkaW5nOiAzcHg7XFxyXFxuICAgIG1hcmdpbjogNXB4O1xcclxcbiAgICBtaW4td2lkdGg6IDMwcHg7XFxyXFxuICAgIG1pbi1oZWlnaHQ6IDMwcHg7XFxyXFxuICAgIGZpbGw6IHdoaXRlO1xcclxcbn1cXHJcXG4uYnRuOmFjdGl2ZXtcXHJcXG4gICAgYm9yZGVyLXdpZHRoOiAzcHg7XFxyXFxufVxcclxcbi5idG46aG92ZXJ7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAudG9vbHRpcHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxufVxyXG4udG9vbHRpcFRleHR7XHJcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgcGFkZGluZzogNHB4IDhweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgIG9wYWNpdHk6IDA7XHJcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC40cztcclxuICAgIHRvcDogMTAwJTtcclxuICAgIGxlZnQ6IDUwJTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDEwcHgpO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiKDI0NCwgNjcsIDU0KTtcclxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG4gICAgXHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbn1cclxuLnRvb2x0aXBUZXh0OjphZnRlcntcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBib3R0b206IDEwMCU7XHJcbiAgICBsZWZ0OiA1MCU7XHJcbiAgICBtYXJnaW4tbGVmdDogLTVweDtcclxuICAgIGJvcmRlci13aWR0aDogNXB4O1xyXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgcmdiKDI0NCwgNjcsIDU0KSB0cmFuc3BhcmVudDtcclxufVxyXG5cclxuLnRvb2x0aXA6aG92ZXIgLnRvb2x0aXBUZXh0IHtcclxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuNHM7XHJcbiAgfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvVUkvVG9vbHRpcC90b29sdGlwLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksa0JBQWtCO0lBQ2xCLHVCQUF1QjtJQUN2QixXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixVQUFVO0lBQ1Ysb0JBQW9CO0lBQ3BCLFNBQVM7SUFDVCxTQUFTO0lBQ1QsZ0NBQWdDO0lBQ2hDLGtDQUFrQztJQUNsQyxvQkFBb0I7O0lBRXBCLGVBQWU7QUFDbkI7QUFDQTtJQUNJLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLFNBQVM7SUFDVCxpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLG1CQUFtQjtJQUNuQixrRUFBa0U7QUFDdEU7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsVUFBVTtJQUNWLG9CQUFvQjtFQUN0QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIudG9vbHRpcHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbn1cXHJcXG4udG9vbHRpcFRleHR7XFxyXFxuICAgIHdpZHRoOiBmaXQtY29udGVudDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIHBhZGRpbmc6IDRweCA4cHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxyXFxuICAgIG9wYWNpdHk6IDA7XFxyXFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjRzO1xcclxcbiAgICB0b3A6IDEwMCU7XFxyXFxuICAgIGxlZnQ6IDUwJTtcXHJcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMTBweCk7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYigyNDQsIDY3LCA1NCk7XFxyXFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbiAgICBcXHJcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcclxcbn1cXHJcXG4udG9vbHRpcFRleHQ6OmFmdGVye1xcclxcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBib3R0b206IDEwMCU7XFxyXFxuICAgIGxlZnQ6IDUwJTtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IC01cHg7XFxyXFxuICAgIGJvcmRlci13aWR0aDogNXB4O1xcclxcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcclxcbiAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHJnYigyNDQsIDY3LCA1NCkgdHJhbnNwYXJlbnQ7XFxyXFxufVxcclxcblxcclxcbi50b29sdGlwOmhvdmVyIC50b29sdGlwVGV4dCB7XFxyXFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxyXFxuICAgIG9wYWNpdHk6IDE7XFxyXFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjRzO1xcclxcbiAgfVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLm5lb25XaWRnZXQge1xyXG5cdGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTczLCAxMjYsIDEyNiwgMCk7XHJcblx0Zm9udC1mYW1pbHk6IGN1cnNpdmU7XHJcbn1cclxuXHJcbi5jYW52YXMtY29udGFpbmVyIHtcclxuXHRtYXJnaW46IDAgYXV0bztcclxufVxyXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0NBQ0Msd0NBQXdDO0NBQ3hDLG9CQUFvQjtBQUNyQjs7QUFFQTtDQUNDLGNBQWM7QUFDZlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubmVvbldpZGdldCB7XFxyXFxuXFx0YmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNzMsIDEyNiwgMTI2LCAwKTtcXHJcXG5cXHRmb250LWZhbWlseTogY3Vyc2l2ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmNhbnZhcy1jb250YWluZXIge1xcclxcblxcdG1hcmdpbjogMCBhdXRvO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIi8qIGJ1aWxkOiBgbm9kZSBidWlsZC5qcyBtb2R1bGVzPUFMTCBleGNsdWRlPWdlc3R1cmVzLGFjY2Vzc29ycyxlcmFzaW5nIHJlcXVpcmVqcyBtaW5pZmllcj11Z2xpZnlqc2AgKi9cbi8qISBGYWJyaWMuanMgQ29weXJpZ2h0IDIwMDgtMjAxNSwgUHJpbnRpbyAoSnVyaXkgWmF5dHNldiwgTWF4aW0gQ2hlcm55YWspICovXG5cbnZhciBmYWJyaWMgPSBmYWJyaWMgfHwgeyB2ZXJzaW9uOiAnNS4zLjAnIH07XG5pZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gIGV4cG9ydHMuZmFicmljID0gZmFicmljO1xufVxuLyogX0FNRF9TVEFSVF8gKi9cbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoW10sIGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFicmljOyB9KTtcbn1cbi8qIF9BTURfRU5EXyAqL1xuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgaWYgKGRvY3VtZW50IGluc3RhbmNlb2YgKHR5cGVvZiBIVE1MRG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gSFRNTERvY3VtZW50IDogRG9jdW1lbnQpKSB7XG4gICAgZmFicmljLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gIH1cbiAgZWxzZSB7XG4gICAgZmFicmljLmRvY3VtZW50ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCcnKTtcbiAgfVxuICBmYWJyaWMud2luZG93ID0gd2luZG93O1xufVxuZWxzZSB7XG4gIC8vIGFzc3VtZSB3ZSdyZSBydW5uaW5nIHVuZGVyIG5vZGUuanMgd2hlbiBkb2N1bWVudC93aW5kb3cgYXJlIG5vdCBwcmVzZW50XG4gIHZhciBqc2RvbSA9IHJlcXVpcmUoJ2pzZG9tJyk7XG4gIHZhciB2aXJ0dWFsV2luZG93ID0gbmV3IGpzZG9tLkpTRE9NKFxuICAgIGRlY29kZVVSSUNvbXBvbmVudCgnJTNDIURPQ1RZUEUlMjBodG1sJTNFJTNDaHRtbCUzRSUzQ2hlYWQlM0UlM0MlMkZoZWFkJTNFJTNDYm9keSUzRSUzQyUyRmJvZHklM0UlM0MlMkZodG1sJTNFJyksXG4gICAge1xuICAgICAgZmVhdHVyZXM6IHtcbiAgICAgICAgRmV0Y2hFeHRlcm5hbFJlc291cmNlczogWydpbWcnXVxuICAgICAgfSxcbiAgICAgIHJlc291cmNlczogJ3VzYWJsZSdcbiAgICB9KS53aW5kb3c7XG4gIGZhYnJpYy5kb2N1bWVudCA9IHZpcnR1YWxXaW5kb3cuZG9jdW1lbnQ7XG4gIGZhYnJpYy5qc2RvbUltcGxGb3JXcmFwcGVyID0gcmVxdWlyZSgnanNkb20vbGliL2pzZG9tL2xpdmluZy9nZW5lcmF0ZWQvdXRpbHMnKS5pbXBsRm9yV3JhcHBlcjtcbiAgZmFicmljLm5vZGVDYW52YXMgPSByZXF1aXJlKCdqc2RvbS9saWIvanNkb20vdXRpbHMnKS5DYW52YXM7XG4gIGZhYnJpYy53aW5kb3cgPSB2aXJ0dWFsV2luZG93O1xuICBET01QYXJzZXIgPSBmYWJyaWMud2luZG93LkRPTVBhcnNlcjtcbn1cblxuLyoqXG4gKiBUcnVlIHdoZW4gaW4gZW52aXJvbm1lbnQgdGhhdCBzdXBwb3J0cyB0b3VjaCBldmVudHNcbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xuZmFicmljLmlzVG91Y2hTdXBwb3J0ZWQgPSAnb250b3VjaHN0YXJ0JyBpbiBmYWJyaWMud2luZG93IHx8ICdvbnRvdWNoc3RhcnQnIGluIGZhYnJpYy5kb2N1bWVudCB8fFxuICAoZmFicmljLndpbmRvdyAmJiBmYWJyaWMud2luZG93Lm5hdmlnYXRvciAmJiBmYWJyaWMud2luZG93Lm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDApO1xuXG4vKipcbiAqIFRydWUgd2hlbiBpbiBlbnZpcm9ubWVudCB0aGF0J3MgcHJvYmFibHkgTm9kZS5qc1xuICogQHR5cGUgYm9vbGVhblxuICovXG5mYWJyaWMuaXNMaWtlbHlOb2RlID0gdHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJztcblxuLyogX0ZST01fU1ZHX1NUQVJUXyAqL1xuLyoqXG4gKiBBdHRyaWJ1dGVzIHBhcnNlZCBmcm9tIGFsbCBTVkcgZWxlbWVudHNcbiAqIEB0eXBlIGFycmF5XG4gKi9cbmZhYnJpYy5TSEFSRURfQVRUUklCVVRFUyA9IFtcbiAgJ2Rpc3BsYXknLFxuICAndHJhbnNmb3JtJyxcbiAgJ2ZpbGwnLCAnZmlsbC1vcGFjaXR5JywgJ2ZpbGwtcnVsZScsXG4gICdvcGFjaXR5JyxcbiAgJ3N0cm9rZScsICdzdHJva2UtZGFzaGFycmF5JywgJ3N0cm9rZS1saW5lY2FwJywgJ3N0cm9rZS1kYXNob2Zmc2V0JyxcbiAgJ3N0cm9rZS1saW5lam9pbicsICdzdHJva2UtbWl0ZXJsaW1pdCcsXG4gICdzdHJva2Utb3BhY2l0eScsICdzdHJva2Utd2lkdGgnLFxuICAnaWQnLCAncGFpbnQtb3JkZXInLCAndmVjdG9yLWVmZmVjdCcsXG4gICdpbnN0YW50aWF0ZWRfYnlfdXNlJywgJ2NsaXAtcGF0aCcsXG5dO1xuLyogX0ZST01fU1ZHX0VORF8gKi9cblxuLyoqXG4gKiBQaXhlbCBwZXIgSW5jaCBhcyBhIGRlZmF1bHQgdmFsdWUgc2V0IHRvIDk2LiBDYW4gYmUgY2hhbmdlZCBmb3IgbW9yZSByZWFsaXN0aWMgY29udmVyc2lvbi5cbiAqL1xuZmFicmljLkRQSSA9IDk2O1xuZmFicmljLnJlTnVtID0gJyg/OlstK10/KD86XFxcXGQrfFxcXFxkKlxcXFwuXFxcXGQrKSg/OltlRV1bLStdP1xcXFxkKyk/KSc7XG5mYWJyaWMuY29tbWFXc3AgPSAnKD86XFxcXHMrLD9cXFxccyp8LFxcXFxzKiknO1xuZmFicmljLnJlUGF0aENvbW1hbmQgPSAvKFstK10/KChcXGQrXFwuXFxkKyl8KChcXGQrKXwoXFwuXFxkKykpKSg/OltlRV1bLStdP1xcZCspPykvaWc7XG5mYWJyaWMucmVOb25Xb3JkID0gL1sgXFxuXFwuLDshXFw/XFwtXS87XG5mYWJyaWMuZm9udFBhdGhzID0geyB9O1xuZmFicmljLmlNYXRyaXggPSBbMSwgMCwgMCwgMSwgMCwgMF07XG5mYWJyaWMuc3ZnTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuXG4vKipcbiAqIFBpeGVsIGxpbWl0IGZvciBjYWNoZSBjYW52YXNlcy4gMU1weCAsIDRNcHggc2hvdWxkIGJlIGZpbmUuXG4gKiBAc2luY2UgMS43LjE0XG4gKiBAdHlwZSBOdW1iZXJcbiAqIEBkZWZhdWx0XG4gKi9cbmZhYnJpYy5wZXJmTGltaXRTaXplVG90YWwgPSAyMDk3MTUyO1xuXG4vKipcbiAqIFBpeGVsIGxpbWl0IGZvciBjYWNoZSBjYW52YXNlcyB3aWR0aCBvciBoZWlnaHQuIElFIGZpeGVzIHRoZSBtYXhpbXVtIGF0IDUwMDBcbiAqIEBzaW5jZSAxLjcuMTRcbiAqIEB0eXBlIE51bWJlclxuICogQGRlZmF1bHRcbiAqL1xuZmFicmljLm1heENhY2hlU2lkZUxpbWl0ID0gNDA5NjtcblxuLyoqXG4gKiBMb3dlc3QgcGl4ZWwgbGltaXQgZm9yIGNhY2hlIGNhbnZhc2VzLCBzZXQgYXQgMjU2UFhcbiAqIEBzaW5jZSAxLjcuMTRcbiAqIEB0eXBlIE51bWJlclxuICogQGRlZmF1bHRcbiAqL1xuZmFicmljLm1pbkNhY2hlU2lkZUxpbWl0ID0gMjU2O1xuXG4vKipcbiAqIENhY2hlIE9iamVjdCBmb3Igd2lkdGhzIG9mIGNoYXJzIGluIHRleHQgcmVuZGVyaW5nLlxuICovXG5mYWJyaWMuY2hhcldpZHRoc0NhY2hlID0geyB9O1xuXG4vKipcbiAqIGlmIHdlYmdsIGlzIGVuYWJsZWQgYW5kIGF2YWlsYWJsZSwgdGV4dHVyZVNpemUgd2lsbCBkZXRlcm1pbmUgdGhlIHNpemVcbiAqIG9mIHRoZSBjYW52YXMgYmFja2VuZFxuICogQHNpbmNlIDIuMC4wXG4gKiBAdHlwZSBOdW1iZXJcbiAqIEBkZWZhdWx0XG4gKi9cbmZhYnJpYy50ZXh0dXJlU2l6ZSA9IDIwNDg7XG5cbi8qKlxuICogV2hlbiAndHJ1ZScsIHN0eWxlIGluZm9ybWF0aW9uIGlzIG5vdCByZXRhaW5lZCB3aGVuIGNvcHkvcGFzdGluZyB0ZXh0LCBtYWtpbmdcbiAqIHBhc3RlZCB0ZXh0IHVzZSBkZXN0aW5hdGlvbiBzdHlsZS5cbiAqIERlZmF1bHRzIHRvICdmYWxzZScuXG4gKiBAdHlwZSBCb29sZWFuXG4gKiBAZGVmYXVsdFxuICovXG5mYWJyaWMuZGlzYWJsZVN0eWxlQ29weVBhc3RlID0gZmFsc2U7XG5cbi8qKlxuICogRW5hYmxlIHdlYmdsIGZvciBmaWx0ZXJpbmcgcGljdHVyZSBpcyBhdmFpbGFibGVcbiAqIEEgZmlsdGVyaW5nIGJhY2tlbmQgd2lsbCBiZSBpbml0aWFsaXplZCwgdGhpcyB3aWxsIGJvdGggdGFrZSBtZW1vcnkgYW5kXG4gKiB0aW1lIHNpbmNlIGEgZGVmYXVsdCAyMDQ4eDIwNDggY2FudmFzIHdpbGwgYmUgY3JlYXRlZCBmb3IgdGhlIGdsIGNvbnRleHRcbiAqIEBzaW5jZSAyLjAuMFxuICogQHR5cGUgQm9vbGVhblxuICogQGRlZmF1bHRcbiAqL1xuZmFicmljLmVuYWJsZUdMRmlsdGVyaW5nID0gdHJ1ZTtcblxuLyoqXG4gKiBEZXZpY2UgUGl4ZWwgUmF0aW9cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvc2FmYXJpL2RvY3VtZW50YXRpb24vQXVkaW9WaWRlby9Db25jZXB0dWFsL0hUTUwtY2FudmFzLWd1aWRlL1NldHRpbmdVcHRoZUNhbnZhcy9TZXR0aW5nVXB0aGVDYW52YXMuaHRtbFxuICovXG5mYWJyaWMuZGV2aWNlUGl4ZWxSYXRpbyA9IGZhYnJpYy53aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmYWJyaWMud2luZG93LndlYmtpdERldmljZVBpeGVsUmF0aW8gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmFicmljLndpbmRvdy5tb3pEZXZpY2VQaXhlbFJhdGlvIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDE7XG4vKipcbiAqIEJyb3dzZXItc3BlY2lmaWMgY29uc3RhbnQgdG8gYWRqdXN0IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5zaGFkb3dCbHVyIHZhbHVlLFxuICogd2hpY2ggaXMgdW5pdGxlc3MgYW5kIG5vdCByZW5kZXJlZCBlcXVhbGx5IGFjcm9zcyBicm93c2Vycy5cbiAqXG4gKiBWYWx1ZXMgdGhhdCB3b3JrIHF1aXRlIHdlbGwgKGFzIG9mIE9jdG9iZXIgMjAxNykgYXJlOlxuICogLSBDaHJvbWU6IDEuNVxuICogLSBFZGdlOiAxLjc1XG4gKiAtIEZpcmVmb3g6IDAuOVxuICogLSBTYWZhcmk6IDAuOTVcbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEB0eXBlIE51bWJlclxuICogQGRlZmF1bHQgMVxuICovXG5mYWJyaWMuYnJvd3NlclNoYWRvd0JsdXJDb25zdGFudCA9IDE7XG5cbi8qKlxuICogVGhpcyBvYmplY3QgY29udGFpbnMgdGhlIHJlc3VsdCBvZiBhcmMgdG8gYmV6aWVyIGNvbnZlcnNpb24gZm9yIGZhc3RlciByZXRyaWV2aW5nIGlmIHRoZSBzYW1lIGFyYyBuZWVkcyB0byBiZSBjb252ZXJ0ZWQgYWdhaW4uXG4gKiBJdCB3YXMgYW4gaW50ZXJuYWwgdmFyaWFibGUsIGlzIGFjY2Vzc2libGUgc2luY2UgdmVyc2lvbiAyLjMuNFxuICovXG5mYWJyaWMuYXJjVG9TZWdtZW50c0NhY2hlID0geyB9O1xuXG4vKipcbiAqIFRoaXMgb2JqZWN0IGtlZXBzIHRoZSByZXN1bHRzIG9mIHRoZSBib3VuZHNPZkN1cnZlIGNhbGN1bGF0aW9uIG1hcHBlZCBieSB0aGUgam9pbmVkIGFyZ3VtZW50cyBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIGl0LlxuICogSXQgZG9lcyBzcGVlZCB1cCBjYWxjdWxhdGlvbiwgaWYgeW91IHBhcnNlIGFuZCBhZGQgYWx3YXlzIHRoZSBzYW1lIHBhdGhzLCBidXQgaW4gY2FzZSBvZiBoZWF2eSB1c2FnZSBvZiBmcmVlZHJhd2luZ1xuICogeW91IGRvIG5vdCBnZXQgYW55IHNwZWVkIGJlbmVmaXQgYW5kIHlvdSBnZXQgYSBiaWcgb2JqZWN0IGluIG1lbW9yeS5cbiAqIFRoZSBvYmplY3Qgd2FzIGEgcHJpdmF0ZSB2YXJpYWJsZSBiZWZvcmUsIHdoaWxlIG5vdyBpcyBhcHBlbmRlZCB0byB0aGUgbGliIHNvIHRoYXQgeW91IGhhdmUgYWNjZXNzIHRvIGl0IGFuZCB5b3VcbiAqIGNhbiBldmVudHVhbGx5IGNsZWFyIGl0LlxuICogSXQgd2FzIGFuIGludGVybmFsIHZhcmlhYmxlLCBpcyBhY2Nlc3NpYmxlIHNpbmNlIHZlcnNpb24gMi4zLjRcbiAqL1xuZmFicmljLmJvdW5kc09mQ3VydmVDYWNoZSA9IHsgfTtcblxuLyoqXG4gKiBJZiBkaXNhYmxlZCBib3VuZHNPZkN1cnZlQ2FjaGUgaXMgbm90IHVzZWQuIEZvciBhcHBzIHRoYXQgbWFrZSBoZWF2eSB1c2FnZSBvZiBwZW5jaWwgZHJhd2luZyBwcm9iYWJseSBkaXNhYmxpbmcgaXQgaXMgYmV0dGVyXG4gKiBAZGVmYXVsdCB0cnVlXG4gKi9cbmZhYnJpYy5jYWNoZXNCb3VuZHNPZkN1cnZlID0gdHJ1ZTtcblxuLyoqXG4gKiBTa2lwIHBlcmZvcm1hbmNlIHRlc3Rpbmcgb2Ygc2V0dXBHTENvbnRleHQgYW5kIGZvcmNlIHRoZSB1c2Ugb2YgcHV0SW1hZ2VEYXRhIHRoYXQgc2VlbXMgdG8gYmUgdGhlIG9uZSB0aGF0IHdvcmtzIGJlc3Qgb25cbiAqIENocm9tZSArIG9sZCBoYXJkd2FyZS4gaWYgeW91ciB1c2VycyBhcmUgZXhwZXJpZW5jaW5nIGVtcHR5IGltYWdlcyBhZnRlciBmaWx0ZXJpbmcgeW91IG1heSB0cnkgdG8gZm9yY2UgdGhpcyB0byB0cnVlXG4gKiB0aGlzIGhhcyB0byBiZSBzZXQgYmVmb3JlIGluc3RhbnRpYXRpbmcgdGhlIGZpbHRlcmluZyBiYWNrZW5kICggYmVmb3JlIGZpbHRlcmluZyB0aGUgZmlyc3QgaW1hZ2UgKVxuICogQHR5cGUgQm9vbGVhblxuICogQGRlZmF1bHQgZmFsc2VcbiAqL1xuZmFicmljLmZvcmNlR0xQdXRJbWFnZURhdGEgPSBmYWxzZTtcblxuZmFicmljLmluaXRGaWx0ZXJCYWNrZW5kID0gZnVuY3Rpb24oKSB7XG4gIGlmIChmYWJyaWMuZW5hYmxlR0xGaWx0ZXJpbmcgJiYgZmFicmljLmlzV2ViZ2xTdXBwb3J0ZWQgJiYgZmFicmljLmlzV2ViZ2xTdXBwb3J0ZWQoZmFicmljLnRleHR1cmVTaXplKSkge1xuICAgIGNvbnNvbGUubG9nKCdtYXggdGV4dHVyZSBzaXplOiAnICsgZmFicmljLm1heFRleHR1cmVTaXplKTtcbiAgICByZXR1cm4gKG5ldyBmYWJyaWMuV2ViZ2xGaWx0ZXJCYWNrZW5kKHsgdGlsZVNpemU6IGZhYnJpYy50ZXh0dXJlU2l6ZSB9KSk7XG4gIH1cbiAgZWxzZSBpZiAoZmFicmljLkNhbnZhczJkRmlsdGVyQmFja2VuZCkge1xuICAgIHJldHVybiAobmV3IGZhYnJpYy5DYW52YXMyZEZpbHRlckJhY2tlbmQoKSk7XG4gIH1cbn07XG5cblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgLy8gZW5zdXJlIGdsb2JhbGl0eSBldmVuIGlmIGVudGlyZSBsaWJyYXJ5IHdlcmUgZnVuY3Rpb24gd3JhcHBlZCAoYXMgaW4gTWV0ZW9yLmpzIHBhY2thZ2luZyBzeXN0ZW0pXG4gIHdpbmRvdy5mYWJyaWMgPSBmYWJyaWM7XG59XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICovXG4gIGZ1bmN0aW9uIF9yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgIGlmICghdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGV2ZW50TGlzdGVuZXIgPSB0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXTtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgZXZlbnRMaXN0ZW5lcltldmVudExpc3RlbmVyLmluZGV4T2YoaGFuZGxlcildID0gZmFsc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZmFicmljLnV0aWwuYXJyYXkuZmlsbChldmVudExpc3RlbmVyLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmVzIHNwZWNpZmllZCBldmVudFxuICAgKiBAbWVtYmVyT2YgZmFicmljLk9ic2VydmFibGVcbiAgICogQGFsaWFzIG9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gZXZlbnROYW1lIEV2ZW50IG5hbWUgKGVnLiAnYWZ0ZXI6cmVuZGVyJykgb3Igb2JqZWN0IHdpdGgga2V5L3ZhbHVlIHBhaXJzIChlZy4geydhZnRlcjpyZW5kZXInOiBoYW5kbGVyLCAnc2VsZWN0aW9uOmNsZWFyZWQnOiBoYW5kbGVyfSlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBGdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgbm90aWZpY2F0aW9uIHdoZW4gYW4gZXZlbnQgb2YgdGhlIHNwZWNpZmllZCB0eXBlIG9jY3Vyc1xuICAgKiBAcmV0dXJuIHtTZWxmfSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGZ1bmN0aW9uIG9uKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgIGlmICghdGhpcy5fX2V2ZW50TGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9fZXZlbnRMaXN0ZW5lcnMgPSB7IH07XG4gICAgfVxuICAgIC8vIG9uZSBvYmplY3Qgd2l0aCBrZXkvdmFsdWUgcGFpcnMgd2FzIHBhc3NlZFxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIGV2ZW50TmFtZSkge1xuICAgICAgICB0aGlzLm9uKHByb3AsIGV2ZW50TmFtZVtwcm9wXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuICAgICAgICB0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgfVxuICAgICAgdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0ucHVzaChoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBfb25jZShldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICB2YXIgX2hhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLm9mZihldmVudE5hbWUsIF9oYW5kbGVyKTtcbiAgICB9LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbihldmVudE5hbWUsIF9oYW5kbGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uY2UoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgLy8gb25lIG9iamVjdCB3aXRoIGtleS92YWx1ZSBwYWlycyB3YXMgcGFzc2VkXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gZXZlbnROYW1lKSB7XG4gICAgICAgIF9vbmNlLmNhbGwodGhpcywgcHJvcCwgZXZlbnROYW1lW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBfb25jZS5jYWxsKHRoaXMsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3BzIGV2ZW50IG9ic2VydmluZyBmb3IgYSBwYXJ0aWN1bGFyIGV2ZW50IGhhbmRsZXIuIENhbGxpbmcgdGhpcyBtZXRob2RcbiAgICogd2l0aG91dCBhcmd1bWVudHMgcmVtb3ZlcyBhbGwgaGFuZGxlcnMgZm9yIGFsbCBldmVudHNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5PYnNlcnZhYmxlXG4gICAqIEBhbGlhcyBvZmZcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBldmVudE5hbWUgRXZlbnQgbmFtZSAoZWcuICdhZnRlcjpyZW5kZXInKSBvciBvYmplY3Qgd2l0aCBrZXkvdmFsdWUgcGFpcnMgKGVnLiB7J2FmdGVyOnJlbmRlcic6IGhhbmRsZXIsICdzZWxlY3Rpb246Y2xlYXJlZCc6IGhhbmRsZXJ9KVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIEZ1bmN0aW9uIHRvIGJlIGRlbGV0ZWQgZnJvbSBFdmVudExpc3RlbmVyc1xuICAgKiBAcmV0dXJuIHtTZWxmfSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGZ1bmN0aW9uIG9mZihldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICBpZiAoIXRoaXMuX19ldmVudExpc3RlbmVycykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGFsbCBrZXkvdmFsdWUgcGFpcnMgKGV2ZW50IG5hbWUgLT4gZXZlbnQgaGFuZGxlcilcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZm9yIChldmVudE5hbWUgaW4gdGhpcy5fX2V2ZW50TGlzdGVuZXJzKSB7XG4gICAgICAgIF9yZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgZXZlbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gb25lIG9iamVjdCB3aXRoIGtleS92YWx1ZSBwYWlycyB3YXMgcGFzc2VkXG4gICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBldmVudE5hbWUpIHtcbiAgICAgICAgX3JlbW92ZUV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCBwcm9wLCBldmVudE5hbWVbcHJvcF0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIF9yZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgZXZlbnQgd2l0aCBhbiBvcHRpb25hbCBvcHRpb25zIG9iamVjdFxuICAgKiBAbWVtYmVyT2YgZmFicmljLk9ic2VydmFibGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZSBFdmVudCBuYW1lIHRvIGZpcmVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgKiBAcmV0dXJuIHtTZWxmfSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGZ1bmN0aW9uIGZpcmUoZXZlbnROYW1lLCBvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLl9fZXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnNGb3JFdmVudCA9IHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudE5hbWVdO1xuICAgIGlmICghbGlzdGVuZXJzRm9yRXZlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnNGb3JFdmVudC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGlzdGVuZXJzRm9yRXZlbnRbaV0gJiYgbGlzdGVuZXJzRm9yRXZlbnRbaV0uY2FsbCh0aGlzLCBvcHRpb25zIHx8IHsgfSk7XG4gICAgfVxuICAgIHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudE5hbWVdID0gbGlzdGVuZXJzRm9yRXZlbnQuZmlsdGVyKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT09IGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuYW1lc3BhY2UgZmFicmljLk9ic2VydmFibGVcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTIjZXZlbnRzfVxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2V2ZW50c3xFdmVudHMgZGVtb31cbiAgICovXG4gIGZhYnJpYy5PYnNlcnZhYmxlID0ge1xuICAgIGZpcmU6IGZpcmUsXG4gICAgb246IG9uLFxuICAgIG9uY2U6IG9uY2UsXG4gICAgb2ZmOiBvZmYsXG4gIH07XG59KSgpO1xuXG5cbi8qKlxuICogQG5hbWVzcGFjZSBmYWJyaWMuQ29sbGVjdGlvblxuICovXG5mYWJyaWMuQ29sbGVjdGlvbiA9IHtcblxuICBfb2JqZWN0czogW10sXG5cbiAgLyoqXG4gICAqIEFkZHMgb2JqZWN0cyB0byBjb2xsZWN0aW9uLCBDYW52YXMgb3IgR3JvdXAsIHRoZW4gcmVuZGVycyBjYW52YXNcbiAgICogKGlmIGByZW5kZXJPbkFkZFJlbW92ZWAgaXMgbm90IGBmYWxzZWApLlxuICAgKiBpbiBjYXNlIG9mIEdyb3VwIG5vIGNoYW5nZXMgdG8gYm91bmRpbmcgYm94IGFyZSBtYWRlLlxuICAgKiBPYmplY3RzIHNob3VsZCBiZSBpbnN0YW5jZXMgb2YgKG9yIGluaGVyaXQgZnJvbSkgZmFicmljLk9iamVjdFxuICAgKiBVc2Ugb2YgdGhpcyBmdW5jdGlvbiBpcyBoaWdobHkgZGlzY291cmFnZWQgZm9yIGdyb3Vwcy5cbiAgICogeW91IGNhbiBhZGQgYSBidW5jaCBvZiBvYmplY3RzIHdpdGggdGhlIGFkZCBtZXRob2QgYnV0IHRoZW4geW91IE5FRURcbiAgICogdG8gcnVuIGEgYWRkV2l0aFVwZGF0ZSBjYWxsIGZvciB0aGUgR3JvdXAgY2xhc3Mgb3IgcG9zaXRpb24vYmJveCB3aWxsIGJlIHdyb25nLlxuICAgKiBAcGFyYW0gey4uLmZhYnJpYy5PYmplY3R9IG9iamVjdCBaZXJvIG9yIG1vcmUgZmFicmljIGluc3RhbmNlc1xuICAgKiBAcmV0dXJuIHtTZWxmfSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGFkZDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX29iamVjdHMucHVzaC5hcHBseSh0aGlzLl9vYmplY3RzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0aGlzLl9vbk9iamVjdEFkZGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuX29uT2JqZWN0QWRkZWQoYXJndW1lbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZW5kZXJPbkFkZFJlbW92ZSAmJiB0aGlzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogSW5zZXJ0cyBhbiBvYmplY3QgaW50byBjb2xsZWN0aW9uIGF0IHNwZWNpZmllZCBpbmRleCwgdGhlbiByZW5kZXJzIGNhbnZhcyAoaWYgYHJlbmRlck9uQWRkUmVtb3ZlYCBpcyBub3QgYGZhbHNlYClcbiAgICogQW4gb2JqZWN0IHNob3VsZCBiZSBhbiBpbnN0YW5jZSBvZiAob3IgaW5oZXJpdCBmcm9tKSBmYWJyaWMuT2JqZWN0XG4gICAqIFVzZSBvZiB0aGlzIGZ1bmN0aW9uIGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBmb3IgZ3JvdXBzLlxuICAgKiB5b3UgY2FuIGFkZCBhIGJ1bmNoIG9mIG9iamVjdHMgd2l0aCB0aGUgaW5zZXJ0QXQgbWV0aG9kIGJ1dCB0aGVuIHlvdSBORUVEXG4gICAqIHRvIHJ1biBhIGFkZFdpdGhVcGRhdGUgY2FsbCBmb3IgdGhlIEdyb3VwIGNsYXNzIG9yIHBvc2l0aW9uL2Jib3ggd2lsbCBiZSB3cm9uZy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gaW5zZXJ0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBJbmRleCB0byBpbnNlcnQgb2JqZWN0IGF0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gbm9uU3BsaWNpbmcgV2hlbiBgdHJ1ZWAsIG5vIHNwbGljaW5nIChzaGlmdGluZykgb2Ygb2JqZWN0cyBvY2N1cnNcbiAgICogQHJldHVybiB7U2VsZn0gdGhpc0FyZ1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBpbnNlcnRBdDogZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIG5vblNwbGljaW5nKSB7XG4gICAgdmFyIG9iamVjdHMgPSB0aGlzLl9vYmplY3RzO1xuICAgIGlmIChub25TcGxpY2luZykge1xuICAgICAgb2JqZWN0c1tpbmRleF0gPSBvYmplY3Q7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgb2JqZWN0cy5zcGxpY2UoaW5kZXgsIDAsIG9iamVjdCk7XG4gICAgfVxuICAgIHRoaXMuX29uT2JqZWN0QWRkZWQgJiYgdGhpcy5fb25PYmplY3RBZGRlZChvYmplY3QpO1xuICAgIHRoaXMucmVuZGVyT25BZGRSZW1vdmUgJiYgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgb2JqZWN0cyBmcm9tIGEgY29sbGVjdGlvbiwgdGhlbiByZW5kZXJzIGNhbnZhcyAoaWYgYHJlbmRlck9uQWRkUmVtb3ZlYCBpcyBub3QgYGZhbHNlYClcbiAgICogQHBhcmFtIHsuLi5mYWJyaWMuT2JqZWN0fSBvYmplY3QgWmVybyBvciBtb3JlIGZhYnJpYyBpbnN0YW5jZXNcbiAgICogQHJldHVybiB7U2VsZn0gdGhpc0FyZ1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcbiAgICAgICAgaW5kZXgsIHNvbWV0aGluZ1JlbW92ZWQgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGluZGV4ID0gb2JqZWN0cy5pbmRleE9mKGFyZ3VtZW50c1tpXSk7XG5cbiAgICAgIC8vIG9ubHkgY2FsbCBvbk9iamVjdFJlbW92ZWQgaWYgYW4gb2JqZWN0IHdhcyBhY3R1YWxseSByZW1vdmVkXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHNvbWV0aGluZ1JlbW92ZWQgPSB0cnVlO1xuICAgICAgICBvYmplY3RzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMuX29uT2JqZWN0UmVtb3ZlZCAmJiB0aGlzLl9vbk9iamVjdFJlbW92ZWQoYXJndW1lbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlck9uQWRkUmVtb3ZlICYmIHNvbWV0aGluZ1JlbW92ZWQgJiYgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGdpdmVuIGZ1bmN0aW9uIGZvciBlYWNoIG9iamVjdCBpbiB0aGlzIGdyb3VwXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqICAgICAgICAgICAgICAgICAgIENhbGxiYWNrIGludm9rZWQgd2l0aCBjdXJyZW50IG9iamVjdCBhcyBmaXJzdCBhcmd1bWVudCxcbiAgICogICAgICAgICAgICAgICAgICAgaW5kZXggLSBhcyBzZWNvbmQgYW5kIGFuIGFycmF5IG9mIGFsbCBvYmplY3RzIC0gYXMgdGhpcmQuXG4gICAqICAgICAgICAgICAgICAgICAgIENhbGxiYWNrIGlzIGludm9rZWQgaW4gYSBjb250ZXh0IG9mIEdsb2JhbCBPYmplY3QgKGUuZy4gYHdpbmRvd2ApXG4gICAqICAgICAgICAgICAgICAgICAgIHdoZW4gbm8gYGNvbnRleHRgIGFyZ3VtZW50IGlzIGdpdmVuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0IENvbnRleHQgKGFrYSB0aGlzT2JqZWN0KVxuICAgKiBAcmV0dXJuIHtTZWxmfSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGZvckVhY2hPYmplY3Q6IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgdmFyIG9iamVjdHMgPSB0aGlzLmdldE9iamVjdHMoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gb2JqZWN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FsbGJhY2suY2FsbChjb250ZXh0LCBvYmplY3RzW2ldLCBpLCBvYmplY3RzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgY2hpbGRyZW4gb2JqZWN0cyBvZiB0aGlzIGluc3RhbmNlXG4gICAqIFR5cGUgcGFyYW1ldGVyIGludHJvZHVjZWQgaW4gMS4zLjEwXG4gICAqIHNpbmNlIDIuMy41IHRoaXMgbWV0aG9kIHJldHVybiBhbHdheXMgYSBDT1BZIG9mIHRoZSBhcnJheTtcbiAgICogQHBhcmFtIHtTdHJpbmd9IFt0eXBlXSBXaGVuIHNwZWNpZmllZCwgb25seSBvYmplY3RzIG9mIHRoaXMgdHlwZSBhcmUgcmV0dXJuZWRcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBnZXRPYmplY3RzOiBmdW5jdGlvbih0eXBlKSB7XG4gICAgaWYgKHR5cGVvZiB0eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRoaXMuX29iamVjdHMuY29uY2F0KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9vYmplY3RzLmZpbHRlcihmdW5jdGlvbihvKSB7XG4gICAgICByZXR1cm4gby50eXBlID09PSB0eXBlO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG9iamVjdCBhdCBzcGVjaWZpZWQgaW5kZXhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gICAqIEByZXR1cm4ge1NlbGZ9IHRoaXNBcmdcbiAgICovXG4gIGl0ZW06IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLl9vYmplY3RzW2luZGV4XTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGNvbGxlY3Rpb24gY29udGFpbnMgbm8gb2JqZWN0c1xuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGNvbGxlY3Rpb24gaXMgZW1wdHlcbiAgICovXG4gIGlzRW1wdHk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqZWN0cy5sZW5ndGggPT09IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzaXplIG9mIGEgY29sbGVjdGlvbiAoaS5lOiBsZW5ndGggb2YgYW4gYXJyYXkgY29udGFpbmluZyBpdHMgb2JqZWN0cylcbiAgICogQHJldHVybiB7TnVtYmVyfSBDb2xsZWN0aW9uIHNpemVcbiAgICovXG4gIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9vYmplY3RzLmxlbmd0aDtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGNvbGxlY3Rpb24gY29udGFpbnMgYW4gb2JqZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNoZWNrIGFnYWluc3RcbiAgICogQHBhcmFtIHtCb29sZWFufSBbZGVlcD1mYWxzZV0gYHRydWVgIHRvIGNoZWNrIGFsbCBkZXNjZW5kYW50cywgYGZhbHNlYCB0byBjaGVjayBvbmx5IGBfb2JqZWN0c2BcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIGNvbGxlY3Rpb24gY29udGFpbnMgYW4gb2JqZWN0XG4gICAqL1xuICBjb250YWluczogZnVuY3Rpb24gKG9iamVjdCwgZGVlcCkge1xuICAgIGlmICh0aGlzLl9vYmplY3RzLmluZGV4T2Yob2JqZWN0KSA+IC0xKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGVlcCkge1xuICAgICAgcmV0dXJuIHRoaXMuX29iamVjdHMuc29tZShmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqLmNvbnRhaW5zID09PSAnZnVuY3Rpb24nICYmIG9iai5jb250YWlucyhvYmplY3QsIHRydWUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBudW1iZXIgcmVwcmVzZW50YXRpb24gb2YgYSBjb2xsZWN0aW9uIGNvbXBsZXhpdHlcbiAgICogQHJldHVybiB7TnVtYmVyfSBjb21wbGV4aXR5XG4gICAqL1xuICBjb21wbGV4aXR5OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29iamVjdHMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBjdXJyZW50KSB7XG4gICAgICBtZW1vICs9IGN1cnJlbnQuY29tcGxleGl0eSA/IGN1cnJlbnQuY29tcGxleGl0eSgpIDogMDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIDApO1xuICB9XG59O1xuXG5cbi8qKlxuICogQG5hbWVzcGFjZSBmYWJyaWMuQ29tbW9uTWV0aG9kc1xuICovXG5mYWJyaWMuQ29tbW9uTWV0aG9kcyA9IHtcblxuICAvKipcbiAgICogU2V0cyBvYmplY3QncyBwcm9wZXJ0aWVzIGZyb20gb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICBfc2V0T3B0aW9uczogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGZvciAodmFyIHByb3AgaW4gb3B0aW9ucykge1xuICAgICAgdGhpcy5zZXQocHJvcCwgb3B0aW9uc1twcm9wXSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW2ZpbGxlcl0gT3B0aW9ucyBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtwcm9wZXJ0eV0gcHJvcGVydHkgdG8gc2V0IHRoZSBHcmFkaWVudCB0b1xuICAgKi9cbiAgX2luaXRHcmFkaWVudDogZnVuY3Rpb24oZmlsbGVyLCBwcm9wZXJ0eSkge1xuICAgIGlmIChmaWxsZXIgJiYgZmlsbGVyLmNvbG9yU3RvcHMgJiYgIShmaWxsZXIgaW5zdGFuY2VvZiBmYWJyaWMuR3JhZGllbnQpKSB7XG4gICAgICB0aGlzLnNldChwcm9wZXJ0eSwgbmV3IGZhYnJpYy5HcmFkaWVudChmaWxsZXIpKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbZmlsbGVyXSBPcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3Byb3BlcnR5XSBwcm9wZXJ0eSB0byBzZXQgdGhlIFBhdHRlcm4gdG9cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBjYWxsYmFjayB0byBpbnZva2UgYWZ0ZXIgcGF0dGVybiBsb2FkXG4gICAqL1xuICBfaW5pdFBhdHRlcm46IGZ1bmN0aW9uKGZpbGxlciwgcHJvcGVydHksIGNhbGxiYWNrKSB7XG4gICAgaWYgKGZpbGxlciAmJiBmaWxsZXIuc291cmNlICYmICEoZmlsbGVyIGluc3RhbmNlb2YgZmFicmljLlBhdHRlcm4pKSB7XG4gICAgICB0aGlzLnNldChwcm9wZXJ0eSwgbmV3IGZhYnJpYy5QYXR0ZXJuKGZpbGxlciwgY2FsbGJhY2spKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRPYmplY3Q6IGZ1bmN0aW9uKG9iaikge1xuICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICB0aGlzLl9zZXQocHJvcCwgb2JqW3Byb3BdKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgcHJvcGVydHkgdG8gYSBnaXZlbiB2YWx1ZS4gV2hlbiBjaGFuZ2luZyBwb3NpdGlvbi9kaW1lbnNpb24gLXJlbGF0ZWQgcHJvcGVydGllcyAobGVmdCwgdG9wLCBzY2FsZSwgYW5nbGUsIGV0Yy4pIGBzZXRgIGRvZXMgbm90IHVwZGF0ZSBwb3NpdGlvbiBvZiBvYmplY3QncyBib3JkZXJzL2NvbnRyb2xzLiBJZiB5b3UgbmVlZCB0byB1cGRhdGUgdGhvc2UsIGNhbGwgYHNldENvb3JkcygpYC5cbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBrZXkgUHJvcGVydHkgbmFtZSBvciBvYmplY3QgKGlmIG9iamVjdCwgaXRlcmF0ZSBvdmVyIHRoZSBvYmplY3QgcHJvcGVydGllcylcbiAgICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IHZhbHVlIFByb3BlcnR5IHZhbHVlIChpZiBmdW5jdGlvbiwgdGhlIHZhbHVlIGlzIHBhc3NlZCBpbnRvIGl0IGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIHVzZWQgYXMgYSBuZXcgb25lKVxuICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgdGhpcy5fc2V0T2JqZWN0KGtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBfc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1trZXldID0gdmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgc3BlY2lmaWVkIHByb3BlcnR5IGZyb20gYHRydWVgIHRvIGBmYWxzZWAgb3IgZnJvbSBgZmFsc2VgIHRvIGB0cnVlYFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdG8gdG9nZ2xlXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgdG9nZ2xlOiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KHByb3BlcnR5KTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHRoaXMuc2V0KHByb3BlcnR5LCAhdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQmFzaWMgZ2V0dGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAqIEByZXR1cm4geyp9IHZhbHVlIG9mIGEgcHJvcGVydHlcbiAgICovXG4gIGdldDogZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07XG4gIH1cbn07XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gIHZhciBzcXJ0ID0gTWF0aC5zcXJ0LFxuICAgICAgYXRhbjIgPSBNYXRoLmF0YW4yLFxuICAgICAgcG93ID0gTWF0aC5wb3csXG4gICAgICBQaUJ5MTgwID0gTWF0aC5QSSAvIDE4MCxcbiAgICAgIFBpQnkyID0gTWF0aC5QSSAvIDI7XG5cbiAgLyoqXG4gICAqIEBuYW1lc3BhY2UgZmFicmljLnV0aWxcbiAgICovXG4gIGZhYnJpYy51dGlsID0ge1xuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBjb3Mgb2YgYW4gYW5nbGUsIGF2b2lkaW5nIHJldHVybmluZyBmbG9hdHMgZm9yIGtub3duIHJlc3VsdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFuZ2xlIHRoZSBhbmdsZSBpbiByYWRpYW5zIG9yIGluIGRlZ3JlZVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBjb3M6IGZ1bmN0aW9uKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHsgcmV0dXJuIDE7IH1cbiAgICAgIGlmIChhbmdsZSA8IDApIHtcbiAgICAgICAgLy8gY29zKGEpID0gY29zKC1hKVxuICAgICAgICBhbmdsZSA9IC1hbmdsZTtcbiAgICAgIH1cbiAgICAgIHZhciBhbmdsZVNsaWNlID0gYW5nbGUgLyBQaUJ5MjtcbiAgICAgIHN3aXRjaCAoYW5nbGVTbGljZSkge1xuICAgICAgICBjYXNlIDE6IGNhc2UgMzogcmV0dXJuIDA7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1hdGguY29zKGFuZ2xlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBzaW4gb2YgYW4gYW5nbGUsIGF2b2lkaW5nIHJldHVybmluZyBmbG9hdHMgZm9yIGtub3duIHJlc3VsdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFuZ2xlIHRoZSBhbmdsZSBpbiByYWRpYW5zIG9yIGluIGRlZ3JlZVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBzaW46IGZ1bmN0aW9uKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHsgcmV0dXJuIDA7IH1cbiAgICAgIHZhciBhbmdsZVNsaWNlID0gYW5nbGUgLyBQaUJ5Miwgc2lnbiA9IDE7XG4gICAgICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgICAgIC8vIHNpbigtYSkgPSAtc2luKGEpXG4gICAgICAgIHNpZ24gPSAtMTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoYW5nbGVTbGljZSkge1xuICAgICAgICBjYXNlIDE6IHJldHVybiBzaWduO1xuICAgICAgICBjYXNlIDI6IHJldHVybiAwO1xuICAgICAgICBjYXNlIDM6IHJldHVybiAtc2lnbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBNYXRoLnNpbihhbmdsZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdmFsdWUgZnJvbSBhbiBhcnJheS5cbiAgICAgKiBQcmVzZW5jZSBvZiB2YWx1ZSAoYW5kIGl0cyBwb3NpdGlvbiBpbiBhbiBhcnJheSkgaXMgZGV0ZXJtaW5lZCB2aWEgYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gb3JpZ2luYWwgYXJyYXlcbiAgICAgKi9cbiAgICByZW1vdmVGcm9tQXJyYXk6IGZ1bmN0aW9uKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGlkeCA9IGFycmF5LmluZGV4T2YodmFsdWUpO1xuICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgYXJyYXkuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgcmFuZG9tIG51bWJlciBiZXR3ZWVuIDIgc3BlY2lmaWVkIG9uZXMuXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtaW4gbG93ZXIgbGltaXRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbWF4IHVwcGVyIGxpbWl0XG4gICAgICogQHJldHVybiB7TnVtYmVyfSByYW5kb20gdmFsdWUgKGJldHdlZW4gbWluIGFuZCBtYXgpXG4gICAgICovXG4gICAgZ2V0UmFuZG9tSW50OiBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgZGVncmVlcyB0byByYWRpYW5zLlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVncmVlcyB2YWx1ZSBpbiBkZWdyZWVzXG4gICAgICogQHJldHVybiB7TnVtYmVyfSB2YWx1ZSBpbiByYWRpYW5zXG4gICAgICovXG4gICAgZGVncmVlc1RvUmFkaWFuczogZnVuY3Rpb24oZGVncmVlcykge1xuICAgICAgcmV0dXJuIGRlZ3JlZXMgKiBQaUJ5MTgwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIHJhZGlhbnMgdG8gZGVncmVlcy5cbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGlhbnMgdmFsdWUgaW4gcmFkaWFuc1xuICAgICAqIEByZXR1cm4ge051bWJlcn0gdmFsdWUgaW4gZGVncmVlc1xuICAgICAqL1xuICAgIHJhZGlhbnNUb0RlZ3JlZXM6IGZ1bmN0aW9uKHJhZGlhbnMpIHtcbiAgICAgIHJldHVybiByYWRpYW5zIC8gUGlCeTE4MDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyBgcG9pbnRgIGFyb3VuZCBgb3JpZ2luYCB3aXRoIGByYWRpYW5zYFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9pbnQgVGhlIHBvaW50IHRvIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBvcmlnaW4gVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaWFucyBUaGUgcmFkaWFucyBvZiB0aGUgYW5nbGUgZm9yIHRoZSByb3RhdGlvblxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH0gVGhlIG5ldyByb3RhdGVkIHBvaW50XG4gICAgICovXG4gICAgcm90YXRlUG9pbnQ6IGZ1bmN0aW9uKHBvaW50LCBvcmlnaW4sIHJhZGlhbnMpIHtcbiAgICAgIHZhciBuZXdQb2ludCA9IG5ldyBmYWJyaWMuUG9pbnQocG9pbnQueCAtIG9yaWdpbi54LCBwb2ludC55IC0gb3JpZ2luLnkpLFxuICAgICAgICAgIHYgPSBmYWJyaWMudXRpbC5yb3RhdGVWZWN0b3IobmV3UG9pbnQsIHJhZGlhbnMpO1xuICAgICAgcmV0dXJuIG5ldyBmYWJyaWMuUG9pbnQodi54LCB2LnkpLmFkZEVxdWFscyhvcmlnaW4pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIGB2ZWN0b3JgIHdpdGggYHJhZGlhbnNgXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2ZWN0b3IgVGhlIHZlY3RvciB0byByb3RhdGUgKHggYW5kIHkpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGlhbnMgVGhlIHJhZGlhbnMgb2YgdGhlIGFuZ2xlIGZvciB0aGUgcm90YXRpb25cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgcm90YXRlZCBwb2ludFxuICAgICAqL1xuICAgIHJvdGF0ZVZlY3RvcjogZnVuY3Rpb24odmVjdG9yLCByYWRpYW5zKSB7XG4gICAgICB2YXIgc2luID0gZmFicmljLnV0aWwuc2luKHJhZGlhbnMpLFxuICAgICAgICAgIGNvcyA9IGZhYnJpYy51dGlsLmNvcyhyYWRpYW5zKSxcbiAgICAgICAgICByeCA9IHZlY3Rvci54ICogY29zIC0gdmVjdG9yLnkgKiBzaW4sXG4gICAgICAgICAgcnkgPSB2ZWN0b3IueCAqIHNpbiArIHZlY3Rvci55ICogY29zO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogcngsXG4gICAgICAgIHk6IHJ5XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdmV0b3IgZnJvbSBwb2ludHMgcmVwcmVzZW50ZWQgYXMgYSBwb2ludFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFBvaW50XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHhcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0geVxuICAgICAqXG4gICAgICogQHBhcmFtIHtQb2ludH0gZnJvbVxuICAgICAqIEBwYXJhbSB7UG9pbnR9IHRvXG4gICAgICogQHJldHVybnMge1BvaW50fSB2ZWN0b3JcbiAgICAgKi9cbiAgICBjcmVhdGVWZWN0b3I6IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgICAgcmV0dXJuIG5ldyBmYWJyaWMuUG9pbnQodG8ueCAtIGZyb20ueCwgdG8ueSAtIGZyb20ueSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgYW5nbGUgYmV0d2VlbiAyIHZlY3RvcnMgdXNpbmcgZG90IHByb2R1Y3RcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtQb2ludH0gYVxuICAgICAqIEBwYXJhbSB7UG9pbnR9IGJcbiAgICAgKiBAcmV0dXJucyB0aGUgYW5nbGUgaW4gcmFkaWFuIGJldHdlZW4gdGhlIHZlY3RvcnNcbiAgICAgKi9cbiAgICBjYWxjQW5nbGVCZXR3ZWVuVmVjdG9yczogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBNYXRoLmFjb3MoKGEueCAqIGIueCArIGEueSAqIGIueSkgLyAoTWF0aC5oeXBvdChhLngsIGEueSkgKiBNYXRoLmh5cG90KGIueCwgYi55KSkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtQb2ludH0gdlxuICAgICAqIEByZXR1cm5zIHtQb2ludH0gdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgdW5pdCB2ZWN0b3Igb2YgcG9pbnRpbmcgdG8gdGhlIGRpcmVjdGlvbiBvZiBgdmBcbiAgICAgKi9cbiAgICBnZXRIYXRWZWN0b3I6IGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gbmV3IGZhYnJpYy5Qb2ludCh2LngsIHYueSkubXVsdGlwbHkoMSAvIE1hdGguaHlwb3Qodi54LCB2LnkpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7UG9pbnR9IEFcbiAgICAgKiBAcGFyYW0ge1BvaW50fSBCXG4gICAgICogQHBhcmFtIHtQb2ludH0gQ1xuICAgICAqIEByZXR1cm5zIHt7IHZlY3RvcjogUG9pbnQsIGFuZ2xlOiBudW1iZXIgfX0gdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgYmlzZWN0b3Igb2YgQSBhbmQgQSdzIGFuZ2xlXG4gICAgICovXG4gICAgZ2V0QmlzZWN0b3I6IGZ1bmN0aW9uIChBLCBCLCBDKSB7XG4gICAgICB2YXIgQUIgPSBmYWJyaWMudXRpbC5jcmVhdGVWZWN0b3IoQSwgQiksIEFDID0gZmFicmljLnV0aWwuY3JlYXRlVmVjdG9yKEEsIEMpO1xuICAgICAgdmFyIGFscGhhID0gZmFicmljLnV0aWwuY2FsY0FuZ2xlQmV0d2VlblZlY3RvcnMoQUIsIEFDKTtcbiAgICAgIC8vICBjaGVjayBpZiBhbHBoYSBpcyByZWxhdGl2ZSB0byBBQi0+QkNcbiAgICAgIHZhciBybyA9IGZhYnJpYy51dGlsLmNhbGNBbmdsZUJldHdlZW5WZWN0b3JzKGZhYnJpYy51dGlsLnJvdGF0ZVZlY3RvcihBQiwgYWxwaGEpLCBBQyk7XG4gICAgICB2YXIgcGhpID0gYWxwaGEgKiAocm8gPT09IDAgPyAxIDogLTEpIC8gMjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZlY3RvcjogZmFicmljLnV0aWwuZ2V0SGF0VmVjdG9yKGZhYnJpYy51dGlsLnJvdGF0ZVZlY3RvcihBQiwgcGhpKSksXG4gICAgICAgIGFuZ2xlOiBhbHBoYVxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvamVjdCBzdHJva2Ugd2lkdGggb24gcG9pbnRzIHJldHVybmluZyAyIHByb2plY3Rpb25zIGZvciBlYWNoIHBvaW50IGFzIGZvbGxvd3M6XG4gICAgICogLSBgbWl0ZXJgOiAyIHBvaW50cyBjb3JyZXNwb25kaW5nIHRvIHRoZSBvdXRlciBib3VuZGFyeSBhbmQgdGhlIGlubmVyIGJvdW5kYXJ5IG9mIHN0cm9rZS5cbiAgICAgKiAtIGBiZXZlbGA6IDIgcG9pbnRzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGJldmVsIGJvdW5kYXJpZXMsIHRhbmdlbnQgdG8gdGhlIGJpc2VjdG9yLlxuICAgICAqIC0gYHJvdW5kYDogc2FtZSBhcyBgYmV2ZWxgXG4gICAgICogVXNlZCB0byBjYWxjdWxhdGUgb2JqZWN0J3MgYm91bmRpbmcgYm94XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7UG9pbnRbXX0gcG9pbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5zdHJva2VXaWR0aFxuICAgICAqIEBwYXJhbSB7J21pdGVyJ3wnYmV2ZWwnfCdyb3VuZCd9IG9wdGlvbnMuc3Ryb2tlTGluZUpvaW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5zdHJva2VNaXRlckxpbWl0IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvc3Ryb2tlLW1pdGVybGltaXRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuc3Ryb2tlVW5pZm9ybVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLnNjYWxlWFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLnNjYWxlWVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wZW5QYXRoXSB3aGV0aGVyIHRoZSBzaGFwZSBpcyBvcGVuIG9yIG5vdCwgYWZmZWN0cyB0aGUgY2FsY3VsYXRpb25zIG9mIHRoZSBmaXJzdCBhbmQgbGFzdCBwb2ludHNcbiAgICAgKiBAcmV0dXJucyB7ZmFicmljLlBvaW50W119IGFycmF5IG9mIHNpemUgMm4vNG4gb2YgYWxsIHN1c3BlY3RlZCBwb2ludHNcbiAgICAgKi9cbiAgICBwcm9qZWN0U3Ryb2tlT25Qb2ludHM6IGZ1bmN0aW9uIChwb2ludHMsIG9wdGlvbnMsIG9wZW5QYXRoKSB7XG4gICAgICB2YXIgY29vcmRzID0gW10sIHMgPSBvcHRpb25zLnN0cm9rZVdpZHRoIC8gMixcbiAgICAgICAgICBzdHJva2VVbmlmb3JtU2NhbGFyID0gb3B0aW9ucy5zdHJva2VVbmlmb3JtID9cbiAgICAgICAgICAgIG5ldyBmYWJyaWMuUG9pbnQoMSAvIG9wdGlvbnMuc2NhbGVYLCAxIC8gb3B0aW9ucy5zY2FsZVkpIDogbmV3IGZhYnJpYy5Qb2ludCgxLCAxKSxcbiAgICAgICAgICBnZXRTdHJva2VIYXRWZWN0b3IgPSBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgdmFyIHNjYWxhciA9IHMgLyAoTWF0aC5oeXBvdCh2LngsIHYueSkpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBmYWJyaWMuUG9pbnQodi54ICogc2NhbGFyICogc3Ryb2tlVW5pZm9ybVNjYWxhci54LCB2LnkgKiBzY2FsYXIgKiBzdHJva2VVbmlmb3JtU2NhbGFyLnkpO1xuICAgICAgICAgIH07XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA8PSAxKSB7cmV0dXJuIGNvb3Jkczt9XG4gICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAocCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIEEgPSBuZXcgZmFicmljLlBvaW50KHAueCwgcC55KSwgQiwgQztcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgQyA9IHBvaW50c1tpbmRleCArIDFdO1xuICAgICAgICAgIEIgPSBvcGVuUGF0aCA/IGdldFN0cm9rZUhhdFZlY3RvcihmYWJyaWMudXRpbC5jcmVhdGVWZWN0b3IoQywgQSkpLmFkZEVxdWFscyhBKSA6IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IHBvaW50cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgQiA9IHBvaW50c1tpbmRleCAtIDFdO1xuICAgICAgICAgIEMgPSBvcGVuUGF0aCA/IGdldFN0cm9rZUhhdFZlY3RvcihmYWJyaWMudXRpbC5jcmVhdGVWZWN0b3IoQiwgQSkpLmFkZEVxdWFscyhBKSA6IHBvaW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBCID0gcG9pbnRzW2luZGV4IC0gMV07XG4gICAgICAgICAgQyA9IHBvaW50c1tpbmRleCArIDFdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiaXNlY3RvciA9IGZhYnJpYy51dGlsLmdldEJpc2VjdG9yKEEsIEIsIEMpLFxuICAgICAgICAgICAgYmlzZWN0b3JWZWN0b3IgPSBiaXNlY3Rvci52ZWN0b3IsXG4gICAgICAgICAgICBhbHBoYSA9IGJpc2VjdG9yLmFuZ2xlLFxuICAgICAgICAgICAgc2NhbGFyLFxuICAgICAgICAgICAgbWl0ZXJWZWN0b3I7XG4gICAgICAgIGlmIChvcHRpb25zLnN0cm9rZUxpbmVKb2luID09PSAnbWl0ZXInKSB7XG4gICAgICAgICAgc2NhbGFyID0gLXMgLyBNYXRoLnNpbihhbHBoYSAvIDIpO1xuICAgICAgICAgIG1pdGVyVmVjdG9yID0gbmV3IGZhYnJpYy5Qb2ludChcbiAgICAgICAgICAgIGJpc2VjdG9yVmVjdG9yLnggKiBzY2FsYXIgKiBzdHJva2VVbmlmb3JtU2NhbGFyLngsXG4gICAgICAgICAgICBiaXNlY3RvclZlY3Rvci55ICogc2NhbGFyICogc3Ryb2tlVW5pZm9ybVNjYWxhci55XG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoTWF0aC5oeXBvdChtaXRlclZlY3Rvci54LCBtaXRlclZlY3Rvci55KSAvIHMgPD0gb3B0aW9ucy5zdHJva2VNaXRlckxpbWl0KSB7XG4gICAgICAgICAgICBjb29yZHMucHVzaChBLmFkZChtaXRlclZlY3RvcikpO1xuICAgICAgICAgICAgY29vcmRzLnB1c2goQS5zdWJ0cmFjdChtaXRlclZlY3RvcikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzY2FsYXIgPSAtcyAqIE1hdGguU1FSVDI7XG4gICAgICAgIG1pdGVyVmVjdG9yID0gbmV3IGZhYnJpYy5Qb2ludChcbiAgICAgICAgICBiaXNlY3RvclZlY3Rvci54ICogc2NhbGFyICogc3Ryb2tlVW5pZm9ybVNjYWxhci54LFxuICAgICAgICAgIGJpc2VjdG9yVmVjdG9yLnkgKiBzY2FsYXIgKiBzdHJva2VVbmlmb3JtU2NhbGFyLnlcbiAgICAgICAgKTtcbiAgICAgICAgY29vcmRzLnB1c2goQS5hZGQobWl0ZXJWZWN0b3IpKTtcbiAgICAgICAgY29vcmRzLnB1c2goQS5zdWJ0cmFjdChtaXRlclZlY3RvcikpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY29vcmRzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0cmFuc2Zvcm0gdCB0byBwb2ludCBwXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSAge2ZhYnJpYy5Qb2ludH0gcCBUaGUgcG9pbnQgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtICB7QXJyYXl9IHQgVGhlIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IFtpZ25vcmVPZmZzZXRdIEluZGljYXRlcyB0aGF0IHRoZSBvZmZzZXQgc2hvdWxkIG5vdCBiZSBhcHBsaWVkXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fSBUaGUgdHJhbnNmb3JtZWQgcG9pbnRcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1Qb2ludDogZnVuY3Rpb24ocCwgdCwgaWdub3JlT2Zmc2V0KSB7XG4gICAgICBpZiAoaWdub3JlT2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBuZXcgZmFicmljLlBvaW50KFxuICAgICAgICAgIHRbMF0gKiBwLnggKyB0WzJdICogcC55LFxuICAgICAgICAgIHRbMV0gKiBwLnggKyB0WzNdICogcC55XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IGZhYnJpYy5Qb2ludChcbiAgICAgICAgdFswXSAqIHAueCArIHRbMl0gKiBwLnkgKyB0WzRdLFxuICAgICAgICB0WzFdICogcC54ICsgdFszXSAqIHAueSArIHRbNV1cbiAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29vcmRpbmF0ZXMgb2YgcG9pbnRzJ3MgYm91bmRpbmcgcmVjdGFuZ2xlIChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpXG4gICAgICogQHBhcmFtIHtBcnJheX0gcG9pbnRzIDQgcG9pbnRzIGFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3RyYW5zZm9ybV0gYW4gYXJyYXkgb2YgNiBudW1iZXJzIHJlcHJlc2VudGluZyBhIDJ4MyB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQgcHJvcGVydGllc1xuICAgICAqL1xuICAgIG1ha2VCb3VuZGluZ0JveEZyb21Qb2ludHM6IGZ1bmN0aW9uKHBvaW50cywgdHJhbnNmb3JtKSB7XG4gICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgcG9pbnRzW2ldID0gZmFicmljLnV0aWwudHJhbnNmb3JtUG9pbnQocG9pbnRzW2ldLCB0cmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgeFBvaW50cyA9IFtwb2ludHNbMF0ueCwgcG9pbnRzWzFdLngsIHBvaW50c1syXS54LCBwb2ludHNbM10ueF0sXG4gICAgICAgICAgbWluWCA9IGZhYnJpYy51dGlsLmFycmF5Lm1pbih4UG9pbnRzKSxcbiAgICAgICAgICBtYXhYID0gZmFicmljLnV0aWwuYXJyYXkubWF4KHhQb2ludHMpLFxuICAgICAgICAgIHdpZHRoID0gbWF4WCAtIG1pblgsXG4gICAgICAgICAgeVBvaW50cyA9IFtwb2ludHNbMF0ueSwgcG9pbnRzWzFdLnksIHBvaW50c1syXS55LCBwb2ludHNbM10ueV0sXG4gICAgICAgICAgbWluWSA9IGZhYnJpYy51dGlsLmFycmF5Lm1pbih5UG9pbnRzKSxcbiAgICAgICAgICBtYXhZID0gZmFicmljLnV0aWwuYXJyYXkubWF4KHlQb2ludHMpLFxuICAgICAgICAgIGhlaWdodCA9IG1heFkgLSBtaW5ZO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBtaW5YLFxuICAgICAgICB0b3A6IG1pblksXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEludmVydCB0cmFuc2Zvcm1hdGlvbiB0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHQgVGhlIHRyYW5zZm9ybVxuICAgICAqIEByZXR1cm4ge0FycmF5fSBUaGUgaW52ZXJ0ZWQgdHJhbnNmb3JtXG4gICAgICovXG4gICAgaW52ZXJ0VHJhbnNmb3JtOiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgYSA9IDEgLyAodFswXSAqIHRbM10gLSB0WzFdICogdFsyXSksXG4gICAgICAgICAgciA9IFthICogdFszXSwgLWEgKiB0WzFdLCAtYSAqIHRbMl0sIGEgKiB0WzBdXSxcbiAgICAgICAgICBvID0gZmFicmljLnV0aWwudHJhbnNmb3JtUG9pbnQoeyB4OiB0WzRdLCB5OiB0WzVdIH0sIHIsIHRydWUpO1xuICAgICAgcls0XSA9IC1vLng7XG4gICAgICByWzVdID0gLW8ueTtcbiAgICAgIHJldHVybiByO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBIHdyYXBwZXIgYXJvdW5kIE51bWJlciN0b0ZpeGVkLCB3aGljaCBjb250cmFyeSB0byBuYXRpdmUgbWV0aG9kIHJldHVybnMgbnVtYmVyLCBub3Qgc3RyaW5nLlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IG51bWJlciBudW1iZXIgdG8gb3BlcmF0ZSBvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmcmFjdGlvbkRpZ2l0cyBudW1iZXIgb2YgZnJhY3Rpb24gZGlnaXRzIHRvIFwibGVhdmVcIlxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICB0b0ZpeGVkOiBmdW5jdGlvbihudW1iZXIsIGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChOdW1iZXIobnVtYmVyKS50b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGZyb20gYXR0cmlidXRlIHZhbHVlIHRvIHBpeGVsIHZhbHVlIGlmIGFwcGxpY2FibGUuXG4gICAgICogUmV0dXJucyBjb252ZXJ0ZWQgcGl4ZWxzIG9yIG9yaWdpbmFsIHZhbHVlIG5vdCBjb252ZXJ0ZWQuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSB2YWx1ZSBudW1iZXIgdG8gb3BlcmF0ZSBvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmb250U2l6ZVxuICAgICAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9XG4gICAgICovXG4gICAgcGFyc2VVbml0OiBmdW5jdGlvbih2YWx1ZSwgZm9udFNpemUpIHtcbiAgICAgIHZhciB1bml0ID0gL1xcRHswLDJ9JC8uZXhlYyh2YWx1ZSksXG4gICAgICAgICAgbnVtYmVyID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICBpZiAoIWZvbnRTaXplKSB7XG4gICAgICAgIGZvbnRTaXplID0gZmFicmljLlRleHQuREVGQVVMVF9TVkdfRk9OVF9TSVpFO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh1bml0WzBdKSB7XG4gICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICByZXR1cm4gbnVtYmVyICogZmFicmljLkRQSSAvIDI1LjQ7XG5cbiAgICAgICAgY2FzZSAnY20nOlxuICAgICAgICAgIHJldHVybiBudW1iZXIgKiBmYWJyaWMuRFBJIC8gMi41NDtcblxuICAgICAgICBjYXNlICdpbic6XG4gICAgICAgICAgcmV0dXJuIG51bWJlciAqIGZhYnJpYy5EUEk7XG5cbiAgICAgICAgY2FzZSAncHQnOlxuICAgICAgICAgIHJldHVybiBudW1iZXIgKiBmYWJyaWMuRFBJIC8gNzI7IC8vIG9yICogNCAvIDNcblxuICAgICAgICBjYXNlICdwYyc6XG4gICAgICAgICAgcmV0dXJuIG51bWJlciAqIGZhYnJpYy5EUEkgLyA3MiAqIDEyOyAvLyBvciAqIDE2XG5cbiAgICAgICAgY2FzZSAnZW0nOlxuICAgICAgICAgIHJldHVybiBudW1iZXIgKiBmb250U2l6ZTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHdoaWNoIGFsd2F5cyByZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgZmFsc2VGdW5jdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMga2xhc3MgXCJDbGFzc1wiIG9iamVjdCBvZiBnaXZlbiBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUeXBlIG9mIG9iamVjdCAoZWcuICdjaXJjbGUnKVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgTmFtZXNwYWNlIHRvIGdldCBrbGFzcyBcIkNsYXNzXCIgb2JqZWN0IGZyb21cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGtsYXNzIFwiQ2xhc3NcIlxuICAgICAqL1xuICAgIGdldEtsYXNzOiBmdW5jdGlvbih0eXBlLCBuYW1lc3BhY2UpIHtcbiAgICAgIC8vIGNhcGl0YWxpemUgZmlyc3QgbGV0dGVyIG9ubHlcbiAgICAgIHR5cGUgPSBmYWJyaWMudXRpbC5zdHJpbmcuY2FtZWxpemUodHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR5cGUuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIGZhYnJpYy51dGlsLnJlc29sdmVOYW1lc3BhY2UobmFtZXNwYWNlKVt0eXBlXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhcnJheSBvZiBhdHRyaWJ1dGVzIGZvciBnaXZlbiBzdmcgdGhhdCBmYWJyaWMgcGFyc2VzXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVHlwZSBvZiBzdmcgZWxlbWVudCAoZWcuICdjaXJjbGUnKVxuICAgICAqIEByZXR1cm4ge0FycmF5fSBzdHJpbmcgbmFtZXMgb2Ygc3VwcG9ydGVkIGF0dHJpYnV0ZXNcbiAgICAgKi9cbiAgICBnZXRTdmdBdHRyaWJ1dGVzOiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IFtcbiAgICAgICAgJ2luc3RhbnRpYXRlZF9ieV91c2UnLFxuICAgICAgICAnc3R5bGUnLFxuICAgICAgICAnaWQnLFxuICAgICAgICAnY2xhc3MnXG4gICAgICBdO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ2xpbmVhckdyYWRpZW50JzpcbiAgICAgICAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcy5jb25jYXQoWyd4MScsICd5MScsICd4MicsICd5MicsICdncmFkaWVudFVuaXRzJywgJ2dyYWRpZW50VHJhbnNmb3JtJ10pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyYWRpYWxHcmFkaWVudCc6XG4gICAgICAgICAgYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMuY29uY2F0KFsnZ3JhZGllbnRVbml0cycsICdncmFkaWVudFRyYW5zZm9ybScsICdjeCcsICdjeScsICdyJywgJ2Z4JywgJ2Z5JywgJ2ZyJ10pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzdG9wJzpcbiAgICAgICAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcy5jb25jYXQoWydvZmZzZXQnLCAnc3RvcC1jb2xvcicsICdzdG9wLW9wYWNpdHknXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3Qgb2YgZ2l2ZW4gbmFtZXNwYWNlXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBOYW1lc3BhY2Ugc3RyaW5nIGUuZy4gJ2ZhYnJpYy5JbWFnZS5maWx0ZXInIG9yICdmYWJyaWMnXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgZm9yIGdpdmVuIG5hbWVzcGFjZSAoZGVmYXVsdCBmYWJyaWMpXG4gICAgICovXG4gICAgcmVzb2x2ZU5hbWVzcGFjZTogZnVuY3Rpb24obmFtZXNwYWNlKSB7XG4gICAgICBpZiAoIW5hbWVzcGFjZSkge1xuICAgICAgICByZXR1cm4gZmFicmljO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFydHMgPSBuYW1lc3BhY2Uuc3BsaXQoJy4nKSxcbiAgICAgICAgICBsZW4gPSBwYXJ0cy5sZW5ndGgsIGksXG4gICAgICAgICAgb2JqID0gZ2xvYmFsIHx8IGZhYnJpYy53aW5kb3c7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICBvYmogPSBvYmpbcGFydHNbaV1dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMb2FkcyBpbWFnZSBlbGVtZW50IGZyb20gZ2l2ZW4gdXJsIGFuZCBwYXNzZXMgaXQgdG8gYSBjYWxsYmFja1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVVJMIHJlcHJlc2VudGluZyBhbiBpbWFnZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrOyBpbnZva2VkIHdpdGggbG9hZGVkIGltYWdlXG4gICAgICogQHBhcmFtIHsqfSBbY29udGV4dF0gQ29udGV4dCB0byBpbnZva2UgY2FsbGJhY2sgaW5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2Nyb3NzT3JpZ2luXSBjcm9zc09yaWdpbiB2YWx1ZSB0byBzZXQgaW1hZ2UgZWxlbWVudCB0b1xuICAgICAqL1xuICAgIGxvYWRJbWFnZTogZnVuY3Rpb24odXJsLCBjYWxsYmFjaywgY29udGV4dCwgY3Jvc3NPcmlnaW4pIHtcbiAgICAgIGlmICghdXJsKSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwoY29udGV4dCwgdXJsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW1nID0gZmFicmljLnV0aWwuY3JlYXRlSW1hZ2UoKTtcblxuICAgICAgLyoqIEBpZ25vcmUgKi9cbiAgICAgIHZhciBvbkxvYWRDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbChjb250ZXh0LCBpbWcsIGZhbHNlKTtcbiAgICAgICAgaW1nID0gaW1nLm9ubG9hZCA9IGltZy5vbmVycm9yID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGltZy5vbmxvYWQgPSBvbkxvYWRDYWxsYmFjaztcbiAgICAgIC8qKiBAaWdub3JlICovXG4gICAgICBpbWcub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmYWJyaWMubG9nKCdFcnJvciBsb2FkaW5nICcgKyBpbWcuc3JjKTtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbChjb250ZXh0LCBudWxsLCB0cnVlKTtcbiAgICAgICAgaW1nID0gaW1nLm9ubG9hZCA9IGltZy5vbmVycm9yID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIC8vIGRhdGEtdXJscyBhcHBlYXIgdG8gYmUgYnVnZ3kgd2l0aCBjcm9zc09yaWdpblxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2thbmdheC9mYWJyaWMuanMvY29tbWl0L2QwYWJiOTBmMWNkNWM1ZWY5ZDJhOTRkM2ZiMjFhMjIzMzBkYTNlMGEjY29tbWl0Y29tbWVudC00NTEzNzY3XG4gICAgICAvLyBzZWUgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTMxNTE1MlxuICAgICAgLy8gICAgIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTkzNTA2OVxuICAgICAgLy8gY3Jvc3NPcmlnaW4gbnVsbCBpcyB0aGUgc2FtZSBhcyBub3Qgc2V0LlxuICAgICAgaWYgKHVybC5pbmRleE9mKCdkYXRhJykgIT09IDAgJiZcbiAgICAgICAgY3Jvc3NPcmlnaW4gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBjcm9zc09yaWdpbiAhPT0gbnVsbCkge1xuICAgICAgICBpbWcuY3Jvc3NPcmlnaW4gPSBjcm9zc09yaWdpbjtcbiAgICAgIH1cblxuICAgICAgLy8gSUUxMCAvIElFMTEtRml4OiBTVkcgY29udGVudHMgZnJvbSBkYXRhOiBVUklcbiAgICAgIC8vIHdpbGwgb25seSBiZSBhdmFpbGFibGUgaWYgdGhlIElNRyBpcyBwcmVzZW50XG4gICAgICAvLyBpbiB0aGUgRE9NIChhbmQgdmlzaWJsZSlcbiAgICAgIGlmICh1cmwuc3Vic3RyaW5nKDAsMTQpID09PSAnZGF0YTppbWFnZS9zdmcnKSB7XG4gICAgICAgIGltZy5vbmxvYWQgPSBudWxsO1xuICAgICAgICBmYWJyaWMudXRpbC5sb2FkSW1hZ2VJbkRvbShpbWcsIG9uTG9hZENhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgaW1nLnNyYyA9IHVybDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgU1ZHIGltYWdlIHdpdGggZGF0YTogVVJMIHRvIHRoZSBkb21cbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW1nIEltYWdlIG9iamVjdCB3aXRoIGRhdGE6aW1hZ2Uvc3ZnIHNyY1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrOyBpbnZva2VkIHdpdGggbG9hZGVkIGltYWdlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBET00gZWxlbWVudCAoZGl2IGNvbnRhaW5pbmcgdGhlIFNWRyBpbWFnZSlcbiAgICAgKi9cbiAgICBsb2FkSW1hZ2VJbkRvbTogZnVuY3Rpb24oaW1nLCBvbkxvYWRDYWxsYmFjaykge1xuICAgICAgdmFyIGRpdiA9IGZhYnJpYy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRpdi5zdHlsZS53aWR0aCA9IGRpdi5zdHlsZS5oZWlnaHQgPSAnMXB4JztcbiAgICAgIGRpdi5zdHlsZS5sZWZ0ID0gZGl2LnN0eWxlLnRvcCA9ICctMTAwJSc7XG4gICAgICBkaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgZGl2LmFwcGVuZENoaWxkKGltZyk7XG4gICAgICBmYWJyaWMuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFwcGVuZENoaWxkKGRpdik7XG4gICAgICAvKipcbiAgICAgICAqIFdyYXAgaW4gZnVuY3Rpb24gdG86XG4gICAgICAgKiAgIDEuIENhbGwgZXhpc3RpbmcgY2FsbGJhY2tcbiAgICAgICAqICAgMi4gQ2xlYW51cCBET01cbiAgICAgICAqL1xuICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb25Mb2FkQ2FsbGJhY2soKTtcbiAgICAgICAgZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgICAgICAgZGl2ID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgY29ycmVzcG9uZGluZyBmYWJyaWMgaW5zdGFuY2VzIGZyb20gdGhlaXIgb2JqZWN0IHJlcHJlc2VudGF0aW9uc1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvYmplY3RzIE9iamVjdHMgdG8gZW5saXZlblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFsbCBvYmplY3RzIGFyZSBjcmVhdGVkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBOYW1lc3BhY2UgdG8gZ2V0IGtsYXNzIFwiQ2xhc3NcIiBvYmplY3QgZnJvbVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJldml2ZXIgTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2Ygb2JqZWN0IGVsZW1lbnRzLFxuICAgICAqIGNhbGxlZCBhZnRlciBlYWNoIGZhYnJpYyBvYmplY3QgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBlbmxpdmVuT2JqZWN0czogZnVuY3Rpb24ob2JqZWN0cywgY2FsbGJhY2ssIG5hbWVzcGFjZSwgcmV2aXZlcikge1xuICAgICAgb2JqZWN0cyA9IG9iamVjdHMgfHwgW107XG5cbiAgICAgIHZhciBlbmxpdmVuZWRPYmplY3RzID0gW10sXG4gICAgICAgICAgbnVtTG9hZGVkT2JqZWN0cyA9IDAsXG4gICAgICAgICAgbnVtVG90YWxPYmplY3RzID0gb2JqZWN0cy5sZW5ndGg7XG5cbiAgICAgIGZ1bmN0aW9uIG9uTG9hZGVkKCkge1xuICAgICAgICBpZiAoKytudW1Mb2FkZWRPYmplY3RzID09PSBudW1Ub3RhbE9iamVjdHMpIHtcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhlbmxpdmVuZWRPYmplY3RzLmZpbHRlcihmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIC8vIGZpbHRlciBvdXQgdW5kZWZpbmVkIG9iamVjdHMgKG9iamVjdHMgdGhhdCBnYXZlIGVycm9yKVxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFudW1Ub3RhbE9iamVjdHMpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZW5saXZlbmVkT2JqZWN0cyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgb2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChvLCBpbmRleCkge1xuICAgICAgICAvLyBpZiBzcGFyc2UgYXJyYXlcbiAgICAgICAgaWYgKCFvIHx8ICFvLnR5cGUpIHtcbiAgICAgICAgICBvbkxvYWRlZCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIga2xhc3MgPSBmYWJyaWMudXRpbC5nZXRLbGFzcyhvLnR5cGUsIG5hbWVzcGFjZSk7XG4gICAgICAgIGtsYXNzLmZyb21PYmplY3QobywgZnVuY3Rpb24gKG9iaiwgZXJyb3IpIHtcbiAgICAgICAgICBlcnJvciB8fCAoZW5saXZlbmVkT2JqZWN0c1tpbmRleF0gPSBvYmopO1xuICAgICAgICAgIHJldml2ZXIgJiYgcmV2aXZlcihvLCBvYmosIGVycm9yKTtcbiAgICAgICAgICBvbkxvYWRlZCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGNvcnJlc3BvbmRpbmcgZmFicmljIGluc3RhbmNlcyByZXNpZGluZyBpbiBhbiBvYmplY3QsIGUuZy4gYGNsaXBQYXRoYFxuICAgICAqIEBzZWUge0BsaW5rIGZhYnJpYy5PYmplY3QuRU5MSVZFTl9QUk9QU31cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0XSBhc3NpZ24gZW5saXZlZCBwcm9wcyB0byB0aGlzIG9iamVjdCAocGFzcyBudWxsIHRvIHNraXAgdGhpcylcbiAgICAgKiBAcGFyYW0geyhvYmplY3RzOmZhYnJpYy5PYmplY3RbXSkgPT4gdm9pZH0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBlbmxpdmVuT2JqZWN0RW5saXZhYmxlczogZnVuY3Rpb24gKG9iamVjdCwgY29udGV4dCwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBlbmxpdmVuUHJvcHMgPSBmYWJyaWMuT2JqZWN0LkVOTElWRU5fUFJPUFMuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICEhb2JqZWN0W2tleV07IH0pO1xuICAgICAgZmFicmljLnV0aWwuZW5saXZlbk9iamVjdHMoZW5saXZlblByb3BzLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBvYmplY3Rba2V5XTsgfSksIGZ1bmN0aW9uIChlbmxpdmVkUHJvcHMpIHtcbiAgICAgICAgdmFyIG9iamVjdHMgPSB7fTtcbiAgICAgICAgZW5saXZlblByb3BzLmZvckVhY2goZnVuY3Rpb24gKGtleSwgaW5kZXgpIHtcbiAgICAgICAgICBvYmplY3RzW2tleV0gPSBlbmxpdmVkUHJvcHNbaW5kZXhdO1xuICAgICAgICAgIGNvbnRleHQgJiYgKGNvbnRleHRba2V5XSA9IGVubGl2ZWRQcm9wc1tpbmRleF0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sob2JqZWN0cyk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuZCB3YWl0IGZvciBsb2FkaW5nIG9mIHBhdHRlcm5zXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdHRlcm5zIE9iamVjdHMgdG8gZW5saXZlblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFsbCBvYmplY3RzIGFyZSBjcmVhdGVkXG4gICAgICogY2FsbGVkIGFmdGVyIGVhY2ggZmFicmljIG9iamVjdCBjcmVhdGVkLlxuICAgICAqL1xuICAgIGVubGl2ZW5QYXR0ZXJuczogZnVuY3Rpb24ocGF0dGVybnMsIGNhbGxiYWNrKSB7XG4gICAgICBwYXR0ZXJucyA9IHBhdHRlcm5zIHx8IFtdO1xuXG4gICAgICBmdW5jdGlvbiBvbkxvYWRlZCgpIHtcbiAgICAgICAgaWYgKCsrbnVtTG9hZGVkUGF0dGVybnMgPT09IG51bVBhdHRlcm5zKSB7XG4gICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZW5saXZlbmVkUGF0dGVybnMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBlbmxpdmVuZWRQYXR0ZXJucyA9IFtdLFxuICAgICAgICAgIG51bUxvYWRlZFBhdHRlcm5zID0gMCxcbiAgICAgICAgICBudW1QYXR0ZXJucyA9IHBhdHRlcm5zLmxlbmd0aDtcblxuICAgICAgaWYgKCFudW1QYXR0ZXJucykge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhlbmxpdmVuZWRQYXR0ZXJucyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGF0dGVybnMuZm9yRWFjaChmdW5jdGlvbiAocCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHAgJiYgcC5zb3VyY2UpIHtcbiAgICAgICAgICBuZXcgZmFicmljLlBhdHRlcm4ocCwgZnVuY3Rpb24ocGF0dGVybikge1xuICAgICAgICAgICAgZW5saXZlbmVkUGF0dGVybnNbaW5kZXhdID0gcGF0dGVybjtcbiAgICAgICAgICAgIG9uTG9hZGVkKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZW5saXZlbmVkUGF0dGVybnNbaW5kZXhdID0gcDtcbiAgICAgICAgICBvbkxvYWRlZCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR3JvdXBzIFNWRyBlbGVtZW50cyAodXN1YWxseSB0aG9zZSByZXRyaWV2ZWQgZnJvbSBTVkcgZG9jdW1lbnQpXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGVsZW1lbnRzIFNWRyBlbGVtZW50cyB0byBncm91cFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBWYWx1ZSB0byBzZXQgc291cmNlUGF0aCB0b1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R8ZmFicmljLkdyb3VwfVxuICAgICAqL1xuICAgIGdyb3VwU1ZHRWxlbWVudHM6IGZ1bmN0aW9uKGVsZW1lbnRzLCBvcHRpb25zLCBwYXRoKSB7XG4gICAgICB2YXIgb2JqZWN0O1xuICAgICAgaWYgKGVsZW1lbnRzICYmIGVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAodHlwZW9mIHBhdGggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZWxlbWVudHNbMF0uc291cmNlUGF0aCA9IHBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzWzBdO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMud2lkdGggJiYgb3B0aW9ucy5oZWlnaHQpIHtcbiAgICAgICAgICBvcHRpb25zLmNlbnRlclBvaW50ID0ge1xuICAgICAgICAgICAgeDogb3B0aW9ucy53aWR0aCAvIDIsXG4gICAgICAgICAgICB5OiBvcHRpb25zLmhlaWdodCAvIDJcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLndpZHRoO1xuICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb2JqZWN0ID0gbmV3IGZhYnJpYy5Hcm91cChlbGVtZW50cywgb3B0aW9ucyk7XG4gICAgICBpZiAodHlwZW9mIHBhdGggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG9iamVjdC5zb3VyY2VQYXRoID0gcGF0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFBvcHVsYXRlcyBhbiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzIG9mIGFub3RoZXIgb2JqZWN0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgU291cmNlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0aW5hdGlvbiBEZXN0aW5hdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gcHJvcGVydGllcyBQcm9wZXJ0aWVzIG5hbWVzIHRvIGluY2x1ZGVcbiAgICAgKi9cbiAgICBwb3B1bGF0ZVdpdGhQcm9wZXJ0aWVzOiBmdW5jdGlvbihzb3VyY2UsIGRlc3RpbmF0aW9uLCBwcm9wZXJ0aWVzKSB7XG4gICAgICBpZiAocHJvcGVydGllcyAmJiBBcnJheS5pc0FycmF5KHByb3BlcnRpZXMpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwcm9wZXJ0aWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgaWYgKHByb3BlcnRpZXNbaV0gaW4gc291cmNlKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltwcm9wZXJ0aWVzW2ldXSA9IHNvdXJjZVtwcm9wZXJ0aWVzW2ldXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBjYW52YXMgZWxlbWVudFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcmV0dXJuIHtDYW52YXNFbGVtZW50fSBpbml0aWFsaXplZCBjYW52YXMgZWxlbWVudFxuICAgICAqL1xuICAgIGNyZWF0ZUNhbnZhc0VsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZhYnJpYy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNhbnZhcyBlbGVtZW50IHRoYXQgaXMgYSBjb3B5IG9mIGFub3RoZXIgYW5kIGlzIGFsc28gcGFpbnRlZFxuICAgICAqIEBwYXJhbSB7Q2FudmFzRWxlbWVudH0gY2FudmFzIHRvIGNvcHkgc2l6ZSBhbmQgY29udGVudCBvZlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcmV0dXJuIHtDYW52YXNFbGVtZW50fSBpbml0aWFsaXplZCBjYW52YXMgZWxlbWVudFxuICAgICAqL1xuICAgIGNvcHlDYW52YXNFbGVtZW50OiBmdW5jdGlvbihjYW52YXMpIHtcbiAgICAgIHZhciBuZXdDYW52YXMgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgICBuZXdDYW52YXMud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICBuZXdDYW52YXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgIG5ld0NhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZShjYW52YXMsIDAsIDApO1xuICAgICAgcmV0dXJuIG5ld0NhbnZhcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogc2luY2UgMi42LjAgbW92ZWQgZnJvbSBjYW52YXMgaW5zdGFuY2UgdG8gdXRpbGl0eS5cbiAgICAgKiBAcGFyYW0ge0NhbnZhc0VsZW1lbnR9IGNhbnZhc0VsIHRvIGNvcHkgc2l6ZSBhbmQgY29udGVudCBvZlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgJ2pwZWcnIG9yICdwbmcnLCBpbiBzb21lIGJyb3dzZXJzICd3ZWJwJyBpcyBvayB0b29cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcXVhbGl0eSA8PSAxIGFuZCA+IDBcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBkYXRhIHVybFxuICAgICAqL1xuICAgIHRvRGF0YVVSTDogZnVuY3Rpb24oY2FudmFzRWwsIGZvcm1hdCwgcXVhbGl0eSkge1xuICAgICAgcmV0dXJuIGNhbnZhc0VsLnRvRGF0YVVSTCgnaW1hZ2UvJyArIGZvcm1hdCwgcXVhbGl0eSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgaW1hZ2UgZWxlbWVudCAod29ya3Mgb24gY2xpZW50IGFuZCBub2RlKVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcmV0dXJuIHtIVE1MSW1hZ2VFbGVtZW50fSBIVE1MIGltYWdlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBjcmVhdGVJbWFnZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFicmljLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSBtYXRyaXggQSBieSBtYXRyaXggQiB0byBuZXN0IHRyYW5zZm9ybWF0aW9uc1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0gIHtBcnJheX0gYSBGaXJzdCB0cmFuc2Zvcm1NYXRyaXhcbiAgICAgKiBAcGFyYW0gIHtBcnJheX0gYiBTZWNvbmQgdHJhbnNmb3JtTWF0cml4XG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gaXMyeDIgZmxhZyB0byBtdWx0aXBseSBtYXRyaWNlcyBhcyAyeDIgbWF0cmljZXNcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gVGhlIHByb2R1Y3Qgb2YgdGhlIHR3byB0cmFuc2Zvcm0gbWF0cmljZXNcbiAgICAgKi9cbiAgICBtdWx0aXBseVRyYW5zZm9ybU1hdHJpY2VzOiBmdW5jdGlvbihhLCBiLCBpczJ4Mikge1xuICAgICAgLy8gTWF0cml4IG11bHRpcGx5IGEgKiBiXG4gICAgICByZXR1cm4gW1xuICAgICAgICBhWzBdICogYlswXSArIGFbMl0gKiBiWzFdLFxuICAgICAgICBhWzFdICogYlswXSArIGFbM10gKiBiWzFdLFxuICAgICAgICBhWzBdICogYlsyXSArIGFbMl0gKiBiWzNdLFxuICAgICAgICBhWzFdICogYlsyXSArIGFbM10gKiBiWzNdLFxuICAgICAgICBpczJ4MiA/IDAgOiBhWzBdICogYls0XSArIGFbMl0gKiBiWzVdICsgYVs0XSxcbiAgICAgICAgaXMyeDIgPyAwIDogYVsxXSAqIGJbNF0gKyBhWzNdICogYls1XSArIGFbNV1cbiAgICAgIF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlY29tcG9zZXMgc3RhbmRhcmQgMngzIG1hdHJpeCBpbnRvIHRyYW5zZm9ybSBjb21wb25lbnRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSAge0FycmF5fSBhIHRyYW5zZm9ybU1hdHJpeFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ29tcG9uZW50cyBvZiB0cmFuc2Zvcm1cbiAgICAgKi9cbiAgICBxckRlY29tcG9zZTogZnVuY3Rpb24oYSkge1xuICAgICAgdmFyIGFuZ2xlID0gYXRhbjIoYVsxXSwgYVswXSksXG4gICAgICAgICAgZGVub20gPSBwb3coYVswXSwgMikgKyBwb3coYVsxXSwgMiksXG4gICAgICAgICAgc2NhbGVYID0gc3FydChkZW5vbSksXG4gICAgICAgICAgc2NhbGVZID0gKGFbMF0gKiBhWzNdIC0gYVsyXSAqIGFbMV0pIC8gc2NhbGVYLFxuICAgICAgICAgIHNrZXdYID0gYXRhbjIoYVswXSAqIGFbMl0gKyBhWzFdICogYSBbM10sIGRlbm9tKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFuZ2xlOiBhbmdsZSAvIFBpQnkxODAsXG4gICAgICAgIHNjYWxlWDogc2NhbGVYLFxuICAgICAgICBzY2FsZVk6IHNjYWxlWSxcbiAgICAgICAgc2tld1g6IHNrZXdYIC8gUGlCeTE4MCxcbiAgICAgICAgc2tld1k6IDAsXG4gICAgICAgIHRyYW5zbGF0ZVg6IGFbNF0sXG4gICAgICAgIHRyYW5zbGF0ZVk6IGFbNV1cbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB0cmFuc2Zvcm0gbWF0cml4IHN0YXJ0aW5nIGZyb20gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIGtpbmQgb2ZcbiAgICAgKiB0aGUgb25lIHJldHVybmVkIGZyb20gcXJEZWNvbXBvc2UsIHVzZWZ1bCBhbHNvIGlmIHlvdSB3YW50IHRvIGNhbGN1bGF0ZSBzb21lXG4gICAgICogdHJhbnNmb3JtYXRpb25zIGZyb20gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGVubGl2ZWQgeWV0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSAge051bWJlcn0gW29wdGlvbnMuYW5nbGVdIGFuZ2xlIGluIGRlZ3JlZXNcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJbXX0gdHJhbnNmb3JtIG1hdHJpeFxuICAgICAqL1xuICAgIGNhbGNSb3RhdGVNYXRyaXg6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucy5hbmdsZSkge1xuICAgICAgICByZXR1cm4gZmFicmljLmlNYXRyaXguY29uY2F0KCk7XG4gICAgICB9XG4gICAgICB2YXIgdGhldGEgPSBmYWJyaWMudXRpbC5kZWdyZWVzVG9SYWRpYW5zKG9wdGlvbnMuYW5nbGUpLFxuICAgICAgICAgIGNvcyA9IGZhYnJpYy51dGlsLmNvcyh0aGV0YSksXG4gICAgICAgICAgc2luID0gZmFicmljLnV0aWwuc2luKHRoZXRhKTtcbiAgICAgIHJldHVybiBbY29zLCBzaW4sIC1zaW4sIGNvcywgMCwgMF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB0cmFuc2Zvcm0gbWF0cml4IHN0YXJ0aW5nIGZyb20gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIGtpbmQgb2ZcbiAgICAgKiB0aGUgb25lIHJldHVybmVkIGZyb20gcXJEZWNvbXBvc2UsIHVzZWZ1bCBhbHNvIGlmIHlvdSB3YW50IHRvIGNhbGN1bGF0ZSBzb21lXG4gICAgICogdHJhbnNmb3JtYXRpb25zIGZyb20gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGVubGl2ZWQgeWV0LlxuICAgICAqIGlzIGNhbGxlZCBEaW1lbnNpb25zVHJhbnNmb3JtTWF0cml4IGJlY2F1c2UgdGhvc2UgcHJvcGVydGllcyBhcmUgdGhlIG9uZSB0aGF0IGluZmx1ZW5jZVxuICAgICAqIHRoZSBzaXplIG9mIHRoZSByZXN1bHRpbmcgYm94IG9mIHRoZSBvYmplY3QuXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSAge051bWJlcn0gW29wdGlvbnMuc2NhbGVYXVxuICAgICAqIEBwYXJhbSAge051bWJlcn0gW29wdGlvbnMuc2NhbGVZXVxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IFtvcHRpb25zLmZsaXBYXVxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IFtvcHRpb25zLmZsaXBZXVxuICAgICAqIEBwYXJhbSAge051bWJlcn0gW29wdGlvbnMuc2tld1hdXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBbb3B0aW9ucy5za2V3WV1cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJbXX0gdHJhbnNmb3JtIG1hdHJpeFxuICAgICAqL1xuICAgIGNhbGNEaW1lbnNpb25zTWF0cml4OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgc2NhbGVYID0gdHlwZW9mIG9wdGlvbnMuc2NhbGVYID09PSAndW5kZWZpbmVkJyA/IDEgOiBvcHRpb25zLnNjYWxlWCxcbiAgICAgICAgICBzY2FsZVkgPSB0eXBlb2Ygb3B0aW9ucy5zY2FsZVkgPT09ICd1bmRlZmluZWQnID8gMSA6IG9wdGlvbnMuc2NhbGVZLFxuICAgICAgICAgIHNjYWxlTWF0cml4ID0gW1xuICAgICAgICAgICAgb3B0aW9ucy5mbGlwWCA/IC1zY2FsZVggOiBzY2FsZVgsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIG9wdGlvbnMuZmxpcFkgPyAtc2NhbGVZIDogc2NhbGVZLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDBdLFxuICAgICAgICAgIG11bHRpcGx5ID0gZmFicmljLnV0aWwubXVsdGlwbHlUcmFuc2Zvcm1NYXRyaWNlcyxcbiAgICAgICAgICBkZWdyZWVzVG9SYWRpYW5zID0gZmFicmljLnV0aWwuZGVncmVlc1RvUmFkaWFucztcbiAgICAgIGlmIChvcHRpb25zLnNrZXdYKSB7XG4gICAgICAgIHNjYWxlTWF0cml4ID0gbXVsdGlwbHkoXG4gICAgICAgICAgc2NhbGVNYXRyaXgsXG4gICAgICAgICAgWzEsIDAsIE1hdGgudGFuKGRlZ3JlZXNUb1JhZGlhbnMob3B0aW9ucy5za2V3WCkpLCAxXSxcbiAgICAgICAgICB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLnNrZXdZKSB7XG4gICAgICAgIHNjYWxlTWF0cml4ID0gbXVsdGlwbHkoXG4gICAgICAgICAgc2NhbGVNYXRyaXgsXG4gICAgICAgICAgWzEsIE1hdGgudGFuKGRlZ3JlZXNUb1JhZGlhbnMob3B0aW9ucy5za2V3WSkpLCAwLCAxXSxcbiAgICAgICAgICB0cnVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzY2FsZU1hdHJpeDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHRyYW5zZm9ybSBtYXRyaXggc3RhcnRpbmcgZnJvbSBhbiBvYmplY3Qgb2YgdGhlIHNhbWUga2luZCBvZlxuICAgICAqIHRoZSBvbmUgcmV0dXJuZWQgZnJvbSBxckRlY29tcG9zZSwgdXNlZnVsIGFsc28gaWYgeW91IHdhbnQgdG8gY2FsY3VsYXRlIHNvbWVcbiAgICAgKiB0cmFuc2Zvcm1hdGlvbnMgZnJvbSBhbiBvYmplY3QgdGhhdCBpcyBub3QgZW5saXZlZCB5ZXRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBbb3B0aW9ucy5hbmdsZV1cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IFtvcHRpb25zLnNjYWxlWF1cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IFtvcHRpb25zLnNjYWxlWV1cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0aW9ucy5mbGlwWF1cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0aW9ucy5mbGlwWV1cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IFtvcHRpb25zLnNrZXdYXVxuICAgICAqIEBwYXJhbSAge051bWJlcn0gW29wdGlvbnMuc2tld1hdXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBbb3B0aW9ucy50cmFuc2xhdGVYXVxuICAgICAqIEBwYXJhbSAge051bWJlcn0gW29wdGlvbnMudHJhbnNsYXRlWV1cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJbXX0gdHJhbnNmb3JtIG1hdHJpeFxuICAgICAqL1xuICAgIGNvbXBvc2VNYXRyaXg6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBtYXRyaXggPSBbMSwgMCwgMCwgMSwgb3B0aW9ucy50cmFuc2xhdGVYIHx8IDAsIG9wdGlvbnMudHJhbnNsYXRlWSB8fCAwXSxcbiAgICAgICAgICBtdWx0aXBseSA9IGZhYnJpYy51dGlsLm11bHRpcGx5VHJhbnNmb3JtTWF0cmljZXM7XG4gICAgICBpZiAob3B0aW9ucy5hbmdsZSkge1xuICAgICAgICBtYXRyaXggPSBtdWx0aXBseShtYXRyaXgsIGZhYnJpYy51dGlsLmNhbGNSb3RhdGVNYXRyaXgob3B0aW9ucykpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuc2NhbGVYICE9PSAxIHx8IG9wdGlvbnMuc2NhbGVZICE9PSAxIHx8XG4gICAgICAgICAgb3B0aW9ucy5za2V3WCB8fCBvcHRpb25zLnNrZXdZIHx8IG9wdGlvbnMuZmxpcFggfHwgb3B0aW9ucy5mbGlwWSkge1xuICAgICAgICBtYXRyaXggPSBtdWx0aXBseShtYXRyaXgsIGZhYnJpYy51dGlsLmNhbGNEaW1lbnNpb25zTWF0cml4KG9wdGlvbnMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlc2V0IGFuIG9iamVjdCB0cmFuc2Zvcm0gc3RhdGUgdG8gbmV1dHJhbC4gVG9wIGFuZCBsZWZ0IGFyZSBub3QgYWNjb3VudGVkIGZvclxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0gIHtmYWJyaWMuT2JqZWN0fSB0YXJnZXQgb2JqZWN0IHRvIHRyYW5zZm9ybVxuICAgICAqL1xuICAgIHJlc2V0T2JqZWN0VHJhbnNmb3JtOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICB0YXJnZXQuc2NhbGVYID0gMTtcbiAgICAgIHRhcmdldC5zY2FsZVkgPSAxO1xuICAgICAgdGFyZ2V0LnNrZXdYID0gMDtcbiAgICAgIHRhcmdldC5za2V3WSA9IDA7XG4gICAgICB0YXJnZXQuZmxpcFggPSBmYWxzZTtcbiAgICAgIHRhcmdldC5mbGlwWSA9IGZhbHNlO1xuICAgICAgdGFyZ2V0LnJvdGF0ZSgwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdCBPYmplY3QgdHJhbnNmb3JtIHZhbHVlc1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0gIHtmYWJyaWMuT2JqZWN0fSB0YXJnZXQgb2JqZWN0IHRvIHJlYWQgZnJvbVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ29tcG9uZW50cyBvZiB0cmFuc2Zvcm1cbiAgICAgKi9cbiAgICBzYXZlT2JqZWN0VHJhbnNmb3JtOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzY2FsZVg6IHRhcmdldC5zY2FsZVgsXG4gICAgICAgIHNjYWxlWTogdGFyZ2V0LnNjYWxlWSxcbiAgICAgICAgc2tld1g6IHRhcmdldC5za2V3WCxcbiAgICAgICAgc2tld1k6IHRhcmdldC5za2V3WSxcbiAgICAgICAgYW5nbGU6IHRhcmdldC5hbmdsZSxcbiAgICAgICAgbGVmdDogdGFyZ2V0LmxlZnQsXG4gICAgICAgIGZsaXBYOiB0YXJnZXQuZmxpcFgsXG4gICAgICAgIGZsaXBZOiB0YXJnZXQuZmxpcFksXG4gICAgICAgIHRvcDogdGFyZ2V0LnRvcFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGNvbnRleHQgaGFzIHRyYW5zcGFyZW50IHBpeGVsXG4gICAgICogYXQgc3BlY2lmaWVkIGxvY2F0aW9uICh0YWtpbmcgdG9sZXJhbmNlIGludG8gYWNjb3VudClcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IGNvbnRleHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geCB4IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geSB5IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdG9sZXJhbmNlIFRvbGVyYW5jZVxuICAgICAqL1xuICAgIGlzVHJhbnNwYXJlbnQ6IGZ1bmN0aW9uKGN0eCwgeCwgeSwgdG9sZXJhbmNlKSB7XG5cbiAgICAgIC8vIElmIHRvbGVyYW5jZSBpcyA+IDAgYWRqdXN0IHN0YXJ0IGNvb3JkcyB0byB0YWtlIGludG8gYWNjb3VudC5cbiAgICAgIC8vIElmIG1vdmVzIG9mZiBDYW52YXMgZml4IHRvIDBcbiAgICAgIGlmICh0b2xlcmFuY2UgPiAwKSB7XG4gICAgICAgIGlmICh4ID4gdG9sZXJhbmNlKSB7XG4gICAgICAgICAgeCAtPSB0b2xlcmFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgeCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkgPiB0b2xlcmFuY2UpIHtcbiAgICAgICAgICB5IC09IHRvbGVyYW5jZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB5ID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgX2lzVHJhbnNwYXJlbnQgPSB0cnVlLCBpLCB0ZW1wLFxuICAgICAgICAgIGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoeCwgeSwgKHRvbGVyYW5jZSAqIDIpIHx8IDEsICh0b2xlcmFuY2UgKiAyKSB8fCAxKSxcbiAgICAgICAgICBsID0gaW1hZ2VEYXRhLmRhdGEubGVuZ3RoO1xuXG4gICAgICAvLyBTcGxpdCBpbWFnZSBkYXRhIC0gZm9yIHRvbGVyYW5jZSA+IDEsIHBpeGVsRGF0YVNpemUgPSA0O1xuICAgICAgZm9yIChpID0gMzsgaSA8IGw7IGkgKz0gNCkge1xuICAgICAgICB0ZW1wID0gaW1hZ2VEYXRhLmRhdGFbaV07XG4gICAgICAgIF9pc1RyYW5zcGFyZW50ID0gdGVtcCA8PSAwO1xuICAgICAgICBpZiAoX2lzVHJhbnNwYXJlbnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7IC8vIFN0b3AgaWYgY29sb3VyIGZvdW5kXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaW1hZ2VEYXRhID0gbnVsbDtcblxuICAgICAgcmV0dXJuIF9pc1RyYW5zcGFyZW50O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSBwcmVzZXJ2ZUFzcGVjdFJhdGlvIGF0dHJpYnV0ZSBmcm9tIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlIHRvIGJlIHBhcnNlZFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxpZ24gYW5kIG1lZXRPclNsaWNlIGF0dHJpYnV0ZVxuICAgICAqL1xuICAgIHBhcnNlUHJlc2VydmVBc3BlY3RSYXRpb0F0dHJpYnV0ZTogZnVuY3Rpb24oYXR0cmlidXRlKSB7XG4gICAgICB2YXIgbWVldE9yU2xpY2UgPSAnbWVldCcsIGFsaWduWCA9ICdNaWQnLCBhbGlnblkgPSAnTWlkJyxcbiAgICAgICAgICBhc3BlY3RSYXRpb0F0dHJzID0gYXR0cmlidXRlLnNwbGl0KCcgJyksIGFsaWduO1xuXG4gICAgICBpZiAoYXNwZWN0UmF0aW9BdHRycyAmJiBhc3BlY3RSYXRpb0F0dHJzLmxlbmd0aCkge1xuICAgICAgICBtZWV0T3JTbGljZSA9IGFzcGVjdFJhdGlvQXR0cnMucG9wKCk7XG4gICAgICAgIGlmIChtZWV0T3JTbGljZSAhPT0gJ21lZXQnICYmIG1lZXRPclNsaWNlICE9PSAnc2xpY2UnKSB7XG4gICAgICAgICAgYWxpZ24gPSBtZWV0T3JTbGljZTtcbiAgICAgICAgICBtZWV0T3JTbGljZSA9ICdtZWV0JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhc3BlY3RSYXRpb0F0dHJzLmxlbmd0aCkge1xuICAgICAgICAgIGFsaWduID0gYXNwZWN0UmF0aW9BdHRycy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy9kaXZpZGUgYWxpZ24gaW4gYWxpZ25YIGFuZCBhbGlnbllcbiAgICAgIGFsaWduWCA9IGFsaWduICE9PSAnbm9uZScgPyBhbGlnbi5zbGljZSgxLCA0KSA6ICdub25lJztcbiAgICAgIGFsaWduWSA9IGFsaWduICE9PSAnbm9uZScgPyBhbGlnbi5zbGljZSg1LCA4KSA6ICdub25lJztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lZXRPclNsaWNlOiBtZWV0T3JTbGljZSxcbiAgICAgICAgYWxpZ25YOiBhbGlnblgsXG4gICAgICAgIGFsaWduWTogYWxpZ25ZXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBjaGFyIHdpZHRocyBjYWNoZSBmb3IgdGhlIGdpdmVuIGZvbnQgZmFtaWx5IG9yIGFsbCB0aGUgY2FjaGUgaWYgbm9cbiAgICAgKiBmb250RmFtaWx5IGlzIHNwZWNpZmllZC5cbiAgICAgKiBVc2UgaXQgaWYgeW91IGtub3cgeW91IGFyZSBsb2FkaW5nIGZvbnRzIGluIGEgbGF6eSB3YXkgYW5kIHlvdSBhcmUgbm90IHdhaXRpbmdcbiAgICAgKiBmb3IgY3VzdG9tIGZvbnRzIHRvIGxvYWQgcHJvcGVybHkgd2hlbiBhZGRpbmcgdGV4dCBvYmplY3RzIHRvIHRoZSBjYW52YXMuXG4gICAgICogSWYgYSB0ZXh0IG9iamVjdCBpcyBhZGRlZCB3aGVuIGl0cyBvd24gZm9udCBpcyBub3QgbG9hZGVkIHlldCwgeW91IHdpbGwgZ2V0IHdyb25nXG4gICAgICogbWVhc3VyZW1lbnQgYW5kIHNvIHdyb25nIGJvdW5kaW5nIGJveGVzLlxuICAgICAqIEFmdGVyIHRoZSBmb250IGNhY2hlIGlzIGNsZWFyZWQsIGVpdGhlciBjaGFuZ2UgdGhlIHRleHRPYmplY3QgdGV4dCBjb250ZW50IG9yIGNhbGxcbiAgICAgKiBpbml0RGltZW5zaW9ucygpIHRvIHRyaWdnZXIgYSByZWNhbGN1bGF0aW9uXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtmb250RmFtaWx5XSBmb250IGZhbWlseSB0byBjbGVhclxuICAgICAqL1xuICAgIGNsZWFyRmFicmljRm9udENhY2hlOiBmdW5jdGlvbihmb250RmFtaWx5KSB7XG4gICAgICBmb250RmFtaWx5ID0gKGZvbnRGYW1pbHkgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoIWZvbnRGYW1pbHkpIHtcbiAgICAgICAgZmFicmljLmNoYXJXaWR0aHNDYWNoZSA9IHsgfTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGZhYnJpYy5jaGFyV2lkdGhzQ2FjaGVbZm9udEZhbWlseV0pIHtcbiAgICAgICAgZGVsZXRlIGZhYnJpYy5jaGFyV2lkdGhzQ2FjaGVbZm9udEZhbWlseV07XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGN1cnJlbnQgYXNwZWN0IHJhdGlvLCBkZXRlcm1pbmVzIHRoZSBtYXggd2lkdGggYW5kIGhlaWdodCB0aGF0IGNhblxuICAgICAqIHJlc3BlY3QgdGhlIHRvdGFsIGFsbG93ZWQgYXJlYSBmb3IgdGhlIGNhY2hlLlxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhciBhc3BlY3QgcmF0aW9cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbWF4aW11bUFyZWEgTWF4aW11bSBhcmVhIHlvdSB3YW50IHRvIGFjaGlldmVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3QueH0gTGltaXRlZCBkaW1lbnNpb25zIGJ5IFhcbiAgICAgKiBAcmV0dXJuIHtPYmplY3QueX0gTGltaXRlZCBkaW1lbnNpb25zIGJ5IFlcbiAgICAgKi9cbiAgICBsaW1pdERpbXNCeUFyZWE6IGZ1bmN0aW9uKGFyLCBtYXhpbXVtQXJlYSkge1xuICAgICAgdmFyIHJvdWdoV2lkdGggPSBNYXRoLnNxcnQobWF4aW11bUFyZWEgKiBhciksXG4gICAgICAgICAgcGVyZkxpbWl0U2l6ZVkgPSBNYXRoLmZsb29yKG1heGltdW1BcmVhIC8gcm91Z2hXaWR0aCk7XG4gICAgICByZXR1cm4geyB4OiBNYXRoLmZsb29yKHJvdWdoV2lkdGgpLCB5OiBwZXJmTGltaXRTaXplWSB9O1xuICAgIH0sXG5cbiAgICBjYXBWYWx1ZTogZnVuY3Rpb24obWluLCB2YWx1ZSwgbWF4KSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbih2YWx1ZSwgbWF4KSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBzY2FsZSBmb3IgdGhlIG9iamVjdCBzb3VyY2UgdG8gZml0IGluc2lkZSB0aGUgb2JqZWN0IGRlc3RpbmF0aW9uLFxuICAgICAqIGtlZXBpbmcgYXNwZWN0IHJhdGlvIGludGFjdC5cbiAgICAgKiByZXNwZWN0IHRoZSB0b3RhbCBhbGxvd2VkIGFyZWEgZm9yIHRoZSBjYWNoZS5cbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdCB8IGZhYnJpYy5PYmplY3R9IHNvdXJjZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzb3VyY2UuaGVpZ2h0IG5hdHVyYWwgdW5zY2FsZWQgaGVpZ2h0IG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc291cmNlLndpZHRoIG5hdHVyYWwgdW5zY2FsZWQgd2lkdGggb2YgdGhlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0IHwgZmFicmljLk9iamVjdH0gZGVzdGluYXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVzdGluYXRpb24uaGVpZ2h0IG5hdHVyYWwgdW5zY2FsZWQgaGVpZ2h0IG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVzdGluYXRpb24ud2lkdGggbmF0dXJhbCB1bnNjYWxlZCB3aWR0aCBvZiB0aGUgb2JqZWN0XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBzY2FsZSBmYWN0b3IgdG8gYXBwbHkgdG8gc291cmNlIHRvIGZpdCBpbnRvIGRlc3RpbmF0aW9uXG4gICAgICovXG4gICAgZmluZFNjYWxlVG9GaXQ6IGZ1bmN0aW9uKHNvdXJjZSwgZGVzdGluYXRpb24pIHtcbiAgICAgIHJldHVybiBNYXRoLm1pbihkZXN0aW5hdGlvbi53aWR0aCAvIHNvdXJjZS53aWR0aCwgZGVzdGluYXRpb24uaGVpZ2h0IC8gc291cmNlLmhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBzY2FsZSBmb3IgdGhlIG9iamVjdCBzb3VyY2UgdG8gY292ZXIgZW50aXJlbHkgdGhlIG9iamVjdCBkZXN0aW5hdGlvbixcbiAgICAgKiBrZWVwaW5nIGFzcGVjdCByYXRpbyBpbnRhY3QuXG4gICAgICogcmVzcGVjdCB0aGUgdG90YWwgYWxsb3dlZCBhcmVhIGZvciB0aGUgY2FjaGUuXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtPYmplY3QgfCBmYWJyaWMuT2JqZWN0fSBzb3VyY2VcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc291cmNlLmhlaWdodCBuYXR1cmFsIHVuc2NhbGVkIGhlaWdodCBvZiB0aGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNvdXJjZS53aWR0aCBuYXR1cmFsIHVuc2NhbGVkIHdpZHRoIG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdCB8IGZhYnJpYy5PYmplY3R9IGRlc3RpbmF0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlc3RpbmF0aW9uLmhlaWdodCBuYXR1cmFsIHVuc2NhbGVkIGhlaWdodCBvZiB0aGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlc3RpbmF0aW9uLndpZHRoIG5hdHVyYWwgdW5zY2FsZWQgd2lkdGggb2YgdGhlIG9iamVjdFxuICAgICAqIEByZXR1cm4ge051bWJlcn0gc2NhbGUgZmFjdG9yIHRvIGFwcGx5IHRvIHNvdXJjZSB0byBjb3ZlciBkZXN0aW5hdGlvblxuICAgICAqL1xuICAgIGZpbmRTY2FsZVRvQ292ZXI6IGZ1bmN0aW9uKHNvdXJjZSwgZGVzdGluYXRpb24pIHtcbiAgICAgIHJldHVybiBNYXRoLm1heChkZXN0aW5hdGlvbi53aWR0aCAvIHNvdXJjZS53aWR0aCwgZGVzdGluYXRpb24uaGVpZ2h0IC8gc291cmNlLmhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGdpdmVuIGFuIGFycmF5IG9mIDYgbnVtYmVyIHJldHVybnMgc29tZXRoaW5nIGxpa2UgYFwibWF0cml4KC4uLm51bWJlcnMpXCJgXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtIGFuIGFycmF5IHdpdGggNiBudW1iZXJzXG4gICAgICogQHJldHVybiB7U3RyaW5nfSB0cmFuc2Zvcm0gbWF0cml4IGZvciBzdmdcbiAgICAgKiBAcmV0dXJuIHtPYmplY3QueX0gTGltaXRlZCBkaW1lbnNpb25zIGJ5IFlcbiAgICAgKi9cbiAgICBtYXRyaXhUb1NWRzogZnVuY3Rpb24odHJhbnNmb3JtKSB7XG4gICAgICByZXR1cm4gJ21hdHJpeCgnICsgdHJhbnNmb3JtLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZmFicmljLnV0aWwudG9GaXhlZCh2YWx1ZSwgZmFicmljLk9iamVjdC5OVU1fRlJBQ1RJT05fRElHSVRTKTtcbiAgICAgIH0pLmpvaW4oJyAnKSArICcpJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2l2ZW4gYW4gb2JqZWN0IGFuZCBhIHRyYW5zZm9ybSwgYXBwbHkgdGhlIGludmVyc2UgdHJhbnNmb3JtIHRvIHRoZSBvYmplY3QsXG4gICAgICogdGhpcyBpcyBlcXVpdmFsZW50IHRvIHJlbW92ZSBmcm9tIHRoYXQgb2JqZWN0IHRoYXQgdHJhbnNmb3JtYXRpb24sIHNvIHRoYXRcbiAgICAgKiBhZGRlZCBpbiBhIHNwYWNlIHdpdGggdGhlIHJlbW92ZWQgdHJhbnNmb3JtLCB0aGUgb2JqZWN0IHdpbGwgYmUgdGhlIHNhbWUgYXMgYmVmb3JlLlxuICAgICAqIFJlbW92aW5nIGZyb20gYW4gb2JqZWN0IGEgdHJhbnNmb3JtIHRoYXQgc2NhbGUgYnkgMiBpcyBsaWtlIHNjYWxpbmcgaXQgYnkgMS8yLlxuICAgICAqIFJlbW92aW5nIGZyb20gYW4gb2JqZWN0IGEgdHJhbnNmcm9tIHRoYXQgcm90YXRlIGJ5IDMwZGVnIGlzIGxpa2Ugcm90YXRpbmcgYnkgMzBkZWdcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxuICAgICAqIFRoaXMgdXRpbCBpcyB1c2VkIHRvIGFkZCBvYmplY3RzIGluc2lkZSB0cmFuc2Zvcm1lZCBncm91cHMgb3IgbmVzdGVkIGdyb3Vwcy5cbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCB0aGUgb2JqZWN0IHlvdSB3YW50IHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybSB0aGUgZGVzdGluYXRpb24gdHJhbnNmb3JtXG4gICAgICovXG4gICAgcmVtb3ZlVHJhbnNmb3JtRnJvbU9iamVjdDogZnVuY3Rpb24ob2JqZWN0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHZhciBpbnZlcnRlZCA9IGZhYnJpYy51dGlsLmludmVydFRyYW5zZm9ybSh0cmFuc2Zvcm0pLFxuICAgICAgICAgIGZpbmFsVHJhbnNmb3JtID0gZmFicmljLnV0aWwubXVsdGlwbHlUcmFuc2Zvcm1NYXRyaWNlcyhpbnZlcnRlZCwgb2JqZWN0LmNhbGNPd25NYXRyaXgoKSk7XG4gICAgICBmYWJyaWMudXRpbC5hcHBseVRyYW5zZm9ybVRvT2JqZWN0KG9iamVjdCwgZmluYWxUcmFuc2Zvcm0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnaXZlbiBhbiBvYmplY3QgYW5kIGEgdHJhbnNmb3JtLCBhcHBseSB0aGUgdHJhbnNmb3JtIHRvIHRoZSBvYmplY3QuXG4gICAgICogdGhpcyBpcyBlcXVpdmFsZW50IHRvIGNoYW5nZSB0aGUgc3BhY2Ugd2hlcmUgdGhlIG9iamVjdCBpcyBkcmF3bi5cbiAgICAgKiBBZGRpbmcgdG8gYW4gb2JqZWN0IGEgdHJhbnNmb3JtIHRoYXQgc2NhbGUgYnkgMiBpcyBsaWtlIHNjYWxpbmcgaXQgYnkgMi5cbiAgICAgKiBUaGlzIGlzIHVzZWQgd2hlbiByZW1vdmluZyBhbiBvYmplY3QgZnJvbSBhbiBhY3RpdmUgc2VsZWN0aW9uIGZvciBleGFtcGxlLlxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IHRoZSBvYmplY3QgeW91IHdhbnQgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtIHRoZSBkZXN0aW5hdGlvbiB0cmFuc2Zvcm1cbiAgICAgKi9cbiAgICBhZGRUcmFuc2Zvcm1Ub09iamVjdDogZnVuY3Rpb24ob2JqZWN0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIGZhYnJpYy51dGlsLmFwcGx5VHJhbnNmb3JtVG9PYmplY3QoXG4gICAgICAgIG9iamVjdCxcbiAgICAgICAgZmFicmljLnV0aWwubXVsdGlwbHlUcmFuc2Zvcm1NYXRyaWNlcyh0cmFuc2Zvcm0sIG9iamVjdC5jYWxjT3duTWF0cml4KCkpXG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkaXNjYXJkIGFuIG9iamVjdCB0cmFuc2Zvcm0gc3RhdGUgYW5kIGFwcGx5IHRoZSBvbmUgZnJvbSB0aGUgbWF0cml4LlxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IHRoZSBvYmplY3QgeW91IHdhbnQgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtIHRoZSBkZXN0aW5hdGlvbiB0cmFuc2Zvcm1cbiAgICAgKi9cbiAgICBhcHBseVRyYW5zZm9ybVRvT2JqZWN0OiBmdW5jdGlvbihvYmplY3QsIHRyYW5zZm9ybSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBmYWJyaWMudXRpbC5xckRlY29tcG9zZSh0cmFuc2Zvcm0pLFxuICAgICAgICAgIGNlbnRlciA9IG5ldyBmYWJyaWMuUG9pbnQob3B0aW9ucy50cmFuc2xhdGVYLCBvcHRpb25zLnRyYW5zbGF0ZVkpO1xuICAgICAgb2JqZWN0LmZsaXBYID0gZmFsc2U7XG4gICAgICBvYmplY3QuZmxpcFkgPSBmYWxzZTtcbiAgICAgIG9iamVjdC5zZXQoJ3NjYWxlWCcsIG9wdGlvbnMuc2NhbGVYKTtcbiAgICAgIG9iamVjdC5zZXQoJ3NjYWxlWScsIG9wdGlvbnMuc2NhbGVZKTtcbiAgICAgIG9iamVjdC5za2V3WCA9IG9wdGlvbnMuc2tld1g7XG4gICAgICBvYmplY3Quc2tld1kgPSBvcHRpb25zLnNrZXdZO1xuICAgICAgb2JqZWN0LmFuZ2xlID0gb3B0aW9ucy5hbmdsZTtcbiAgICAgIG9iamVjdC5zZXRQb3NpdGlvbkJ5T3JpZ2luKGNlbnRlciwgJ2NlbnRlcicsICdjZW50ZXInKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2l2ZW4gYSB3aWR0aCBhbmQgaGVpZ2h0LCByZXR1cm4gdGhlIHNpemUgb2YgdGhlIGJvdW5kaW5nIGJveFxuICAgICAqIHRoYXQgY2FuIGNvbnRhaW5zIHRoZSBib3ggd2l0aCB3aWR0aC9oZWlnaHQgd2l0aCBhcHBsaWVkIHRyYW5zZm9ybVxuICAgICAqIGRlc2NyaWJlZCBpbiBvcHRpb25zLlxuICAgICAqIFVzZSB0byBjYWxjdWxhdGUgdGhlIGJveGVzIGFyb3VuZCBvYmplY3RzIGZvciBjb250cm9scy5cbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5zY2FsZVhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5zY2FsZVlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5za2V3WFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnNrZXdZXG4gICAgICogQHJldHVybiB7T2JqZWN0Lnh9IHdpZHRoIG9mIGNvbnRhaW5pbmdcbiAgICAgKiBAcmV0dXJuIHtPYmplY3QueX0gaGVpZ2h0IG9mIGNvbnRhaW5pbmdcbiAgICAgKi9cbiAgICBzaXplQWZ0ZXJUcmFuc2Zvcm06IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBkaW1YID0gd2lkdGggLyAyLCBkaW1ZID0gaGVpZ2h0IC8gMixcbiAgICAgICAgICBwb2ludHMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHg6IC1kaW1YLFxuICAgICAgICAgICAgICB5OiAtZGltWVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgeDogZGltWCxcbiAgICAgICAgICAgICAgeTogLWRpbVlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHg6IC1kaW1YLFxuICAgICAgICAgICAgICB5OiBkaW1ZXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB4OiBkaW1YLFxuICAgICAgICAgICAgICB5OiBkaW1ZXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICB0cmFuc2Zvcm1NYXRyaXggPSBmYWJyaWMudXRpbC5jYWxjRGltZW5zaW9uc01hdHJpeChvcHRpb25zKSxcbiAgICAgICAgICBiYm94ID0gZmFicmljLnV0aWwubWFrZUJvdW5kaW5nQm94RnJvbVBvaW50cyhwb2ludHMsIHRyYW5zZm9ybU1hdHJpeCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiBiYm94LndpZHRoLFxuICAgICAgICB5OiBiYm94LmhlaWdodCxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyAyIGNsaXAgcGF0aHMgaW50byBvbmUgdmlzdWFsbHkgZXF1YWwgY2xpcCBwYXRoXG4gICAgICpcbiAgICAgKiAqKklNUE9SVEFOVCoqOlxcXG4gICAgICogRG9lcyAqKk5PVCoqIGNsb25lIHRoZSBhcmd1bWVudHMsIGNsb25lIHRoZW0gcHJvaXIgaWYgbmVjZXNzYXJ5LlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhIHdyYXBwZXIgKGdyb3VwKSB0aGF0IGNvbnRhaW5zIG9uZSBjbGlwIHBhdGggYW5kIGlzIGNsaXBwZWQgYnkgdGhlIG90aGVyIHNvIGNvbnRlbnQgaXMga2VwdCB3aGVyZSBib3RoIG92ZXJsYXAuXG4gICAgICogVXNlIHRoaXMgbWV0aG9kIGlmIGJvdGggdGhlIGNsaXAgcGF0aHMgbWF5IGhhdmUgbmVzdGVkIGNsaXAgcGF0aHMgb2YgdGhlaXIgb3duLCBzbyBhc3NpZ25pbmcgb25lIHRvIHRoZSBvdGhlcidzIGNsaXAgcGF0aCBwcm9wZXJ0eSBpcyBub3QgcG9zc2libGUuXG4gICAgICpcbiAgICAgKiBJbiBvcmRlciB0byBoYW5kbGUgdGhlIGBpbnZlcnRlZGAgcHJvcGVydHkgd2UgZm9sbG93IGxvZ2ljIGRlc2NyaWJlZCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxcXG4gICAgICogKiooMSkqKiBib3RoIGNsaXAgcGF0aHMgYXJlIGludmVydGVkIC0gdGhlIGNsaXAgcGF0aHMgcGFzcyB0aGUgaW52ZXJ0ZWQgcHJvcCB0byB0aGUgd3JhcHBlciBhbmQgbG9vc2UgaXQgdGhlbXNlbHZlcy5cXFxuICAgICAqICoqKDIpKiogb25lIGlzIGludmVydGVkIGFuZCB0aGUgb3RoZXIgaXNuJ3QgLSB0aGUgd3JhcHBlciBzaG91bGRuJ3QgYmVjb21lIGludmVydGVkIGFuZCB0aGUgaW52ZXJ0ZWQgY2xpcCBwYXRoIG11c3QgY2xpcCB0aGUgbm9uIGludmVydGVkIG9uZSB0byBwcm9kdWNlIGFuIGlkZW50aWNhbCB2aXN1YWwgZWZmZWN0LlxcXG4gICAgICogKiooMykqKiBib3RoIGNsaXAgcGF0aHMgYXJlIG5vdCBpbnZlcnRlZCAtIHdyYXBwZXIgYW5kIGNsaXAgcGF0aHMgcmVtYWluIHVuY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gYzFcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IGMyXG4gICAgICogQHJldHVybnMge2ZhYnJpYy5PYmplY3R9IG1lcmdlZCBjbGlwIHBhdGhcbiAgICAgKi9cbiAgICBtZXJnZUNsaXBQYXRoczogZnVuY3Rpb24gKGMxLCBjMikge1xuICAgICAgdmFyIGEgPSBjMSwgYiA9IGMyO1xuICAgICAgaWYgKGEuaW52ZXJ0ZWQgJiYgIWIuaW52ZXJ0ZWQpIHtcbiAgICAgICAgLy8gIGNhc2UgKDIpXG4gICAgICAgIGEgPSBjMjtcbiAgICAgICAgYiA9IGMxO1xuICAgICAgfVxuICAgICAgLy8gIGBiYCBiZWNvbWVzIGBhYCdzIGNsaXAgcGF0aCBzbyB3ZSB0cmFuc2Zvcm0gYGJgIHRvIGBhYCBjb29yZGluYXRlIHBsYW5lXG4gICAgICBmYWJyaWMudXRpbC5hcHBseVRyYW5zZm9ybVRvT2JqZWN0KFxuICAgICAgICBiLFxuICAgICAgICBmYWJyaWMudXRpbC5tdWx0aXBseVRyYW5zZm9ybU1hdHJpY2VzKFxuICAgICAgICAgIGZhYnJpYy51dGlsLmludmVydFRyYW5zZm9ybShhLmNhbGNUcmFuc2Zvcm1NYXRyaXgoKSksXG4gICAgICAgICAgYi5jYWxjVHJhbnNmb3JtTWF0cml4KClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIC8vICBhc3NpZ24gdGhlIGBpbnZlcnRlZGAgcHJvcCB0byB0aGUgd3JhcHBpbmcgZ3JvdXBcbiAgICAgIHZhciBpbnZlcnRlZCA9IGEuaW52ZXJ0ZWQgJiYgYi5pbnZlcnRlZDtcbiAgICAgIGlmIChpbnZlcnRlZCkge1xuICAgICAgICAvLyAgY2FzZSAoMSlcbiAgICAgICAgYS5pbnZlcnRlZCA9IGIuaW52ZXJ0ZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgZmFicmljLkdyb3VwKFthXSwgeyBjbGlwUGF0aDogYiwgaW52ZXJ0ZWQ6IGludmVydGVkIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJldlN0eWxlIGZpcnN0IHN0eWxlIHRvIGNvbXBhcmVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGhpc1N0eWxlIHNlY29uZCBzdHlsZSB0byBjb21wYXJlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmb3JUZXh0U3BhbnMgd2hldGhlciB0byBjaGVjayBvdmVybGluZSwgdW5kZXJsaW5lLCBhbmQgbGluZS10aHJvdWdoIHByb3BlcnRpZXNcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSBzdHlsZSBjaGFuZ2VkXG4gICAgICovXG4gICAgaGFzU3R5bGVDaGFuZ2VkOiBmdW5jdGlvbihwcmV2U3R5bGUsIHRoaXNTdHlsZSwgZm9yVGV4dFNwYW5zKSB7XG4gICAgICBmb3JUZXh0U3BhbnMgPSBmb3JUZXh0U3BhbnMgfHwgZmFsc2U7XG4gICAgICByZXR1cm4gKHByZXZTdHlsZS5maWxsICE9PSB0aGlzU3R5bGUuZmlsbCB8fFxuICAgICAgICAgICAgICBwcmV2U3R5bGUuc3Ryb2tlICE9PSB0aGlzU3R5bGUuc3Ryb2tlIHx8XG4gICAgICAgICAgICAgIHByZXZTdHlsZS5zdHJva2VXaWR0aCAhPT0gdGhpc1N0eWxlLnN0cm9rZVdpZHRoIHx8XG4gICAgICAgICAgICAgIHByZXZTdHlsZS5mb250U2l6ZSAhPT0gdGhpc1N0eWxlLmZvbnRTaXplIHx8XG4gICAgICAgICAgICAgIHByZXZTdHlsZS5mb250RmFtaWx5ICE9PSB0aGlzU3R5bGUuZm9udEZhbWlseSB8fFxuICAgICAgICAgICAgICBwcmV2U3R5bGUuZm9udFdlaWdodCAhPT0gdGhpc1N0eWxlLmZvbnRXZWlnaHQgfHxcbiAgICAgICAgICAgICAgcHJldlN0eWxlLmZvbnRTdHlsZSAhPT0gdGhpc1N0eWxlLmZvbnRTdHlsZSB8fFxuICAgICAgICAgICAgICBwcmV2U3R5bGUudGV4dEJhY2tncm91bmRDb2xvciAhPT0gdGhpc1N0eWxlLnRleHRCYWNrZ3JvdW5kQ29sb3IgfHxcbiAgICAgICAgICAgICAgcHJldlN0eWxlLmRlbHRhWSAhPT0gdGhpc1N0eWxlLmRlbHRhWSkgfHxcbiAgICAgICAgICAgICAgKGZvclRleHRTcGFucyAmJlxuICAgICAgICAgICAgICAgIChwcmV2U3R5bGUub3ZlcmxpbmUgIT09IHRoaXNTdHlsZS5vdmVybGluZSB8fFxuICAgICAgICAgICAgICAgIHByZXZTdHlsZS51bmRlcmxpbmUgIT09IHRoaXNTdHlsZS51bmRlcmxpbmUgfHxcbiAgICAgICAgICAgICAgICBwcmV2U3R5bGUubGluZXRocm91Z2ggIT09IHRoaXNTdHlsZS5saW5ldGhyb3VnaCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhcnJheSBmb3JtIG9mIGEgdGV4dCBvYmplY3QncyBpbmxpbmUgc3R5bGVzIHByb3BlcnR5IHdpdGggc3R5bGVzIGdyb3VwZWQgaW4gcmFuZ2VzXG4gICAgICogcmF0aGVyIHRoYW4gcGVyIGNoYXJhY3Rlci4gVGhpcyBmb3JtYXQgaXMgbGVzcyB2ZXJib3NlLCBhbmQgaXMgYmV0dGVyIHN1aXRlZCBmb3Igc3RvcmFnZVxuICAgICAqIHNvIGl0IGlzIHVzZWQgaW4gc2VyaWFsaXphdGlvbiAobm90IGR1cmluZyBydW50aW1lKS5cbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzIHBlciBjaGFyYWN0ZXIgc3R5bGVzIGZvciBhIHRleHQgb2JqZWN0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgdGhlIHRleHQgc3RyaW5nIHRoYXQgdGhlIHN0eWxlcyBhcmUgYXBwbGllZCB0b1xuICAgICAqIEByZXR1cm4ge3tzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciwgc3R5bGU6IG9iamVjdH1bXX1cbiAgICAgKi9cbiAgICBzdHlsZXNUb0FycmF5OiBmdW5jdGlvbihzdHlsZXMsIHRleHQpIHtcbiAgICAgIC8vIGNsb25lIHN0eWxlIHN0cnVjdHVyZSB0byBwcmV2ZW50IG11dGF0aW9uXG4gICAgICB2YXIgc3R5bGVzID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKHN0eWxlcywgdHJ1ZSksXG4gICAgICAgICAgdGV4dExpbmVzID0gdGV4dC5zcGxpdCgnXFxuJyksXG4gICAgICAgICAgY2hhckluZGV4ID0gLTEsIHByZXZTdHlsZSA9IHt9LCBzdHlsZXNBcnJheSA9IFtdO1xuICAgICAgLy9sb29wIHRocm91Z2ggZWFjaCB0ZXh0TGluZVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0TGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFzdHlsZXNbaV0pIHtcbiAgICAgICAgICAvL25vIHN0eWxlcyBleGlzdCBmb3IgdGhpcyBsaW5lLCBzbyBhZGQgdGhlIGxpbmUncyBsZW5ndGggdG8gdGhlIGNoYXJJbmRleCB0b3RhbFxuICAgICAgICAgIGNoYXJJbmRleCArPSB0ZXh0TGluZXNbaV0ubGVuZ3RoO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vbG9vcCB0aHJvdWdoIGVhY2ggY2hhcmFjdGVyIG9mIHRoZSBjdXJyZW50IGxpbmVcbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCB0ZXh0TGluZXNbaV0ubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICBjaGFySW5kZXgrKztcbiAgICAgICAgICB2YXIgdGhpc1N0eWxlID0gc3R5bGVzW2ldW2NdO1xuICAgICAgICAgIC8vY2hlY2sgaWYgc3R5bGUgZXhpc3RzIGZvciB0aGlzIGNoYXJhY3RlclxuICAgICAgICAgIGlmICh0aGlzU3R5bGUgJiYgT2JqZWN0LmtleXModGhpc1N0eWxlKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgc3R5bGVDaGFuZ2VkID0gZmFicmljLnV0aWwuaGFzU3R5bGVDaGFuZ2VkKHByZXZTdHlsZSwgdGhpc1N0eWxlLCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChzdHlsZUNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgc3R5bGVzQXJyYXkucHVzaCh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGNoYXJJbmRleCxcbiAgICAgICAgICAgICAgICBlbmQ6IGNoYXJJbmRleCArIDEsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHRoaXNTdHlsZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAvL2lmIHN0eWxlIGlzIHRoZSBzYW1lIGFzIHByZXZpb3VzIGNoYXJhY3RlciwgaW5jcmVhc2UgZW5kIGluZGV4XG4gICAgICAgICAgICAgIHN0eWxlc0FycmF5W3N0eWxlc0FycmF5Lmxlbmd0aCAtIDFdLmVuZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwcmV2U3R5bGUgPSB0aGlzU3R5bGUgfHwge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZXNBcnJheTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIHN0eWxlcyBwcm9wZXJ0eSB3aXRoIHN0eWxlcyB0aGF0IGFyZSBhc3NpZ25lZCBwZXJcbiAgICAgKiBjaGFyYWN0ZXIgcmF0aGVyIHRoYW4gZ3JvdXBlZCBieSByYW5nZS4gVGhpcyBmb3JtYXQgaXMgbW9yZSB2ZXJib3NlLCBhbmQgaXNcbiAgICAgKiBvbmx5IHVzZWQgZHVyaW5nIHJ1bnRpbWUgKG5vdCBmb3Igc2VyaWFsaXphdGlvbi9zdG9yYWdlKVxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHN0eWxlcyB0aGUgc2VyaWFsaXplZCBmb3JtIG9mIGEgdGV4dCBvYmplY3QncyBzdHlsZXNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCB0aGUgdGV4dCBzdHJpbmcgdGhhdCB0aGUgc3R5bGVzIGFyZSBhcHBsaWVkIHRvXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIHN0eWxlc0Zyb21BcnJheTogZnVuY3Rpb24oc3R5bGVzLCB0ZXh0KSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc3R5bGVzKSkge1xuICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgfVxuICAgICAgdmFyIHRleHRMaW5lcyA9IHRleHQuc3BsaXQoJ1xcbicpLFxuICAgICAgICAgIGNoYXJJbmRleCA9IC0xLCBzdHlsZUluZGV4ID0gMCwgc3R5bGVzT2JqZWN0ID0ge307XG4gICAgICAvL2xvb3AgdGhyb3VnaCBlYWNoIHRleHRMaW5lXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHRMaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvL2xvb3AgdGhyb3VnaCBlYWNoIGNoYXJhY3RlciBvZiB0aGUgY3VycmVudCBsaW5lXG4gICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgdGV4dExpbmVzW2ldLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgY2hhckluZGV4Kys7XG4gICAgICAgICAgLy9jaGVjayBpZiB0aGVyZSdzIGEgc3R5bGUgY29sbGVjdGlvbiB0aGF0IGluY2x1ZGVzIHRoZSBjdXJyZW50IGNoYXJhY3RlclxuICAgICAgICAgIGlmIChzdHlsZXNbc3R5bGVJbmRleF1cbiAgICAgICAgICAgICYmIHN0eWxlc1tzdHlsZUluZGV4XS5zdGFydCA8PSBjaGFySW5kZXhcbiAgICAgICAgICAgICYmIGNoYXJJbmRleCA8IHN0eWxlc1tzdHlsZUluZGV4XS5lbmQpIHtcbiAgICAgICAgICAgIC8vY3JlYXRlIG9iamVjdCBmb3IgbGluZSBpbmRleCBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgICBzdHlsZXNPYmplY3RbaV0gPSBzdHlsZXNPYmplY3RbaV0gfHwge307XG4gICAgICAgICAgICAvL2Fzc2lnbiBhIHN0eWxlIGF0IHRoaXMgY2hhcmFjdGVyJ3MgaW5kZXhcbiAgICAgICAgICAgIHN0eWxlc09iamVjdFtpXVtjXSA9IE9iamVjdC5hc3NpZ24oe30sIHN0eWxlc1tzdHlsZUluZGV4XS5zdHlsZSk7XG4gICAgICAgICAgICAvL2lmIGNoYXJhY3RlciBpcyBhdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IHN0eWxlIGNvbGxlY3Rpb24sIG1vdmUgdG8gdGhlIG5leHRcbiAgICAgICAgICAgIGlmIChjaGFySW5kZXggPT09IHN0eWxlc1tzdHlsZUluZGV4XS5lbmQgLSAxKSB7XG4gICAgICAgICAgICAgIHN0eWxlSW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZXNPYmplY3Q7XG4gICAgfVxuICB9O1xufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIF9qb2luID0gQXJyYXkucHJvdG90eXBlLmpvaW4sXG4gICAgICBjb21tYW5kTGVuZ3RocyA9IHtcbiAgICAgICAgbTogMixcbiAgICAgICAgbDogMixcbiAgICAgICAgaDogMSxcbiAgICAgICAgdjogMSxcbiAgICAgICAgYzogNixcbiAgICAgICAgczogNCxcbiAgICAgICAgcTogNCxcbiAgICAgICAgdDogMixcbiAgICAgICAgYTogN1xuICAgICAgfSxcbiAgICAgIHJlcGVhdGVkQ29tbWFuZHMgPSB7XG4gICAgICAgIG06ICdsJyxcbiAgICAgICAgTTogJ0wnXG4gICAgICB9O1xuICBmdW5jdGlvbiBzZWdtZW50VG9CZXppZXIodGgyLCB0aDMsIGNvc1RoLCBzaW5UaCwgcngsIHJ5LCBjeDEsIGN5MSwgbVQsIGZyb21YLCBmcm9tWSkge1xuICAgIHZhciBjb3N0aDIgPSBmYWJyaWMudXRpbC5jb3ModGgyKSxcbiAgICAgICAgc2ludGgyID0gZmFicmljLnV0aWwuc2luKHRoMiksXG4gICAgICAgIGNvc3RoMyA9IGZhYnJpYy51dGlsLmNvcyh0aDMpLFxuICAgICAgICBzaW50aDMgPSBmYWJyaWMudXRpbC5zaW4odGgzKSxcbiAgICAgICAgdG9YID0gY29zVGggKiByeCAqIGNvc3RoMyAtIHNpblRoICogcnkgKiBzaW50aDMgKyBjeDEsXG4gICAgICAgIHRvWSA9IHNpblRoICogcnggKiBjb3N0aDMgKyBjb3NUaCAqIHJ5ICogc2ludGgzICsgY3kxLFxuICAgICAgICBjcDFYID0gZnJvbVggKyBtVCAqICggLWNvc1RoICogcnggKiBzaW50aDIgLSBzaW5UaCAqIHJ5ICogY29zdGgyKSxcbiAgICAgICAgY3AxWSA9IGZyb21ZICsgbVQgKiAoIC1zaW5UaCAqIHJ4ICogc2ludGgyICsgY29zVGggKiByeSAqIGNvc3RoMiksXG4gICAgICAgIGNwMlggPSB0b1ggKyBtVCAqICggY29zVGggKiByeCAqIHNpbnRoMyArIHNpblRoICogcnkgKiBjb3N0aDMpLFxuICAgICAgICBjcDJZID0gdG9ZICsgbVQgKiAoIHNpblRoICogcnggKiBzaW50aDMgLSBjb3NUaCAqIHJ5ICogY29zdGgzKTtcblxuICAgIHJldHVybiBbJ0MnLFxuICAgICAgY3AxWCwgY3AxWSxcbiAgICAgIGNwMlgsIGNwMlksXG4gICAgICB0b1gsIHRvWVxuICAgIF07XG4gIH1cblxuICAvKiBBZGFwdGVkIGZyb20gaHR0cDovL2R4ci5tb3ppbGxhLm9yZy9tb3ppbGxhLWNlbnRyYWwvc291cmNlL2NvbnRlbnQvc3ZnL2NvbnRlbnQvc3JjL25zU1ZHUGF0aERhdGFQYXJzZXIuY3BwXG4gICAqIGJ5IEFuZHJlYSBCb2dhenppIGNvZGUgaXMgdW5kZXIgTVBMLiBpZiB5b3UgZG9uJ3QgaGF2ZSBhIGNvcHkgb2YgdGhlIGxpY2Vuc2UgeW91IGNhbiB0YWtlIGl0IGhlcmVcbiAgICogaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvXG4gICAqL1xuICBmdW5jdGlvbiBhcmNUb1NlZ21lbnRzKHRvWCwgdG9ZLCByeCwgcnksIGxhcmdlLCBzd2VlcCwgcm90YXRlWCkge1xuICAgIHZhciBQSSA9IE1hdGguUEksIHRoID0gcm90YXRlWCAqIFBJIC8gMTgwLFxuICAgICAgICBzaW5UaCA9IGZhYnJpYy51dGlsLnNpbih0aCksXG4gICAgICAgIGNvc1RoID0gZmFicmljLnV0aWwuY29zKHRoKSxcbiAgICAgICAgZnJvbVggPSAwLCBmcm9tWSA9IDA7XG5cbiAgICByeCA9IE1hdGguYWJzKHJ4KTtcbiAgICByeSA9IE1hdGguYWJzKHJ5KTtcblxuICAgIHZhciBweCA9IC1jb3NUaCAqIHRvWCAqIDAuNSAtIHNpblRoICogdG9ZICogMC41LFxuICAgICAgICBweSA9IC1jb3NUaCAqIHRvWSAqIDAuNSArIHNpblRoICogdG9YICogMC41LFxuICAgICAgICByeDIgPSByeCAqIHJ4LCByeTIgPSByeSAqIHJ5LCBweTIgPSBweSAqIHB5LCBweDIgPSBweCAqIHB4LFxuICAgICAgICBwbCA9IHJ4MiAqIHJ5MiAtIHJ4MiAqIHB5MiAtIHJ5MiAqIHB4MixcbiAgICAgICAgcm9vdCA9IDA7XG5cbiAgICBpZiAocGwgPCAwKSB7XG4gICAgICB2YXIgcyA9IE1hdGguc3FydCgxIC0gcGwgLyAocngyICogcnkyKSk7XG4gICAgICByeCAqPSBzO1xuICAgICAgcnkgKj0gcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByb290ID0gKGxhcmdlID09PSBzd2VlcCA/IC0xLjAgOiAxLjApICpcbiAgICAgICAgICAgICAgTWF0aC5zcXJ0KCBwbCAvIChyeDIgKiBweTIgKyByeTIgKiBweDIpKTtcbiAgICB9XG5cbiAgICB2YXIgY3ggPSByb290ICogcnggKiBweSAvIHJ5LFxuICAgICAgICBjeSA9IC1yb290ICogcnkgKiBweCAvIHJ4LFxuICAgICAgICBjeDEgPSBjb3NUaCAqIGN4IC0gc2luVGggKiBjeSArIHRvWCAqIDAuNSxcbiAgICAgICAgY3kxID0gc2luVGggKiBjeCArIGNvc1RoICogY3kgKyB0b1kgKiAwLjUsXG4gICAgICAgIG1UaGV0YSA9IGNhbGNWZWN0b3JBbmdsZSgxLCAwLCAocHggLSBjeCkgLyByeCwgKHB5IC0gY3kpIC8gcnkpLFxuICAgICAgICBkdGhldGEgPSBjYWxjVmVjdG9yQW5nbGUoKHB4IC0gY3gpIC8gcngsIChweSAtIGN5KSAvIHJ5LCAoLXB4IC0gY3gpIC8gcngsICgtcHkgLSBjeSkgLyByeSk7XG5cbiAgICBpZiAoc3dlZXAgPT09IDAgJiYgZHRoZXRhID4gMCkge1xuICAgICAgZHRoZXRhIC09IDIgKiBQSTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3dlZXAgPT09IDEgJiYgZHRoZXRhIDwgMCkge1xuICAgICAgZHRoZXRhICs9IDIgKiBQSTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IGludG8gY3ViaWMgYmV6aWVyIHNlZ21lbnRzIDw9IDkwZGVnXG4gICAgdmFyIHNlZ21lbnRzID0gTWF0aC5jZWlsKE1hdGguYWJzKGR0aGV0YSAvIFBJICogMikpLFxuICAgICAgICByZXN1bHQgPSBbXSwgbURlbHRhID0gZHRoZXRhIC8gc2VnbWVudHMsXG4gICAgICAgIG1UID0gOCAvIDMgKiBNYXRoLnNpbihtRGVsdGEgLyA0KSAqIE1hdGguc2luKG1EZWx0YSAvIDQpIC8gTWF0aC5zaW4obURlbHRhIC8gMiksXG4gICAgICAgIHRoMyA9IG1UaGV0YSArIG1EZWx0YTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHM7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gc2VnbWVudFRvQmV6aWVyKG1UaGV0YSwgdGgzLCBjb3NUaCwgc2luVGgsIHJ4LCByeSwgY3gxLCBjeTEsIG1ULCBmcm9tWCwgZnJvbVkpO1xuICAgICAgZnJvbVggPSByZXN1bHRbaV1bNV07XG4gICAgICBmcm9tWSA9IHJlc3VsdFtpXVs2XTtcbiAgICAgIG1UaGV0YSA9IHRoMztcbiAgICAgIHRoMyArPSBtRGVsdGE7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKlxuICAgKiBQcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjYWxjVmVjdG9yQW5nbGUodXgsIHV5LCB2eCwgdnkpIHtcbiAgICB2YXIgdGEgPSBNYXRoLmF0YW4yKHV5LCB1eCksXG4gICAgICAgIHRiID0gTWF0aC5hdGFuMih2eSwgdngpO1xuICAgIGlmICh0YiA+PSB0YSkge1xuICAgICAgcmV0dXJuIHRiIC0gdGE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIDIgKiBNYXRoLlBJIC0gKHRhIC0gdGIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYm91bmRpbmcgYm94IG9mIGEgYmV6aWVyY3VydmVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHgwIHN0YXJ0aW5nIHBvaW50XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5MFxuICAgKiBAcGFyYW0ge051bWJlcn0geDEgZmlyc3QgY29udHJvbCBwb2ludFxuICAgKiBAcGFyYW0ge051bWJlcn0geTFcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHgyIHNlY29uZG8gY29udHJvbCBwb2ludFxuICAgKiBAcGFyYW0ge051bWJlcn0geTJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHgzIGVuZCBvZiBiZXppZXJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkzXG4gICAqL1xuICAvLyB0YWtlbiBmcm9tIGh0dHA6Ly9qc2Jpbi5jb20vaXZvbWlxLzU2L2VkaXQgIG5vIGNyZWRpdHMgYXZhaWxhYmxlIGZvciB0aGF0LlxuICAvLyBUT0RPOiBjYW4gd2Ugbm9ybWFsaXplIHRoaXMgd2l0aCB0aGUgc3RhcnRpbmcgcG9pbnRzIHNldCBhdCAwIGFuZCB0aGVuIHRyYW5zbGF0ZWQgdGhlIGJib3g/XG4gIGZ1bmN0aW9uIGdldEJvdW5kc09mQ3VydmUoeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKSB7XG4gICAgdmFyIGFyZ3NTdHJpbmc7XG4gICAgaWYgKGZhYnJpYy5jYWNoZXNCb3VuZHNPZkN1cnZlKSB7XG4gICAgICBhcmdzU3RyaW5nID0gX2pvaW4uY2FsbChhcmd1bWVudHMpO1xuICAgICAgaWYgKGZhYnJpYy5ib3VuZHNPZkN1cnZlQ2FjaGVbYXJnc1N0cmluZ10pIHtcbiAgICAgICAgcmV0dXJuIGZhYnJpYy5ib3VuZHNPZkN1cnZlQ2FjaGVbYXJnc1N0cmluZ107XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNxcnQgPSBNYXRoLnNxcnQsXG4gICAgICAgIG1pbiA9IE1hdGgubWluLCBtYXggPSBNYXRoLm1heCxcbiAgICAgICAgYWJzID0gTWF0aC5hYnMsIHR2YWx1ZXMgPSBbXSxcbiAgICAgICAgYm91bmRzID0gW1tdLCBbXV0sXG4gICAgICAgIGEsIGIsIGMsIHQsIHQxLCB0MiwgYjJhYywgc3FydGIyYWM7XG5cbiAgICBiID0gNiAqIHgwIC0gMTIgKiB4MSArIDYgKiB4MjtcbiAgICBhID0gLTMgKiB4MCArIDkgKiB4MSAtIDkgKiB4MiArIDMgKiB4MztcbiAgICBjID0gMyAqIHgxIC0gMyAqIHgwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyOyArK2kpIHtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICBiID0gNiAqIHkwIC0gMTIgKiB5MSArIDYgKiB5MjtcbiAgICAgICAgYSA9IC0zICogeTAgKyA5ICogeTEgLSA5ICogeTIgKyAzICogeTM7XG4gICAgICAgIGMgPSAzICogeTEgLSAzICogeTA7XG4gICAgICB9XG5cbiAgICAgIGlmIChhYnMoYSkgPCAxZS0xMikge1xuICAgICAgICBpZiAoYWJzKGIpIDwgMWUtMTIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0ID0gLWMgLyBiO1xuICAgICAgICBpZiAoMCA8IHQgJiYgdCA8IDEpIHtcbiAgICAgICAgICB0dmFsdWVzLnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBiMmFjID0gYiAqIGIgLSA0ICogYyAqIGE7XG4gICAgICBpZiAoYjJhYyA8IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBzcXJ0YjJhYyA9IHNxcnQoYjJhYyk7XG4gICAgICB0MSA9ICgtYiArIHNxcnRiMmFjKSAvICgyICogYSk7XG4gICAgICBpZiAoMCA8IHQxICYmIHQxIDwgMSkge1xuICAgICAgICB0dmFsdWVzLnB1c2godDEpO1xuICAgICAgfVxuICAgICAgdDIgPSAoLWIgLSBzcXJ0YjJhYykgLyAoMiAqIGEpO1xuICAgICAgaWYgKDAgPCB0MiAmJiB0MiA8IDEpIHtcbiAgICAgICAgdHZhbHVlcy5wdXNoKHQyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgeCwgeSwgaiA9IHR2YWx1ZXMubGVuZ3RoLCBqbGVuID0gaiwgbXQ7XG4gICAgd2hpbGUgKGotLSkge1xuICAgICAgdCA9IHR2YWx1ZXNbal07XG4gICAgICBtdCA9IDEgLSB0O1xuICAgICAgeCA9IChtdCAqIG10ICogbXQgKiB4MCkgKyAoMyAqIG10ICogbXQgKiB0ICogeDEpICsgKDMgKiBtdCAqIHQgKiB0ICogeDIpICsgKHQgKiB0ICogdCAqIHgzKTtcbiAgICAgIGJvdW5kc1swXVtqXSA9IHg7XG5cbiAgICAgIHkgPSAobXQgKiBtdCAqIG10ICogeTApICsgKDMgKiBtdCAqIG10ICogdCAqIHkxKSArICgzICogbXQgKiB0ICogdCAqIHkyKSArICh0ICogdCAqIHQgKiB5Myk7XG4gICAgICBib3VuZHNbMV1bal0gPSB5O1xuICAgIH1cblxuICAgIGJvdW5kc1swXVtqbGVuXSA9IHgwO1xuICAgIGJvdW5kc1sxXVtqbGVuXSA9IHkwO1xuICAgIGJvdW5kc1swXVtqbGVuICsgMV0gPSB4MztcbiAgICBib3VuZHNbMV1bamxlbiArIDFdID0geTM7XG4gICAgdmFyIHJlc3VsdCA9IFtcbiAgICAgIHtcbiAgICAgICAgeDogbWluLmFwcGx5KG51bGwsIGJvdW5kc1swXSksXG4gICAgICAgIHk6IG1pbi5hcHBseShudWxsLCBib3VuZHNbMV0pXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB4OiBtYXguYXBwbHkobnVsbCwgYm91bmRzWzBdKSxcbiAgICAgICAgeTogbWF4LmFwcGx5KG51bGwsIGJvdW5kc1sxXSlcbiAgICAgIH1cbiAgICBdO1xuICAgIGlmIChmYWJyaWMuY2FjaGVzQm91bmRzT2ZDdXJ2ZSkge1xuICAgICAgZmFicmljLmJvdW5kc09mQ3VydmVDYWNoZVthcmdzU3RyaW5nXSA9IHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhcmMgdG8gYSBidW5jaCBvZiBiZXppZXIgY3VydmVzXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBmeCBzdGFydGluZyBwb2ludCB4XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBmeSBzdGFydGluZyBwb2ludCB5XG4gICAqIEBwYXJhbSB7QXJyYXl9IGNvb3JkcyBBcmMgY29tbWFuZFxuICAgKi9cbiAgZnVuY3Rpb24gZnJvbUFyY1RvQmV6aWVycyhmeCwgZnksIGNvb3Jkcykge1xuICAgIHZhciByeCA9IGNvb3Jkc1sxXSxcbiAgICAgICAgcnkgPSBjb29yZHNbMl0sXG4gICAgICAgIHJvdCA9IGNvb3Jkc1szXSxcbiAgICAgICAgbGFyZ2UgPSBjb29yZHNbNF0sXG4gICAgICAgIHN3ZWVwID0gY29vcmRzWzVdLFxuICAgICAgICB0eCA9IGNvb3Jkc1s2XSxcbiAgICAgICAgdHkgPSBjb29yZHNbN10sXG4gICAgICAgIHNlZ3NOb3JtID0gYXJjVG9TZWdtZW50cyh0eCAtIGZ4LCB0eSAtIGZ5LCByeCwgcnksIGxhcmdlLCBzd2VlcCwgcm90KTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWdzTm9ybS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgc2Vnc05vcm1baV1bMV0gKz0gZng7XG4gICAgICBzZWdzTm9ybVtpXVsyXSArPSBmeTtcbiAgICAgIHNlZ3NOb3JtW2ldWzNdICs9IGZ4O1xuICAgICAgc2Vnc05vcm1baV1bNF0gKz0gZnk7XG4gICAgICBzZWdzTm9ybVtpXVs1XSArPSBmeDtcbiAgICAgIHNlZ3NOb3JtW2ldWzZdICs9IGZ5O1xuICAgIH1cbiAgICByZXR1cm4gc2Vnc05vcm07XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gdGFrZSBhIHBhcnNlZCBTVkcgcGF0aCBhbmQgbWFrZSBpdCBzaW1wbGVyIGZvciBmYWJyaWNKUyBsb2dpYy5cbiAgICogc2ltcGxpZmljYXRpb24gY29uc2lzdCBvZjogb25seSBVUFBFUkNBU0UgYWJzb2x1dGUgY29tbWFuZHMgKCByZWxhdGl2ZSBjb252ZXJ0ZWQgdG8gYWJzb2x1dGUgKVxuICAgKiBTIGNvbnZlcnRlZCBpbiBDLCBUIGNvbnZlcnRlZCBpbiBRLCBBIGNvbnZlcnRlZCBpbiBDLlxuICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIHRoZSBhcnJheSBvZiBjb21tYW5kcyBvZiBhIHBhcnNlZCBzdmcgcGF0aCBmb3IgZmFicmljLlBhdGhcbiAgICogQHJldHVybiB7QXJyYXl9IHRoZSBzaW1wbGlmaWVkIGFycmF5IG9mIGNvbW1hbmRzIG9mIGEgcGFyc2VkIHN2ZyBwYXRoIGZvciBmYWJyaWMuUGF0aFxuICAgKi9cbiAgZnVuY3Rpb24gbWFrZVBhdGhTaW1wbGVyKHBhdGgpIHtcbiAgICAvLyB4IGFuZCB5IHJlcHJlc2VudCB0aGUgbGFzdCBwb2ludCBvZiB0aGUgcGF0aC4gdGhlIHByZXZpb3VzIGNvbW1hbmQgcG9pbnQuXG4gICAgLy8gd2UgYWRkIHRoZW0gdG8gZWFjaCByZWxhdGl2ZSBjb21tYW5kIHRvIG1ha2UgaXQgYW4gYWJzb2x1dGUgY29tbWVudC5cbiAgICAvLyB3ZSBhbHNvIHN3YXAgdGhlIHYgViBoIEggd2l0aCBMLCBiZWNhdXNlIGFyZSBlYXNpZXIgdG8gdHJhbnNmb3JtLlxuICAgIHZhciB4ID0gMCwgeSA9IDAsIGxlbiA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAvLyB4MSBhbmQgeTEgcmVwcmVzZW50IHRoZSBsYXN0IHBvaW50IG9mIHRoZSBzdWJwYXRoLiB0aGUgc3VicGF0aCBpcyBzdGFydGVkIHdpdGhcbiAgICAgICAgLy8gbSBvciBNIGNvbW1hbmQuIFdoZW4gYSB6IG9yIFogY29tbWFuZCBpcyBkcmF3biwgeCBhbmQgeSBuZWVkIHRvIGJlIHJlc2V0dGVkIHRvXG4gICAgICAgIC8vIHRoZSBsYXN0IHgxIGFuZCB5MS5cbiAgICAgICAgeDEgPSAwLCB5MSA9IDAsIGN1cnJlbnQsIGksIGNvbnZlcnRlZCxcbiAgICAgICAgLy8gcHJldmlvdXMgd2lsbCBob3N0IHRoZSBsZXR0ZXIgb2YgdGhlIHByZXZpb3VzIGNvbW1hbmQsIHRvIGhhbmRsZSBTIGFuZCBULlxuICAgICAgICAvLyBjb250cm9sWCBhbmQgY29udHJvbFkgd2lsbCBob3N0IHRoZSBwcmV2aW91cyByZWZsZWN0ZWQgY29udHJvbCBwb2ludFxuICAgICAgICBkZXN0aW5hdGlvblBhdGggPSBbXSwgcHJldmlvdXMsIGNvbnRyb2xYLCBjb250cm9sWTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNvbnZlcnRlZCA9IGZhbHNlO1xuICAgICAgY3VycmVudCA9IHBhdGhbaV0uc2xpY2UoMCk7XG4gICAgICBzd2l0Y2ggKGN1cnJlbnRbMF0pIHsgLy8gZmlyc3QgbGV0dGVyXG4gICAgICAgIGNhc2UgJ2wnOiAvLyBsaW5ldG8sIHJlbGF0aXZlXG4gICAgICAgICAgY3VycmVudFswXSA9ICdMJztcbiAgICAgICAgICBjdXJyZW50WzFdICs9IHg7XG4gICAgICAgICAgY3VycmVudFsyXSArPSB5O1xuICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgeCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgeSA9IGN1cnJlbnRbMl07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2gnOiAvLyBob3Jpem9udGFsIGxpbmV0bywgcmVsYXRpdmVcbiAgICAgICAgICBjdXJyZW50WzFdICs9IHg7XG4gICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICBjdXJyZW50WzBdID0gJ0wnO1xuICAgICAgICAgIGN1cnJlbnRbMl0gPSB5O1xuICAgICAgICAgIHggPSBjdXJyZW50WzFdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd2JzogLy8gdmVydGljYWwgbGluZXRvLCByZWxhdGl2ZVxuICAgICAgICAgIGN1cnJlbnRbMV0gKz0geTtcbiAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgIGNhc2UgJ1YnOlxuICAgICAgICAgIGN1cnJlbnRbMF0gPSAnTCc7XG4gICAgICAgICAgeSA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgY3VycmVudFsxXSA9IHg7XG4gICAgICAgICAgY3VycmVudFsyXSA9IHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ20nOiAvLyBtb3ZlVG8sIHJlbGF0aXZlXG4gICAgICAgICAgY3VycmVudFswXSA9ICdNJztcbiAgICAgICAgICBjdXJyZW50WzFdICs9IHg7XG4gICAgICAgICAgY3VycmVudFsyXSArPSB5O1xuICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgeCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgeSA9IGN1cnJlbnRbMl07XG4gICAgICAgICAgeDEgPSBjdXJyZW50WzFdO1xuICAgICAgICAgIHkxID0gY3VycmVudFsyXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYyc6IC8vIGJlemllckN1cnZlVG8sIHJlbGF0aXZlXG4gICAgICAgICAgY3VycmVudFswXSA9ICdDJztcbiAgICAgICAgICBjdXJyZW50WzFdICs9IHg7XG4gICAgICAgICAgY3VycmVudFsyXSArPSB5O1xuICAgICAgICAgIGN1cnJlbnRbM10gKz0geDtcbiAgICAgICAgICBjdXJyZW50WzRdICs9IHk7XG4gICAgICAgICAgY3VycmVudFs1XSArPSB4O1xuICAgICAgICAgIGN1cnJlbnRbNl0gKz0geTtcbiAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgIGNvbnRyb2xYID0gY3VycmVudFszXTtcbiAgICAgICAgICBjb250cm9sWSA9IGN1cnJlbnRbNF07XG4gICAgICAgICAgeCA9IGN1cnJlbnRbNV07XG4gICAgICAgICAgeSA9IGN1cnJlbnRbNl07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3MnOiAvLyBzaG9ydGhhbmQgY3ViaWMgYmV6aWVyQ3VydmVUbywgcmVsYXRpdmVcbiAgICAgICAgICBjdXJyZW50WzBdID0gJ1MnO1xuICAgICAgICAgIGN1cnJlbnRbMV0gKz0geDtcbiAgICAgICAgICBjdXJyZW50WzJdICs9IHk7XG4gICAgICAgICAgY3VycmVudFszXSArPSB4O1xuICAgICAgICAgIGN1cnJlbnRbNF0gKz0geTtcbiAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgIGNhc2UgJ1MnOlxuICAgICAgICAgIC8vIHdvdWxkIGJlIHNTY0MgYnV0IHNpbmNlIHdlIGFyZSBzd2FwcGluZyBzU2MgZm9yIEMsIHdlIGNoZWNrIGp1c3QgdGhhdC5cbiAgICAgICAgICBpZiAocHJldmlvdXMgPT09ICdDJykge1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHJlZmxlY3Rpb24gb2YgcHJldmlvdXMgY29udHJvbCBwb2ludHNcbiAgICAgICAgICAgIGNvbnRyb2xYID0gMiAqIHggLSBjb250cm9sWDtcbiAgICAgICAgICAgIGNvbnRyb2xZID0gMiAqIHkgLSBjb250cm9sWTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBwcmV2aW91cyBjb21tYW5kIG9yIGlmIHRoZSBwcmV2aW91cyBjb21tYW5kIHdhcyBub3QgYSBDLCBjLCBTLCBvciBzLFxuICAgICAgICAgICAgLy8gdGhlIGNvbnRyb2wgcG9pbnQgaXMgY29pbmNpZGVudCB3aXRoIHRoZSBjdXJyZW50IHBvaW50XG4gICAgICAgICAgICBjb250cm9sWCA9IHg7XG4gICAgICAgICAgICBjb250cm9sWSA9IHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHggPSBjdXJyZW50WzNdO1xuICAgICAgICAgIHkgPSBjdXJyZW50WzRdO1xuICAgICAgICAgIGN1cnJlbnRbMF0gPSAnQyc7XG4gICAgICAgICAgY3VycmVudFs1XSA9IGN1cnJlbnRbM107XG4gICAgICAgICAgY3VycmVudFs2XSA9IGN1cnJlbnRbNF07XG4gICAgICAgICAgY3VycmVudFszXSA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgY3VycmVudFs0XSA9IGN1cnJlbnRbMl07XG4gICAgICAgICAgY3VycmVudFsxXSA9IGNvbnRyb2xYO1xuICAgICAgICAgIGN1cnJlbnRbMl0gPSBjb250cm9sWTtcbiAgICAgICAgICAvLyBjdXJyZW50WzNdIGFuZCBjdXJyZW50WzRdIGFyZSBOT1cgdGhlIHNlY29uZCBjb250cm9sIHBvaW50LlxuICAgICAgICAgIC8vIHdlIGtlZXAgaXQgZm9yIHRoZSBuZXh0IHJlZmxlY3Rpb24uXG4gICAgICAgICAgY29udHJvbFggPSBjdXJyZW50WzNdO1xuICAgICAgICAgIGNvbnRyb2xZID0gY3VycmVudFs0XTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncSc6IC8vIHF1YWRyYXRpY0N1cnZlVG8sIHJlbGF0aXZlXG4gICAgICAgICAgY3VycmVudFswXSA9ICdRJztcbiAgICAgICAgICBjdXJyZW50WzFdICs9IHg7XG4gICAgICAgICAgY3VycmVudFsyXSArPSB5O1xuICAgICAgICAgIGN1cnJlbnRbM10gKz0geDtcbiAgICAgICAgICBjdXJyZW50WzRdICs9IHk7XG4gICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICBjb250cm9sWCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgY29udHJvbFkgPSBjdXJyZW50WzJdO1xuICAgICAgICAgIHggPSBjdXJyZW50WzNdO1xuICAgICAgICAgIHkgPSBjdXJyZW50WzRdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0JzogLy8gc2hvcnRoYW5kIHF1YWRyYXRpY0N1cnZlVG8sIHJlbGF0aXZlXG4gICAgICAgICAgY3VycmVudFswXSA9ICdUJztcbiAgICAgICAgICBjdXJyZW50WzFdICs9IHg7XG4gICAgICAgICAgY3VycmVudFsyXSArPSB5O1xuICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgaWYgKHByZXZpb3VzID09PSAnUScpIHtcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSByZWZsZWN0aW9uIG9mIHByZXZpb3VzIGNvbnRyb2wgcG9pbnRcbiAgICAgICAgICAgIGNvbnRyb2xYID0gMiAqIHggLSBjb250cm9sWDtcbiAgICAgICAgICAgIGNvbnRyb2xZID0gMiAqIHkgLSBjb250cm9sWTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBwcmV2aW91cyBjb21tYW5kIG9yIGlmIHRoZSBwcmV2aW91cyBjb21tYW5kIHdhcyBub3QgYSBRLCBxLCBUIG9yIHQsXG4gICAgICAgICAgICAvLyBhc3N1bWUgdGhlIGNvbnRyb2wgcG9pbnQgaXMgY29pbmNpZGVudCB3aXRoIHRoZSBjdXJyZW50IHBvaW50XG4gICAgICAgICAgICBjb250cm9sWCA9IHg7XG4gICAgICAgICAgICBjb250cm9sWSA9IHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRbMF0gPSAnUSc7XG4gICAgICAgICAgeCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgeSA9IGN1cnJlbnRbMl07XG4gICAgICAgICAgY3VycmVudFsxXSA9IGNvbnRyb2xYO1xuICAgICAgICAgIGN1cnJlbnRbMl0gPSBjb250cm9sWTtcbiAgICAgICAgICBjdXJyZW50WzNdID0geDtcbiAgICAgICAgICBjdXJyZW50WzRdID0geTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgICAgY3VycmVudFswXSA9ICdBJztcbiAgICAgICAgICBjdXJyZW50WzZdICs9IHg7XG4gICAgICAgICAgY3VycmVudFs3XSArPSB5O1xuICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgY29udmVydGVkID0gdHJ1ZTtcbiAgICAgICAgICBkZXN0aW5hdGlvblBhdGggPSBkZXN0aW5hdGlvblBhdGguY29uY2F0KGZyb21BcmNUb0JlemllcnMoeCwgeSwgY3VycmVudCkpO1xuICAgICAgICAgIHggPSBjdXJyZW50WzZdO1xuICAgICAgICAgIHkgPSBjdXJyZW50WzddO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd6JzpcbiAgICAgICAgY2FzZSAnWic6XG4gICAgICAgICAgeCA9IHgxO1xuICAgICAgICAgIHkgPSB5MTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIH1cbiAgICAgIGlmICghY29udmVydGVkKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uUGF0aC5wdXNoKGN1cnJlbnQpO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMgPSBjdXJyZW50WzBdO1xuICAgIH1cbiAgICByZXR1cm4gZGVzdGluYXRpb25QYXRoO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxjIGxlbmd0aCBmcm9tIHBvaW50IHgxLHkxIHRvIHgyLHkyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4MSBzdGFydGluZyBwb2ludCB4XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5MSBzdGFydGluZyBwb2ludCB5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4MiBzdGFydGluZyBwb2ludCB4XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5MiBzdGFydGluZyBwb2ludCB5XG4gICAqIEByZXR1cm4ge051bWJlcn0gbGVuZ3RoIG9mIHNlZ21lbnRcbiAgICovXG4gIGZ1bmN0aW9uIGNhbGNMaW5lTGVuZ3RoKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCgoeDIgLSB4MSkgKiAoeDIgLSB4MSkgKyAoeTIgLSB5MSkgKiAoeTIgLSB5MSkpO1xuICB9XG5cbiAgLy8gZnVuY3Rpb25zIGZvciB0aGUgQ3ViaWMgYmVpemVyXG4gIC8vIHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9rb252YWpzL2tvbnZhL2Jsb2IvNy4wLjUvc3JjL3NoYXBlcy9QYXRoLnRzI0wzNTBcbiAgZnVuY3Rpb24gQ0IxKHQpIHtcbiAgICByZXR1cm4gdCAqIHQgKiB0O1xuICB9XG4gIGZ1bmN0aW9uIENCMih0KSB7XG4gICAgcmV0dXJuIDMgKiB0ICogdCAqICgxIC0gdCk7XG4gIH1cbiAgZnVuY3Rpb24gQ0IzKHQpIHtcbiAgICByZXR1cm4gMyAqIHQgKiAoMSAtIHQpICogKDEgLSB0KTtcbiAgfVxuICBmdW5jdGlvbiBDQjQodCkge1xuICAgIHJldHVybiAoMSAtIHQpICogKDEgLSB0KSAqICgxIC0gdCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQb2ludE9uQ3ViaWNCZXppZXJJdGVyYXRvcihwMXgsIHAxeSwgcDJ4LCBwMnksIHAzeCwgcDN5LCBwNHgsIHA0eSkge1xuICAgIHJldHVybiBmdW5jdGlvbihwY3QpIHtcbiAgICAgIHZhciBjMSA9IENCMShwY3QpLCBjMiA9IENCMihwY3QpLCBjMyA9IENCMyhwY3QpLCBjNCA9IENCNChwY3QpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogcDR4ICogYzEgKyBwM3ggKiBjMiArIHAyeCAqIGMzICsgcDF4ICogYzQsXG4gICAgICAgIHk6IHA0eSAqIGMxICsgcDN5ICogYzIgKyBwMnkgKiBjMyArIHAxeSAqIGM0XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUYW5nZW50Q3ViaWNJdGVyYXRvcihwMXgsIHAxeSwgcDJ4LCBwMnksIHAzeCwgcDN5LCBwNHgsIHA0eSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocGN0KSB7XG4gICAgICB2YXIgaW52VCA9IDEgLSBwY3QsXG4gICAgICAgICAgdGFuZ2VudFggPSAoMyAqIGludlQgKiBpbnZUICogKHAyeCAtIHAxeCkpICsgKDYgKiBpbnZUICogcGN0ICogKHAzeCAtIHAyeCkpICtcbiAgICAgICAgICAoMyAqIHBjdCAqIHBjdCAqIChwNHggLSBwM3gpKSxcbiAgICAgICAgICB0YW5nZW50WSA9ICgzICogaW52VCAqIGludlQgKiAocDJ5IC0gcDF5KSkgKyAoNiAqIGludlQgKiBwY3QgKiAocDN5IC0gcDJ5KSkgK1xuICAgICAgICAgICgzICogcGN0ICogcGN0ICogKHA0eSAtIHAzeSkpO1xuICAgICAgcmV0dXJuIE1hdGguYXRhbjIodGFuZ2VudFksIHRhbmdlbnRYKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gUUIxKHQpIHtcbiAgICByZXR1cm4gdCAqIHQ7XG4gIH1cblxuICBmdW5jdGlvbiBRQjIodCkge1xuICAgIHJldHVybiAyICogdCAqICgxIC0gdCk7XG4gIH1cblxuICBmdW5jdGlvbiBRQjModCkge1xuICAgIHJldHVybiAoMSAtIHQpICogKDEgLSB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBvaW50T25RdWFkcmF0aWNCZXppZXJJdGVyYXRvcihwMXgsIHAxeSwgcDJ4LCBwMnksIHAzeCwgcDN5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHBjdCkge1xuICAgICAgdmFyIGMxID0gUUIxKHBjdCksIGMyID0gUUIyKHBjdCksIGMzID0gUUIzKHBjdCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiBwM3ggKiBjMSArIHAyeCAqIGMyICsgcDF4ICogYzMsXG4gICAgICAgIHk6IHAzeSAqIGMxICsgcDJ5ICogYzIgKyBwMXkgKiBjM1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFuZ2VudFF1YWRyYXRpY0l0ZXJhdG9yKHAxeCwgcDF5LCBwMngsIHAyeSwgcDN4LCBwM3kpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHBjdCkge1xuICAgICAgdmFyIGludlQgPSAxIC0gcGN0LFxuICAgICAgICAgIHRhbmdlbnRYID0gKDIgKiBpbnZUICogKHAyeCAtIHAxeCkpICsgKDIgKiBwY3QgKiAocDN4IC0gcDJ4KSksXG4gICAgICAgICAgdGFuZ2VudFkgPSAoMiAqIGludlQgKiAocDJ5IC0gcDF5KSkgKyAoMiAqIHBjdCAqIChwM3kgLSBwMnkpKTtcbiAgICAgIHJldHVybiBNYXRoLmF0YW4yKHRhbmdlbnRZLCB0YW5nZW50WCk7XG4gICAgfTtcbiAgfVxuXG5cbiAgLy8gdGhpcyB3aWxsIHJ1biBvdmVyIGEgcGF0aCBzZWdtZW50ICggYSBjdWJpYyBvciBxdWFkcmF0aWMgc2VnbWVudCkgYW5kIGFwcHJveGltYXRlIGl0XG4gIC8vIHdpdGggMTAwIHNlZ2VtbnRzLiBUaGlzIHdpbGwgZ29vZCBlbm91Z2ggdG8gY2FsY3VsYXRlIHRoZSBsZW5ndGggb2YgdGhlIGN1cnZlXG4gIGZ1bmN0aW9uIHBhdGhJdGVyYXRvcihpdGVyYXRvciwgeDEsIHkxKSB7XG4gICAgdmFyIHRlbXBQID0geyB4OiB4MSwgeTogeTEgfSwgcCwgdG1wTGVuID0gMCwgcGVyYztcbiAgICBmb3IgKHBlcmMgPSAxOyBwZXJjIDw9IDEwMDsgcGVyYyArPSAxKSB7XG4gICAgICBwID0gaXRlcmF0b3IocGVyYyAvIDEwMCk7XG4gICAgICB0bXBMZW4gKz0gY2FsY0xpbmVMZW5ndGgodGVtcFAueCwgdGVtcFAueSwgcC54LCBwLnkpO1xuICAgICAgdGVtcFAgPSBwO1xuICAgIH1cbiAgICByZXR1cm4gdG1wTGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgcGF0aEluZm8sIGFuZCBhIGRpc3RhbmNlIGluIHBpeGVscywgZmluZCB0aGUgcGVyY2VudGFnZSBmcm9tIDAgdG8gMVxuICAgKiB0aGF0IGNvcnJlc3BvbmQgdG8gdGhhdCBwaXhlbHMgcnVuIG92ZXIgdGhlIHBhdGguXG4gICAqIFRoZSBwZXJjZW50YWdlIHdpbGwgYmUgdGhlbiB1c2VkIHRvIGZpbmQgdGhlIGNvcnJlY3QgcG9pbnQgb24gdGhlIGNhbnZhcyBmb3IgdGhlIHBhdGguXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNlZ0luZm8gZmFicmljSlMgY29sbGVjdGlvbiBvZiBpbmZvcm1hdGlvbiBvbiBhIHBhcnNlZCBwYXRoXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkaXN0YW5jZSBmcm9tIHN0YXJ0aW5nIHBvaW50LCBpbiBwaXhlbHMuXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5mbyBvYmplY3Qgd2l0aCB4IGFuZCB5ICggdGhlIHBvaW50IG9uIGNhbnZhcyApIGFuZCBhbmdsZSwgdGhlIHRhbmdlbnQgb24gdGhhdCBwb2ludDtcbiAgICovXG4gIGZ1bmN0aW9uIGZpbmRQZXJjZW50YWdlRm9yRGlzdGFuY2Uoc2VnSW5mbywgZGlzdGFuY2UpIHtcbiAgICB2YXIgcGVyYyA9IDAsIHRtcExlbiA9IDAsIGl0ZXJhdG9yID0gc2VnSW5mby5pdGVyYXRvciwgdGVtcFAgPSB7IHg6IHNlZ0luZm8ueCwgeTogc2VnSW5mby55IH0sXG4gICAgICAgIHAsIG5leHRMZW4sIG5leHRTdGVwID0gMC4wMSwgYW5nbGVGaW5kZXIgPSBzZWdJbmZvLmFuZ2xlRmluZGVyLCBsYXN0UGVyYztcbiAgICAvLyBuZXh0U3RlcCA+IDAuMDAwMSBjb3ZlcnMgMC4wMDAxNTYyNSB0aGF0IDEvNjR0aCBvZiAxLzEwMFxuICAgIC8vIHRoZSBwYXRoXG4gICAgd2hpbGUgKHRtcExlbiA8IGRpc3RhbmNlICYmIG5leHRTdGVwID4gMC4wMDAxKSB7XG4gICAgICBwID0gaXRlcmF0b3IocGVyYyk7XG4gICAgICBsYXN0UGVyYyA9IHBlcmM7XG4gICAgICBuZXh0TGVuID0gY2FsY0xpbmVMZW5ndGgodGVtcFAueCwgdGVtcFAueSwgcC54LCBwLnkpO1xuICAgICAgLy8gY29tcGFyZSB0bXBMZW4gZWFjaCBjeWNsZSB3aXRoIGRpc3RhbmNlLCBkZWNpZGUgbmV4dCBwZXJjIHRvIHRlc3QuXG4gICAgICBpZiAoKG5leHRMZW4gKyB0bXBMZW4pID4gZGlzdGFuY2UpIHtcbiAgICAgICAgLy8gd2UgZGlzY2FyZCB0aGlzIHN0ZXAgYW5kIHdlIG1ha2Ugc21hbGxlciBzdGVwcy5cbiAgICAgICAgcGVyYyAtPSBuZXh0U3RlcDtcbiAgICAgICAgbmV4dFN0ZXAgLz0gMjtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0ZW1wUCA9IHA7XG4gICAgICAgIHBlcmMgKz0gbmV4dFN0ZXA7XG4gICAgICAgIHRtcExlbiArPSBuZXh0TGVuO1xuICAgICAgfVxuICAgIH1cbiAgICBwLmFuZ2xlID0gYW5nbGVGaW5kZXIobGFzdFBlcmMpO1xuICAgIHJldHVybiBwO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1biBvdmVyIGEgcGFyc2VkIGFuZCBzaW1wbGlmZWQgcGF0aCBhbmQgZXh0cmFjIHNvbWUgaW5mb3JtYXRpb25zLlxuICAgKiBpbmZvcm1hdGlvbnMgYXJlIGxlbmd0aCBvZiBlYWNoIGNvbW1hbmQgYW5kIHN0YXJ0aW5nIHBvaW50XG4gICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggZmFicmljSlMgcGFyc2VkIHBhdGggY29tbWFuZHNcbiAgICogQHJldHVybiB7QXJyYXl9IHBhdGggY29tbWFuZHMgaW5mb3JtYXRpb25zXG4gICAqL1xuICBmdW5jdGlvbiBnZXRQYXRoU2VnbWVudHNJbmZvKHBhdGgpIHtcbiAgICB2YXIgdG90YWxMZW5ndGggPSAwLCBsZW4gPSBwYXRoLmxlbmd0aCwgY3VycmVudCxcbiAgICAgICAgLy94MiBhbmQgeTIgYXJlIHRoZSBjb29yZHMgb2Ygc2VnbWVudCBzdGFydFxuICAgICAgICAvL3gxIGFuZCB5MSBhcmUgdGhlIGNvb3JkcyBvZiB0aGUgY3VycmVudCBwb2ludFxuICAgICAgICB4MSA9IDAsIHkxID0gMCwgeDIgPSAwLCB5MiA9IDAsIGluZm8gPSBbXSwgaXRlcmF0b3IsIHRlbXBJbmZvLCBhbmdsZUZpbmRlcjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjdXJyZW50ID0gcGF0aFtpXTtcbiAgICAgIHRlbXBJbmZvID0ge1xuICAgICAgICB4OiB4MSxcbiAgICAgICAgeTogeTEsXG4gICAgICAgIGNvbW1hbmQ6IGN1cnJlbnRbMF0sXG4gICAgICB9O1xuICAgICAgc3dpdGNoIChjdXJyZW50WzBdKSB7IC8vZmlyc3QgbGV0dGVyXG4gICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgIHRlbXBJbmZvLmxlbmd0aCA9IDA7XG4gICAgICAgICAgeDIgPSB4MSA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgeTIgPSB5MSA9IGN1cnJlbnRbMl07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgIHRlbXBJbmZvLmxlbmd0aCA9IGNhbGNMaW5lTGVuZ3RoKHgxLCB5MSwgY3VycmVudFsxXSwgY3VycmVudFsyXSk7XG4gICAgICAgICAgeDEgPSBjdXJyZW50WzFdO1xuICAgICAgICAgIHkxID0gY3VycmVudFsyXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgaXRlcmF0b3IgPSBnZXRQb2ludE9uQ3ViaWNCZXppZXJJdGVyYXRvcihcbiAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgeTEsXG4gICAgICAgICAgICBjdXJyZW50WzFdLFxuICAgICAgICAgICAgY3VycmVudFsyXSxcbiAgICAgICAgICAgIGN1cnJlbnRbM10sXG4gICAgICAgICAgICBjdXJyZW50WzRdLFxuICAgICAgICAgICAgY3VycmVudFs1XSxcbiAgICAgICAgICAgIGN1cnJlbnRbNl1cbiAgICAgICAgICApO1xuICAgICAgICAgIGFuZ2xlRmluZGVyID0gZ2V0VGFuZ2VudEN1YmljSXRlcmF0b3IoXG4gICAgICAgICAgICB4MSxcbiAgICAgICAgICAgIHkxLFxuICAgICAgICAgICAgY3VycmVudFsxXSxcbiAgICAgICAgICAgIGN1cnJlbnRbMl0sXG4gICAgICAgICAgICBjdXJyZW50WzNdLFxuICAgICAgICAgICAgY3VycmVudFs0XSxcbiAgICAgICAgICAgIGN1cnJlbnRbNV0sXG4gICAgICAgICAgICBjdXJyZW50WzZdXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0ZW1wSW5mby5pdGVyYXRvciA9IGl0ZXJhdG9yO1xuICAgICAgICAgIHRlbXBJbmZvLmFuZ2xlRmluZGVyID0gYW5nbGVGaW5kZXI7XG4gICAgICAgICAgdGVtcEluZm8ubGVuZ3RoID0gcGF0aEl0ZXJhdG9yKGl0ZXJhdG9yLCB4MSwgeTEpO1xuICAgICAgICAgIHgxID0gY3VycmVudFs1XTtcbiAgICAgICAgICB5MSA9IGN1cnJlbnRbNl07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgIGl0ZXJhdG9yID0gZ2V0UG9pbnRPblF1YWRyYXRpY0Jlemllckl0ZXJhdG9yKFxuICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICB5MSxcbiAgICAgICAgICAgIGN1cnJlbnRbMV0sXG4gICAgICAgICAgICBjdXJyZW50WzJdLFxuICAgICAgICAgICAgY3VycmVudFszXSxcbiAgICAgICAgICAgIGN1cnJlbnRbNF1cbiAgICAgICAgICApO1xuICAgICAgICAgIGFuZ2xlRmluZGVyID0gZ2V0VGFuZ2VudFF1YWRyYXRpY0l0ZXJhdG9yKFxuICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICB5MSxcbiAgICAgICAgICAgIGN1cnJlbnRbMV0sXG4gICAgICAgICAgICBjdXJyZW50WzJdLFxuICAgICAgICAgICAgY3VycmVudFszXSxcbiAgICAgICAgICAgIGN1cnJlbnRbNF1cbiAgICAgICAgICApO1xuICAgICAgICAgIHRlbXBJbmZvLml0ZXJhdG9yID0gaXRlcmF0b3I7XG4gICAgICAgICAgdGVtcEluZm8uYW5nbGVGaW5kZXIgPSBhbmdsZUZpbmRlcjtcbiAgICAgICAgICB0ZW1wSW5mby5sZW5ndGggPSBwYXRoSXRlcmF0b3IoaXRlcmF0b3IsIHgxLCB5MSk7XG4gICAgICAgICAgeDEgPSBjdXJyZW50WzNdO1xuICAgICAgICAgIHkxID0gY3VycmVudFs0XTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnWic6XG4gICAgICAgIGNhc2UgJ3onOlxuICAgICAgICAgIC8vIHdlIGFkZCB0aG9zZSBpbiBvcmRlciB0byBlYXNlIGNhbGN1bGF0aW9ucyBsYXRlclxuICAgICAgICAgIHRlbXBJbmZvLmRlc3RYID0geDI7XG4gICAgICAgICAgdGVtcEluZm8uZGVzdFkgPSB5MjtcbiAgICAgICAgICB0ZW1wSW5mby5sZW5ndGggPSBjYWxjTGluZUxlbmd0aCh4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgeDEgPSB4MjtcbiAgICAgICAgICB5MSA9IHkyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdG90YWxMZW5ndGggKz0gdGVtcEluZm8ubGVuZ3RoO1xuICAgICAgaW5mby5wdXNoKHRlbXBJbmZvKTtcbiAgICB9XG4gICAgaW5mby5wdXNoKHsgbGVuZ3RoOiB0b3RhbExlbmd0aCwgeDogeDEsIHk6IHkxIH0pO1xuICAgIHJldHVybiBpbmZvO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UG9pbnRPblBhdGgocGF0aCwgZGlzdGFuY2UsIGluZm9zKSB7XG4gICAgaWYgKCFpbmZvcykge1xuICAgICAgaW5mb3MgPSBnZXRQYXRoU2VnbWVudHNJbmZvKHBhdGgpO1xuICAgIH1cbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKChkaXN0YW5jZSAtIGluZm9zW2ldLmxlbmd0aCA+IDApICYmIGkgPCAoaW5mb3MubGVuZ3RoIC0gMikpIHtcbiAgICAgIGRpc3RhbmNlIC09IGluZm9zW2ldLmxlbmd0aDtcbiAgICAgIGkrKztcbiAgICB9XG4gICAgLy8gdmFyIGRpc3RhbmNlID0gaW5mb3NbaW5mb3MubGVuZ3RoIC0gMV0gKiBwZXJjO1xuICAgIHZhciBzZWdJbmZvID0gaW5mb3NbaV0sIHNlZ1BlcmNlbnQgPSBkaXN0YW5jZSAvIHNlZ0luZm8ubGVuZ3RoLFxuICAgICAgICBjb21tYW5kID0gc2VnSW5mby5jb21tYW5kLCBzZWdtZW50ID0gcGF0aFtpXSwgaW5mbztcblxuICAgIHN3aXRjaCAoY29tbWFuZCkge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICAgIHJldHVybiB7IHg6IHNlZ0luZm8ueCwgeTogc2VnSW5mby55LCBhbmdsZTogMCB9O1xuICAgICAgY2FzZSAnWic6XG4gICAgICBjYXNlICd6JzpcbiAgICAgICAgaW5mbyA9IG5ldyBmYWJyaWMuUG9pbnQoc2VnSW5mby54LCBzZWdJbmZvLnkpLmxlcnAoXG4gICAgICAgICAgbmV3IGZhYnJpYy5Qb2ludChzZWdJbmZvLmRlc3RYLCBzZWdJbmZvLmRlc3RZKSxcbiAgICAgICAgICBzZWdQZXJjZW50XG4gICAgICAgICk7XG4gICAgICAgIGluZm8uYW5nbGUgPSBNYXRoLmF0YW4yKHNlZ0luZm8uZGVzdFkgLSBzZWdJbmZvLnksIHNlZ0luZm8uZGVzdFggLSBzZWdJbmZvLngpO1xuICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgIGNhc2UgJ0wnOlxuICAgICAgICBpbmZvID0gbmV3IGZhYnJpYy5Qb2ludChzZWdJbmZvLngsIHNlZ0luZm8ueSkubGVycChcbiAgICAgICAgICBuZXcgZmFicmljLlBvaW50KHNlZ21lbnRbMV0sIHNlZ21lbnRbMl0pLFxuICAgICAgICAgIHNlZ1BlcmNlbnRcbiAgICAgICAgKTtcbiAgICAgICAgaW5mby5hbmdsZSA9IE1hdGguYXRhbjIoc2VnbWVudFsyXSAtIHNlZ0luZm8ueSwgc2VnbWVudFsxXSAtIHNlZ0luZm8ueCk7XG4gICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgY2FzZSAnQyc6XG4gICAgICAgIHJldHVybiBmaW5kUGVyY2VudGFnZUZvckRpc3RhbmNlKHNlZ0luZm8sIGRpc3RhbmNlKTtcbiAgICAgIGNhc2UgJ1EnOlxuICAgICAgICByZXR1cm4gZmluZFBlcmNlbnRhZ2VGb3JEaXN0YW5jZShzZWdJbmZvLCBkaXN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoU3RyaW5nXG4gICAqIEByZXR1cm4geyhzdHJpbmd8bnVtYmVyKVtdW119IEFuIGFycmF5IG9mIFNWRyBwYXRoIGNvbW1hbmRzXG4gICAqIEBleGFtcGxlIDxjYXB0aW9uPlVzYWdlPC9jYXB0aW9uPlxuICAgKiBwYXJzZVBhdGgoJ00gMyA0IFEgMyA1IDIgMSA0IDAgUSA5IDEyIDIgMSA0IDAnKSA9PT0gW1xuICAgKiAgIFsnTScsIDMsIDRdLFxuICAgKiAgIFsnUScsIDMsIDUsIDIsIDEsIDQsIDBdLFxuICAgKiAgIFsnUScsIDksIDEyLCAyLCAxLCA0LCAwXSxcbiAgICogXTtcbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoU3RyaW5nKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgICBjb29yZHMgPSBbXSxcbiAgICAgICAgY3VycmVudFBhdGgsXG4gICAgICAgIHBhcnNlZCxcbiAgICAgICAgcmUgPSBmYWJyaWMucmVQYXRoQ29tbWFuZCxcbiAgICAgICAgck51bWJlciA9ICdbLStdPyg/OlxcXFxkKlxcXFwuXFxcXGQrfFxcXFxkK1xcXFwuPykoPzpbZUVdWy0rXT9cXFxcZCspP1xcXFxzKicsXG4gICAgICAgIHJOdW1iZXJDb21tYVdzcCA9ICcoJyArIHJOdW1iZXIgKyAnKScgKyBmYWJyaWMuY29tbWFXc3AsXG4gICAgICAgIHJGbGFnQ29tbWFXc3AgPSAnKFswMV0pJyArIGZhYnJpYy5jb21tYVdzcCArICc/JyxcbiAgICAgICAgckFyY1NlcSA9IHJOdW1iZXJDb21tYVdzcCArICc/JyArIHJOdW1iZXJDb21tYVdzcCArICc/JyArIHJOdW1iZXJDb21tYVdzcCArIHJGbGFnQ29tbWFXc3AgKyByRmxhZ0NvbW1hV3NwICtcbiAgICAgICAgICByTnVtYmVyQ29tbWFXc3AgKyAnPygnICsgck51bWJlciArICcpJyxcbiAgICAgICAgcmVnQXJjQXJndW1lbnRTZXF1ZW5jZSA9IG5ldyBSZWdFeHAockFyY1NlcSwgJ2cnKSxcbiAgICAgICAgbWF0Y2gsXG4gICAgICAgIGNvb3Jkc1N0cixcbiAgICAgICAgLy8gb25lIG9mIGNvbW1hbmRzIChtLE0sbCxMLHEsUSxjLEMsZXRjLikgZm9sbG93ZWQgYnkgbm9uLWNvbW1hbmQgY2hhcmFjdGVycyAoaS5lLiBjb21tYW5kIHZhbHVlcylcbiAgICAgICAgcGF0aDtcbiAgICBpZiAoIXBhdGhTdHJpbmcgfHwgIXBhdGhTdHJpbmcubWF0Y2gpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHBhdGggPSBwYXRoU3RyaW5nLm1hdGNoKC9bbXpsaHZjc3F0YV1bXm16bGh2Y3NxdGFdKi9naSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgY29vcmRzUGFyc2VkLCBsZW4gPSBwYXRoLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjdXJyZW50UGF0aCA9IHBhdGhbaV07XG5cbiAgICAgIGNvb3Jkc1N0ciA9IGN1cnJlbnRQYXRoLnNsaWNlKDEpLnRyaW0oKTtcbiAgICAgIGNvb3Jkcy5sZW5ndGggPSAwO1xuXG4gICAgICB2YXIgY29tbWFuZCA9IGN1cnJlbnRQYXRoLmNoYXJBdCgwKTtcbiAgICAgIGNvb3Jkc1BhcnNlZCA9IFtjb21tYW5kXTtcblxuICAgICAgaWYgKGNvbW1hbmQudG9Mb3dlckNhc2UoKSA9PT0gJ2EnKSB7XG4gICAgICAgIC8vIGFyY3MgaGF2ZSBzcGVjaWFsIGZsYWdzIHRoYXQgYXBwYXJlbnRseSBkb24ndCByZXF1aXJlIHNwYWNlcyBzbyBoYW5kbGUgc3BlY2lhbFxuICAgICAgICBmb3IgKHZhciBhcmdzOyAoYXJncyA9IHJlZ0FyY0FyZ3VtZW50U2VxdWVuY2UuZXhlYyhjb29yZHNTdHIpKTspIHtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGFyZ3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvb3Jkcy5wdXNoKGFyZ3Nbal0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHdoaWxlICgobWF0Y2ggPSByZS5leGVjKGNvb3Jkc1N0cikpKSB7XG4gICAgICAgICAgY29vcmRzLnB1c2gobWF0Y2hbMF0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbGVuID0gY29vcmRzLmxlbmd0aDsgaiA8IGpsZW47IGorKykge1xuICAgICAgICBwYXJzZWQgPSBwYXJzZUZsb2F0KGNvb3Jkc1tqXSk7XG4gICAgICAgIGlmICghaXNOYU4ocGFyc2VkKSkge1xuICAgICAgICAgIGNvb3Jkc1BhcnNlZC5wdXNoKHBhcnNlZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGNvbW1hbmRMZW5ndGggPSBjb21tYW5kTGVuZ3Roc1tjb21tYW5kLnRvTG93ZXJDYXNlKCldLFxuICAgICAgICAgIHJlcGVhdGVkQ29tbWFuZCA9IHJlcGVhdGVkQ29tbWFuZHNbY29tbWFuZF0gfHwgY29tbWFuZDtcblxuICAgICAgaWYgKGNvb3Jkc1BhcnNlZC5sZW5ndGggLSAxID4gY29tbWFuZExlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBrID0gMSwga2xlbiA9IGNvb3Jkc1BhcnNlZC5sZW5ndGg7IGsgPCBrbGVuOyBrICs9IGNvbW1hbmRMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChbY29tbWFuZF0uY29uY2F0KGNvb3Jkc1BhcnNlZC5zbGljZShrLCBrICsgY29tbWFuZExlbmd0aCkpKTtcbiAgICAgICAgICBjb21tYW5kID0gcmVwZWF0ZWRDb21tYW5kO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0LnB1c2goY29vcmRzUGFyc2VkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKlxuICAgKlxuICAgKiBDb252ZXJ0cyBwb2ludHMgdG8gYSBzbW9vdGggU1ZHIHBhdGhcbiAgICogQHBhcmFtIHt7IHg6IG51bWJlcix5OiBudW1iZXIgfVtdfSBwb2ludHMgQXJyYXkgb2YgcG9pbnRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbY29ycmVjdGlvbl0gQXBwbHkgYSBjb3JyZWN0aW9uIHRvIHRoZSBwYXRoICh1c3VhbGx5IHdlIHVzZSBgd2lkdGggLyAxMDAwYCkuIElmIHZhbHVlIGlzIHVuZGVmaW5lZCAwIGlzIHVzZWQgYXMgdGhlIGNvcnJlY3Rpb24gdmFsdWUuXG4gICAqIEByZXR1cm4geyhzdHJpbmd8bnVtYmVyKVtdW119IEFuIGFycmF5IG9mIFNWRyBwYXRoIGNvbW1hbmRzXG4gICAqL1xuICBmdW5jdGlvbiBnZXRTbW9vdGhQYXRoRnJvbVBvaW50cyhwb2ludHMsIGNvcnJlY3Rpb24pIHtcbiAgICB2YXIgcGF0aCA9IFtdLCBpLFxuICAgICAgICBwMSA9IG5ldyBmYWJyaWMuUG9pbnQocG9pbnRzWzBdLngsIHBvaW50c1swXS55KSxcbiAgICAgICAgcDIgPSBuZXcgZmFicmljLlBvaW50KHBvaW50c1sxXS54LCBwb2ludHNbMV0ueSksXG4gICAgICAgIGxlbiA9IHBvaW50cy5sZW5ndGgsIG11bHRTaWduWCA9IDEsIG11bHRTaWduWSA9IDAsIG1hbnlQb2ludHMgPSBsZW4gPiAyO1xuICAgIGNvcnJlY3Rpb24gPSBjb3JyZWN0aW9uIHx8IDA7XG5cbiAgICBpZiAobWFueVBvaW50cykge1xuICAgICAgbXVsdFNpZ25YID0gcG9pbnRzWzJdLnggPCBwMi54ID8gLTEgOiBwb2ludHNbMl0ueCA9PT0gcDIueCA/IDAgOiAxO1xuICAgICAgbXVsdFNpZ25ZID0gcG9pbnRzWzJdLnkgPCBwMi55ID8gLTEgOiBwb2ludHNbMl0ueSA9PT0gcDIueSA/IDAgOiAxO1xuICAgIH1cbiAgICBwYXRoLnB1c2goWydNJywgcDEueCAtIG11bHRTaWduWCAqIGNvcnJlY3Rpb24sIHAxLnkgLSBtdWx0U2lnblkgKiBjb3JyZWN0aW9uXSk7XG4gICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoIXAxLmVxKHAyKSkge1xuICAgICAgICB2YXIgbWlkUG9pbnQgPSBwMS5taWRQb2ludEZyb20ocDIpO1xuICAgICAgICAvLyBwMSBpcyBvdXIgYmV6aWVyIGNvbnRyb2wgcG9pbnRcbiAgICAgICAgLy8gbWlkcG9pbnQgaXMgb3VyIGVuZHBvaW50XG4gICAgICAgIC8vIHN0YXJ0IHBvaW50IGlzIHAoaS0xKSB2YWx1ZS5cbiAgICAgICAgcGF0aC5wdXNoKFsnUScsIHAxLngsIHAxLnksIG1pZFBvaW50LngsIG1pZFBvaW50LnldKTtcbiAgICAgIH1cbiAgICAgIHAxID0gcG9pbnRzW2ldO1xuICAgICAgaWYgKChpICsgMSkgPCBwb2ludHMubGVuZ3RoKSB7XG4gICAgICAgIHAyID0gcG9pbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1hbnlQb2ludHMpIHtcbiAgICAgIG11bHRTaWduWCA9IHAxLnggPiBwb2ludHNbaSAtIDJdLnggPyAxIDogcDEueCA9PT0gcG9pbnRzW2kgLSAyXS54ID8gMCA6IC0xO1xuICAgICAgbXVsdFNpZ25ZID0gcDEueSA+IHBvaW50c1tpIC0gMl0ueSA/IDEgOiBwMS55ID09PSBwb2ludHNbaSAtIDJdLnkgPyAwIDogLTE7XG4gICAgfVxuICAgIHBhdGgucHVzaChbJ0wnLCBwMS54ICsgbXVsdFNpZ25YICogY29ycmVjdGlvbiwgcDEueSArIG11bHRTaWduWSAqIGNvcnJlY3Rpb25dKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuICAvKipcbiAgICogVHJhbnNmb3JtIGEgcGF0aCBieSB0cmFuc2Zvcm1pbmcgZWFjaCBzZWdtZW50LlxuICAgKiBpdCBoYXMgdG8gYmUgYSBzaW1wbGlmaWVkIHBhdGggb3IgaXQgd29uJ3Qgd29yay5cbiAgICogV0FSTklORzogdGhpcyBkZXBlbmRzIGZyb20gcGF0aE9mZnNldCBmb3IgY29ycmVjdCBvcGVyYXRpb25cbiAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBmYWJyaWNKUyBwYXJzZWQgYW5kIHNpbXBsaWZpZWQgcGF0aCBjb21tYW5kc1xuICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm0gbWF0cml4IHRoYXQgcmVwcmVzZW50IHRoZSB0cmFuc2Zvcm1hdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gW3BhdGhPZmZzZXRdIHRoZSBmYWJyaWMuUGF0aCBwYXRoT2Zmc2V0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwYXRoT2Zmc2V0LnhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHBhdGhPZmZzZXQueVxuICAgKiBAcmV0dXJucyB7QXJyYXl9IHRoZSB0cmFuc2Zvcm1lZCBwYXRoXG4gICAqL1xuICBmdW5jdGlvbiB0cmFuc2Zvcm1QYXRoKHBhdGgsIHRyYW5zZm9ybSwgcGF0aE9mZnNldCkge1xuICAgIGlmIChwYXRoT2Zmc2V0KSB7XG4gICAgICB0cmFuc2Zvcm0gPSBmYWJyaWMudXRpbC5tdWx0aXBseVRyYW5zZm9ybU1hdHJpY2VzKFxuICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgIFsxLCAwLCAwLCAxLCAtcGF0aE9mZnNldC54LCAtcGF0aE9mZnNldC55XVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGgubWFwKGZ1bmN0aW9uKHBhdGhTZWdtZW50KSB7XG4gICAgICB2YXIgbmV3U2VnbWVudCA9IHBhdGhTZWdtZW50LnNsaWNlKDApLCBwb2ludCA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwYXRoU2VnbWVudC5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICAgICAgcG9pbnQueCA9IHBhdGhTZWdtZW50W2ldO1xuICAgICAgICBwb2ludC55ID0gcGF0aFNlZ21lbnRbaSArIDFdO1xuICAgICAgICBwb2ludCA9IGZhYnJpYy51dGlsLnRyYW5zZm9ybVBvaW50KHBvaW50LCB0cmFuc2Zvcm0pO1xuICAgICAgICBuZXdTZWdtZW50W2ldID0gcG9pbnQueDtcbiAgICAgICAgbmV3U2VnbWVudFtpICsgMV0gPSBwb2ludC55O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld1NlZ21lbnQ7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSm9pbiBwYXRoIGNvbW1hbmRzIHRvIGdvIGJhY2sgdG8gc3ZnIGZvcm1hdFxuICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoRGF0YSBmYWJyaWNKUyBwYXJzZWQgcGF0aCBjb21tYW5kc1xuICAgKiBAcmV0dXJuIHtTdHJpbmd9IGpvaW5lZCBwYXRoICdNIDAgMCBMIDIwIDMwJ1xuICAgKi9cbiAgZmFicmljLnV0aWwuam9pblBhdGggPSBmdW5jdGlvbihwYXRoRGF0YSkge1xuICAgIHJldHVybiBwYXRoRGF0YS5tYXAoZnVuY3Rpb24gKHNlZ21lbnQpIHsgcmV0dXJuIHNlZ21lbnQuam9pbignICcpOyB9KS5qb2luKCcgJyk7XG4gIH07XG4gIGZhYnJpYy51dGlsLnBhcnNlUGF0aCA9IHBhcnNlUGF0aDtcbiAgZmFicmljLnV0aWwubWFrZVBhdGhTaW1wbGVyID0gbWFrZVBhdGhTaW1wbGVyO1xuICBmYWJyaWMudXRpbC5nZXRTbW9vdGhQYXRoRnJvbVBvaW50cyA9IGdldFNtb290aFBhdGhGcm9tUG9pbnRzO1xuICBmYWJyaWMudXRpbC5nZXRQYXRoU2VnbWVudHNJbmZvID0gZ2V0UGF0aFNlZ21lbnRzSW5mbztcbiAgZmFicmljLnV0aWwuZ2V0Qm91bmRzT2ZDdXJ2ZSA9IGdldEJvdW5kc09mQ3VydmU7XG4gIGZhYnJpYy51dGlsLmdldFBvaW50T25QYXRoID0gZ2V0UG9pbnRPblBhdGg7XG4gIGZhYnJpYy51dGlsLnRyYW5zZm9ybVBhdGggPSB0cmFuc2Zvcm1QYXRoO1xufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4gIC8qKlxuICAgKiBJbnZva2VzIG1ldGhvZCBvbiBhbGwgaXRlbXMgaW4gYSBnaXZlbiBhcnJheVxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuYXJyYXlcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgQXJyYXkgdG8gaXRlcmF0ZSBvdmVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgTmFtZSBvZiBhIG1ldGhvZCB0byBpbnZva2VcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBmdW5jdGlvbiBpbnZva2UoYXJyYXksIG1ldGhvZCkge1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IGFyZ3MubGVuZ3RoID8gYXJyYXlbaV1bbWV0aG9kXS5hcHBseShhcnJheVtpXSwgYXJncykgOiBhcnJheVtpXVttZXRob2RdLmNhbGwoYXJyYXlbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIG1heGltdW0gdmFsdWUgaW4gYXJyYXkgKG5vdCBuZWNlc3NhcmlseSBcImZpcnN0XCIgb25lKVxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuYXJyYXlcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgQXJyYXkgdG8gaXRlcmF0ZSBvdmVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBieVByb3BlcnR5XG4gICAqIEByZXR1cm4geyp9XG4gICAqL1xuICBmdW5jdGlvbiBtYXgoYXJyYXksIGJ5UHJvcGVydHkpIHtcbiAgICByZXR1cm4gZmluZChhcnJheSwgYnlQcm9wZXJ0eSwgZnVuY3Rpb24odmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgIHJldHVybiB2YWx1ZTEgPj0gdmFsdWUyO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIG1pbmltdW0gdmFsdWUgaW4gYXJyYXkgKG5vdCBuZWNlc3NhcmlseSBcImZpcnN0XCIgb25lKVxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuYXJyYXlcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgQXJyYXkgdG8gaXRlcmF0ZSBvdmVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBieVByb3BlcnR5XG4gICAqIEByZXR1cm4geyp9XG4gICAqL1xuICBmdW5jdGlvbiBtaW4oYXJyYXksIGJ5UHJvcGVydHkpIHtcbiAgICByZXR1cm4gZmluZChhcnJheSwgYnlQcm9wZXJ0eSwgZnVuY3Rpb24odmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgIHJldHVybiB2YWx1ZTEgPCB2YWx1ZTI7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlKSB7XG4gICAgdmFyIGsgPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGstLSkge1xuICAgICAgYXJyYXlba10gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBmaW5kKGFycmF5LCBieVByb3BlcnR5LCBjb25kaXRpb24pIHtcbiAgICBpZiAoIWFycmF5IHx8IGFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpID0gYXJyYXkubGVuZ3RoIC0gMSxcbiAgICAgICAgcmVzdWx0ID0gYnlQcm9wZXJ0eSA/IGFycmF5W2ldW2J5UHJvcGVydHldIDogYXJyYXlbaV07XG4gICAgaWYgKGJ5UHJvcGVydHkpIHtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGNvbmRpdGlvbihhcnJheVtpXVtieVByb3BlcnR5XSwgcmVzdWx0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IGFycmF5W2ldW2J5UHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAoY29uZGl0aW9uKGFycmF5W2ldLCByZXN1bHQpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gYXJyYXlbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmFtZXNwYWNlIGZhYnJpYy51dGlsLmFycmF5XG4gICAqL1xuICBmYWJyaWMudXRpbC5hcnJheSA9IHtcbiAgICBmaWxsOiBmaWxsLFxuICAgIGludm9rZTogaW52b2tlLFxuICAgIG1pbjogbWluLFxuICAgIG1heDogbWF4XG4gIH07XG5cbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogQ29waWVzIGFsbCBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2Ygb25lIGpzIG9iamVjdCB0byBhbm90aGVyXG4gICAqIHRoaXMgZG9lcyBub3QgYW5kIGNhbm5vdCBjb21wZXRlIHdpdGggZ2VuZXJpYyB1dGlscy5cbiAgICogRG9lcyBub3QgY2xvbmUgb3IgZXh0ZW5kIGZhYnJpYy5PYmplY3Qgc3ViY2xhc3Nlcy5cbiAgICogVGhpcyBpcyBtb3N0bHkgZm9yIGludGVybmFsIHVzZSBhbmQgaGFzIGV4dHJhIGhhbmRsaW5nIGZvciBmYWJyaWNKUyBvYmplY3RzXG4gICAqIGl0IHNraXBzIHRoZSBjYW52YXMgYW5kIGdyb3VwIHByb3BlcnRpZXMgaW4gZGVlcCBjbG9uaW5nLlxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwub2JqZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0aW5hdGlvbiBXaGVyZSB0byBjb3B5IHRvXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgV2hlcmUgdG8gY29weSBmcm9tXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2RlZXBdIFdoZXRoZXIgdG8gZXh0ZW5kIG5lc3RlZCBvYmplY3RzXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG5cbiAgZnVuY3Rpb24gZXh0ZW5kKGRlc3RpbmF0aW9uLCBzb3VyY2UsIGRlZXApIHtcbiAgICAvLyBKU2NyaXB0IERvbnRFbnVtIGJ1ZyBpcyBub3QgdGFrZW4gY2FyZSBvZlxuICAgIC8vIHRoZSBkZWVwIGNsb25lIGlzIGZvciBpbnRlcm5hbCB1c2UsIGlzIG5vdCBtZWFudCB0byBhdm9pZFxuICAgIC8vIGphdmFzY3JpcHQgdHJhcHMgb3IgY2xvbmluZyBodG1sIGVsZW1lbnQgb3Igc2VsZiByZWZlcmVuY2VkIG9iamVjdHMuXG4gICAgaWYgKGRlZXApIHtcbiAgICAgIGlmICghZmFicmljLmlzTGlrZWx5Tm9kZSAmJiBzb3VyY2UgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgIC8vIGF2b2lkIGNsb25pbmcgZGVlcCBpbWFnZXMsIGNhbnZhc2VzLFxuICAgICAgICBkZXN0aW5hdGlvbiA9IHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGRlc3RpbmF0aW9uID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzb3VyY2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBkZXN0aW5hdGlvbltpXSA9IGV4dGVuZCh7IH0sIHNvdXJjZVtpXSwgZGVlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHNvdXJjZSAmJiB0eXBlb2Ygc291cmNlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICBpZiAocHJvcGVydHkgPT09ICdjYW52YXMnIHx8IHByb3BlcnR5ID09PSAnZ3JvdXAnKSB7XG4gICAgICAgICAgICAvLyB3ZSBkbyBub3Qgd2FudCB0byBjbG9uZSB0aGlzIHByb3BzIGF0IGFsbC5cbiAgICAgICAgICAgIC8vIHdlIHdhbnQgdG8ga2VlcCB0aGUga2V5cyBpbiB0aGUgY29weVxuICAgICAgICAgICAgZGVzdGluYXRpb25bcHJvcGVydHldID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoc291cmNlLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25bcHJvcGVydHldID0gZXh0ZW5kKHsgfSwgc291cmNlW3Byb3BlcnR5XSwgZGVlcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gdGhpcyBzb3VuZHMgb2RkIGZvciBhbiBleHRlbmQgYnV0IGlzIG9rIGZvciByZWN1cnNpdmUgdXNlXG4gICAgICAgIGRlc3RpbmF0aW9uID0gc291cmNlO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHNvdXJjZSkge1xuICAgICAgICBkZXN0aW5hdGlvbltwcm9wZXJ0eV0gPSBzb3VyY2VbcHJvcGVydHldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVzdGluYXRpb247XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBlbXB0eSBvYmplY3QgYW5kIGNvcGllcyBhbGwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGFub3RoZXIgb2JqZWN0IHRvIGl0XG4gICAqIFRoaXMgbWV0aG9kIGlzIG1vc3RseSBmb3IgaW50ZXJuYWwgdXNlLCBhbmQgbm90IGludGVuZGVkIGZvciBkdXBsaWNhdGluZyBzaGFwZXMgaW4gY2FudmFzLiBcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLm9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjbG9uZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtkZWVwXSBXaGV0aGVyIHRvIGNsb25lIG5lc3RlZCBvYmplY3RzXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG5cbiAgLy9UT0RPOiB0aGlzIGZ1bmN0aW9uIHJldHVybiBhbiBlbXB0eSBvYmplY3QgaWYgeW91IHRyeSB0byBjbG9uZSBudWxsXG4gIGZ1bmN0aW9uIGNsb25lKG9iamVjdCwgZGVlcCkge1xuICAgIHJldHVybiBleHRlbmQoeyB9LCBvYmplY3QsIGRlZXApO1xuICB9XG5cbiAgLyoqIEBuYW1lc3BhY2UgZmFicmljLnV0aWwub2JqZWN0ICovXG4gIGZhYnJpYy51dGlsLm9iamVjdCA9IHtcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBjbG9uZTogY2xvbmVcbiAgfTtcbiAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMudXRpbCwgZmFicmljLk9ic2VydmFibGUpO1xufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgLyoqXG4gICAqIENhbWVsaXplcyBhIHN0cmluZ1xuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuc3RyaW5nXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGNhbWVsaXplXG4gICAqIEByZXR1cm4ge1N0cmluZ30gQ2FtZWxpemVkIHZlcnNpb24gb2YgYSBzdHJpbmdcbiAgICovXG4gIGZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLSsoLik/L2csIGZ1bmN0aW9uKG1hdGNoLCBjaGFyYWN0ZXIpIHtcbiAgICAgIHJldHVybiBjaGFyYWN0ZXIgPyBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKSA6ICcnO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhcGl0YWxpemVzIGEgc3RyaW5nXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5zdHJpbmdcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gY2FwaXRhbGl6ZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtmaXJzdExldHRlck9ubHldIElmIHRydWUgb25seSBmaXJzdCBsZXR0ZXIgaXMgY2FwaXRhbGl6ZWRcbiAgICogYW5kIG90aGVyIGxldHRlcnMgc3RheSB1bnRvdWNoZWQsIGlmIGZhbHNlIGZpcnN0IGxldHRlciBpcyBjYXBpdGFsaXplZFxuICAgKiBhbmQgb3RoZXIgbGV0dGVycyBhcmUgY29udmVydGVkIHRvIGxvd2VyY2FzZS5cbiAgICogQHJldHVybiB7U3RyaW5nfSBDYXBpdGFsaXplZCB2ZXJzaW9uIG9mIGEgc3RyaW5nXG4gICAqL1xuICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZywgZmlyc3RMZXR0ZXJPbmx5KSB7XG4gICAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArXG4gICAgICAoZmlyc3RMZXR0ZXJPbmx5ID8gc3RyaW5nLnNsaWNlKDEpIDogc3RyaW5nLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVzY2FwZXMgWE1MIGluIGEgc3RyaW5nXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5zdHJpbmdcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gZXNjYXBlXG4gICAqIEByZXR1cm4ge1N0cmluZ30gRXNjYXBlZCB2ZXJzaW9uIG9mIGEgc3RyaW5nXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVYbWwoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8mL2csICcmYW1wOycpXG4gICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXG4gICAgICAucmVwbGFjZSgvJy9nLCAnJmFwb3M7JylcbiAgICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XG4gIH1cblxuICAvKipcbiAgICogRGl2aWRlIGEgc3RyaW5nIGluIHRoZSB1c2VyIHBlcmNlaXZlZCBzaW5nbGUgdW5pdHNcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLnN0cmluZ1xuICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dHN0cmluZyBTdHJpbmcgdG8gZXNjYXBlXG4gICAqIEByZXR1cm4ge0FycmF5fSBhcnJheSBjb250YWluaW5nIHRoZSBncmFwaGVtZXNcbiAgICovXG4gIGZ1bmN0aW9uIGdyYXBoZW1lU3BsaXQodGV4dHN0cmluZykge1xuICAgIHZhciBpID0gMCwgY2hyLCBncmFwaGVtZXMgPSBbXTtcbiAgICBmb3IgKGkgPSAwLCBjaHI7IGkgPCB0ZXh0c3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoKGNociA9IGdldFdob2xlQ2hhcih0ZXh0c3RyaW5nLCBpKSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZ3JhcGhlbWVzLnB1c2goY2hyKTtcbiAgICB9XG4gICAgcmV0dXJuIGdyYXBoZW1lcztcbiAgfVxuXG4gIC8vIHRha2VuIGZyb20gbWRuIGluIHRoZSBjaGFyQXQgZG9jIHBhZ2UuXG4gIGZ1bmN0aW9uIGdldFdob2xlQ2hhcihzdHIsIGkpIHtcbiAgICB2YXIgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXG4gICAgaWYgKGlzTmFOKGNvZGUpKSB7XG4gICAgICByZXR1cm4gJyc7IC8vIFBvc2l0aW9uIG5vdCBmb3VuZFxuICAgIH1cbiAgICBpZiAoY29kZSA8IDB4RDgwMCB8fCBjb2RlID4gMHhERkZGKSB7XG4gICAgICByZXR1cm4gc3RyLmNoYXJBdChpKTtcbiAgICB9XG5cbiAgICAvLyBIaWdoIHN1cnJvZ2F0ZSAoY291bGQgY2hhbmdlIGxhc3QgaGV4IHRvIDB4REI3RiB0byB0cmVhdCBoaWdoIHByaXZhdGVcbiAgICAvLyBzdXJyb2dhdGVzIGFzIHNpbmdsZSBjaGFyYWN0ZXJzKVxuICAgIGlmICgweEQ4MDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4REJGRikge1xuICAgICAgaWYgKHN0ci5sZW5ndGggPD0gKGkgKyAxKSkge1xuICAgICAgICB0aHJvdyAnSGlnaCBzdXJyb2dhdGUgd2l0aG91dCBmb2xsb3dpbmcgbG93IHN1cnJvZ2F0ZSc7XG4gICAgICB9XG4gICAgICB2YXIgbmV4dCA9IHN0ci5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgIGlmICgweERDMDAgPiBuZXh0IHx8IG5leHQgPiAweERGRkYpIHtcbiAgICAgICAgdGhyb3cgJ0hpZ2ggc3Vycm9nYXRlIHdpdGhvdXQgZm9sbG93aW5nIGxvdyBzdXJyb2dhdGUnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0ci5jaGFyQXQoaSkgKyBzdHIuY2hhckF0KGkgKyAxKTtcbiAgICB9XG4gICAgLy8gTG93IHN1cnJvZ2F0ZSAoMHhEQzAwIDw9IGNvZGUgJiYgY29kZSA8PSAweERGRkYpXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHRocm93ICdMb3cgc3Vycm9nYXRlIHdpdGhvdXQgcHJlY2VkaW5nIGhpZ2ggc3Vycm9nYXRlJztcbiAgICB9XG4gICAgdmFyIHByZXYgPSBzdHIuY2hhckNvZGVBdChpIC0gMSk7XG5cbiAgICAvLyAoY291bGQgY2hhbmdlIGxhc3QgaGV4IHRvIDB4REI3RiB0byB0cmVhdCBoaWdoIHByaXZhdGVcbiAgICAvLyBzdXJyb2dhdGVzIGFzIHNpbmdsZSBjaGFyYWN0ZXJzKVxuICAgIGlmICgweEQ4MDAgPiBwcmV2IHx8IHByZXYgPiAweERCRkYpIHtcbiAgICAgIHRocm93ICdMb3cgc3Vycm9nYXRlIHdpdGhvdXQgcHJlY2VkaW5nIGhpZ2ggc3Vycm9nYXRlJztcbiAgICB9XG4gICAgLy8gV2UgY2FuIHBhc3Mgb3ZlciBsb3cgc3Vycm9nYXRlcyBub3cgYXMgdGhlIHNlY29uZCBjb21wb25lbnRcbiAgICAvLyBpbiBhIHBhaXIgd2hpY2ggd2UgaGF2ZSBhbHJlYWR5IHByb2Nlc3NlZFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFN0cmluZyB1dGlsaXRpZXNcbiAgICogQG5hbWVzcGFjZSBmYWJyaWMudXRpbC5zdHJpbmdcbiAgICovXG4gIGZhYnJpYy51dGlsLnN0cmluZyA9IHtcbiAgICBjYW1lbGl6ZTogY2FtZWxpemUsXG4gICAgY2FwaXRhbGl6ZTogY2FwaXRhbGl6ZSxcbiAgICBlc2NhcGVYbWw6IGVzY2FwZVhtbCxcbiAgICBncmFwaGVtZVNwbGl0OiBncmFwaGVtZVNwbGl0XG4gIH07XG59KSgpO1xuXG5cbihmdW5jdGlvbigpIHtcblxuICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UsIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbigpIHsgfSxcblxuICAgICAgSVNfRE9OVEVOVU1fQlVHR1kgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIHAgaW4geyB0b1N0cmluZzogMSB9KSB7XG4gICAgICAgICAgaWYgKHAgPT09ICd0b1N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KSgpLFxuXG4gICAgICAvKiogQGlnbm9yZSAqL1xuICAgICAgYWRkTWV0aG9kcyA9IGZ1bmN0aW9uKGtsYXNzLCBzb3VyY2UsIHBhcmVudCkge1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzb3VyY2UpIHtcblxuICAgICAgICAgIGlmIChwcm9wZXJ0eSBpbiBrbGFzcy5wcm90b3R5cGUgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIGtsYXNzLnByb3RvdHlwZVtwcm9wZXJ0eV0gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgICAgKHNvdXJjZVtwcm9wZXJ0eV0gKyAnJykuaW5kZXhPZignY2FsbFN1cGVyJykgPiAtMSkge1xuXG4gICAgICAgICAgICBrbGFzcy5wcm90b3R5cGVbcHJvcGVydHldID0gKGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBzdXBlcmNsYXNzID0gdGhpcy5jb25zdHJ1Y3Rvci5zdXBlcmNsYXNzO1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3Iuc3VwZXJjbGFzcyA9IHBhcmVudDtcbiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSBzb3VyY2VbcHJvcGVydHldLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5zdXBlcmNsYXNzID0gc3VwZXJjbGFzcztcblxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gJ2luaXRpYWxpemUnKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkocHJvcGVydHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGtsYXNzLnByb3RvdHlwZVtwcm9wZXJ0eV0gPSBzb3VyY2VbcHJvcGVydHldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChJU19ET05URU5VTV9CVUdHWSkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZS50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykge1xuICAgICAgICAgICAgICBrbGFzcy5wcm90b3R5cGUudG9TdHJpbmcgPSBzb3VyY2UudG9TdHJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc291cmNlLnZhbHVlT2YgIT09IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZikge1xuICAgICAgICAgICAgICBrbGFzcy5wcm90b3R5cGUudmFsdWVPZiA9IHNvdXJjZS52YWx1ZU9mO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICBmdW5jdGlvbiBTdWJjbGFzcygpIHsgfVxuXG4gIGZ1bmN0aW9uIGNhbGxTdXBlcihtZXRob2ROYW1lKSB7XG4gICAgdmFyIHBhcmVudE1ldGhvZCA9IG51bGwsXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIC8vIGNsaW1iIHByb3RvdHlwZSBjaGFpbiB0byBmaW5kIG1ldGhvZCBub3QgZXF1YWwgdG8gY2FsbGVlJ3MgbWV0aG9kXG4gICAgd2hpbGUgKF90aGlzLmNvbnN0cnVjdG9yLnN1cGVyY2xhc3MpIHtcbiAgICAgIHZhciBzdXBlckNsYXNzTWV0aG9kID0gX3RoaXMuY29uc3RydWN0b3Iuc3VwZXJjbGFzcy5wcm90b3R5cGVbbWV0aG9kTmFtZV07XG4gICAgICBpZiAoX3RoaXNbbWV0aG9kTmFtZV0gIT09IHN1cGVyQ2xhc3NNZXRob2QpIHtcbiAgICAgICAgcGFyZW50TWV0aG9kID0gc3VwZXJDbGFzc01ldGhvZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIF90aGlzID0gX3RoaXMuY29uc3RydWN0b3Iuc3VwZXJjbGFzcy5wcm90b3R5cGU7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJlbnRNZXRob2QpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZygndHJpZWQgdG8gY2FsbFN1cGVyICcgKyBtZXRob2ROYW1lICsgJywgbWV0aG9kIG5vdCBmb3VuZCBpbiBwcm90b3R5cGUgY2hhaW4nLCB0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGFyZ3VtZW50cy5sZW5ndGggPiAxKVxuICAgICAgPyBwYXJlbnRNZXRob2QuYXBwbHkodGhpcywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKVxuICAgICAgOiBwYXJlbnRNZXRob2QuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgZm9yIGNyZWF0aW9uIG9mIFwiY2xhc3Nlc1wiLlxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3BhcmVudF0gb3B0aW9uYWwgXCJDbGFzc1wiIHRvIGluaGVyaXQgZnJvbVxuICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgc2hhcmVkIGJ5IGFsbCBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzc1xuICAgKiAgICAgICAgICAgICAgICAgIChiZSBjYXJlZnVsIG1vZGlmeWluZyBvYmplY3RzIGRlZmluZWQgaGVyZSBhcyB0aGlzIHdvdWxkIGFmZmVjdCBhbGwgaW5zdGFuY2VzKVxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlQ2xhc3MoKSB7XG4gICAgdmFyIHBhcmVudCA9IG51bGwsXG4gICAgICAgIHByb3BlcnRpZXMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICBpZiAodHlwZW9mIHByb3BlcnRpZXNbMF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBhcmVudCA9IHByb3BlcnRpZXMuc2hpZnQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24ga2xhc3MoKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBrbGFzcy5zdXBlcmNsYXNzID0gcGFyZW50O1xuICAgIGtsYXNzLnN1YmNsYXNzZXMgPSBbXTtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIFN1YmNsYXNzLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7XG4gICAgICBrbGFzcy5wcm90b3R5cGUgPSBuZXcgU3ViY2xhc3MoKTtcbiAgICAgIHBhcmVudC5zdWJjbGFzc2VzLnB1c2goa2xhc3MpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcHJvcGVydGllcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYWRkTWV0aG9kcyhrbGFzcywgcHJvcGVydGllc1tpXSwgcGFyZW50KTtcbiAgICB9XG4gICAgaWYgKCFrbGFzcy5wcm90b3R5cGUuaW5pdGlhbGl6ZSkge1xuICAgICAga2xhc3MucHJvdG90eXBlLmluaXRpYWxpemUgPSBlbXB0eUZ1bmN0aW9uO1xuICAgIH1cbiAgICBrbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBrbGFzcztcbiAgICBrbGFzcy5wcm90b3R5cGUuY2FsbFN1cGVyID0gY2FsbFN1cGVyO1xuICAgIHJldHVybiBrbGFzcztcbiAgfVxuXG4gIGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzID0gY3JlYXRlQ2xhc3M7XG59KSgpO1xuXG5cbihmdW5jdGlvbiAoKSB7XG4gIC8vIHNpbmNlIGllMTEgY2FuIHVzZSBhZGRFdmVudExpc3RlbmVyIGJ1dCB0aGV5IGRvIG5vdCBzdXBwb3J0IG9wdGlvbnMsIGkgbmVlZCB0byBjaGVja1xuICB2YXIgY291bGRVc2VBdHRhY2hFdmVudCA9ICEhZmFicmljLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLmF0dGFjaEV2ZW50LFxuICAgICAgdG91Y2hFdmVudHMgPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJ107XG4gIC8qKlxuICAgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGFuIGVsZW1lbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICAgKi9cbiAgZmFicmljLnV0aWwuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbihlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBlbGVtZW50ICYmIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIGNvdWxkVXNlQXR0YWNoRXZlbnQgPyBmYWxzZSA6IG9wdGlvbnMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIGZyb20gYW4gZWxlbWVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuICBmYWJyaWMudXRpbC5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIGVsZW1lbnQgJiYgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgY291bGRVc2VBdHRhY2hFdmVudCA/IGZhbHNlIDogb3B0aW9ucyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0VG91Y2hJbmZvKGV2ZW50KSB7XG4gICAgdmFyIHRvdWNoUHJvcCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuICAgIGlmICh0b3VjaFByb3AgJiYgdG91Y2hQcm9wWzBdKSB7XG4gICAgICByZXR1cm4gdG91Y2hQcm9wWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cblxuICBmYWJyaWMudXRpbC5nZXRQb2ludGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGV2ZW50LnRhcmdldCxcbiAgICAgICAgc2Nyb2xsID0gZmFicmljLnV0aWwuZ2V0U2Nyb2xsTGVmdFRvcChlbGVtZW50KSxcbiAgICAgICAgX2V2dCA9IGdldFRvdWNoSW5mbyhldmVudCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IF9ldnQuY2xpZW50WCArIHNjcm9sbC5sZWZ0LFxuICAgICAgeTogX2V2dC5jbGllbnRZICsgc2Nyb2xsLnRvcFxuICAgIH07XG4gIH07XG5cbiAgZmFicmljLnV0aWwuaXNUb3VjaEV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gdG91Y2hFdmVudHMuaW5kZXhPZihldmVudC50eXBlKSA+IC0xIHx8IGV2ZW50LnBvaW50ZXJUeXBlID09PSAndG91Y2gnO1xuICB9O1xufSkoKTtcblxuXG4oZnVuY3Rpb24gKCkge1xuXG4gIC8qKlxuICAgKiBDcm9zcy1icm93c2VyIHdyYXBwZXIgZm9yIHNldHRpbmcgZWxlbWVudCdzIHN0eWxlXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZXNcbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9IEVsZW1lbnQgdGhhdCB3YXMgcGFzc2VkIGFzIGEgZmlyc3QgYXJndW1lbnRcbiAgICovXG4gIGZ1bmN0aW9uIHNldFN0eWxlKGVsZW1lbnQsIHN0eWxlcykge1xuICAgIHZhciBlbGVtZW50U3R5bGUgPSBlbGVtZW50LnN0eWxlO1xuICAgIGlmICghZWxlbWVudFN0eWxlKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzdHlsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLmNzc1RleHQgKz0gJzsnICsgc3R5bGVzO1xuICAgICAgcmV0dXJuIHN0eWxlcy5pbmRleE9mKCdvcGFjaXR5JykgPiAtMVxuICAgICAgICA/IHNldE9wYWNpdHkoZWxlbWVudCwgc3R5bGVzLm1hdGNoKC9vcGFjaXR5OlxccyooXFxkP1xcLj9cXGQqKS8pWzFdKVxuICAgICAgICA6IGVsZW1lbnQ7XG4gICAgfVxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHN0eWxlcykge1xuICAgICAgaWYgKHByb3BlcnR5ID09PSAnb3BhY2l0eScpIHtcbiAgICAgICAgc2V0T3BhY2l0eShlbGVtZW50LCBzdHlsZXNbcHJvcGVydHldKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgbm9ybWFsaXplZFByb3BlcnR5ID0gKHByb3BlcnR5ID09PSAnZmxvYXQnIHx8IHByb3BlcnR5ID09PSAnY3NzRmxvYXQnKVxuICAgICAgICAgID8gKHR5cGVvZiBlbGVtZW50U3R5bGUuc3R5bGVGbG9hdCA9PT0gJ3VuZGVmaW5lZCcgPyAnY3NzRmxvYXQnIDogJ3N0eWxlRmxvYXQnKVxuICAgICAgICAgIDogcHJvcGVydHk7XG4gICAgICAgIGVsZW1lbnRTdHlsZS5zZXRQcm9wZXJ0eShub3JtYWxpemVkUHJvcGVydHksIHN0eWxlc1twcm9wZXJ0eV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHZhciBwYXJzZUVsID0gZmFicmljLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgc3VwcG9ydHNPcGFjaXR5ID0gdHlwZW9mIHBhcnNlRWwuc3R5bGUub3BhY2l0eSA9PT0gJ3N0cmluZycsXG4gICAgICBzdXBwb3J0c0ZpbHRlcnMgPSB0eXBlb2YgcGFyc2VFbC5zdHlsZS5maWx0ZXIgPT09ICdzdHJpbmcnLFxuICAgICAgcmVPcGFjaXR5ID0gL2FscGhhXFxzKlxcKFxccypvcGFjaXR5XFxzKj1cXHMqKFteXFwpXSspXFwpLyxcblxuICAgICAgLyoqIEBpZ25vcmUgKi9cbiAgICAgIHNldE9wYWNpdHkgPSBmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudDsgfTtcblxuICBpZiAoc3VwcG9ydHNPcGFjaXR5KSB7XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBzZXRPcGFjaXR5ID0gZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfTtcbiAgfVxuICBlbHNlIGlmIChzdXBwb3J0c0ZpbHRlcnMpIHtcbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIHNldE9wYWNpdHkgPSBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkge1xuICAgICAgdmFyIGVzID0gZWxlbWVudC5zdHlsZTtcbiAgICAgIGlmIChlbGVtZW50LmN1cnJlbnRTdHlsZSAmJiAhZWxlbWVudC5jdXJyZW50U3R5bGUuaGFzTGF5b3V0KSB7XG4gICAgICAgIGVzLnpvb20gPSAxO1xuICAgICAgfVxuICAgICAgaWYgKHJlT3BhY2l0eS50ZXN0KGVzLmZpbHRlcikpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSA+PSAwLjk5OTkgPyAnJyA6ICgnYWxwaGEob3BhY2l0eT0nICsgKHZhbHVlICogMTAwKSArICcpJyk7XG4gICAgICAgIGVzLmZpbHRlciA9IGVzLmZpbHRlci5yZXBsYWNlKHJlT3BhY2l0eSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVzLmZpbHRlciArPSAnIGFscGhhKG9wYWNpdHk9JyArICh2YWx1ZSAqIDEwMCkgKyAnKSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9O1xuICB9XG5cbiAgZmFicmljLnV0aWwuc2V0U3R5bGUgPSBzZXRTdHlsZTtcblxufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgdmFyIF9zbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICAvKipcbiAgICogVGFrZXMgaWQgYW5kIHJldHVybnMgYW4gZWxlbWVudCB3aXRoIHRoYXQgaWQgKGlmIG9uZSBleGlzdHMgaW4gYSBkb2N1bWVudClcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBwYXJhbSB7U3RyaW5nfEhUTUxFbGVtZW50fSBpZFxuICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudHxudWxsfVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgIHJldHVybiB0eXBlb2YgaWQgPT09ICdzdHJpbmcnID8gZmFicmljLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSA6IGlkO1xuICB9XG5cbiAgdmFyIHNsaWNlQ2FuQ29udmVydE5vZGVsaXN0cyxcbiAgICAgIC8qKlxuICAgICAgICogQ29udmVydHMgYW4gYXJyYXktbGlrZSBvYmplY3QgKGUuZy4gYXJndW1lbnRzIG9yIE5vZGVMaXN0KSB0byBhbiBhcnJheVxuICAgICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gYXJyYXlMaWtlXG4gICAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgICAqL1xuICAgICAgdG9BcnJheSA9IGZ1bmN0aW9uKGFycmF5TGlrZSkge1xuICAgICAgICByZXR1cm4gX3NsaWNlLmNhbGwoYXJyYXlMaWtlLCAwKTtcbiAgICAgIH07XG5cbiAgdHJ5IHtcbiAgICBzbGljZUNhbkNvbnZlcnROb2RlbGlzdHMgPSB0b0FycmF5KGZhYnJpYy5kb2N1bWVudC5jaGlsZE5vZGVzKSBpbnN0YW5jZW9mIEFycmF5O1xuICB9XG4gIGNhdGNoIChlcnIpIHsgfVxuXG4gIGlmICghc2xpY2VDYW5Db252ZXJ0Tm9kZWxpc3RzKSB7XG4gICAgdG9BcnJheSA9IGZ1bmN0aW9uKGFycmF5TGlrZSkge1xuICAgICAgdmFyIGFyciA9IG5ldyBBcnJheShhcnJheUxpa2UubGVuZ3RoKSwgaSA9IGFycmF5TGlrZS5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGFycltpXSA9IGFycmF5TGlrZVtpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHNwZWNpZmllZCBlbGVtZW50IHdpdGggc3BlY2lmaWVkIGF0dHJpYnV0ZXNcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0YWdOYW1lIFR5cGUgb2YgYW4gZWxlbWVudCB0byBjcmVhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFthdHRyaWJ1dGVzXSBBdHRyaWJ1dGVzIHRvIHNldCBvbiBhbiBlbGVtZW50XG4gICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBOZXdseSBjcmVhdGVkIGVsZW1lbnRcbiAgICovXG4gIGZ1bmN0aW9uIG1ha2VFbGVtZW50KHRhZ05hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgZWwgPSBmYWJyaWMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgICBmb3IgKHZhciBwcm9wIGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmIChwcm9wID09PSAnY2xhc3MnKSB7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IGF0dHJpYnV0ZXNbcHJvcF07XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChwcm9wID09PSAnZm9yJykge1xuICAgICAgICBlbC5odG1sRm9yID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUocHJvcCwgYXR0cmlidXRlc1twcm9wXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGNsYXNzIHRvIGFuIGVsZW1lbnRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBhZGQgY2xhc3MgdG9cbiAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZSBDbGFzcyB0byBhZGQgdG8gYW4gZWxlbWVudFxuICAgKi9cbiAgZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgaWYgKGVsZW1lbnQgJiYgKCcgJyArIGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnKS5pbmRleE9mKCcgJyArIGNsYXNzTmFtZSArICcgJykgPT09IC0xKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAoZWxlbWVudC5jbGFzc05hbWUgPyAnICcgOiAnJykgKyBjbGFzc05hbWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdyYXBzIGVsZW1lbnQgd2l0aCBhbm90aGVyIGVsZW1lbnRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byB3cmFwXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8U3RyaW5nfSB3cmFwcGVyIEVsZW1lbnQgdG8gd3JhcCB3aXRoXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbYXR0cmlidXRlc10gQXR0cmlidXRlcyB0byBzZXQgb24gYSB3cmFwcGVyXG4gICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSB3cmFwcGVyXG4gICAqL1xuICBmdW5jdGlvbiB3cmFwRWxlbWVudChlbGVtZW50LCB3cmFwcGVyLCBhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKHR5cGVvZiB3cmFwcGVyID09PSAnc3RyaW5nJykge1xuICAgICAgd3JhcHBlciA9IG1ha2VFbGVtZW50KHdyYXBwZXIsIGF0dHJpYnV0ZXMpO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHdyYXBwZXIsIGVsZW1lbnQpO1xuICAgIH1cbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIHJldHVybiB3cmFwcGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZWxlbWVudCBzY3JvbGwgb2Zmc2V0c1xuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIG9wZXJhdGUgb25cbiAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBsZWZ0L3RvcCB2YWx1ZXNcbiAgICovXG4gIGZ1bmN0aW9uIGdldFNjcm9sbExlZnRUb3AoZWxlbWVudCkge1xuXG4gICAgdmFyIGxlZnQgPSAwLFxuICAgICAgICB0b3AgPSAwLFxuICAgICAgICBkb2NFbGVtZW50ID0gZmFicmljLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgYm9keSA9IGZhYnJpYy5kb2N1bWVudC5ib2R5IHx8IHtcbiAgICAgICAgICBzY3JvbGxMZWZ0OiAwLCBzY3JvbGxUb3A6IDBcbiAgICAgICAgfTtcblxuICAgIC8vIFdoaWxlIGxvb3AgY2hlY2tzIChhbmQgdGhlbiBzZXRzIGVsZW1lbnQgdG8pIC5wYXJlbnROb2RlIE9SIC5ob3N0XG4gICAgLy8gIHRvIGFjY291bnQgZm9yIFNoYWRvd0RPTS4gV2Ugc3RpbGwgd2FudCB0byB0cmF2ZXJzZSB1cCBvdXQgb2YgU2hhZG93RE9NLFxuICAgIC8vICBidXQgdGhlIC5wYXJlbnROb2RlIG9mIGEgcm9vdCBTaGFkb3dET00gbm9kZSB3aWxsIGFsd2F5cyBiZSBudWxsLCBpbnN0ZWFkXG4gICAgLy8gIGl0IHNob3VsZCBiZSBhY2Nlc3NlZCB0aHJvdWdoIC5ob3N0LiBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjQ3NjU1MjgvNDM4MzkzOFxuICAgIHdoaWxlIChlbGVtZW50ICYmIChlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0KSkge1xuXG4gICAgICAvLyBTZXQgZWxlbWVudCB0byBlbGVtZW50IHBhcmVudCwgb3IgJ2hvc3QnIGluIGNhc2Ugb2YgU2hhZG93RE9NXG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQuaG9zdDtcblxuICAgICAgaWYgKGVsZW1lbnQgPT09IGZhYnJpYy5kb2N1bWVudCkge1xuICAgICAgICBsZWZ0ID0gYm9keS5zY3JvbGxMZWZ0IHx8IGRvY0VsZW1lbnQuc2Nyb2xsTGVmdCB8fCAwO1xuICAgICAgICB0b3AgPSBib2R5LnNjcm9sbFRvcCB8fCAgZG9jRWxlbWVudC5zY3JvbGxUb3AgfHwgMDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsZWZ0ICs9IGVsZW1lbnQuc2Nyb2xsTGVmdCB8fCAwO1xuICAgICAgICB0b3AgKz0gZWxlbWVudC5zY3JvbGxUb3AgfHwgMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IDEgJiYgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBsZWZ0OiBsZWZ0LCB0b3A6IHRvcCB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgb2Zmc2V0IGZvciBhIGdpdmVuIGVsZW1lbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gZ2V0IG9mZnNldCBmb3JcbiAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBcImxlZnRcIiBhbmQgXCJ0b3BcIiBwcm9wZXJ0aWVzXG4gICAqL1xuICBmdW5jdGlvbiBnZXRFbGVtZW50T2Zmc2V0KGVsZW1lbnQpIHtcbiAgICB2YXIgZG9jRWxlbSxcbiAgICAgICAgZG9jID0gZWxlbWVudCAmJiBlbGVtZW50Lm93bmVyRG9jdW1lbnQsXG4gICAgICAgIGJveCA9IHsgbGVmdDogMCwgdG9wOiAwIH0sXG4gICAgICAgIG9mZnNldCA9IHsgbGVmdDogMCwgdG9wOiAwIH0sXG4gICAgICAgIHNjcm9sbExlZnRUb3AsXG4gICAgICAgIG9mZnNldEF0dHJpYnV0ZXMgPSB7XG4gICAgICAgICAgYm9yZGVyTGVmdFdpZHRoOiAnbGVmdCcsXG4gICAgICAgICAgYm9yZGVyVG9wV2lkdGg6ICAndG9wJyxcbiAgICAgICAgICBwYWRkaW5nTGVmdDogICAgICdsZWZ0JyxcbiAgICAgICAgICBwYWRkaW5nVG9wOiAgICAgICd0b3AnXG4gICAgICAgIH07XG5cbiAgICBpZiAoIWRvYykge1xuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBhdHRyIGluIG9mZnNldEF0dHJpYnV0ZXMpIHtcbiAgICAgIG9mZnNldFtvZmZzZXRBdHRyaWJ1dGVzW2F0dHJdXSArPSBwYXJzZUludChnZXRFbGVtZW50U3R5bGUoZWxlbWVudCwgYXR0ciksIDEwKSB8fCAwO1xuICAgIH1cblxuICAgIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIGlmICggdHlwZW9mIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSAndW5kZWZpbmVkJyApIHtcbiAgICAgIGJveCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuXG4gICAgc2Nyb2xsTGVmdFRvcCA9IGdldFNjcm9sbExlZnRUb3AoZWxlbWVudCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogYm94LmxlZnQgKyBzY3JvbGxMZWZ0VG9wLmxlZnQgLSAoZG9jRWxlbS5jbGllbnRMZWZ0IHx8IDApICsgb2Zmc2V0LmxlZnQsXG4gICAgICB0b3A6IGJveC50b3AgKyBzY3JvbGxMZWZ0VG9wLnRvcCAtIChkb2NFbGVtLmNsaWVudFRvcCB8fCAwKSAgKyBvZmZzZXQudG9wXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHN0eWxlIGF0dHJpYnV0ZSB2YWx1ZSBvZiBhIGdpdmVuIGVsZW1lbnRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBnZXQgc3R5bGUgYXR0cmlidXRlIGZvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0ciBTdHlsZSBhdHRyaWJ1dGUgdG8gZ2V0IGZvciBlbGVtZW50XG4gICAqIEByZXR1cm4ge1N0cmluZ30gU3R5bGUgYXR0cmlidXRlIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKi9cbiAgdmFyIGdldEVsZW1lbnRTdHlsZTtcbiAgaWYgKGZhYnJpYy5kb2N1bWVudC5kZWZhdWx0VmlldyAmJiBmYWJyaWMuZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgIGdldEVsZW1lbnRTdHlsZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciBzdHlsZSA9IGZhYnJpYy5kb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICAgICAgcmV0dXJuIHN0eWxlID8gc3R5bGVbYXR0cl0gOiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgfVxuICBlbHNlIHtcbiAgICBnZXRFbGVtZW50U3R5bGUgPSBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnN0eWxlW2F0dHJdO1xuICAgICAgaWYgKCF2YWx1ZSAmJiBlbGVtZW50LmN1cnJlbnRTdHlsZSkge1xuICAgICAgICB2YWx1ZSA9IGVsZW1lbnQuY3VycmVudFN0eWxlW2F0dHJdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gIH1cblxuICAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdHlsZSA9IGZhYnJpYy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUsXG4gICAgICAgIHNlbGVjdFByb3AgPSAndXNlclNlbGVjdCcgaW4gc3R5bGVcbiAgICAgICAgICA/ICd1c2VyU2VsZWN0J1xuICAgICAgICAgIDogJ01velVzZXJTZWxlY3QnIGluIHN0eWxlXG4gICAgICAgICAgICA/ICdNb3pVc2VyU2VsZWN0J1xuICAgICAgICAgICAgOiAnV2Via2l0VXNlclNlbGVjdCcgaW4gc3R5bGVcbiAgICAgICAgICAgICAgPyAnV2Via2l0VXNlclNlbGVjdCdcbiAgICAgICAgICAgICAgOiAnS2h0bWxVc2VyU2VsZWN0JyBpbiBzdHlsZVxuICAgICAgICAgICAgICAgID8gJ0todG1sVXNlclNlbGVjdCdcbiAgICAgICAgICAgICAgICA6ICcnO1xuXG4gICAgLyoqXG4gICAgICogTWFrZXMgZWxlbWVudCB1bnNlbGVjdGFibGVcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gbWFrZSB1bnNlbGVjdGFibGVcbiAgICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gRWxlbWVudCB0aGF0IHdhcyBwYXNzZWQgaW5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYWtlRWxlbWVudFVuc2VsZWN0YWJsZShlbGVtZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnQub25zZWxlY3RzdGFydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZWxlbWVudC5vbnNlbGVjdHN0YXJ0ID0gZmFicmljLnV0aWwuZmFsc2VGdW5jdGlvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxlY3RQcm9wKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGVbc2VsZWN0UHJvcF0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0eXBlb2YgZWxlbWVudC51bnNlbGVjdGFibGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVsZW1lbnQudW5zZWxlY3RhYmxlID0gJ29uJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ha2VzIGVsZW1lbnQgc2VsZWN0YWJsZVxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBtYWtlIHNlbGVjdGFibGVcbiAgICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gRWxlbWVudCB0aGF0IHdhcyBwYXNzZWQgaW5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYWtlRWxlbWVudFNlbGVjdGFibGUoZWxlbWVudCkge1xuICAgICAgaWYgKHR5cGVvZiBlbGVtZW50Lm9uc2VsZWN0c3RhcnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGVsZW1lbnQub25zZWxlY3RzdGFydCA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZWN0UHJvcCkge1xuICAgICAgICBlbGVtZW50LnN0eWxlW3NlbGVjdFByb3BdID0gJyc7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0eXBlb2YgZWxlbWVudC51bnNlbGVjdGFibGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVsZW1lbnQudW5zZWxlY3RhYmxlID0gJyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICBmYWJyaWMudXRpbC5tYWtlRWxlbWVudFVuc2VsZWN0YWJsZSA9IG1ha2VFbGVtZW50VW5zZWxlY3RhYmxlO1xuICAgIGZhYnJpYy51dGlsLm1ha2VFbGVtZW50U2VsZWN0YWJsZSA9IG1ha2VFbGVtZW50U2VsZWN0YWJsZTtcbiAgfSkoKTtcblxuICBmdW5jdGlvbiBnZXROb2RlQ2FudmFzKGVsZW1lbnQpIHtcbiAgICB2YXIgaW1wbCA9IGZhYnJpYy5qc2RvbUltcGxGb3JXcmFwcGVyKGVsZW1lbnQpO1xuICAgIHJldHVybiBpbXBsLl9jYW52YXMgfHwgaW1wbC5faW1hZ2U7XG4gIH07XG5cbiAgZnVuY3Rpb24gY2xlYW5VcEpzZG9tTm9kZShlbGVtZW50KSB7XG4gICAgaWYgKCFmYWJyaWMuaXNMaWtlbHlOb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpbXBsID0gZmFicmljLmpzZG9tSW1wbEZvcldyYXBwZXIoZWxlbWVudCk7XG4gICAgaWYgKGltcGwpIHtcbiAgICAgIGltcGwuX2ltYWdlID0gbnVsbDtcbiAgICAgIGltcGwuX2NhbnZhcyA9IG51bGw7XG4gICAgICAvLyB1bnN1cmUgaWYgbmVjZXNzYXJ5XG4gICAgICBpbXBsLl9jdXJyZW50U3JjID0gbnVsbDtcbiAgICAgIGltcGwuX2F0dHJpYnV0ZXMgPSBudWxsO1xuICAgICAgaW1wbC5fY2xhc3NMaXN0ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRJbWFnZVNtb290aGluZyhjdHgsIHZhbHVlKSB7XG4gICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgfHwgY3R4LndlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZFxuICAgICAgfHwgY3R4Lm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCB8fCBjdHgubXNJbWFnZVNtb290aGluZ0VuYWJsZWQgfHwgY3R4Lm9JbWFnZVNtb290aGluZ0VuYWJsZWQ7XG4gICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldEltYWdlU21vb3RoaW5nIHNldHMgdGhlIGNvbnRleHQgaW1hZ2VTbW9vdGhpbmdFbmFibGVkIHByb3BlcnR5LlxuICAgKiBVc2VkIGJ5IGNhbnZhcyBhbmQgYnkgSW1hZ2VPYmplY3QuXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgKiBAc2luY2UgNC4wLjBcbiAgICogQHBhcmFtIHtIVE1MUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggdG8gc2V0IG9uXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWUgdHJ1ZSBvciBmYWxzZVxuICAgKi9cbiAgZmFicmljLnV0aWwuc2V0SW1hZ2VTbW9vdGhpbmcgPSBzZXRJbWFnZVNtb290aGluZztcbiAgZmFicmljLnV0aWwuZ2V0QnlJZCA9IGdldEJ5SWQ7XG4gIGZhYnJpYy51dGlsLnRvQXJyYXkgPSB0b0FycmF5O1xuICBmYWJyaWMudXRpbC5hZGRDbGFzcyA9IGFkZENsYXNzO1xuICBmYWJyaWMudXRpbC5tYWtlRWxlbWVudCA9IG1ha2VFbGVtZW50O1xuICBmYWJyaWMudXRpbC53cmFwRWxlbWVudCA9IHdyYXBFbGVtZW50O1xuICBmYWJyaWMudXRpbC5nZXRTY3JvbGxMZWZ0VG9wID0gZ2V0U2Nyb2xsTGVmdFRvcDtcbiAgZmFicmljLnV0aWwuZ2V0RWxlbWVudE9mZnNldCA9IGdldEVsZW1lbnRPZmZzZXQ7XG4gIGZhYnJpYy51dGlsLmdldE5vZGVDYW52YXMgPSBnZXROb2RlQ2FudmFzO1xuICBmYWJyaWMudXRpbC5jbGVhblVwSnNkb21Ob2RlID0gY2xlYW5VcEpzZG9tTm9kZTtcblxufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgZnVuY3Rpb24gYWRkUGFyYW1Ub1VybCh1cmwsIHBhcmFtKSB7XG4gICAgcmV0dXJuIHVybCArICgvXFw/Ly50ZXN0KHVybCkgPyAnJicgOiAnPycpICsgcGFyYW07XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eUZuKCkgeyB9XG5cbiAgLyoqXG4gICAqIENyb3NzLWJyb3dzZXIgYWJzdHJhY3Rpb24gZm9yIHNlbmRpbmcgWE1MSHR0cFJlcXVlc3RcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVVJMIHRvIHNlbmQgWE1MSHR0cFJlcXVlc3QgdG9cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMubWV0aG9kPVwiR0VUXCJdXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5wYXJhbWV0ZXJzXSBwYXJhbWV0ZXJzIHRvIGFwcGVuZCB0byB1cmwgaW4gR0VUIG9yIGluIGJvZHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmJvZHldIGJvZHkgdG8gc2VuZCB3aXRoIFBPU1Qgb3IgUFVUIHJlcXVlc3RcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5vbkNvbXBsZXRlIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIHJlcXVlc3QgaXMgY29tcGxldGVkXG4gICAqIEByZXR1cm4ge1hNTEh0dHBSZXF1ZXN0fSByZXF1ZXN0XG4gICAqL1xuICBmdW5jdGlvbiByZXF1ZXN0KHVybCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7IH0pO1xuXG4gICAgdmFyIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kID8gb3B0aW9ucy5tZXRob2QudG9VcHBlckNhc2UoKSA6ICdHRVQnLFxuICAgICAgICBvbkNvbXBsZXRlID0gb3B0aW9ucy5vbkNvbXBsZXRlIHx8IGZ1bmN0aW9uKCkgeyB9LFxuICAgICAgICB4aHIgPSBuZXcgZmFicmljLndpbmRvdy5YTUxIdHRwUmVxdWVzdCgpLFxuICAgICAgICBib2R5ID0gb3B0aW9ucy5ib2R5IHx8IG9wdGlvbnMucGFyYW1ldGVycztcblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgIG9uQ29tcGxldGUoeGhyKTtcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGVtcHR5Rm47XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChtZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICBib2R5ID0gbnVsbDtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wYXJhbWV0ZXJzID09PSAnc3RyaW5nJykge1xuICAgICAgICB1cmwgPSBhZGRQYXJhbVRvVXJsKHVybCwgb3B0aW9ucy5wYXJhbWV0ZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG5cbiAgICBpZiAobWV0aG9kID09PSAnUE9TVCcgfHwgbWV0aG9kID09PSAnUFVUJykge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcbiAgICB9XG5cbiAgICB4aHIuc2VuZChib2R5KTtcbiAgICByZXR1cm4geGhyO1xuICB9XG5cbiAgZmFicmljLnV0aWwucmVxdWVzdCA9IHJlcXVlc3Q7XG59KSgpO1xuXG5cbi8qKlxuICogV3JhcHBlciBhcm91bmQgYGNvbnNvbGUubG9nYCAod2hlbiBhdmFpbGFibGUpXG4gKiBAcGFyYW0geyp9IFt2YWx1ZXNdIFZhbHVlcyB0byBsb2dcbiAqL1xuZmFicmljLmxvZyA9IGNvbnNvbGUubG9nO1xuXG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIGBjb25zb2xlLndhcm5gICh3aGVuIGF2YWlsYWJsZSlcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlc10gVmFsdWVzIHRvIGxvZyBhcyBhIHdhcm5pbmdcbiAqL1xuZmFicmljLndhcm4gPSBjb25zb2xlLndhcm47XG5cblxuKGZ1bmN0aW9uICgpIHtcblxuICB2YXIgZXh0ZW5kID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCxcbiAgICAgIGNsb25lID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lO1xuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBBbmltYXRpb25PcHRpb25zXG4gICAqIEFuaW1hdGlvbiBvZiBhIHZhbHVlIG9yIGxpc3Qgb2YgdmFsdWVzLlxuICAgKiBXaGVuIHVzaW5nIGxpc3RzLCB0aGluayBvZiBzb21ldGhpbmcgbGlrZSB0aGlzOlxuICAgKiBmYWJyaWMudXRpbC5hbmltYXRlKHtcbiAgICogICBzdGFydFZhbHVlOiBbMSwgMiwgM10sXG4gICAqICAgZW5kVmFsdWU6IFsyLCA0LCA2XSxcbiAgICogICBvbkNoYW5nZTogZnVuY3Rpb24oW2EsIGIsIGNdKSB7XG4gICAqICAgICBjYW52YXMuem9vbVRvUG9pbnQoe3g6IGIsIHk6IGN9LCBhKVxuICAgKiAgICAgY2FudmFzLnJlbmRlckFsbCgpXG4gICAqICAgfVxuICAgKiB9KTtcbiAgICogQGV4YW1wbGVcbiAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW29uQ2hhbmdlXSBDYWxsYmFjazsgaW52b2tlZCBvbiBldmVyeSB2YWx1ZSBjaGFuZ2VcbiAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW29uQ29tcGxldGVdIENhbGxiYWNrOyBpbnZva2VkIHdoZW4gdmFsdWUgY2hhbmdlIGlzIGNvbXBsZXRlZFxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBOb3RlOiBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgYW5kIGJ5VmFsdWUgbXVzdCBtYXRjaCB0aGUgdHlwZVxuICAgKiB2YXIgYW5pbWF0aW9uT3B0aW9ucyA9IHsgc3RhcnRWYWx1ZTogMCwgZW5kVmFsdWU6IDEsIGJ5VmFsdWU6IDAuMjUgfVxuICAgKiB2YXIgYW5pbWF0aW9uT3B0aW9ucyA9IHsgc3RhcnRWYWx1ZTogWzAsIDFdLCBlbmRWYWx1ZTogWzEsIDJdLCBieVZhbHVlOiBbMC4yNSwgMC4yNV0gfVxuICAgKiBAcHJvcGVydHkge251bWJlciB8IG51bWJlcltdfSBbc3RhcnRWYWx1ZT0wXSBTdGFydGluZyB2YWx1ZVxuICAgKiBAcHJvcGVydHkge251bWJlciB8IG51bWJlcltdfSBbZW5kVmFsdWU9MTAwXSBFbmRpbmcgdmFsdWVcbiAgICogQHByb3BlcnR5IHtudW1iZXIgfCBudW1iZXJbXX0gW2J5VmFsdWU9MTAwXSBWYWx1ZSB0byBtb2RpZnkgdGhlIHByb3BlcnR5IGJ5XG4gICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtlYXNpbmddIEVhc2luZyBmdW5jdGlvblxuICAgKiBAcHJvcGVydHkge051bWJlcn0gW2R1cmF0aW9uPTUwMF0gRHVyYXRpb24gb2YgY2hhbmdlIChpbiBtcylcbiAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2Fib3J0XSBBZGRpdGlvbmFsIGZ1bmN0aW9uIHdpdGggbG9naWMuIElmIHJldHVybnMgdHJ1ZSwgYW5pbWF0aW9uIGFib3J0cy5cbiAgICpcbiAgICogQHR5cGVkZWYgeygpID0+IHZvaWR9IENhbmNlbEZ1bmN0aW9uXG4gICAqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IEFuaW1hdGlvbkN1cnJlbnRTdGF0ZVxuICAgKiBAcHJvcGVydHkge251bWJlciB8IG51bWJlcltdfSBjdXJyZW50VmFsdWUgdmFsdWUgaW4gcmFuZ2UgW2BzdGFydFZhbHVlYCwgYGVuZFZhbHVlYF1cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGNvbXBsZXRpb25SYXRlIHZhbHVlIGluIHJhbmdlIFswLCAxXVxuICAgKiBAcHJvcGVydHkge251bWJlcn0gZHVyYXRpb25SYXRlIHZhbHVlIGluIHJhbmdlIFswLCAxXVxuICAgKlxuICAgKiBAdHlwZWRlZiB7KEFuaW1hdGlvbk9wdGlvbnMgJiBBbmltYXRpb25DdXJyZW50U3RhdGUgJiB7IGNhbmNlbDogQ2FuY2VsRnVuY3Rpb24gfX0gQW5pbWF0aW9uQ29udGV4dFxuICAgKi9cblxuICAvKipcbiAgICogQXJyYXkgaG9sZGluZyBhbGwgcnVubmluZyBhbmltYXRpb25zXG4gICAqIEBtZW1iZXJvZiBmYWJyaWNcbiAgICogQHR5cGUge0FuaW1hdGlvbkNvbnRleHRbXX1cbiAgICovXG4gIHZhciBSVU5OSU5HX0FOSU1BVElPTlMgPSBbXTtcbiAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChSVU5OSU5HX0FOSU1BVElPTlMsIHtcblxuICAgIC8qKlxuICAgICAqIGNhbmNlbCBhbGwgcnVubmluZyBhbmltYXRpb25zIGF0IHRoZSBuZXh0IHJlcXVlc3RBbmltRnJhbWVcbiAgICAgKiBAcmV0dXJucyB7QW5pbWF0aW9uQ29udGV4dFtdfVxuICAgICAqL1xuICAgIGNhbmNlbEFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFuaW1hdGlvbnMgPSB0aGlzLnNwbGljZSgwKTtcbiAgICAgIGFuaW1hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIGFuaW1hdGlvbi5jYW5jZWwoKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbmNlbCBhbGwgcnVubmluZyBhbmltYXRpb25zIGF0dGFjaGVkIHRvIGNhbnZhcyBhdCB0aGUgbmV4dCByZXF1ZXN0QW5pbUZyYW1lXG4gICAgICogQHBhcmFtIHtmYWJyaWMuQ2FudmFzfSBjYW52YXNcbiAgICAgKiBAcmV0dXJucyB7QW5pbWF0aW9uQ29udGV4dFtdfVxuICAgICAqL1xuICAgIGNhbmNlbEJ5Q2FudmFzOiBmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICBpZiAoIWNhbnZhcykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgY2FuY2VsbGVkID0gdGhpcy5maWx0ZXIoZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGFuaW1hdGlvbi50YXJnZXQgPT09ICdvYmplY3QnICYmIGFuaW1hdGlvbi50YXJnZXQuY2FudmFzID09PSBjYW52YXM7XG4gICAgICB9KTtcbiAgICAgIGNhbmNlbGxlZC5mb3JFYWNoKGZ1bmN0aW9uIChhbmltYXRpb24pIHtcbiAgICAgICAgYW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2FuY2VsbGVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYW5jZWwgYWxsIHJ1bm5pbmcgYW5pbWF0aW9ucyBmb3IgdGFyZ2V0IGF0IHRoZSBuZXh0IHJlcXVlc3RBbmltRnJhbWVcbiAgICAgKiBAcGFyYW0geyp9IHRhcmdldFxuICAgICAqIEByZXR1cm5zIHtBbmltYXRpb25Db250ZXh0W119XG4gICAgICovXG4gICAgY2FuY2VsQnlUYXJnZXQ6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHZhciBjYW5jZWxsZWQgPSB0aGlzLmZpbmRBbmltYXRpb25zQnlUYXJnZXQodGFyZ2V0KTtcbiAgICAgIGNhbmNlbGxlZC5mb3JFYWNoKGZ1bmN0aW9uIChhbmltYXRpb24pIHtcbiAgICAgICAgYW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2FuY2VsbGVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Q2FuY2VsRnVuY3Rpb259IGNhbmNlbEZ1bmMgdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IGFuaW1hdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIGZpbmRBbmltYXRpb25JbmRleDogZnVuY3Rpb24gKGNhbmNlbEZ1bmMpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4T2YodGhpcy5maW5kQW5pbWF0aW9uKGNhbmNlbEZ1bmMpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0NhbmNlbEZ1bmN0aW9ufSBjYW5jZWxGdW5jIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBhbmltYXRlXG4gICAgICogQHJldHVybnMge0FuaW1hdGlvbkNvbnRleHQgfCB1bmRlZmluZWR9IGFuaW1hdGlvbidzIG9wdGlvbnMgb2JqZWN0XG4gICAgICovXG4gICAgZmluZEFuaW1hdGlvbjogZnVuY3Rpb24gKGNhbmNlbEZ1bmMpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmQoZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uLmNhbmNlbCA9PT0gY2FuY2VsRnVuYztcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IHRoZSBvYmplY3QgdGhhdCBpcyBhc3NpZ25lZCB0byB0aGUgdGFyZ2V0IHByb3BlcnR5IG9mIHRoZSBhbmltYXRpb24gY29udGV4dFxuICAgICAqIEByZXR1cm5zIHtBbmltYXRpb25Db250ZXh0W119IGFycmF5IG9mIGFuaW1hdGlvbiBvcHRpb25zIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGFyZ2V0XG4gICAgICovXG4gICAgZmluZEFuaW1hdGlvbnNCeVRhcmdldDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uIChhbmltYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbi50YXJnZXQgPT09IHRhcmdldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0RWFzaW5nKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gLWMgKiBNYXRoLmNvcyh0IC8gZCAqIChNYXRoLlBJIC8gMikpICsgYyArIGI7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlcyB2YWx1ZSBmcm9tIG9uZSB0byBhbm90aGVyIHdpdGhpbiBjZXJ0YWluIHBlcmlvZCBvZiB0aW1lLCBpbnZva2luZyBjYWxsYmFja3MgYXMgdmFsdWUgaXMgYmVpbmcgY2hhbmdlZC5cbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBwYXJhbSB7QW5pbWF0aW9uT3B0aW9uc30gW29wdGlvbnNdIEFuaW1hdGlvbiBvcHRpb25zXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIE5vdGU6IHN0YXJ0VmFsdWUsIGVuZFZhbHVlLCBhbmQgYnlWYWx1ZSBtdXN0IG1hdGNoIHRoZSB0eXBlXG4gICAqIGZhYnJpYy51dGlsLmFuaW1hdGUoeyBzdGFydFZhbHVlOiAwLCBlbmRWYWx1ZTogMSwgYnlWYWx1ZTogMC4yNSB9KVxuICAgKiBmYWJyaWMudXRpbC5hbmltYXRlKHsgc3RhcnRWYWx1ZTogWzAsIDFdLCBlbmRWYWx1ZTogWzEsIDJdLCBieVZhbHVlOiBbMC4yNSwgMC4yNV0gfSlcbiAgICogQHJldHVybnMge0NhbmNlbEZ1bmN0aW9ufSBjYW5jZWwgZnVuY3Rpb25cbiAgICovXG4gIGZ1bmN0aW9uIGFuaW1hdGUob3B0aW9ucykge1xuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgdmFyIGNhbmNlbCA9IGZhbHNlLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICByZW1vdmVGcm9tUmVnaXN0cnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gZmFicmljLnJ1bm5pbmdBbmltYXRpb25zLmluZGV4T2YoY29udGV4dCk7XG4gICAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgJiYgZmFicmljLnJ1bm5pbmdBbmltYXRpb25zLnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgICAgIH07XG5cbiAgICBjb250ZXh0ID0gZXh0ZW5kKGNsb25lKG9wdGlvbnMpLCB7XG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FuY2VsID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHJlbW92ZUZyb21SZWdpc3RyeSgpO1xuICAgICAgfSxcbiAgICAgIGN1cnJlbnRWYWx1ZTogJ3N0YXJ0VmFsdWUnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXJ0VmFsdWUgOiAwLFxuICAgICAgY29tcGxldGlvblJhdGU6IDAsXG4gICAgICBkdXJhdGlvblJhdGU6IDBcbiAgICB9KTtcbiAgICBmYWJyaWMucnVubmluZ0FuaW1hdGlvbnMucHVzaChjb250ZXh0KTtcblxuICAgIHJlcXVlc3RBbmltRnJhbWUoZnVuY3Rpb24odGltZXN0YW1wKSB7XG4gICAgICB2YXIgc3RhcnQgPSB0aW1lc3RhbXAgfHwgK25ldyBEYXRlKCksXG4gICAgICAgICAgZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uIHx8IDUwMCxcbiAgICAgICAgICBmaW5pc2ggPSBzdGFydCArIGR1cmF0aW9uLCB0aW1lLFxuICAgICAgICAgIG9uQ2hhbmdlID0gb3B0aW9ucy5vbkNoYW5nZSB8fCBub29wLFxuICAgICAgICAgIGFib3J0ID0gb3B0aW9ucy5hYm9ydCB8fCBub29wLFxuICAgICAgICAgIG9uQ29tcGxldGUgPSBvcHRpb25zLm9uQ29tcGxldGUgfHwgbm9vcCxcbiAgICAgICAgICBlYXNpbmcgPSBvcHRpb25zLmVhc2luZyB8fCBkZWZhdWx0RWFzaW5nLFxuICAgICAgICAgIGlzTWFueSA9ICdzdGFydFZhbHVlJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGFydFZhbHVlLmxlbmd0aCA+IDAgOiBmYWxzZSxcbiAgICAgICAgICBzdGFydFZhbHVlID0gJ3N0YXJ0VmFsdWUnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXJ0VmFsdWUgOiAwLFxuICAgICAgICAgIGVuZFZhbHVlID0gJ2VuZFZhbHVlJyBpbiBvcHRpb25zID8gb3B0aW9ucy5lbmRWYWx1ZSA6IDEwMCxcbiAgICAgICAgICBieVZhbHVlID0gb3B0aW9ucy5ieVZhbHVlIHx8IChpc01hbnkgPyBzdGFydFZhbHVlLm1hcChmdW5jdGlvbih2YWx1ZSwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIGVuZFZhbHVlW2ldIC0gc3RhcnRWYWx1ZVtpXTtcbiAgICAgICAgICB9KSA6IGVuZFZhbHVlIC0gc3RhcnRWYWx1ZSk7XG5cbiAgICAgIG9wdGlvbnMub25TdGFydCAmJiBvcHRpb25zLm9uU3RhcnQoKTtcblxuICAgICAgKGZ1bmN0aW9uIHRpY2sodGlja3RpbWUpIHtcbiAgICAgICAgdGltZSA9IHRpY2t0aW1lIHx8ICtuZXcgRGF0ZSgpO1xuICAgICAgICB2YXIgY3VycmVudFRpbWUgPSB0aW1lID4gZmluaXNoID8gZHVyYXRpb24gOiAodGltZSAtIHN0YXJ0KSxcbiAgICAgICAgICAgIHRpbWVQZXJjID0gY3VycmVudFRpbWUgLyBkdXJhdGlvbixcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpc01hbnkgPyBzdGFydFZhbHVlLm1hcChmdW5jdGlvbihfdmFsdWUsIGkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVhc2luZyhjdXJyZW50VGltZSwgc3RhcnRWYWx1ZVtpXSwgYnlWYWx1ZVtpXSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgfSkgOiBlYXNpbmcoY3VycmVudFRpbWUsIHN0YXJ0VmFsdWUsIGJ5VmFsdWUsIGR1cmF0aW9uKSxcbiAgICAgICAgICAgIHZhbHVlUGVyYyA9IGlzTWFueSA/IE1hdGguYWJzKChjdXJyZW50WzBdIC0gc3RhcnRWYWx1ZVswXSkgLyBieVZhbHVlWzBdKVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKChjdXJyZW50IC0gc3RhcnRWYWx1ZSkgLyBieVZhbHVlKTtcbiAgICAgICAgLy8gIHVwZGF0ZSBjb250ZXh0XG4gICAgICAgIGNvbnRleHQuY3VycmVudFZhbHVlID0gaXNNYW55ID8gY3VycmVudC5zbGljZSgpIDogY3VycmVudDtcbiAgICAgICAgY29udGV4dC5jb21wbGV0aW9uUmF0ZSA9IHZhbHVlUGVyYztcbiAgICAgICAgY29udGV4dC5kdXJhdGlvblJhdGUgPSB0aW1lUGVyYztcbiAgICAgICAgaWYgKGNhbmNlbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWJvcnQoY3VycmVudCwgdmFsdWVQZXJjLCB0aW1lUGVyYykpIHtcbiAgICAgICAgICByZW1vdmVGcm9tUmVnaXN0cnkoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWUgPiBmaW5pc2gpIHtcbiAgICAgICAgICAvLyAgdXBkYXRlIGNvbnRleHRcbiAgICAgICAgICBjb250ZXh0LmN1cnJlbnRWYWx1ZSA9IGlzTWFueSA/IGVuZFZhbHVlLnNsaWNlKCkgOiBlbmRWYWx1ZTtcbiAgICAgICAgICBjb250ZXh0LmNvbXBsZXRpb25SYXRlID0gMTtcbiAgICAgICAgICBjb250ZXh0LmR1cmF0aW9uUmF0ZSA9IDE7XG4gICAgICAgICAgLy8gIGV4ZWN1dGUgY2FsbGJhY2tzXG4gICAgICAgICAgb25DaGFuZ2UoaXNNYW55ID8gZW5kVmFsdWUuc2xpY2UoKSA6IGVuZFZhbHVlLCAxLCAxKTtcbiAgICAgICAgICBvbkNvbXBsZXRlKGVuZFZhbHVlLCAxLCAxKTtcbiAgICAgICAgICByZW1vdmVGcm9tUmVnaXN0cnkoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgb25DaGFuZ2UoY3VycmVudCwgdmFsdWVQZXJjLCB0aW1lUGVyYyk7XG4gICAgICAgICAgcmVxdWVzdEFuaW1GcmFtZSh0aWNrKTtcbiAgICAgICAgfVxuICAgICAgfSkoc3RhcnQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbnRleHQuY2FuY2VsO1xuICB9XG5cbiAgdmFyIF9yZXF1ZXN0QW5pbUZyYW1lID0gZmFicmljLndpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgICAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmFicmljLndpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmFicmljLndpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmFicmljLndpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmFicmljLndpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFicmljLndpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gIHZhciBfY2FuY2VsQW5pbUZyYW1lID0gZmFicmljLndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCBmYWJyaWMud2luZG93LmNsZWFyVGltZW91dDtcblxuICAvKipcbiAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHBvbHlmaWxsIGJhc2VkIG9uIGh0dHA6Ly9wYXVsaXJpc2guY29tLzIwMTEvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmcvXG4gICAqIEluIG9yZGVyIHRvIGdldCBhIHByZWNpc2Ugc3RhcnQgdGltZSwgYHJlcXVlc3RBbmltRnJhbWVgIHNob3VsZCBiZSBjYWxsZWQgYXMgYW4gZW50cnkgaW50byB0aGUgbWV0aG9kXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBpbnZva2VcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IG9wdGlvbmFsIEVsZW1lbnQgdG8gYXNzb2NpYXRlIHdpdGggYW5pbWF0aW9uXG4gICAqL1xuICBmdW5jdGlvbiByZXF1ZXN0QW5pbUZyYW1lKCkge1xuICAgIHJldHVybiBfcmVxdWVzdEFuaW1GcmFtZS5hcHBseShmYWJyaWMud2luZG93LCBhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsQW5pbUZyYW1lKCkge1xuICAgIHJldHVybiBfY2FuY2VsQW5pbUZyYW1lLmFwcGx5KGZhYnJpYy53aW5kb3csIGFyZ3VtZW50cyk7XG4gIH1cblxuICBmYWJyaWMudXRpbC5hbmltYXRlID0gYW5pbWF0ZTtcbiAgZmFicmljLnV0aWwucmVxdWVzdEFuaW1GcmFtZSA9IHJlcXVlc3RBbmltRnJhbWU7XG4gIGZhYnJpYy51dGlsLmNhbmNlbEFuaW1GcmFtZSA9IGNhbmNlbEFuaW1GcmFtZTtcbiAgZmFicmljLnJ1bm5pbmdBbmltYXRpb25zID0gUlVOTklOR19BTklNQVRJT05TO1xufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG4gIC8vIENhbGN1bGF0ZSBhbiBpbi1iZXR3ZWVuIGNvbG9yLiBSZXR1cm5zIGEgXCJyZ2JhKClcIiBzdHJpbmcuXG4gIC8vIENyZWRpdDogRWR3aW4gTWFydGluIDxlZHdpbkBiaXRzdG9ybS5vcmc+XG4gIC8vICAgICAgICAgaHR0cDovL3d3dy5iaXRzdG9ybS5vcmcvanF1ZXJ5L2NvbG9yLWFuaW1hdGlvbi9qcXVlcnkuYW5pbWF0ZS1jb2xvcnMuanNcbiAgZnVuY3Rpb24gY2FsY3VsYXRlQ29sb3IoYmVnaW4sIGVuZCwgcG9zKSB7XG4gICAgdmFyIGNvbG9yID0gJ3JnYmEoJ1xuICAgICAgICArIHBhcnNlSW50KChiZWdpblswXSArIHBvcyAqIChlbmRbMF0gLSBiZWdpblswXSkpLCAxMCkgKyAnLCdcbiAgICAgICAgKyBwYXJzZUludCgoYmVnaW5bMV0gKyBwb3MgKiAoZW5kWzFdIC0gYmVnaW5bMV0pKSwgMTApICsgJywnXG4gICAgICAgICsgcGFyc2VJbnQoKGJlZ2luWzJdICsgcG9zICogKGVuZFsyXSAtIGJlZ2luWzJdKSksIDEwKTtcblxuICAgIGNvbG9yICs9ICcsJyArIChiZWdpbiAmJiBlbmQgPyBwYXJzZUZsb2F0KGJlZ2luWzNdICsgcG9zICogKGVuZFszXSAtIGJlZ2luWzNdKSkgOiAxKTtcbiAgICBjb2xvciArPSAnKSc7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIGNvbG9yIGZyb20gb25lIHRvIGFub3RoZXIgd2l0aGluIGNlcnRhaW4gcGVyaW9kIG9mIHRpbWUsIGludm9raW5nIGNhbGxiYWNrcyBhcyB2YWx1ZSBpcyBiZWluZyBjaGFuZ2VkLlxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtTdHJpbmd9IGZyb21Db2xvciBUaGUgc3RhcnRpbmcgY29sb3IgaW4gaGV4IG9yIHJnYihhKSBmb3JtYXQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0b0NvbG9yIFRoZSBzdGFydGluZyBjb2xvciBpbiBoZXggb3IgcmdiKGEpIGZvcm1hdC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtkdXJhdGlvbl0gRHVyYXRpb24gb2YgY2hhbmdlIChpbiBtcykuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gQW5pbWF0aW9uIG9wdGlvbnNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMub25DaGFuZ2VdIENhbGxiYWNrOyBpbnZva2VkIG9uIGV2ZXJ5IHZhbHVlIGNoYW5nZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5vbkNvbXBsZXRlXSBDYWxsYmFjazsgaW52b2tlZCB3aGVuIHZhbHVlIGNoYW5nZSBpcyBjb21wbGV0ZWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuY29sb3JFYXNpbmddIEVhc2luZyBmdW5jdGlvbi4gTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gb25seSB0YWtlIHR3byBhcmd1bWVudHMgKGN1cnJlbnRUaW1lLCBkdXJhdGlvbikuIFRodXMgdGhlIHJlZ3VsYXIgYW5pbWF0aW9uIGVhc2luZyBmdW5jdGlvbnMgY2Fubm90IGJlIHVzZWQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmFib3J0XSBBZGRpdGlvbmFsIGZ1bmN0aW9uIHdpdGggbG9naWMuIElmIHJldHVybnMgdHJ1ZSwgb25Db21wbGV0ZSBpcyBjYWxsZWQuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYWJvcnQgZnVuY3Rpb25cbiAgICovXG4gIGZ1bmN0aW9uIGFuaW1hdGVDb2xvcihmcm9tQ29sb3IsIHRvQ29sb3IsIGR1cmF0aW9uLCBvcHRpb25zKSB7XG4gICAgdmFyIHN0YXJ0Q29sb3IgPSBuZXcgZmFicmljLkNvbG9yKGZyb21Db2xvcikuZ2V0U291cmNlKCksXG4gICAgICAgIGVuZENvbG9yID0gbmV3IGZhYnJpYy5Db2xvcih0b0NvbG9yKS5nZXRTb3VyY2UoKSxcbiAgICAgICAgb3JpZ2luYWxPbkNvbXBsZXRlID0gb3B0aW9ucy5vbkNvbXBsZXRlLFxuICAgICAgICBvcmlnaW5hbE9uQ2hhbmdlID0gb3B0aW9ucy5vbkNoYW5nZTtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIHJldHVybiBmYWJyaWMudXRpbC5hbmltYXRlKGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQob3B0aW9ucywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uIHx8IDUwMCxcbiAgICAgIHN0YXJ0VmFsdWU6IHN0YXJ0Q29sb3IsXG4gICAgICBlbmRWYWx1ZTogZW5kQ29sb3IsXG4gICAgICBieVZhbHVlOiBlbmRDb2xvcixcbiAgICAgIGVhc2luZzogZnVuY3Rpb24gKGN1cnJlbnRUaW1lLCBzdGFydFZhbHVlLCBieVZhbHVlLCBkdXJhdGlvbikge1xuICAgICAgICB2YXIgcG9zVmFsdWUgPSBvcHRpb25zLmNvbG9yRWFzaW5nXG4gICAgICAgICAgPyBvcHRpb25zLmNvbG9yRWFzaW5nKGN1cnJlbnRUaW1lLCBkdXJhdGlvbilcbiAgICAgICAgICA6IDEgLSBNYXRoLmNvcyhjdXJyZW50VGltZSAvIGR1cmF0aW9uICogKE1hdGguUEkgLyAyKSk7XG4gICAgICAgIHJldHVybiBjYWxjdWxhdGVDb2xvcihzdGFydFZhbHVlLCBieVZhbHVlLCBwb3NWYWx1ZSk7XG4gICAgICB9LFxuICAgICAgLy8gaGFzIHRvIHRha2UgaW4gYWNjb3VudCBmb3IgY29sb3IgcmVzdG9yaW5nO1xuICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24oY3VycmVudCwgdmFsdWVQZXJjLCB0aW1lUGVyYykge1xuICAgICAgICBpZiAob3JpZ2luYWxPbkNvbXBsZXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9yaWdpbmFsT25Db21wbGV0ZShcbiAgICAgICAgICAgIGNhbGN1bGF0ZUNvbG9yKGVuZENvbG9yLCBlbmRDb2xvciwgMCksXG4gICAgICAgICAgICB2YWx1ZVBlcmMsXG4gICAgICAgICAgICB0aW1lUGVyY1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb24oY3VycmVudCwgdmFsdWVQZXJjLCB0aW1lUGVyYykge1xuICAgICAgICBpZiAob3JpZ2luYWxPbkNoYW5nZSkge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxPbkNoYW5nZShcbiAgICAgICAgICAgICAgY2FsY3VsYXRlQ29sb3IoY3VycmVudCwgY3VycmVudCwgMCksXG4gICAgICAgICAgICAgIHZhbHVlUGVyYyxcbiAgICAgICAgICAgICAgdGltZVBlcmNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9yaWdpbmFsT25DaGFuZ2UoY3VycmVudCwgdmFsdWVQZXJjLCB0aW1lUGVyYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cblxuICBmYWJyaWMudXRpbC5hbmltYXRlQ29sb3IgPSBhbmltYXRlQ29sb3I7XG5cbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZShhLCBjLCBwLCBzKSB7XG4gICAgaWYgKGEgPCBNYXRoLmFicyhjKSkge1xuICAgICAgYSA9IGM7XG4gICAgICBzID0gcCAvIDQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy9oYW5kbGUgdGhlIDAvMCBjYXNlOlxuICAgICAgaWYgKGMgPT09IDAgJiYgYSA9PT0gMCkge1xuICAgICAgICBzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oMSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKGMgLyBhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgYTogYSwgYzogYywgcDogcCwgczogcyB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZWxhc3RpYyhvcHRzLCB0LCBkKSB7XG4gICAgcmV0dXJuIG9wdHMuYSAqXG4gICAgICBNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqXG4gICAgICBNYXRoLnNpbiggKHQgKiBkIC0gb3B0cy5zKSAqICgyICogTWF0aC5QSSkgLyBvcHRzLnAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdWJpYyBlYXNpbmcgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlT3V0Q3ViaWModCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiB0ICsgMSkgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1YmljIGVhc2luZyBpbiBhbmQgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5PdXRDdWJpYyh0LCBiLCBjLCBkKSB7XG4gICAgdCAvPSBkIC8gMjtcbiAgICBpZiAodCA8IDEpIHtcbiAgICAgIHJldHVybiBjIC8gMiAqIHQgKiB0ICogdCArIGI7XG4gICAgfVxuICAgIHJldHVybiBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICsgMikgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIFF1YXJ0aWMgZWFzaW5nIGluXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5RdWFydCh0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKiB0ICogdCArIGI7XG4gIH1cblxuICAvKipcbiAgICogUXVhcnRpYyBlYXNpbmcgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlT3V0UXVhcnQodCwgYiwgYywgZCkge1xuICAgIHJldHVybiAtYyAqICgodCA9IHQgLyBkIC0gMSkgKiB0ICogdCAqIHQgLSAxKSArIGI7XG4gIH1cblxuICAvKipcbiAgICogUXVhcnRpYyBlYXNpbmcgaW4gYW5kIG91dFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZUluT3V0UXVhcnQodCwgYiwgYywgZCkge1xuICAgIHQgLz0gZCAvIDI7XG4gICAgaWYgKHQgPCAxKSB7XG4gICAgICByZXR1cm4gYyAvIDIgKiB0ICogdCAqIHQgKiB0ICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIC1jIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAtIDIpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWludGljIGVhc2luZyBpblxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZUluUXVpbnQodCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCAqIHQgKiB0ICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWludGljIGVhc2luZyBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VPdXRRdWludCh0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKiB0ICogdCArIDEpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWludGljIGVhc2luZyBpbiBhbmQgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5PdXRRdWludCh0LCBiLCBjLCBkKSB7XG4gICAgdCAvPSBkIC8gMjtcbiAgICBpZiAodCA8IDEpIHtcbiAgICAgIHJldHVybiBjIC8gMiAqIHQgKiB0ICogdCAqIHQgKiB0ICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIGMgLyAyICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaW51c29pZGFsIGVhc2luZyBpblxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZUluU2luZSh0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIC1jICogTWF0aC5jb3ModCAvIGQgKiAoTWF0aC5QSSAvIDIpKSArIGMgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpbnVzb2lkYWwgZWFzaW5nIG91dFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZU91dFNpbmUodCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjICogTWF0aC5zaW4odCAvIGQgKiAoTWF0aC5QSSAvIDIpKSArIGI7XG4gIH1cblxuICAvKipcbiAgICogU2ludXNvaWRhbCBlYXNpbmcgaW4gYW5kIG91dFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZUluT3V0U2luZSh0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIC1jIC8gMiAqIChNYXRoLmNvcyhNYXRoLlBJICogdCAvIGQpIC0gMSkgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9uZW50aWFsIGVhc2luZyBpblxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZUluRXhwbyh0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuICh0ID09PSAwKSA/IGIgOiBjICogTWF0aC5wb3coMiwgMTAgKiAodCAvIGQgLSAxKSkgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9uZW50aWFsIGVhc2luZyBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VPdXRFeHBvKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gKHQgPT09IGQpID8gYiArIGMgOiBjICogKC1NYXRoLnBvdygyLCAtMTAgKiB0IC8gZCkgKyAxKSArIGI7XG4gIH1cblxuICAvKipcbiAgICogRXhwb25lbnRpYWwgZWFzaW5nIGluIGFuZCBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VJbk91dEV4cG8odCwgYiwgYywgZCkge1xuICAgIGlmICh0ID09PSAwKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgaWYgKHQgPT09IGQpIHtcbiAgICAgIHJldHVybiBiICsgYztcbiAgICB9XG4gICAgdCAvPSBkIC8gMjtcbiAgICBpZiAodCA8IDEpIHtcbiAgICAgIHJldHVybiBjIC8gMiAqIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSkgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gYyAvIDIgKiAoLU1hdGgucG93KDIsIC0xMCAqIC0tdCkgKyAyKSArIGI7XG4gIH1cblxuICAvKipcbiAgICogQ2lyY3VsYXIgZWFzaW5nIGluXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5DaXJjKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gLWMgKiAoTWF0aC5zcXJ0KDEgLSAodCAvPSBkKSAqIHQpIC0gMSkgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIENpcmN1bGFyIGVhc2luZyBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VPdXRDaXJjKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gYyAqIE1hdGguc3FydCgxIC0gKHQgPSB0IC8gZCAtIDEpICogdCkgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIENpcmN1bGFyIGVhc2luZyBpbiBhbmQgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5PdXRDaXJjKHQsIGIsIGMsIGQpIHtcbiAgICB0IC89IGQgLyAyO1xuICAgIGlmICh0IDwgMSkge1xuICAgICAgcmV0dXJuIC1jIC8gMiAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIGMgLyAyICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbGFzdGljIGVhc2luZyBpblxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZUluRWxhc3RpYyh0LCBiLCBjLCBkKSB7XG4gICAgdmFyIHMgPSAxLjcwMTU4LCBwID0gMCwgYSA9IGM7XG4gICAgaWYgKHQgPT09IDApIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH1cbiAgICB0IC89IGQ7XG4gICAgaWYgKHQgPT09IDEpIHtcbiAgICAgIHJldHVybiBiICsgYztcbiAgICB9XG4gICAgaWYgKCFwKSB7XG4gICAgICBwID0gZCAqIDAuMztcbiAgICB9XG4gICAgdmFyIG9wdHMgPSBub3JtYWxpemUoYSwgYywgcCwgcyk7XG4gICAgcmV0dXJuIC1lbGFzdGljKG9wdHMsIHQsIGQpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbGFzdGljIGVhc2luZyBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VPdXRFbGFzdGljKHQsIGIsIGMsIGQpIHtcbiAgICB2YXIgcyA9IDEuNzAxNTgsIHAgPSAwLCBhID0gYztcbiAgICBpZiAodCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfVxuICAgIHQgLz0gZDtcbiAgICBpZiAodCA9PT0gMSkge1xuICAgICAgcmV0dXJuIGIgKyBjO1xuICAgIH1cbiAgICBpZiAoIXApIHtcbiAgICAgIHAgPSBkICogMC4zO1xuICAgIH1cbiAgICB2YXIgb3B0cyA9IG5vcm1hbGl6ZShhLCBjLCBwLCBzKTtcbiAgICByZXR1cm4gb3B0cy5hICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAqIGQgLSBvcHRzLnMpICogKDIgKiBNYXRoLlBJKSAvIG9wdHMucCApICsgb3B0cy5jICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbGFzdGljIGVhc2luZyBpbiBhbmQgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5PdXRFbGFzdGljKHQsIGIsIGMsIGQpIHtcbiAgICB2YXIgcyA9IDEuNzAxNTgsIHAgPSAwLCBhID0gYztcbiAgICBpZiAodCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfVxuICAgIHQgLz0gZCAvIDI7XG4gICAgaWYgKHQgPT09IDIpIHtcbiAgICAgIHJldHVybiBiICsgYztcbiAgICB9XG4gICAgaWYgKCFwKSB7XG4gICAgICBwID0gZCAqICgwLjMgKiAxLjUpO1xuICAgIH1cbiAgICB2YXIgb3B0cyA9IG5vcm1hbGl6ZShhLCBjLCBwLCBzKTtcbiAgICBpZiAodCA8IDEpIHtcbiAgICAgIHJldHVybiAtMC41ICogZWxhc3RpYyhvcHRzLCB0LCBkKSArIGI7XG4gICAgfVxuICAgIHJldHVybiBvcHRzLmEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCAtPSAxKSkgKlxuICAgICAgTWF0aC5zaW4oKHQgKiBkIC0gb3B0cy5zKSAqICgyICogTWF0aC5QSSkgLyBvcHRzLnAgKSAqIDAuNSArIG9wdHMuYyArIGI7XG4gIH1cblxuICAvKipcbiAgICogQmFja3dhcmRzIGVhc2luZyBpblxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZUluQmFjayh0LCBiLCBjLCBkLCBzKSB7XG4gICAgaWYgKHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcyA9IDEuNzAxNTg7XG4gICAgfVxuICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogKChzICsgMSkgKiB0IC0gcykgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIEJhY2t3YXJkcyBlYXNpbmcgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlT3V0QmFjayh0LCBiLCBjLCBkLCBzKSB7XG4gICAgaWYgKHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcyA9IDEuNzAxNTg7XG4gICAgfVxuICAgIHJldHVybiBjICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDEpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCYWNrd2FyZHMgZWFzaW5nIGluIGFuZCBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VJbk91dEJhY2sodCwgYiwgYywgZCwgcykge1xuICAgIGlmIChzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHMgPSAxLjcwMTU4O1xuICAgIH1cbiAgICB0IC89IGQgLyAyO1xuICAgIGlmICh0IDwgMSkge1xuICAgICAgcmV0dXJuIGMgLyAyICogKHQgKiB0ICogKCgocyAqPSAoMS41MjUpKSArIDEpICogdCAtIHMpKSArIGI7XG4gICAgfVxuICAgIHJldHVybiBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0ICsgcykgKyAyKSArIGI7XG4gIH1cblxuICAvKipcbiAgICogQm91bmNpbmcgZWFzaW5nIGluXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5Cb3VuY2UodCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjIC0gZWFzZU91dEJvdW5jZSAoZCAtIHQsIDAsIGMsIGQpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCb3VuY2luZyBlYXNpbmcgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlT3V0Qm91bmNlKHQsIGIsIGMsIGQpIHtcbiAgICBpZiAoKHQgLz0gZCkgPCAoMSAvIDIuNzUpKSB7XG4gICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiB0ICogdCkgKyBiO1xuICAgIH1cbiAgICBlbHNlIGlmICh0IDwgKDIgLyAyLjc1KSkge1xuICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gKDEuNSAvIDIuNzUpKSAqIHQgKyAwLjc1KSArIGI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHQgPCAoMi41IC8gMi43NSkpIHtcbiAgICAgIHJldHVybiBjICogKDcuNTYyNSAqICh0IC09ICgyLjI1IC8gMi43NSkpICogdCArIDAuOTM3NSkgKyBiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBjICogKDcuNTYyNSAqICh0IC09ICgyLjYyNSAvIDIuNzUpKSAqIHQgKyAwLjk4NDM3NSkgKyBiO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBCb3VuY2luZyBlYXNpbmcgaW4gYW5kIG91dFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZUluT3V0Qm91bmNlKHQsIGIsIGMsIGQpIHtcbiAgICBpZiAodCA8IGQgLyAyKSB7XG4gICAgICByZXR1cm4gZWFzZUluQm91bmNlICh0ICogMiwgMCwgYywgZCkgKiAwLjUgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gZWFzZU91dEJvdW5jZSh0ICogMiAtIGQsIDAsIGMsIGQpICogMC41ICsgYyAqIDAuNSArIGI7XG4gIH1cblxuICAvKipcbiAgICogRWFzaW5nIGZ1bmN0aW9uc1xuICAgKiBTZWUgPGEgaHJlZj1cImh0dHA6Ly9naXptYS5jb20vZWFzaW5nL1wiPkVhc2luZyBFcXVhdGlvbnMgYnkgUm9iZXJ0IFBlbm5lcjwvYT5cbiAgICogQG5hbWVzcGFjZSBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmYWJyaWMudXRpbC5lYXNlID0ge1xuXG4gICAgLyoqXG4gICAgICogUXVhZHJhdGljIGVhc2luZyBpblxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAgICovXG4gICAgZWFzZUluUXVhZDogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKyBiO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBRdWFkcmF0aWMgZWFzaW5nIG91dFxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAgICovXG4gICAgZWFzZU91dFF1YWQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgIHJldHVybiAtYyAqICh0IC89IGQpICogKHQgLSAyKSArIGI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFF1YWRyYXRpYyBlYXNpbmcgaW4gYW5kIG91dFxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAgICovXG4gICAgZWFzZUluT3V0UXVhZDogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgdCAvPSAoZCAvIDIpO1xuICAgICAgaWYgKHQgPCAxKSB7XG4gICAgICAgIHJldHVybiBjIC8gMiAqIHQgKiB0ICsgYjtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtYyAvIDIgKiAoKC0tdCkgKiAodCAtIDIpIC0gMSkgKyBiO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDdWJpYyBlYXNpbmcgaW5cbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgICAqL1xuICAgIGVhc2VJbkN1YmljOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqIHQgKyBiO1xuICAgIH0sXG5cbiAgICBlYXNlT3V0Q3ViaWM6IGVhc2VPdXRDdWJpYyxcbiAgICBlYXNlSW5PdXRDdWJpYzogZWFzZUluT3V0Q3ViaWMsXG4gICAgZWFzZUluUXVhcnQ6IGVhc2VJblF1YXJ0LFxuICAgIGVhc2VPdXRRdWFydDogZWFzZU91dFF1YXJ0LFxuICAgIGVhc2VJbk91dFF1YXJ0OiBlYXNlSW5PdXRRdWFydCxcbiAgICBlYXNlSW5RdWludDogZWFzZUluUXVpbnQsXG4gICAgZWFzZU91dFF1aW50OiBlYXNlT3V0UXVpbnQsXG4gICAgZWFzZUluT3V0UXVpbnQ6IGVhc2VJbk91dFF1aW50LFxuICAgIGVhc2VJblNpbmU6IGVhc2VJblNpbmUsXG4gICAgZWFzZU91dFNpbmU6IGVhc2VPdXRTaW5lLFxuICAgIGVhc2VJbk91dFNpbmU6IGVhc2VJbk91dFNpbmUsXG4gICAgZWFzZUluRXhwbzogZWFzZUluRXhwbyxcbiAgICBlYXNlT3V0RXhwbzogZWFzZU91dEV4cG8sXG4gICAgZWFzZUluT3V0RXhwbzogZWFzZUluT3V0RXhwbyxcbiAgICBlYXNlSW5DaXJjOiBlYXNlSW5DaXJjLFxuICAgIGVhc2VPdXRDaXJjOiBlYXNlT3V0Q2lyYyxcbiAgICBlYXNlSW5PdXRDaXJjOiBlYXNlSW5PdXRDaXJjLFxuICAgIGVhc2VJbkVsYXN0aWM6IGVhc2VJbkVsYXN0aWMsXG4gICAgZWFzZU91dEVsYXN0aWM6IGVhc2VPdXRFbGFzdGljLFxuICAgIGVhc2VJbk91dEVsYXN0aWM6IGVhc2VJbk91dEVsYXN0aWMsXG4gICAgZWFzZUluQmFjazogZWFzZUluQmFjayxcbiAgICBlYXNlT3V0QmFjazogZWFzZU91dEJhY2ssXG4gICAgZWFzZUluT3V0QmFjazogZWFzZUluT3V0QmFjayxcbiAgICBlYXNlSW5Cb3VuY2U6IGVhc2VJbkJvdW5jZSxcbiAgICBlYXNlT3V0Qm91bmNlOiBlYXNlT3V0Qm91bmNlLFxuICAgIGVhc2VJbk91dEJvdW5jZTogZWFzZUluT3V0Qm91bmNlXG4gIH07XG5cbn0pKCk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQG5hbWUgZmFicmljXG4gICAqIEBuYW1lc3BhY2VcbiAgICovXG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZXh0ZW5kID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCxcbiAgICAgIGNsb25lID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lLFxuICAgICAgdG9GaXhlZCA9IGZhYnJpYy51dGlsLnRvRml4ZWQsXG4gICAgICBwYXJzZVVuaXQgPSBmYWJyaWMudXRpbC5wYXJzZVVuaXQsXG4gICAgICBtdWx0aXBseVRyYW5zZm9ybU1hdHJpY2VzID0gZmFicmljLnV0aWwubXVsdGlwbHlUcmFuc2Zvcm1NYXRyaWNlcyxcblxuICAgICAgc3ZnVmFsaWRUYWdOYW1lcyA9IFsncGF0aCcsICdjaXJjbGUnLCAncG9seWdvbicsICdwb2x5bGluZScsICdlbGxpcHNlJywgJ3JlY3QnLCAnbGluZScsXG4gICAgICAgICdpbWFnZScsICd0ZXh0J10sXG4gICAgICBzdmdWaWV3Qm94RWxlbWVudHMgPSBbJ3N5bWJvbCcsICdpbWFnZScsICdtYXJrZXInLCAncGF0dGVybicsICd2aWV3JywgJ3N2ZyddLFxuICAgICAgc3ZnSW52YWxpZEFuY2VzdG9ycyA9IFsncGF0dGVybicsICdkZWZzJywgJ3N5bWJvbCcsICdtZXRhZGF0YScsICdjbGlwUGF0aCcsICdtYXNrJywgJ2Rlc2MnXSxcbiAgICAgIHN2Z1ZhbGlkUGFyZW50cyA9IFsnc3ltYm9sJywgJ2cnLCAnYScsICdzdmcnLCAnY2xpcFBhdGgnLCAnZGVmcyddLFxuXG4gICAgICBhdHRyaWJ1dGVzTWFwID0ge1xuICAgICAgICBjeDogICAgICAgICAgICAgICAgICAgJ2xlZnQnLFxuICAgICAgICB4OiAgICAgICAgICAgICAgICAgICAgJ2xlZnQnLFxuICAgICAgICByOiAgICAgICAgICAgICAgICAgICAgJ3JhZGl1cycsXG4gICAgICAgIGN5OiAgICAgICAgICAgICAgICAgICAndG9wJyxcbiAgICAgICAgeTogICAgICAgICAgICAgICAgICAgICd0b3AnLFxuICAgICAgICBkaXNwbGF5OiAgICAgICAgICAgICAgJ3Zpc2libGUnLFxuICAgICAgICB2aXNpYmlsaXR5OiAgICAgICAgICAgJ3Zpc2libGUnLFxuICAgICAgICB0cmFuc2Zvcm06ICAgICAgICAgICAgJ3RyYW5zZm9ybU1hdHJpeCcsXG4gICAgICAgICdmaWxsLW9wYWNpdHknOiAgICAgICAnZmlsbE9wYWNpdHknLFxuICAgICAgICAnZmlsbC1ydWxlJzogICAgICAgICAgJ2ZpbGxSdWxlJyxcbiAgICAgICAgJ2ZvbnQtZmFtaWx5JzogICAgICAgICdmb250RmFtaWx5JyxcbiAgICAgICAgJ2ZvbnQtc2l6ZSc6ICAgICAgICAgICdmb250U2l6ZScsXG4gICAgICAgICdmb250LXN0eWxlJzogICAgICAgICAnZm9udFN0eWxlJyxcbiAgICAgICAgJ2ZvbnQtd2VpZ2h0JzogICAgICAgICdmb250V2VpZ2h0JyxcbiAgICAgICAgJ2xldHRlci1zcGFjaW5nJzogICAgICdjaGFyU3BhY2luZycsXG4gICAgICAgICdwYWludC1vcmRlcic6ICAgICAgICAncGFpbnRGaXJzdCcsXG4gICAgICAgICdzdHJva2UtZGFzaGFycmF5JzogICAnc3Ryb2tlRGFzaEFycmF5JyxcbiAgICAgICAgJ3N0cm9rZS1kYXNob2Zmc2V0JzogICdzdHJva2VEYXNoT2Zmc2V0JyxcbiAgICAgICAgJ3N0cm9rZS1saW5lY2FwJzogICAgICdzdHJva2VMaW5lQ2FwJyxcbiAgICAgICAgJ3N0cm9rZS1saW5lam9pbic6ICAgICdzdHJva2VMaW5lSm9pbicsXG4gICAgICAgICdzdHJva2UtbWl0ZXJsaW1pdCc6ICAnc3Ryb2tlTWl0ZXJMaW1pdCcsXG4gICAgICAgICdzdHJva2Utb3BhY2l0eSc6ICAgICAnc3Ryb2tlT3BhY2l0eScsXG4gICAgICAgICdzdHJva2Utd2lkdGgnOiAgICAgICAnc3Ryb2tlV2lkdGgnLFxuICAgICAgICAndGV4dC1kZWNvcmF0aW9uJzogICAgJ3RleHREZWNvcmF0aW9uJyxcbiAgICAgICAgJ3RleHQtYW5jaG9yJzogICAgICAgICd0ZXh0QW5jaG9yJyxcbiAgICAgICAgb3BhY2l0eTogICAgICAgICAgICAgICdvcGFjaXR5JyxcbiAgICAgICAgJ2NsaXAtcGF0aCc6ICAgICAgICAgICdjbGlwUGF0aCcsXG4gICAgICAgICdjbGlwLXJ1bGUnOiAgICAgICAgICAnY2xpcFJ1bGUnLFxuICAgICAgICAndmVjdG9yLWVmZmVjdCc6ICAgICAgJ3N0cm9rZVVuaWZvcm0nLFxuICAgICAgICAnaW1hZ2UtcmVuZGVyaW5nJzogICAgJ2ltYWdlU21vb3RoaW5nJyxcbiAgICAgIH0sXG5cbiAgICAgIGNvbG9yQXR0cmlidXRlcyA9IHtcbiAgICAgICAgc3Ryb2tlOiAnc3Ryb2tlT3BhY2l0eScsXG4gICAgICAgIGZpbGw6ICAgJ2ZpbGxPcGFjaXR5J1xuICAgICAgfSxcblxuICAgICAgZlNpemUgPSAnZm9udC1zaXplJywgY1BhdGggPSAnY2xpcC1wYXRoJztcblxuICBmYWJyaWMuc3ZnVmFsaWRUYWdOYW1lc1JlZ0V4ID0gZ2V0U3ZnUmVnZXgoc3ZnVmFsaWRUYWdOYW1lcyk7XG4gIGZhYnJpYy5zdmdWaWV3Qm94RWxlbWVudHNSZWdFeCA9IGdldFN2Z1JlZ2V4KHN2Z1ZpZXdCb3hFbGVtZW50cyk7XG4gIGZhYnJpYy5zdmdJbnZhbGlkQW5jZXN0b3JzUmVnRXggPSBnZXRTdmdSZWdleChzdmdJbnZhbGlkQW5jZXN0b3JzKTtcbiAgZmFicmljLnN2Z1ZhbGlkUGFyZW50c1JlZ0V4ID0gZ2V0U3ZnUmVnZXgoc3ZnVmFsaWRQYXJlbnRzKTtcblxuICBmYWJyaWMuY3NzUnVsZXMgPSB7IH07XG4gIGZhYnJpYy5ncmFkaWVudERlZnMgPSB7IH07XG4gIGZhYnJpYy5jbGlwUGF0aHMgPSB7IH07XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplQXR0cihhdHRyKSB7XG4gICAgLy8gdHJhbnNmb3JtIGF0dHJpYnV0ZSBuYW1lc1xuICAgIGlmIChhdHRyIGluIGF0dHJpYnV0ZXNNYXApIHtcbiAgICAgIHJldHVybiBhdHRyaWJ1dGVzTWFwW2F0dHJdO1xuICAgIH1cbiAgICByZXR1cm4gYXR0cjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKGF0dHIsIHZhbHVlLCBwYXJlbnRBdHRyaWJ1dGVzLCBmb250U2l6ZSkge1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSh2YWx1ZSksIHBhcnNlZDtcblxuICAgIGlmICgoYXR0ciA9PT0gJ2ZpbGwnIHx8IGF0dHIgPT09ICdzdHJva2UnKSAmJiB2YWx1ZSA9PT0gJ25vbmUnKSB7XG4gICAgICB2YWx1ZSA9ICcnO1xuICAgIH1cbiAgICBlbHNlIGlmIChhdHRyID09PSAnc3Ryb2tlVW5pZm9ybScpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT09ICdub24tc2NhbGluZy1zdHJva2UnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXR0ciA9PT0gJ3N0cm9rZURhc2hBcnJheScpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLywvZywgJyAnKS5zcGxpdCgvXFxzKy8pLm1hcChwYXJzZUZsb2F0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYXR0ciA9PT0gJ3RyYW5zZm9ybU1hdHJpeCcpIHtcbiAgICAgIGlmIChwYXJlbnRBdHRyaWJ1dGVzICYmIHBhcmVudEF0dHJpYnV0ZXMudHJhbnNmb3JtTWF0cml4KSB7XG4gICAgICAgIHZhbHVlID0gbXVsdGlwbHlUcmFuc2Zvcm1NYXRyaWNlcyhcbiAgICAgICAgICBwYXJlbnRBdHRyaWJ1dGVzLnRyYW5zZm9ybU1hdHJpeCwgZmFicmljLnBhcnNlVHJhbnNmb3JtQXR0cmlidXRlKHZhbHVlKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBmYWJyaWMucGFyc2VUcmFuc2Zvcm1BdHRyaWJ1dGUodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChhdHRyID09PSAndmlzaWJsZScpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgIT09ICdub25lJyAmJiB2YWx1ZSAhPT0gJ2hpZGRlbic7XG4gICAgICAvLyBkaXNwbGF5PW5vbmUgb24gcGFyZW50IGVsZW1lbnQgYWx3YXlzIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBjaGlsZCBlbGVtZW50XG4gICAgICBpZiAocGFyZW50QXR0cmlidXRlcyAmJiBwYXJlbnRBdHRyaWJ1dGVzLnZpc2libGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGF0dHIgPT09ICdvcGFjaXR5Jykge1xuICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgIGlmIChwYXJlbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBwYXJlbnRBdHRyaWJ1dGVzLm9wYWNpdHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhbHVlICo9IHBhcmVudEF0dHJpYnV0ZXMub3BhY2l0eTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYXR0ciA9PT0gJ3RleHRBbmNob3InIC8qIHRleHQtYW5jaG9yICovKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlID09PSAnc3RhcnQnID8gJ2xlZnQnIDogdmFsdWUgPT09ICdlbmQnID8gJ3JpZ2h0JyA6ICdjZW50ZXInO1xuICAgIH1cbiAgICBlbHNlIGlmIChhdHRyID09PSAnY2hhclNwYWNpbmcnKSB7XG4gICAgICAvLyBwYXJzZVVuaXQgcmV0dXJucyBweCBhbmQgd2UgY29udmVydCBpdCB0byBlbVxuICAgICAgcGFyc2VkID0gcGFyc2VVbml0KHZhbHVlLCBmb250U2l6ZSkgLyBmb250U2l6ZSAqIDEwMDA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGF0dHIgPT09ICdwYWludEZpcnN0Jykge1xuICAgICAgdmFyIGZpbGxJbmRleCA9IHZhbHVlLmluZGV4T2YoJ2ZpbGwnKTtcbiAgICAgIHZhciBzdHJva2VJbmRleCA9IHZhbHVlLmluZGV4T2YoJ3N0cm9rZScpO1xuICAgICAgdmFyIHZhbHVlID0gJ2ZpbGwnO1xuICAgICAgaWYgKGZpbGxJbmRleCA+IC0xICYmIHN0cm9rZUluZGV4ID4gLTEgJiYgc3Ryb2tlSW5kZXggPCBmaWxsSW5kZXgpIHtcbiAgICAgICAgdmFsdWUgPSAnc3Ryb2tlJztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGZpbGxJbmRleCA9PT0gLTEgJiYgc3Ryb2tlSW5kZXggPiAtMSkge1xuICAgICAgICB2YWx1ZSA9ICdzdHJva2UnO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChhdHRyID09PSAnaHJlZicgfHwgYXR0ciA9PT0gJ3hsaW5rOmhyZWYnIHx8IGF0dHIgPT09ICdmb250Jykge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChhdHRyID09PSAnaW1hZ2VTbW9vdGhpbmcnKSB7XG4gICAgICByZXR1cm4gKHZhbHVlID09PSAnb3B0aW1pemVRdWFsaXR5Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcGFyc2VkID0gaXNBcnJheSA/IHZhbHVlLm1hcChwYXJzZVVuaXQpIDogcGFyc2VVbml0KHZhbHVlLCBmb250U2l6ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICghaXNBcnJheSAmJiBpc05hTihwYXJzZWQpID8gdmFsdWUgOiBwYXJzZWQpO1xuICB9XG5cbiAgLyoqXG4gICAgKiBAcHJpdmF0ZVxuICAgICovXG4gIGZ1bmN0aW9uIGdldFN2Z1JlZ2V4KGFycikge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCdeKCcgKyBhcnIuam9pbignfCcpICsgJylcXFxcYicsICdpJyk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXMgQXJyYXkgb2YgYXR0cmlidXRlcyB0byBwYXJzZVxuICAgKi9cbiAgZnVuY3Rpb24gX3NldFN0cm9rZUZpbGxPcGFjaXR5KGF0dHJpYnV0ZXMpIHtcbiAgICBmb3IgKHZhciBhdHRyIGluIGNvbG9yQXR0cmlidXRlcykge1xuXG4gICAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZXNbY29sb3JBdHRyaWJ1dGVzW2F0dHJdXSA9PT0gJ3VuZGVmaW5lZCcgfHwgYXR0cmlidXRlc1thdHRyXSA9PT0gJycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYXR0cmlidXRlc1thdHRyXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKCFmYWJyaWMuT2JqZWN0LnByb3RvdHlwZVthdHRyXSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGF0dHJpYnV0ZXNbYXR0cl0gPSBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZVthdHRyXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF0dHJpYnV0ZXNbYXR0cl0uaW5kZXhPZigndXJsKCcpID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29sb3IgPSBuZXcgZmFicmljLkNvbG9yKGF0dHJpYnV0ZXNbYXR0cl0pO1xuICAgICAgYXR0cmlidXRlc1thdHRyXSA9IGNvbG9yLnNldEFscGhhKHRvRml4ZWQoY29sb3IuZ2V0QWxwaGEoKSAqIGF0dHJpYnV0ZXNbY29sb3JBdHRyaWJ1dGVzW2F0dHJdXSwgMikpLnRvUmdiYSgpO1xuICAgIH1cbiAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gX2dldE11bHRpcGxlTm9kZXMoZG9jLCBub2RlTmFtZXMpIHtcbiAgICB2YXIgbm9kZU5hbWUsIG5vZGVBcnJheSA9IFtdLCBub2RlTGlzdCwgaSwgbGVuO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IG5vZGVOYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbm9kZU5hbWUgPSBub2RlTmFtZXNbaV07XG4gICAgICBub2RlTGlzdCA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShub2RlTmFtZSk7XG4gICAgICBub2RlQXJyYXkgPSBub2RlQXJyYXkuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG5vZGVMaXN0KSk7XG4gICAgfVxuICAgIHJldHVybiBub2RlQXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VzIFwidHJhbnNmb3JtXCIgYXR0cmlidXRlLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdmFsdWVzXG4gICAqIEBzdGF0aWNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBmYWJyaWNcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZVZhbHVlIFN0cmluZyBjb250YWluaW5nIGF0dHJpYnV0ZSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgNiBlbGVtZW50cyByZXByZXNlbnRpbmcgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAqL1xuICBmYWJyaWMucGFyc2VUcmFuc2Zvcm1BdHRyaWJ1dGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gcm90YXRlTWF0cml4KG1hdHJpeCwgYXJncykge1xuICAgICAgdmFyIGNvcyA9IGZhYnJpYy51dGlsLmNvcyhhcmdzWzBdKSwgc2luID0gZmFicmljLnV0aWwuc2luKGFyZ3NbMF0pLFxuICAgICAgICAgIHggPSAwLCB5ID0gMDtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICB4ID0gYXJnc1sxXTtcbiAgICAgICAgeSA9IGFyZ3NbMl07XG4gICAgICB9XG5cbiAgICAgIG1hdHJpeFswXSA9IGNvcztcbiAgICAgIG1hdHJpeFsxXSA9IHNpbjtcbiAgICAgIG1hdHJpeFsyXSA9IC1zaW47XG4gICAgICBtYXRyaXhbM10gPSBjb3M7XG4gICAgICBtYXRyaXhbNF0gPSB4IC0gKGNvcyAqIHggLSBzaW4gKiB5KTtcbiAgICAgIG1hdHJpeFs1XSA9IHkgLSAoc2luICogeCArIGNvcyAqIHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlTWF0cml4KG1hdHJpeCwgYXJncykge1xuICAgICAgdmFyIG11bHRpcGxpZXJYID0gYXJnc1swXSxcbiAgICAgICAgICBtdWx0aXBsaWVyWSA9IChhcmdzLmxlbmd0aCA9PT0gMikgPyBhcmdzWzFdIDogYXJnc1swXTtcblxuICAgICAgbWF0cml4WzBdID0gbXVsdGlwbGllclg7XG4gICAgICBtYXRyaXhbM10gPSBtdWx0aXBsaWVyWTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBza2V3TWF0cml4KG1hdHJpeCwgYXJncywgcG9zKSB7XG4gICAgICBtYXRyaXhbcG9zXSA9IE1hdGgudGFuKGZhYnJpYy51dGlsLmRlZ3JlZXNUb1JhZGlhbnMoYXJnc1swXSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZU1hdHJpeChtYXRyaXgsIGFyZ3MpIHtcbiAgICAgIG1hdHJpeFs0XSA9IGFyZ3NbMF07XG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgbWF0cml4WzVdID0gYXJnc1sxXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpZGVudGl0eSBtYXRyaXhcbiAgICB2YXIgaU1hdHJpeCA9IGZhYnJpYy5pTWF0cml4LFxuXG4gICAgICAgIC8vID09IGJlZ2luIHRyYW5zZm9ybSByZWdleHBcbiAgICAgICAgbnVtYmVyID0gZmFicmljLnJlTnVtLFxuXG4gICAgICAgIGNvbW1hV3NwID0gZmFicmljLmNvbW1hV3NwLFxuXG4gICAgICAgIHNrZXdYID0gJyg/Oihza2V3WClcXFxccypcXFxcKFxcXFxzKignICsgbnVtYmVyICsgJylcXFxccypcXFxcKSknLFxuXG4gICAgICAgIHNrZXdZID0gJyg/Oihza2V3WSlcXFxccypcXFxcKFxcXFxzKignICsgbnVtYmVyICsgJylcXFxccypcXFxcKSknLFxuXG4gICAgICAgIHJvdGF0ZSA9ICcoPzoocm90YXRlKVxcXFxzKlxcXFwoXFxcXHMqKCcgKyBudW1iZXIgKyAnKSg/OicgK1xuICAgICAgICAgICAgICAgICAgICBjb21tYVdzcCArICcoJyArIG51bWJlciArICcpJyArXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hV3NwICsgJygnICsgbnVtYmVyICsgJykpP1xcXFxzKlxcXFwpKScsXG5cbiAgICAgICAgc2NhbGUgPSAnKD86KHNjYWxlKVxcXFxzKlxcXFwoXFxcXHMqKCcgKyBudW1iZXIgKyAnKSg/OicgK1xuICAgICAgICAgICAgICAgICAgICBjb21tYVdzcCArICcoJyArIG51bWJlciArICcpKT9cXFxccypcXFxcKSknLFxuXG4gICAgICAgIHRyYW5zbGF0ZSA9ICcoPzoodHJhbnNsYXRlKVxcXFxzKlxcXFwoXFxcXHMqKCcgKyBudW1iZXIgKyAnKSg/OicgK1xuICAgICAgICAgICAgICAgICAgICBjb21tYVdzcCArICcoJyArIG51bWJlciArICcpKT9cXFxccypcXFxcKSknLFxuXG4gICAgICAgIG1hdHJpeCA9ICcoPzoobWF0cml4KVxcXFxzKlxcXFwoXFxcXHMqJyArXG4gICAgICAgICAgICAgICAgICAnKCcgKyBudW1iZXIgKyAnKScgKyBjb21tYVdzcCArXG4gICAgICAgICAgICAgICAgICAnKCcgKyBudW1iZXIgKyAnKScgKyBjb21tYVdzcCArXG4gICAgICAgICAgICAgICAgICAnKCcgKyBudW1iZXIgKyAnKScgKyBjb21tYVdzcCArXG4gICAgICAgICAgICAgICAgICAnKCcgKyBudW1iZXIgKyAnKScgKyBjb21tYVdzcCArXG4gICAgICAgICAgICAgICAgICAnKCcgKyBudW1iZXIgKyAnKScgKyBjb21tYVdzcCArXG4gICAgICAgICAgICAgICAgICAnKCcgKyBudW1iZXIgKyAnKScgK1xuICAgICAgICAgICAgICAgICAgJ1xcXFxzKlxcXFwpKScsXG5cbiAgICAgICAgdHJhbnNmb3JtID0gJyg/OicgK1xuICAgICAgICAgICAgICAgICAgICBtYXRyaXggKyAnfCcgK1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGUgKyAnfCcgK1xuICAgICAgICAgICAgICAgICAgICBzY2FsZSArICd8JyArXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0ZSArICd8JyArXG4gICAgICAgICAgICAgICAgICAgIHNrZXdYICsgJ3wnICtcbiAgICAgICAgICAgICAgICAgICAgc2tld1kgK1xuICAgICAgICAgICAgICAgICAgICAnKScsXG5cbiAgICAgICAgdHJhbnNmb3JtcyA9ICcoPzonICsgdHJhbnNmb3JtICsgJyg/OicgKyBjb21tYVdzcCArICcqJyArIHRyYW5zZm9ybSArICcpKicgKyAnKScsXG5cbiAgICAgICAgdHJhbnNmb3JtTGlzdCA9ICdeXFxcXHMqKD86JyArIHRyYW5zZm9ybXMgKyAnPylcXFxccyokJyxcblxuICAgICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvY29vcmRzLmh0bWwjVHJhbnNmb3JtQXR0cmlidXRlXG4gICAgICAgIHJlVHJhbnNmb3JtTGlzdCA9IG5ldyBSZWdFeHAodHJhbnNmb3JtTGlzdCksXG4gICAgICAgIC8vID09IGVuZCB0cmFuc2Zvcm0gcmVnZXhwXG5cbiAgICAgICAgcmVUcmFuc2Zvcm0gPSBuZXcgUmVnRXhwKHRyYW5zZm9ybSwgJ2cnKTtcblxuICAgIHJldHVybiBmdW5jdGlvbihhdHRyaWJ1dGVWYWx1ZSkge1xuXG4gICAgICAvLyBzdGFydCB3aXRoIGlkZW50aXR5IG1hdHJpeFxuICAgICAgdmFyIG1hdHJpeCA9IGlNYXRyaXguY29uY2F0KCksXG4gICAgICAgICAgbWF0cmljZXMgPSBbXTtcblxuICAgICAgLy8gcmV0dXJuIGlmIG5vIGFyZ3VtZW50IHdhcyBnaXZlbiBvclxuICAgICAgLy8gYW4gYXJndW1lbnQgZG9lcyBub3QgbWF0Y2ggdHJhbnNmb3JtIGF0dHJpYnV0ZSByZWdleHBcbiAgICAgIGlmICghYXR0cmlidXRlVmFsdWUgfHwgKGF0dHJpYnV0ZVZhbHVlICYmICFyZVRyYW5zZm9ybUxpc3QudGVzdChhdHRyaWJ1dGVWYWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgICB9XG5cbiAgICAgIGF0dHJpYnV0ZVZhbHVlLnJlcGxhY2UocmVUcmFuc2Zvcm0sIGZ1bmN0aW9uKG1hdGNoKSB7XG5cbiAgICAgICAgdmFyIG0gPSBuZXcgUmVnRXhwKHRyYW5zZm9ybSkuZXhlYyhtYXRjaCkuZmlsdGVyKGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAvLyBtYXRjaCAhPT0gJycgJiYgbWF0Y2ggIT0gbnVsbFxuICAgICAgICAgICAgICByZXR1cm4gKCEhbWF0Y2gpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBvcGVyYXRpb24gPSBtWzFdLFxuICAgICAgICAgICAgYXJncyA9IG0uc2xpY2UoMikubWFwKHBhcnNlRmxvYXQpO1xuXG4gICAgICAgIHN3aXRjaCAob3BlcmF0aW9uKSB7XG4gICAgICAgICAgY2FzZSAndHJhbnNsYXRlJzpcbiAgICAgICAgICAgIHRyYW5zbGF0ZU1hdHJpeChtYXRyaXgsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncm90YXRlJzpcbiAgICAgICAgICAgIGFyZ3NbMF0gPSBmYWJyaWMudXRpbC5kZWdyZWVzVG9SYWRpYW5zKGFyZ3NbMF0pO1xuICAgICAgICAgICAgcm90YXRlTWF0cml4KG1hdHJpeCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdzY2FsZSc6XG4gICAgICAgICAgICBzY2FsZU1hdHJpeChtYXRyaXgsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnc2tld1gnOlxuICAgICAgICAgICAgc2tld01hdHJpeChtYXRyaXgsIGFyZ3MsIDIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnc2tld1knOlxuICAgICAgICAgICAgc2tld01hdHJpeChtYXRyaXgsIGFyZ3MsIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbWF0cml4JzpcbiAgICAgICAgICAgIG1hdHJpeCA9IGFyZ3M7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNuYXBzaG90IGN1cnJlbnQgbWF0cml4IGludG8gbWF0cmljZXMgYXJyYXlcbiAgICAgICAgbWF0cmljZXMucHVzaChtYXRyaXguY29uY2F0KCkpO1xuICAgICAgICAvLyByZXNldFxuICAgICAgICBtYXRyaXggPSBpTWF0cml4LmNvbmNhdCgpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjb21iaW5lZE1hdHJpeCA9IG1hdHJpY2VzWzBdO1xuICAgICAgd2hpbGUgKG1hdHJpY2VzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbWF0cmljZXMuc2hpZnQoKTtcbiAgICAgICAgY29tYmluZWRNYXRyaXggPSBmYWJyaWMudXRpbC5tdWx0aXBseVRyYW5zZm9ybU1hdHJpY2VzKGNvbWJpbmVkTWF0cml4LCBtYXRyaWNlc1swXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29tYmluZWRNYXRyaXg7XG4gICAgfTtcbiAgfSkoKTtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHBhcnNlU3R5bGVTdHJpbmcoc3R5bGUsIG9TdHlsZSkge1xuICAgIHZhciBhdHRyLCB2YWx1ZTtcbiAgICBzdHlsZS5yZXBsYWNlKC87XFxzKiQvLCAnJykuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgdmFyIHBhaXIgPSBjaHVuay5zcGxpdCgnOicpO1xuXG4gICAgICBhdHRyID0gcGFpclswXS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhbHVlID0gIHBhaXJbMV0udHJpbSgpO1xuXG4gICAgICBvU3R5bGVbYXR0cl0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VTdHlsZU9iamVjdChzdHlsZSwgb1N0eWxlKSB7XG4gICAgdmFyIGF0dHIsIHZhbHVlO1xuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIGlmICh0eXBlb2Ygc3R5bGVbcHJvcF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBhdHRyID0gcHJvcC50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFsdWUgPSBzdHlsZVtwcm9wXTtcblxuICAgICAgb1N0eWxlW2F0dHJdID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBnZXRHbG9iYWxTdHlsZXNGb3JFbGVtZW50KGVsZW1lbnQsIHN2Z1VpZCkge1xuICAgIHZhciBzdHlsZXMgPSB7IH07XG4gICAgZm9yICh2YXIgcnVsZSBpbiBmYWJyaWMuY3NzUnVsZXNbc3ZnVWlkXSkge1xuICAgICAgaWYgKGVsZW1lbnRNYXRjaGVzUnVsZShlbGVtZW50LCBydWxlLnNwbGl0KCcgJykpKSB7XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGZhYnJpYy5jc3NSdWxlc1tzdmdVaWRdW3J1bGVdKSB7XG4gICAgICAgICAgc3R5bGVzW3Byb3BlcnR5XSA9IGZhYnJpYy5jc3NSdWxlc1tzdmdVaWRdW3J1bGVdW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBlbGVtZW50TWF0Y2hlc1J1bGUoZWxlbWVudCwgc2VsZWN0b3JzKSB7XG4gICAgdmFyIGZpcnN0TWF0Y2hpbmcsIHBhcmVudE1hdGNoaW5nID0gdHJ1ZTtcbiAgICAvL3N0YXJ0IGZyb20gcmlnaHRtb3N0IHNlbGVjdG9yLlxuICAgIGZpcnN0TWF0Y2hpbmcgPSBzZWxlY3Rvck1hdGNoZXMoZWxlbWVudCwgc2VsZWN0b3JzLnBvcCgpKTtcbiAgICBpZiAoZmlyc3RNYXRjaGluZyAmJiBzZWxlY3RvcnMubGVuZ3RoKSB7XG4gICAgICBwYXJlbnRNYXRjaGluZyA9IGRvZXNTb21lUGFyZW50TWF0Y2goZWxlbWVudCwgc2VsZWN0b3JzKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpcnN0TWF0Y2hpbmcgJiYgcGFyZW50TWF0Y2hpbmcgJiYgKHNlbGVjdG9ycy5sZW5ndGggPT09IDApO1xuICB9XG5cbiAgZnVuY3Rpb24gZG9lc1NvbWVQYXJlbnRNYXRjaChlbGVtZW50LCBzZWxlY3RvcnMpIHtcbiAgICB2YXIgc2VsZWN0b3IsIHBhcmVudE1hdGNoaW5nID0gdHJ1ZTtcbiAgICB3aGlsZSAoZWxlbWVudC5wYXJlbnROb2RlICYmIGVsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBzZWxlY3RvcnMubGVuZ3RoKSB7XG4gICAgICBpZiAocGFyZW50TWF0Y2hpbmcpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvcnMucG9wKCk7XG4gICAgICB9XG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgcGFyZW50TWF0Y2hpbmcgPSBzZWxlY3Rvck1hdGNoZXMoZWxlbWVudCwgc2VsZWN0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0b3JzLmxlbmd0aCA9PT0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gc2VsZWN0b3JNYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZSxcbiAgICAgICAgY2xhc3NOYW1lcyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpLFxuICAgICAgICBpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpLCBtYXRjaGVyLCBpO1xuICAgIC8vIGkgY2hlY2sgaWYgYSBzZWxlY3RvciBtYXRjaGVzIHNsaWNpbmcgYXdheSBwYXJ0IGZyb20gaXQuXG4gICAgLy8gaWYgaSBnZXQgZW1wdHkgc3RyaW5nIGkgc2hvdWxkIG1hdGNoXG4gICAgbWF0Y2hlciA9IG5ldyBSZWdFeHAoJ14nICsgbm9kZU5hbWUsICdpJyk7XG4gICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKG1hdGNoZXIsICcnKTtcbiAgICBpZiAoaWQgJiYgc2VsZWN0b3IubGVuZ3RoKSB7XG4gICAgICBtYXRjaGVyID0gbmV3IFJlZ0V4cCgnIycgKyBpZCArICcoPyFbYS16QS1aXFxcXC1dKyknLCAnaScpO1xuICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKG1hdGNoZXIsICcnKTtcbiAgICB9XG4gICAgaWYgKGNsYXNzTmFtZXMgJiYgc2VsZWN0b3IubGVuZ3RoKSB7XG4gICAgICBjbGFzc05hbWVzID0gY2xhc3NOYW1lcy5zcGxpdCgnICcpO1xuICAgICAgZm9yIChpID0gY2xhc3NOYW1lcy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgbWF0Y2hlciA9IG5ldyBSZWdFeHAoJ1xcXFwuJyArIGNsYXNzTmFtZXNbaV0gKyAnKD8hW2EtekEtWlxcXFwtXSspJywgJ2knKTtcbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKG1hdGNoZXIsICcnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdG9yLmxlbmd0aCA9PT0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiB0byBzdXBwb3J0IElFOCBtaXNzaW5nIGdldEVsZW1lbnRCeUlkIG9uIFNWR2RvY3VtZW50IGFuZCBvbiBub2RlIHhtbERPTVxuICAgKi9cbiAgZnVuY3Rpb24gZWxlbWVudEJ5SWQoZG9jLCBpZCkge1xuICAgIHZhciBlbDtcbiAgICBkb2MuZ2V0RWxlbWVudEJ5SWQgJiYgKGVsID0gZG9jLmdldEVsZW1lbnRCeUlkKGlkKSk7XG4gICAgaWYgKGVsKSB7XG4gICAgICByZXR1cm4gZWw7XG4gICAgfVxuICAgIHZhciBub2RlLCBpLCBsZW4sIG5vZGVsaXN0ID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJyk7XG4gICAgZm9yIChpID0gMCwgbGVuID0gbm9kZWxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG5vZGUgPSBub2RlbGlzdFtpXTtcbiAgICAgIGlmIChpZCA9PT0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJykpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBwYXJzZVVzZURpcmVjdGl2ZXMoZG9jKSB7XG4gICAgdmFyIG5vZGVsaXN0ID0gX2dldE11bHRpcGxlTm9kZXMoZG9jLCBbJ3VzZScsICdzdmc6dXNlJ10pLCBpID0gMDtcbiAgICB3aGlsZSAobm9kZWxpc3QubGVuZ3RoICYmIGkgPCBub2RlbGlzdC5sZW5ndGgpIHtcbiAgICAgIHZhciBlbCA9IG5vZGVsaXN0W2ldLFxuICAgICAgICAgIHhsaW5rQXR0cmlidXRlID0gZWwuZ2V0QXR0cmlidXRlKCd4bGluazpocmVmJykgfHwgZWwuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG5cbiAgICAgIGlmICh4bGlua0F0dHJpYnV0ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB4bGluayA9IHhsaW5rQXR0cmlidXRlLnNsaWNlKDEpLFxuICAgICAgICAgIHggPSBlbC5nZXRBdHRyaWJ1dGUoJ3gnKSB8fCAwLFxuICAgICAgICAgIHkgPSBlbC5nZXRBdHRyaWJ1dGUoJ3knKSB8fCAwLFxuICAgICAgICAgIGVsMiA9IGVsZW1lbnRCeUlkKGRvYywgeGxpbmspLmNsb25lTm9kZSh0cnVlKSxcbiAgICAgICAgICBjdXJyZW50VHJhbnMgPSAoZWwyLmdldEF0dHJpYnV0ZSgndHJhbnNmb3JtJykgfHwgJycpICsgJyB0cmFuc2xhdGUoJyArIHggKyAnLCAnICsgeSArICcpJyxcbiAgICAgICAgICBwYXJlbnROb2RlLFxuICAgICAgICAgIG9sZExlbmd0aCA9IG5vZGVsaXN0Lmxlbmd0aCwgYXR0cixcbiAgICAgICAgICBqLFxuICAgICAgICAgIGF0dHJzLFxuICAgICAgICAgIGxlbixcbiAgICAgICAgICBuYW1lc3BhY2UgPSBmYWJyaWMuc3ZnTlM7XG5cbiAgICAgIGFwcGx5Vmlld2JveFRyYW5zZm9ybShlbDIpO1xuICAgICAgaWYgKC9ec3ZnJC9pLnRlc3QoZWwyLm5vZGVOYW1lKSkge1xuICAgICAgICB2YXIgZWwzID0gZWwyLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgJ2cnKTtcbiAgICAgICAgZm9yIChqID0gMCwgYXR0cnMgPSBlbDIuYXR0cmlidXRlcywgbGVuID0gYXR0cnMubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBhdHRyID0gYXR0cnMuaXRlbShqKTtcbiAgICAgICAgICBlbDMuc2V0QXR0cmlidXRlTlMobmFtZXNwYWNlLCBhdHRyLm5vZGVOYW1lLCBhdHRyLm5vZGVWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZWwyLmZpcnN0Q2hpbGQgIT0gbnVsbFxuICAgICAgICB3aGlsZSAoZWwyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICBlbDMuYXBwZW5kQ2hpbGQoZWwyLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGVsMiA9IGVsMztcbiAgICAgIH1cblxuICAgICAgZm9yIChqID0gMCwgYXR0cnMgPSBlbC5hdHRyaWJ1dGVzLCBsZW4gPSBhdHRycy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICBhdHRyID0gYXR0cnMuaXRlbShqKTtcbiAgICAgICAgaWYgKGF0dHIubm9kZU5hbWUgPT09ICd4JyB8fCBhdHRyLm5vZGVOYW1lID09PSAneScgfHxcbiAgICAgICAgICBhdHRyLm5vZGVOYW1lID09PSAneGxpbms6aHJlZicgfHwgYXR0ci5ub2RlTmFtZSA9PT0gJ2hyZWYnKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXR0ci5ub2RlTmFtZSA9PT0gJ3RyYW5zZm9ybScpIHtcbiAgICAgICAgICBjdXJyZW50VHJhbnMgPSBhdHRyLm5vZGVWYWx1ZSArICcgJyArIGN1cnJlbnRUcmFucztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBlbDIuc2V0QXR0cmlidXRlKGF0dHIubm9kZU5hbWUsIGF0dHIubm9kZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbDIuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBjdXJyZW50VHJhbnMpO1xuICAgICAgZWwyLnNldEF0dHJpYnV0ZSgnaW5zdGFudGlhdGVkX2J5X3VzZScsICcxJyk7XG4gICAgICBlbDIucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xuICAgICAgcGFyZW50Tm9kZSA9IGVsLnBhcmVudE5vZGU7XG4gICAgICBwYXJlbnROb2RlLnJlcGxhY2VDaGlsZChlbDIsIGVsKTtcbiAgICAgIC8vIHNvbWUgYnJvd3NlcnMgZG8gbm90IHNob3J0ZW4gbm9kZWxpc3QgYWZ0ZXIgcmVwbGFjZUNoaWxkIChJRTgpXG4gICAgICBpZiAobm9kZWxpc3QubGVuZ3RoID09PSBvbGRMZW5ndGgpIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9jb29yZHMuaHRtbCNWaWV3Qm94QXR0cmlidXRlXG4gIC8vIG1hdGNoZXMsIGUuZy46ICsxNC41NmUtMTIsIGV0Yy5cbiAgdmFyIHJlVmlld0JveEF0dHJWYWx1ZSA9IG5ldyBSZWdFeHAoXG4gICAgJ14nICtcbiAgICAnXFxcXHMqKCcgKyBmYWJyaWMucmVOdW0gKyAnKylcXFxccyosPycgK1xuICAgICdcXFxccyooJyArIGZhYnJpYy5yZU51bSArICcrKVxcXFxzKiw/JyArXG4gICAgJ1xcXFxzKignICsgZmFicmljLnJlTnVtICsgJyspXFxcXHMqLD8nICtcbiAgICAnXFxcXHMqKCcgKyBmYWJyaWMucmVOdW0gKyAnKylcXFxccyonICtcbiAgICAnJCdcbiAgKTtcblxuICAvKipcbiAgICogQWRkIGEgPGc+IGVsZW1lbnQgdGhhdCBlbnZlbG9wIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgbWFrZXMgdGhlIHZpZXdib3ggdHJhbnNmb3JtTWF0cml4IGRlc2NlbmQgb24gYWxsIGVsZW1lbnRzXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseVZpZXdib3hUcmFuc2Zvcm0oZWxlbWVudCkge1xuICAgIGlmICghZmFicmljLnN2Z1ZpZXdCb3hFbGVtZW50c1JlZ0V4LnRlc3QoZWxlbWVudC5ub2RlTmFtZSkpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgdmFyIHZpZXdCb3hBdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKSxcbiAgICAgICAgc2NhbGVYID0gMSxcbiAgICAgICAgc2NhbGVZID0gMSxcbiAgICAgICAgbWluWCA9IDAsXG4gICAgICAgIG1pblkgPSAwLFxuICAgICAgICB2aWV3Qm94V2lkdGgsIHZpZXdCb3hIZWlnaHQsIG1hdHJpeCwgZWwsXG4gICAgICAgIHdpZHRoQXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd3aWR0aCcpLFxuICAgICAgICBoZWlnaHRBdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpLFxuICAgICAgICB4ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3gnKSB8fCAwLFxuICAgICAgICB5ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3knKSB8fCAwLFxuICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nKSB8fCAnJyxcbiAgICAgICAgbWlzc2luZ1ZpZXdCb3ggPSAoIXZpZXdCb3hBdHRyIHx8ICEodmlld0JveEF0dHIgPSB2aWV3Qm94QXR0ci5tYXRjaChyZVZpZXdCb3hBdHRyVmFsdWUpKSksXG4gICAgICAgIG1pc3NpbmdEaW1BdHRyID0gKCF3aWR0aEF0dHIgfHwgIWhlaWdodEF0dHIgfHwgd2lkdGhBdHRyID09PSAnMTAwJScgfHwgaGVpZ2h0QXR0ciA9PT0gJzEwMCUnKSxcbiAgICAgICAgdG9CZVBhcnNlZCA9IG1pc3NpbmdWaWV3Qm94ICYmIG1pc3NpbmdEaW1BdHRyLFxuICAgICAgICBwYXJzZWREaW0gPSB7IH0sIHRyYW5zbGF0ZU1hdHJpeCA9ICcnLCB3aWR0aERpZmYgPSAwLCBoZWlnaHREaWZmID0gMDtcblxuICAgIHBhcnNlZERpbS53aWR0aCA9IDA7XG4gICAgcGFyc2VkRGltLmhlaWdodCA9IDA7XG4gICAgcGFyc2VkRGltLnRvQmVQYXJzZWQgPSB0b0JlUGFyc2VkO1xuXG4gICAgaWYgKG1pc3NpbmdWaWV3Qm94KSB7XG4gICAgICBpZiAoKCh4IHx8IHkpICYmIGVsZW1lbnQucGFyZW50Tm9kZSAmJiBlbGVtZW50LnBhcmVudE5vZGUubm9kZU5hbWUgIT09ICcjZG9jdW1lbnQnKSkge1xuICAgICAgICB0cmFuc2xhdGVNYXRyaXggPSAnIHRyYW5zbGF0ZSgnICsgcGFyc2VVbml0KHgpICsgJyAnICsgcGFyc2VVbml0KHkpICsgJykgJztcbiAgICAgICAgbWF0cml4ID0gKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKSB8fCAnJykgKyB0cmFuc2xhdGVNYXRyaXg7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBtYXRyaXgpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgneCcpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgneScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0b0JlUGFyc2VkKSB7XG4gICAgICByZXR1cm4gcGFyc2VkRGltO1xuICAgIH1cblxuICAgIGlmIChtaXNzaW5nVmlld0JveCkge1xuICAgICAgcGFyc2VkRGltLndpZHRoID0gcGFyc2VVbml0KHdpZHRoQXR0cik7XG4gICAgICBwYXJzZWREaW0uaGVpZ2h0ID0gcGFyc2VVbml0KGhlaWdodEF0dHIpO1xuICAgICAgLy8gc2V0IGEgdHJhbnNmb3JtIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgeCB5IGFuZCBhcmUgaW5uZXIob25seSkgU1ZHc1xuICAgICAgcmV0dXJuIHBhcnNlZERpbTtcbiAgICB9XG4gICAgbWluWCA9IC1wYXJzZUZsb2F0KHZpZXdCb3hBdHRyWzFdKTtcbiAgICBtaW5ZID0gLXBhcnNlRmxvYXQodmlld0JveEF0dHJbMl0pO1xuICAgIHZpZXdCb3hXaWR0aCA9IHBhcnNlRmxvYXQodmlld0JveEF0dHJbM10pO1xuICAgIHZpZXdCb3hIZWlnaHQgPSBwYXJzZUZsb2F0KHZpZXdCb3hBdHRyWzRdKTtcbiAgICBwYXJzZWREaW0ubWluWCA9IG1pblg7XG4gICAgcGFyc2VkRGltLm1pblkgPSBtaW5ZO1xuICAgIHBhcnNlZERpbS52aWV3Qm94V2lkdGggPSB2aWV3Qm94V2lkdGg7XG4gICAgcGFyc2VkRGltLnZpZXdCb3hIZWlnaHQgPSB2aWV3Qm94SGVpZ2h0O1xuICAgIGlmICghbWlzc2luZ0RpbUF0dHIpIHtcbiAgICAgIHBhcnNlZERpbS53aWR0aCA9IHBhcnNlVW5pdCh3aWR0aEF0dHIpO1xuICAgICAgcGFyc2VkRGltLmhlaWdodCA9IHBhcnNlVW5pdChoZWlnaHRBdHRyKTtcbiAgICAgIHNjYWxlWCA9IHBhcnNlZERpbS53aWR0aCAvIHZpZXdCb3hXaWR0aDtcbiAgICAgIHNjYWxlWSA9IHBhcnNlZERpbS5oZWlnaHQgLyB2aWV3Qm94SGVpZ2h0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHBhcnNlZERpbS53aWR0aCA9IHZpZXdCb3hXaWR0aDtcbiAgICAgIHBhcnNlZERpbS5oZWlnaHQgPSB2aWV3Qm94SGVpZ2h0O1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgaXMgdG8gcHJlc2VydmUgYXNwZWN0IHJhdGlvXG4gICAgcHJlc2VydmVBc3BlY3RSYXRpbyA9IGZhYnJpYy51dGlsLnBhcnNlUHJlc2VydmVBc3BlY3RSYXRpb0F0dHJpYnV0ZShwcmVzZXJ2ZUFzcGVjdFJhdGlvKTtcbiAgICBpZiAocHJlc2VydmVBc3BlY3RSYXRpby5hbGlnblggIT09ICdub25lJykge1xuICAgICAgLy90cmFuc2xhdGUgYWxsIGNvbnRhaW5lciBmb3IgdGhlIGVmZmVjdCBvZiBNaWQsIE1pbiwgTWF4XG4gICAgICBpZiAocHJlc2VydmVBc3BlY3RSYXRpby5tZWV0T3JTbGljZSA9PT0gJ21lZXQnKSB7XG4gICAgICAgIHNjYWxlWSA9IHNjYWxlWCA9IChzY2FsZVggPiBzY2FsZVkgPyBzY2FsZVkgOiBzY2FsZVgpO1xuICAgICAgICAvLyBjYWxjdWxhdGUgYWRkaXRpb25hbCB0cmFuc2xhdGlvbiB0byBtb3ZlIHRoZSB2aWV3Ym94XG4gICAgICB9XG4gICAgICBpZiAocHJlc2VydmVBc3BlY3RSYXRpby5tZWV0T3JTbGljZSA9PT0gJ3NsaWNlJykge1xuICAgICAgICBzY2FsZVkgPSBzY2FsZVggPSAoc2NhbGVYID4gc2NhbGVZID8gc2NhbGVYIDogc2NhbGVZKTtcbiAgICAgICAgLy8gY2FsY3VsYXRlIGFkZGl0aW9uYWwgdHJhbnNsYXRpb24gdG8gbW92ZSB0aGUgdmlld2JveFxuICAgICAgfVxuICAgICAgd2lkdGhEaWZmID0gcGFyc2VkRGltLndpZHRoIC0gdmlld0JveFdpZHRoICogc2NhbGVYO1xuICAgICAgaGVpZ2h0RGlmZiA9IHBhcnNlZERpbS5oZWlnaHQgLSB2aWV3Qm94SGVpZ2h0ICogc2NhbGVYO1xuICAgICAgaWYgKHByZXNlcnZlQXNwZWN0UmF0aW8uYWxpZ25YID09PSAnTWlkJykge1xuICAgICAgICB3aWR0aERpZmYgLz0gMjtcbiAgICAgIH1cbiAgICAgIGlmIChwcmVzZXJ2ZUFzcGVjdFJhdGlvLmFsaWduWSA9PT0gJ01pZCcpIHtcbiAgICAgICAgaGVpZ2h0RGlmZiAvPSAyO1xuICAgICAgfVxuICAgICAgaWYgKHByZXNlcnZlQXNwZWN0UmF0aW8uYWxpZ25YID09PSAnTWluJykge1xuICAgICAgICB3aWR0aERpZmYgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKHByZXNlcnZlQXNwZWN0UmF0aW8uYWxpZ25ZID09PSAnTWluJykge1xuICAgICAgICBoZWlnaHREaWZmID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2NhbGVYID09PSAxICYmIHNjYWxlWSA9PT0gMSAmJiBtaW5YID09PSAwICYmIG1pblkgPT09IDAgJiYgeCA9PT0gMCAmJiB5ID09PSAwKSB7XG4gICAgICByZXR1cm4gcGFyc2VkRGltO1xuICAgIH1cbiAgICBpZiAoKHggfHwgeSkgJiYgZWxlbWVudC5wYXJlbnROb2RlLm5vZGVOYW1lICE9PSAnI2RvY3VtZW50Jykge1xuICAgICAgdHJhbnNsYXRlTWF0cml4ID0gJyB0cmFuc2xhdGUoJyArIHBhcnNlVW5pdCh4KSArICcgJyArIHBhcnNlVW5pdCh5KSArICcpICc7XG4gICAgfVxuXG4gICAgbWF0cml4ID0gdHJhbnNsYXRlTWF0cml4ICsgJyBtYXRyaXgoJyArIHNjYWxlWCArXG4gICAgICAgICAgICAgICAgICAnIDAnICtcbiAgICAgICAgICAgICAgICAgICcgMCAnICtcbiAgICAgICAgICAgICAgICAgIHNjYWxlWSArICcgJyArXG4gICAgICAgICAgICAgICAgICAobWluWCAqIHNjYWxlWCArIHdpZHRoRGlmZikgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgKG1pblkgKiBzY2FsZVkgKyBoZWlnaHREaWZmKSArICcpICc7XG4gICAgLy8gc2VlbXMgdW51c2VkLlxuICAgIC8vIHBhcnNlZERpbS52aWV3Ym94VHJhbnNmb3JtID0gZmFicmljLnBhcnNlVHJhbnNmb3JtQXR0cmlidXRlKG1hdHJpeCk7XG4gICAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdzdmcnKSB7XG4gICAgICBlbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZmFicmljLnN2Z05TLCAnZycpO1xuICAgICAgLy8gZWxlbWVudC5maXJzdENoaWxkICE9IG51bGxcbiAgICAgIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGVsID0gZWxlbWVudDtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgneCcpO1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCd5Jyk7XG4gICAgICBtYXRyaXggPSBlbC5nZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScpICsgbWF0cml4O1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIG1hdHJpeCk7XG4gICAgcmV0dXJuIHBhcnNlZERpbTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc0FuY2VzdG9yV2l0aE5vZGVOYW1lKGVsZW1lbnQsIG5vZGVOYW1lKSB7XG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgKGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUpKSB7XG4gICAgICBpZiAoZWxlbWVudC5ub2RlTmFtZSAmJiBub2RlTmFtZS50ZXN0KGVsZW1lbnQubm9kZU5hbWUucmVwbGFjZSgnc3ZnOicsICcnKSlcbiAgICAgICAgJiYgIWVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpbnN0YW50aWF0ZWRfYnlfdXNlJykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZXMgYW4gU1ZHIGRvY3VtZW50LCBjb252ZXJ0cyBpdCB0byBhbiBhcnJheSBvZiBjb3JyZXNwb25kaW5nIGZhYnJpYy4qIGluc3RhbmNlcyBhbmQgcGFzc2VzIHRoZW0gdG8gYSBjYWxsYmFja1xuICAgKiBAc3RhdGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgZmFicmljXG4gICAqIEBwYXJhbSB7U1ZHRG9jdW1lbnR9IGRvYyBTVkcgZG9jdW1lbnQgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gY2FsbCB3aGVuIHBhcnNpbmcgaXMgZmluaXNoZWQ7XG4gICAqIEl0J3MgYmVpbmcgcGFzc2VkIGFuIGFycmF5IG9mIGVsZW1lbnRzIChwYXJzZWQgZnJvbSBhIGRvY3VtZW50KS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdIE1ldGhvZCBmb3IgZnVydGhlciBwYXJzaW5nIG9mIFNWRyBlbGVtZW50cywgY2FsbGVkIGFmdGVyIGVhY2ggZmFicmljIG9iamVjdCBjcmVhdGVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gW3BhcnNpbmdPcHRpb25zXSBvcHRpb25zIGZvciBwYXJzaW5nIGRvY3VtZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbcGFyc2luZ09wdGlvbnMuY3Jvc3NPcmlnaW5dIGNyb3NzT3JpZ2luIHNldHRpbmdzXG4gICAqL1xuICBmYWJyaWMucGFyc2VTVkdEb2N1bWVudCA9IGZ1bmN0aW9uKGRvYywgY2FsbGJhY2ssIHJldml2ZXIsIHBhcnNpbmdPcHRpb25zKSB7XG4gICAgaWYgKCFkb2MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwYXJzZVVzZURpcmVjdGl2ZXMoZG9jKTtcblxuICAgIHZhciBzdmdVaWQgPSAgZmFicmljLk9iamVjdC5fX3VpZCsrLCBpLCBsZW4sXG4gICAgICAgIG9wdGlvbnMgPSBhcHBseVZpZXdib3hUcmFuc2Zvcm0oZG9jKSxcbiAgICAgICAgZGVzY2VuZGFudHMgPSBmYWJyaWMudXRpbC50b0FycmF5KGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpKTtcbiAgICBvcHRpb25zLmNyb3NzT3JpZ2luID0gcGFyc2luZ09wdGlvbnMgJiYgcGFyc2luZ09wdGlvbnMuY3Jvc3NPcmlnaW47XG4gICAgb3B0aW9ucy5zdmdVaWQgPSBzdmdVaWQ7XG5cbiAgICBpZiAoZGVzY2VuZGFudHMubGVuZ3RoID09PSAwICYmIGZhYnJpYy5pc0xpa2VseU5vZGUpIHtcbiAgICAgIC8vIHdlJ3JlIGxpa2VseSBpbiBub2RlLCB3aGVyZSBcIm8zLXhtbFwiIGxpYnJhcnkgZmFpbHMgdG8gZ0VCVE4oXCIqXCIpXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYWpheG9yZy9ub2RlLW8zLXhtbC9pc3N1ZXMvMjFcbiAgICAgIGRlc2NlbmRhbnRzID0gZG9jLnNlbGVjdE5vZGVzKCcvLypbbmFtZSguKSE9XCJzdmdcIl0nKTtcbiAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGRlc2NlbmRhbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGFycltpXSA9IGRlc2NlbmRhbnRzW2ldO1xuICAgICAgfVxuICAgICAgZGVzY2VuZGFudHMgPSBhcnI7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnRzID0gZGVzY2VuZGFudHMuZmlsdGVyKGZ1bmN0aW9uKGVsKSB7XG4gICAgICBhcHBseVZpZXdib3hUcmFuc2Zvcm0oZWwpO1xuICAgICAgcmV0dXJuIGZhYnJpYy5zdmdWYWxpZFRhZ05hbWVzUmVnRXgudGVzdChlbC5ub2RlTmFtZS5yZXBsYWNlKCdzdmc6JywgJycpKSAmJlxuICAgICAgICAgICAgIWhhc0FuY2VzdG9yV2l0aE5vZGVOYW1lKGVsLCBmYWJyaWMuc3ZnSW52YWxpZEFuY2VzdG9yc1JlZ0V4KTsgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3N0cnVjdC5odG1sI0RlZnNFbGVtZW50XG4gICAgfSk7XG4gICAgaWYgKCFlbGVtZW50cyB8fCAoZWxlbWVudHMgJiYgIWVsZW1lbnRzLmxlbmd0aCkpIHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKFtdLCB7fSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBjbGlwUGF0aHMgPSB7IH07XG4gICAgZGVzY2VuZGFudHMuZmlsdGVyKGZ1bmN0aW9uKGVsKSB7XG4gICAgICByZXR1cm4gZWwubm9kZU5hbWUucmVwbGFjZSgnc3ZnOicsICcnKSA9PT0gJ2NsaXBQYXRoJztcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XG4gICAgICB2YXIgaWQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICBjbGlwUGF0aHNbaWRdID0gZmFicmljLnV0aWwudG9BcnJheShlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpKS5maWx0ZXIoZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgcmV0dXJuIGZhYnJpYy5zdmdWYWxpZFRhZ05hbWVzUmVnRXgudGVzdChlbC5ub2RlTmFtZS5yZXBsYWNlKCdzdmc6JywgJycpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGZhYnJpYy5ncmFkaWVudERlZnNbc3ZnVWlkXSA9IGZhYnJpYy5nZXRHcmFkaWVudERlZnMoZG9jKTtcbiAgICBmYWJyaWMuY3NzUnVsZXNbc3ZnVWlkXSA9IGZhYnJpYy5nZXRDU1NSdWxlcyhkb2MpO1xuICAgIGZhYnJpYy5jbGlwUGF0aHNbc3ZnVWlkXSA9IGNsaXBQYXRocztcbiAgICAvLyBQcmVjZWRlbmNlIG9mIHJ1bGVzOiAgIHN0eWxlID4gY2xhc3MgPiBhdHRyaWJ1dGVcbiAgICBmYWJyaWMucGFyc2VFbGVtZW50cyhlbGVtZW50cywgZnVuY3Rpb24oaW5zdGFuY2VzLCBlbGVtZW50cykge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKGluc3RhbmNlcywgb3B0aW9ucywgZWxlbWVudHMsIGRlc2NlbmRhbnRzKTtcbiAgICAgICAgZGVsZXRlIGZhYnJpYy5ncmFkaWVudERlZnNbc3ZnVWlkXTtcbiAgICAgICAgZGVsZXRlIGZhYnJpYy5jc3NSdWxlc1tzdmdVaWRdO1xuICAgICAgICBkZWxldGUgZmFicmljLmNsaXBQYXRoc1tzdmdVaWRdO1xuICAgICAgfVxuICAgIH0sIGNsb25lKG9wdGlvbnMpLCByZXZpdmVyLCBwYXJzaW5nT3B0aW9ucyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVjdXJzaXZlbHlQYXJzZUdyYWRpZW50c1hsaW5rKGRvYywgZ3JhZGllbnQpIHtcbiAgICB2YXIgZ3JhZGllbnRzQXR0cnMgPSBbJ2dyYWRpZW50VHJhbnNmb3JtJywgJ3gxJywgJ3gyJywgJ3kxJywgJ3kyJywgJ2dyYWRpZW50VW5pdHMnLCAnY3gnLCAnY3knLCAncicsICdmeCcsICdmeSddLFxuICAgICAgICB4bGlua0F0dHIgPSAneGxpbms6aHJlZicsXG4gICAgICAgIHhMaW5rID0gZ3JhZGllbnQuZ2V0QXR0cmlidXRlKHhsaW5rQXR0cikuc2xpY2UoMSksXG4gICAgICAgIHJlZmVyZW5jZWRHcmFkaWVudCA9IGVsZW1lbnRCeUlkKGRvYywgeExpbmspO1xuICAgIGlmIChyZWZlcmVuY2VkR3JhZGllbnQgJiYgcmVmZXJlbmNlZEdyYWRpZW50LmdldEF0dHJpYnV0ZSh4bGlua0F0dHIpKSB7XG4gICAgICByZWN1cnNpdmVseVBhcnNlR3JhZGllbnRzWGxpbmsoZG9jLCByZWZlcmVuY2VkR3JhZGllbnQpO1xuICAgIH1cbiAgICBncmFkaWVudHNBdHRycy5mb3JFYWNoKGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIGlmIChyZWZlcmVuY2VkR3JhZGllbnQgJiYgIWdyYWRpZW50Lmhhc0F0dHJpYnV0ZShhdHRyKSAmJiByZWZlcmVuY2VkR3JhZGllbnQuaGFzQXR0cmlidXRlKGF0dHIpKSB7XG4gICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZShhdHRyLCByZWZlcmVuY2VkR3JhZGllbnQuZ2V0QXR0cmlidXRlKGF0dHIpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWdyYWRpZW50LmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgdmFyIHJlZmVyZW5jZUNsb25lID0gcmVmZXJlbmNlZEdyYWRpZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIHdoaWxlIChyZWZlcmVuY2VDbG9uZS5maXJzdENoaWxkKSB7XG4gICAgICAgIGdyYWRpZW50LmFwcGVuZENoaWxkKHJlZmVyZW5jZUNsb25lLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgICBncmFkaWVudC5yZW1vdmVBdHRyaWJ1dGUoeGxpbmtBdHRyKTtcbiAgfVxuXG4gIHZhciByZUZvbnREZWNsYXJhdGlvbiA9IG5ldyBSZWdFeHAoXG4gICAgJyhub3JtYWx8aXRhbGljKT9cXFxccyoobm9ybWFsfHNtYWxsLWNhcHMpP1xcXFxzKicgK1xuICAgICcobm9ybWFsfGJvbGR8Ym9sZGVyfGxpZ2h0ZXJ8MTAwfDIwMHwzMDB8NDAwfDUwMHw2MDB8NzAwfDgwMHw5MDApP1xcXFxzKignICtcbiAgICAgIGZhYnJpYy5yZU51bSArXG4gICAgJyg/OnB4fGNtfG1tfGVtfHB0fHBjfGluKSopKD86XFxcXC8obm9ybWFsfCcgKyBmYWJyaWMucmVOdW0gKyAnKSk/XFxcXHMrKC4qKScpO1xuXG4gIGV4dGVuZChmYWJyaWMsIHtcbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBzaG9ydCBmb250IGRlY2xhcmF0aW9uLCBidWlsZGluZyBhZGRpbmcgaXRzIHByb3BlcnRpZXMgdG8gYSBzdHlsZSBvYmplY3RcbiAgICAgKiBAc3RhdGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIGZhYnJpY1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBmb250IGRlY2xhcmF0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9TdHlsZSBkZWZpbml0aW9uXG4gICAgICovXG4gICAgcGFyc2VGb250RGVjbGFyYXRpb246IGZ1bmN0aW9uKHZhbHVlLCBvU3R5bGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IHZhbHVlLm1hdGNoKHJlRm9udERlY2xhcmF0aW9uKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgZm9udFN0eWxlID0gbWF0Y2hbMV0sXG4gICAgICAgICAgLy8gZm9udCB2YXJpYW50IGlzIG5vdCB1c2VkXG4gICAgICAgICAgLy8gZm9udFZhcmlhbnQgPSBtYXRjaFsyXSxcbiAgICAgICAgICBmb250V2VpZ2h0ID0gbWF0Y2hbM10sXG4gICAgICAgICAgZm9udFNpemUgPSBtYXRjaFs0XSxcbiAgICAgICAgICBsaW5lSGVpZ2h0ID0gbWF0Y2hbNV0sXG4gICAgICAgICAgZm9udEZhbWlseSA9IG1hdGNoWzZdO1xuXG4gICAgICBpZiAoZm9udFN0eWxlKSB7XG4gICAgICAgIG9TdHlsZS5mb250U3R5bGUgPSBmb250U3R5bGU7XG4gICAgICB9XG4gICAgICBpZiAoZm9udFdlaWdodCkge1xuICAgICAgICBvU3R5bGUuZm9udFdlaWdodCA9IGlzTmFOKHBhcnNlRmxvYXQoZm9udFdlaWdodCkpID8gZm9udFdlaWdodCA6IHBhcnNlRmxvYXQoZm9udFdlaWdodCk7XG4gICAgICB9XG4gICAgICBpZiAoZm9udFNpemUpIHtcbiAgICAgICAgb1N0eWxlLmZvbnRTaXplID0gcGFyc2VVbml0KGZvbnRTaXplKTtcbiAgICAgIH1cbiAgICAgIGlmIChmb250RmFtaWx5KSB7XG4gICAgICAgIG9TdHlsZS5mb250RmFtaWx5ID0gZm9udEZhbWlseTtcbiAgICAgIH1cbiAgICAgIGlmIChsaW5lSGVpZ2h0KSB7XG4gICAgICAgIG9TdHlsZS5saW5lSGVpZ2h0ID0gbGluZUhlaWdodCA9PT0gJ25vcm1hbCcgPyAxIDogbGluZUhlaWdodDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGFuIFNWRyBkb2N1bWVudCwgcmV0dXJuaW5nIGFsbCBvZiB0aGUgZ3JhZGllbnQgZGVjbGFyYXRpb25zIGZvdW5kIGluIGl0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWNcbiAgICAgKiBAcGFyYW0ge1NWR0RvY3VtZW50fSBkb2MgU1ZHIGRvY3VtZW50IHRvIHBhcnNlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBHcmFkaWVudCBkZWZpbml0aW9uczsga2V5IGNvcnJlc3BvbmRzIHRvIGVsZW1lbnQgaWQsIHZhbHVlIC0tIHRvIGdyYWRpZW50IGRlZmluaXRpb24gZWxlbWVudFxuICAgICAqL1xuICAgIGdldEdyYWRpZW50RGVmczogZnVuY3Rpb24oZG9jKSB7XG4gICAgICB2YXIgdGFnQXJyYXkgPSBbXG4gICAgICAgICAgICAnbGluZWFyR3JhZGllbnQnLFxuICAgICAgICAgICAgJ3JhZGlhbEdyYWRpZW50JyxcbiAgICAgICAgICAgICdzdmc6bGluZWFyR3JhZGllbnQnLFxuICAgICAgICAgICAgJ3N2ZzpyYWRpYWxHcmFkaWVudCddLFxuICAgICAgICAgIGVsTGlzdCA9IF9nZXRNdWx0aXBsZU5vZGVzKGRvYywgdGFnQXJyYXkpLFxuICAgICAgICAgIGVsLCBqID0gMCwgZ3JhZGllbnREZWZzID0geyB9O1xuICAgICAgaiA9IGVsTGlzdC5sZW5ndGg7XG4gICAgICB3aGlsZSAoai0tKSB7XG4gICAgICAgIGVsID0gZWxMaXN0W2pdO1xuICAgICAgICBpZiAoZWwuZ2V0QXR0cmlidXRlKCd4bGluazpocmVmJykpIHtcbiAgICAgICAgICByZWN1cnNpdmVseVBhcnNlR3JhZGllbnRzWGxpbmsoZG9jLCBlbCk7XG4gICAgICAgIH1cbiAgICAgICAgZ3JhZGllbnREZWZzW2VsLmdldEF0dHJpYnV0ZSgnaWQnKV0gPSBlbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBncmFkaWVudERlZnM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGF0dHJpYnV0ZXMnIG5hbWUvdmFsdWUsIGdpdmVuIGVsZW1lbnQgYW5kIGFuIGFycmF5IG9mIGF0dHJpYnV0ZSBuYW1lcztcbiAgICAgKiBQYXJzZXMgcGFyZW50IFwiZ1wiIG5vZGVzIHJlY3Vyc2l2ZWx5IHVwd2FyZHMuXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWNcbiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGF0dHJpYnV0ZXMgQXJyYXkgb2YgYXR0cmlidXRlcyB0byBwYXJzZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgcGFyc2VkIGF0dHJpYnV0ZXMnIG5hbWVzL3ZhbHVlc1xuICAgICAqL1xuICAgIHBhcnNlQXR0cmlidXRlczogZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlcywgc3ZnVWlkKSB7XG5cbiAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSxcbiAgICAgICAgICBwYXJlbnRBdHRyaWJ1dGVzID0geyB9LFxuICAgICAgICAgIGZvbnRTaXplLCBwYXJlbnRGb250U2l6ZTtcblxuICAgICAgaWYgKHR5cGVvZiBzdmdVaWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHN2Z1VpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzdmdVaWQnKTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHRoZXJlJ3MgYSBwYXJlbnQgY29udGFpbmVyIChgZ2Agb3IgYGFgIG9yIGBzeW1ib2xgIG5vZGUpLCBwYXJzZSBpdHMgYXR0cmlidXRlcyByZWN1cnNpdmVseSB1cHdhcmRzXG4gICAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlICYmIGZhYnJpYy5zdmdWYWxpZFBhcmVudHNSZWdFeC50ZXN0KGVsZW1lbnQucGFyZW50Tm9kZS5ub2RlTmFtZSkpIHtcbiAgICAgICAgcGFyZW50QXR0cmlidXRlcyA9IGZhYnJpYy5wYXJzZUF0dHJpYnV0ZXMoZWxlbWVudC5wYXJlbnROb2RlLCBhdHRyaWJ1dGVzLCBzdmdVaWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3duQXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMucmVkdWNlKGZ1bmN0aW9uKG1lbW8sIGF0dHIpIHtcbiAgICAgICAgdmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICBtZW1vW2F0dHJdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7IH0pO1xuICAgICAgLy8gYWRkIHZhbHVlcyBwYXJzZWQgZnJvbSBzdHlsZSwgd2hpY2ggdGFrZSBwcmVjZWRlbmNlIG92ZXIgYXR0cmlidXRlc1xuICAgICAgLy8gKHNlZTogaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3N0eWxpbmcuaHRtbCNVc2luZ1ByZXNlbnRhdGlvbkF0dHJpYnV0ZXMpXG4gICAgICB2YXIgY3NzQXR0cnMgPSBleHRlbmQoXG4gICAgICAgIGdldEdsb2JhbFN0eWxlc0ZvckVsZW1lbnQoZWxlbWVudCwgc3ZnVWlkKSxcbiAgICAgICAgZmFicmljLnBhcnNlU3R5bGVBdHRyaWJ1dGUoZWxlbWVudClcbiAgICAgICk7XG4gICAgICBvd25BdHRyaWJ1dGVzID0gZXh0ZW5kKFxuICAgICAgICBvd25BdHRyaWJ1dGVzLFxuICAgICAgICBjc3NBdHRyc1xuICAgICAgKTtcbiAgICAgIGlmIChjc3NBdHRyc1tjUGF0aF0pIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoY1BhdGgsIGNzc0F0dHJzW2NQYXRoXSk7XG4gICAgICB9XG4gICAgICBmb250U2l6ZSA9IHBhcmVudEZvbnRTaXplID0gcGFyZW50QXR0cmlidXRlcy5mb250U2l6ZSB8fCBmYWJyaWMuVGV4dC5ERUZBVUxUX1NWR19GT05UX1NJWkU7XG4gICAgICBpZiAob3duQXR0cmlidXRlc1tmU2l6ZV0pIHtcbiAgICAgICAgLy8gbG9va3MgbGlrZSB0aGUgbWluaW11bSBzaG91bGQgYmUgOXB4IHdoZW4gZGVhbGluZyB3aXRoIGVtcy4gdGhpcyBpcyB3aGF0IGxvb2tzIGxpa2UgaW4gYnJvd3NlcnMuXG4gICAgICAgIG93bkF0dHJpYnV0ZXNbZlNpemVdID0gZm9udFNpemUgPSBwYXJzZVVuaXQob3duQXR0cmlidXRlc1tmU2l6ZV0sIHBhcmVudEZvbnRTaXplKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5vcm1hbGl6ZWRBdHRyLCBub3JtYWxpemVkVmFsdWUsIG5vcm1hbGl6ZWRTdHlsZSA9IHt9O1xuICAgICAgZm9yICh2YXIgYXR0ciBpbiBvd25BdHRyaWJ1dGVzKSB7XG4gICAgICAgIG5vcm1hbGl6ZWRBdHRyID0gbm9ybWFsaXplQXR0cihhdHRyKTtcbiAgICAgICAgbm9ybWFsaXplZFZhbHVlID0gbm9ybWFsaXplVmFsdWUobm9ybWFsaXplZEF0dHIsIG93bkF0dHJpYnV0ZXNbYXR0cl0sIHBhcmVudEF0dHJpYnV0ZXMsIGZvbnRTaXplKTtcbiAgICAgICAgbm9ybWFsaXplZFN0eWxlW25vcm1hbGl6ZWRBdHRyXSA9IG5vcm1hbGl6ZWRWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChub3JtYWxpemVkU3R5bGUgJiYgbm9ybWFsaXplZFN0eWxlLmZvbnQpIHtcbiAgICAgICAgZmFicmljLnBhcnNlRm9udERlY2xhcmF0aW9uKG5vcm1hbGl6ZWRTdHlsZS5mb250LCBub3JtYWxpemVkU3R5bGUpO1xuICAgICAgfVxuICAgICAgdmFyIG1lcmdlZEF0dHJzID0gZXh0ZW5kKHBhcmVudEF0dHJpYnV0ZXMsIG5vcm1hbGl6ZWRTdHlsZSk7XG4gICAgICByZXR1cm4gZmFicmljLnN2Z1ZhbGlkUGFyZW50c1JlZ0V4LnRlc3QoZWxlbWVudC5ub2RlTmFtZSkgPyBtZXJnZWRBdHRycyA6IF9zZXRTdHJva2VGaWxsT3BhY2l0eShtZXJnZWRBdHRycyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgYW4gYXJyYXkgb2Ygc3ZnIGVsZW1lbnRzIHRvIGNvcnJlc3BvbmRpbmcgZmFicmljLiogaW5zdGFuY2VzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBlbGVtZW50cyBBcnJheSBvZiBlbGVtZW50cyB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIEJlaW5nIHBhc3NlZCBhbiBhcnJheSBvZiBmYWJyaWMgaW5zdGFuY2VzICh0cmFuc2Zvcm1lZCBmcm9tIFNWRyBlbGVtZW50cylcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdIE1ldGhvZCBmb3IgZnVydGhlciBwYXJzaW5nIG9mIFNWRyBlbGVtZW50cywgY2FsbGVkIGFmdGVyIGVhY2ggZmFicmljIG9iamVjdCBjcmVhdGVkLlxuICAgICAqL1xuICAgIHBhcnNlRWxlbWVudHM6IGZ1bmN0aW9uKGVsZW1lbnRzLCBjYWxsYmFjaywgb3B0aW9ucywgcmV2aXZlciwgcGFyc2luZ09wdGlvbnMpIHtcbiAgICAgIG5ldyBmYWJyaWMuRWxlbWVudHNQYXJzZXIoZWxlbWVudHMsIGNhbGxiYWNrLCBvcHRpb25zLCByZXZpdmVyLCBwYXJzaW5nT3B0aW9ucykucGFyc2UoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIFwic3R5bGVcIiBhdHRyaWJ1dGUsIHJldHVuaW5nIGFuIG9iamVjdCB3aXRoIHZhbHVlc1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljXG4gICAgICogQHBhcmFtIHtTVkdFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gcGFyc2VcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdHMgd2l0aCB2YWx1ZXMgcGFyc2VkIGZyb20gc3R5bGUgYXR0cmlidXRlIG9mIGFuIGVsZW1lbnRcbiAgICAgKi9cbiAgICBwYXJzZVN0eWxlQXR0cmlidXRlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICB2YXIgb1N0eWxlID0geyB9LFxuICAgICAgICAgIHN0eWxlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7XG5cbiAgICAgIGlmICghc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIG9TdHlsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGFyc2VTdHlsZVN0cmluZyhzdHlsZSwgb1N0eWxlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBwYXJzZVN0eWxlT2JqZWN0KHN0eWxlLCBvU3R5bGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb1N0eWxlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgXCJwb2ludHNcIiBhdHRyaWJ1dGUsIHJldHVybmluZyBhbiBhcnJheSBvZiB2YWx1ZXNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpY1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwb2ludHMgcG9pbnRzIGF0dHJpYnV0ZSBzdHJpbmdcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gYXJyYXkgb2YgcG9pbnRzXG4gICAgICovXG4gICAgcGFyc2VQb2ludHNBdHRyaWJ1dGU6IGZ1bmN0aW9uKHBvaW50cykge1xuXG4gICAgICAvLyBwb2ludHMgYXR0cmlidXRlIGlzIHJlcXVpcmVkIGFuZCBtdXN0IG5vdCBiZSBlbXB0eVxuICAgICAgaWYgKCFwb2ludHMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlcGxhY2UgY29tbWFzIHdpdGggd2hpdGVzcGFjZSBhbmQgcmVtb3ZlIGJvb2tlbmRpbmcgd2hpdGVzcGFjZVxuICAgICAgcG9pbnRzID0gcG9pbnRzLnJlcGxhY2UoLywvZywgJyAnKS50cmltKCk7XG5cbiAgICAgIHBvaW50cyA9IHBvaW50cy5zcGxpdCgvXFxzKy8pO1xuICAgICAgdmFyIHBhcnNlZFBvaW50cyA9IFtdLCBpLCBsZW47XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMikge1xuICAgICAgICBwYXJzZWRQb2ludHMucHVzaCh7XG4gICAgICAgICAgeDogcGFyc2VGbG9hdChwb2ludHNbaV0pLFxuICAgICAgICAgIHk6IHBhcnNlRmxvYXQocG9pbnRzW2kgKyAxXSlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIG9kZCBudW1iZXIgb2YgcG9pbnRzIGlzIGFuIGVycm9yXG4gICAgICAvLyBpZiAocGFyc2VkUG9pbnRzLmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICAgIC8vICAgcmV0dXJuIG51bGw7XG4gICAgICAvLyB9XG5cbiAgICAgIHJldHVybiBwYXJzZWRQb2ludHM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgQ1NTIHJ1bGVzIGZvciBhIGdpdmVuIFNWRyBkb2N1bWVudFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgZmFicmljXG4gICAgICogQHBhcmFtIHtTVkdEb2N1bWVudH0gZG9jIFNWRyBkb2N1bWVudCB0byBwYXJzZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQ1NTIHJ1bGVzIG9mIHRoaXMgZG9jdW1lbnRcbiAgICAgKi9cbiAgICBnZXRDU1NSdWxlczogZnVuY3Rpb24oZG9jKSB7XG4gICAgICB2YXIgc3R5bGVzID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdHlsZScpLCBpLCBsZW4sXG4gICAgICAgICAgYWxsUnVsZXMgPSB7IH0sIHJ1bGVzO1xuXG4gICAgICAvLyB2ZXJ5IGNydWRlIHBhcnNpbmcgb2Ygc3R5bGUgY29udGVudHNcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHN0eWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgc3R5bGVDb250ZW50cyA9IHN0eWxlc1tpXS50ZXh0Q29udGVudDtcblxuICAgICAgICAvLyByZW1vdmUgY29tbWVudHNcbiAgICAgICAgc3R5bGVDb250ZW50cyA9IHN0eWxlQ29udGVudHMucmVwbGFjZSgvXFwvXFwqW1xcc1xcU10qP1xcKlxcLy9nLCAnJyk7XG4gICAgICAgIGlmIChzdHlsZUNvbnRlbnRzLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWNvdmVycyBhbGwgdGhlIHJ1bGUgaW4gdGhpcyBmb3JtIGBib2R5IHsgc3R5bGUgY29kZS4uLiB9YFxuICAgICAgICAvLyBydWxlcyA9IHN0eWxlQ29udGVudHMubWF0Y2goL1tee10qXFx7W1xcc1xcU10qP1xcfS9nKTtcbiAgICAgICAgcnVsZXMgPSBzdHlsZUNvbnRlbnRzLnNwbGl0KCd9Jyk7XG4gICAgICAgIC8vIHJlbW92ZSBlbXB0eSBydWxlcy5cbiAgICAgICAgcnVsZXMgPSBydWxlcy5maWx0ZXIoZnVuY3Rpb24ocnVsZSkgeyByZXR1cm4gcnVsZS50cmltKCk7IH0pO1xuICAgICAgICAvLyBhdCB0aGlzIHBvaW50IHdlIGhhdmUgaG9wZWZ1bGx5IGFuIGFycmF5IG9mIHJ1bGVzIGBib2R5IHsgc3R5bGUgY29kZS4uLiBgXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgICAgcnVsZXMuZm9yRWFjaChmdW5jdGlvbihydWxlKSB7XG5cbiAgICAgICAgICB2YXIgbWF0Y2ggPSBydWxlLnNwbGl0KCd7JyksXG4gICAgICAgICAgICAgIHJ1bGVPYmogPSB7IH0sIGRlY2xhcmF0aW9uID0gbWF0Y2hbMV0udHJpbSgpLFxuICAgICAgICAgICAgICBwcm9wZXJ0eVZhbHVlUGFpcnMgPSBkZWNsYXJhdGlvbi5zcGxpdCgnOycpLmZpbHRlcihmdW5jdGlvbihwYWlyKSB7IHJldHVybiBwYWlyLnRyaW0oKTsgfSk7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBwcm9wZXJ0eVZhbHVlUGFpcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYWlyID0gcHJvcGVydHlWYWx1ZVBhaXJzW2ldLnNwbGl0KCc6JyksXG4gICAgICAgICAgICAgICAgcHJvcGVydHkgPSBwYWlyWzBdLnRyaW0oKSxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhaXJbMV0udHJpbSgpO1xuICAgICAgICAgICAgcnVsZU9ialtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcnVsZSA9IG1hdGNoWzBdLnRyaW0oKTtcbiAgICAgICAgICBydWxlLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbihfcnVsZSkge1xuICAgICAgICAgICAgX3J1bGUgPSBfcnVsZS5yZXBsYWNlKC9ec3ZnL2ksICcnKS50cmltKCk7XG4gICAgICAgICAgICBpZiAoX3J1bGUgPT09ICcnKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbGxSdWxlc1tfcnVsZV0pIHtcbiAgICAgICAgICAgICAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChhbGxSdWxlc1tfcnVsZV0sIHJ1bGVPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGFsbFJ1bGVzW19ydWxlXSA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZShydWxlT2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxsUnVsZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRha2VzIHVybCBjb3JyZXNwb25kaW5nIHRvIGFuIFNWRyBkb2N1bWVudCwgYW5kIHBhcnNlcyBpdCBpbnRvIGEgc2V0IG9mIGZhYnJpYyBvYmplY3RzLlxuICAgICAqIE5vdGUgdGhhdCBTVkcgaXMgZmV0Y2hlZCB2aWEgWE1MSHR0cFJlcXVlc3QsIHNvIGl0IG5lZWRzIHRvIGNvbmZvcm0gdG8gU09QIChTYW1lIE9yaWdpbiBQb2xpY3kpXG4gICAgICogQG1lbWJlck9mIGZhYnJpY1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXZpdmVyXSBNZXRob2QgZm9yIGZ1cnRoZXIgcGFyc2luZyBvZiBTVkcgZWxlbWVudHMsIGNhbGxlZCBhZnRlciBlYWNoIGZhYnJpYyBvYmplY3QgY3JlYXRlZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9iamVjdCBjb250YWluaW5nIG9wdGlvbnMgZm9yIHBhcnNpbmdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuY3Jvc3NPcmlnaW5dIGNyb3NzT3JpZ2luIGNyb3NzT3JpZ2luIHNldHRpbmcgdG8gdXNlIGZvciBleHRlcm5hbCByZXNvdXJjZXNcbiAgICAgKi9cbiAgICBsb2FkU1ZHRnJvbVVSTDogZnVuY3Rpb24odXJsLCBjYWxsYmFjaywgcmV2aXZlciwgb3B0aW9ucykge1xuXG4gICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXlxcblxccyovLCAnJykudHJpbSgpO1xuICAgICAgbmV3IGZhYnJpYy51dGlsLnJlcXVlc3QodXJsLCB7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIG9uQ29tcGxldGU6IG9uQ29tcGxldGVcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBvbkNvbXBsZXRlKHIpIHtcblxuICAgICAgICB2YXIgeG1sID0gci5yZXNwb25zZVhNTDtcbiAgICAgICAgaWYgKCF4bWwgfHwgIXhtbC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmYWJyaWMucGFyc2VTVkdEb2N1bWVudCh4bWwuZG9jdW1lbnRFbGVtZW50LCBmdW5jdGlvbiAocmVzdWx0cywgX29wdGlvbnMsIGVsZW1lbnRzLCBhbGxFbGVtZW50cykge1xuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHJlc3VsdHMsIF9vcHRpb25zLCBlbGVtZW50cywgYWxsRWxlbWVudHMpO1xuICAgICAgICB9LCByZXZpdmVyLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGFrZXMgc3RyaW5nIGNvcnJlc3BvbmRpbmcgdG8gYW4gU1ZHIGRvY3VtZW50LCBhbmQgcGFyc2VzIGl0IGludG8gYSBzZXQgb2YgZmFicmljIG9iamVjdHNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdIE1ldGhvZCBmb3IgZnVydGhlciBwYXJzaW5nIG9mIFNWRyBlbGVtZW50cywgY2FsbGVkIGFmdGVyIGVhY2ggZmFicmljIG9iamVjdCBjcmVhdGVkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT2JqZWN0IGNvbnRhaW5pbmcgb3B0aW9ucyBmb3IgcGFyc2luZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5jcm9zc09yaWdpbl0gY3Jvc3NPcmlnaW4gY3Jvc3NPcmlnaW4gc2V0dGluZyB0byB1c2UgZm9yIGV4dGVybmFsIHJlc291cmNlc1xuICAgICAqL1xuICAgIGxvYWRTVkdGcm9tU3RyaW5nOiBmdW5jdGlvbihzdHJpbmcsIGNhbGxiYWNrLCByZXZpdmVyLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcGFyc2VyID0gbmV3IGZhYnJpYy53aW5kb3cuRE9NUGFyc2VyKCksXG4gICAgICAgICAgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhzdHJpbmcudHJpbSgpLCAndGV4dC94bWwnKTtcbiAgICAgIGZhYnJpYy5wYXJzZVNWR0RvY3VtZW50KGRvYy5kb2N1bWVudEVsZW1lbnQsIGZ1bmN0aW9uIChyZXN1bHRzLCBfb3B0aW9ucywgZWxlbWVudHMsIGFsbEVsZW1lbnRzKSB7XG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdHMsIF9vcHRpb25zLCBlbGVtZW50cywgYWxsRWxlbWVudHMpO1xuICAgICAgfSwgcmV2aXZlciwgb3B0aW9ucyk7XG4gICAgfVxuICB9KTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbmZhYnJpYy5FbGVtZW50c1BhcnNlciA9IGZ1bmN0aW9uKGVsZW1lbnRzLCBjYWxsYmFjaywgb3B0aW9ucywgcmV2aXZlciwgcGFyc2luZ09wdGlvbnMsIGRvYykge1xuICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5yZXZpdmVyID0gcmV2aXZlcjtcbiAgdGhpcy5zdmdVaWQgPSAob3B0aW9ucyAmJiBvcHRpb25zLnN2Z1VpZCkgfHwgMDtcbiAgdGhpcy5wYXJzaW5nT3B0aW9ucyA9IHBhcnNpbmdPcHRpb25zO1xuICB0aGlzLnJlZ2V4VXJsID0gL151cmxcXChbJ1wiXT8jKFteJ1wiXSspWydcIl0/XFwpL2c7XG4gIHRoaXMuZG9jID0gZG9jO1xufTtcblxuKGZ1bmN0aW9uKHByb3RvKSB7XG4gIHByb3RvLnBhcnNlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbnN0YW5jZXMgPSBuZXcgQXJyYXkodGhpcy5lbGVtZW50cy5sZW5ndGgpO1xuICAgIHRoaXMubnVtRWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcbiAgICB0aGlzLmNyZWF0ZU9iamVjdHMoKTtcbiAgfTtcblxuICBwcm90by5jcmVhdGVPYmplY3RzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCwgaSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N2Z1VpZCcsIF90aGlzLnN2Z1VpZCk7XG4gICAgICBfdGhpcy5jcmVhdGVPYmplY3QoZWxlbWVudCwgaSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcHJvdG8uZmluZFRhZyA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuIGZhYnJpY1tmYWJyaWMudXRpbC5zdHJpbmcuY2FwaXRhbGl6ZShlbC50YWdOYW1lLnJlcGxhY2UoJ3N2ZzonLCAnJykpXTtcbiAgfTtcblxuICBwcm90by5jcmVhdGVPYmplY3QgPSBmdW5jdGlvbihlbCwgaW5kZXgpIHtcbiAgICB2YXIga2xhc3MgPSB0aGlzLmZpbmRUYWcoZWwpO1xuICAgIGlmIChrbGFzcyAmJiBrbGFzcy5mcm9tRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAga2xhc3MuZnJvbUVsZW1lbnQoZWwsIHRoaXMuY3JlYXRlQ2FsbGJhY2soaW5kZXgsIGVsKSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgZmFicmljLmxvZyhlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuY2hlY2tJZkRvbmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcHJvdG8uY3JlYXRlQ2FsbGJhY2sgPSBmdW5jdGlvbihpbmRleCwgZWwpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHZhciBfb3B0aW9ucztcbiAgICAgIF90aGlzLnJlc29sdmVHcmFkaWVudChvYmosIGVsLCAnZmlsbCcpO1xuICAgICAgX3RoaXMucmVzb2x2ZUdyYWRpZW50KG9iaiwgZWwsICdzdHJva2UnKTtcbiAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBmYWJyaWMuSW1hZ2UgJiYgb2JqLl9vcmlnaW5hbEVsZW1lbnQpIHtcbiAgICAgICAgX29wdGlvbnMgPSBvYmoucGFyc2VQcmVzZXJ2ZUFzcGVjdFJhdGlvQXR0cmlidXRlKGVsKTtcbiAgICAgIH1cbiAgICAgIG9iai5fcmVtb3ZlVHJhbnNmb3JtTWF0cml4KF9vcHRpb25zKTtcbiAgICAgIF90aGlzLnJlc29sdmVDbGlwUGF0aChvYmosIGVsKTtcbiAgICAgIF90aGlzLnJldml2ZXIgJiYgX3RoaXMucmV2aXZlcihlbCwgb2JqKTtcbiAgICAgIF90aGlzLmluc3RhbmNlc1tpbmRleF0gPSBvYmo7XG4gICAgICBfdGhpcy5jaGVja0lmRG9uZSgpO1xuICAgIH07XG4gIH07XG5cbiAgcHJvdG8uZXh0cmFjdFByb3BlcnR5RGVmaW5pdGlvbiA9IGZ1bmN0aW9uKG9iaiwgcHJvcGVydHksIHN0b3JhZ2UpIHtcbiAgICB2YXIgdmFsdWUgPSBvYmpbcHJvcGVydHldLCByZWdleCA9IHRoaXMucmVnZXhVcmw7XG4gICAgaWYgKCFyZWdleC50ZXN0KHZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZWdleC5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBpZCA9IHJlZ2V4LmV4ZWModmFsdWUpWzFdO1xuICAgIHJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgcmV0dXJuIGZhYnJpY1tzdG9yYWdlXVt0aGlzLnN2Z1VpZF1baWRdO1xuICB9O1xuXG4gIHByb3RvLnJlc29sdmVHcmFkaWVudCA9IGZ1bmN0aW9uKG9iaiwgZWwsIHByb3BlcnR5KSB7XG4gICAgdmFyIGdyYWRpZW50RGVmID0gdGhpcy5leHRyYWN0UHJvcGVydHlEZWZpbml0aW9uKG9iaiwgcHJvcGVydHksICdncmFkaWVudERlZnMnKTtcbiAgICBpZiAoZ3JhZGllbnREZWYpIHtcbiAgICAgIHZhciBvcGFjaXR5QXR0ciA9IGVsLmdldEF0dHJpYnV0ZShwcm9wZXJ0eSArICctb3BhY2l0eScpO1xuICAgICAgdmFyIGdyYWRpZW50ID0gZmFicmljLkdyYWRpZW50LmZyb21FbGVtZW50KGdyYWRpZW50RGVmLCBvYmosIG9wYWNpdHlBdHRyLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgb2JqLnNldChwcm9wZXJ0eSwgZ3JhZGllbnQpO1xuICAgIH1cbiAgfTtcblxuICBwcm90by5jcmVhdGVDbGlwUGF0aENhbGxiYWNrID0gZnVuY3Rpb24ob2JqLCBjb250YWluZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oX25ld09iaikge1xuICAgICAgX25ld09iai5fcmVtb3ZlVHJhbnNmb3JtTWF0cml4KCk7XG4gICAgICBfbmV3T2JqLmZpbGxSdWxlID0gX25ld09iai5jbGlwUnVsZTtcbiAgICAgIGNvbnRhaW5lci5wdXNoKF9uZXdPYmopO1xuICAgIH07XG4gIH07XG5cbiAgcHJvdG8ucmVzb2x2ZUNsaXBQYXRoID0gZnVuY3Rpb24ob2JqLCB1c2luZ0VsZW1lbnQpIHtcbiAgICB2YXIgY2xpcFBhdGggPSB0aGlzLmV4dHJhY3RQcm9wZXJ0eURlZmluaXRpb24ob2JqLCAnY2xpcFBhdGgnLCAnY2xpcFBhdGhzJyksXG4gICAgICAgIGVsZW1lbnQsIGtsYXNzLCBvYmpUcmFuc2Zvcm1JbnYsIGNvbnRhaW5lciwgZ1RyYW5zZm9ybSwgb3B0aW9ucztcbiAgICBpZiAoY2xpcFBhdGgpIHtcbiAgICAgIGNvbnRhaW5lciA9IFtdO1xuICAgICAgb2JqVHJhbnNmb3JtSW52ID0gZmFicmljLnV0aWwuaW52ZXJ0VHJhbnNmb3JtKG9iai5jYWxjVHJhbnNmb3JtTWF0cml4KCkpO1xuICAgICAgLy8gbW92ZSB0aGUgY2xpcFBhdGggdGFnIGFzIHNpYmxpbmcgdG8gdGhlIHJlYWwgZWxlbWVudCB0aGF0IGlzIHVzaW5nIGl0XG4gICAgICB2YXIgY2xpcFBhdGhUYWcgPSBjbGlwUGF0aFswXS5wYXJlbnROb2RlO1xuICAgICAgdmFyIGNsaXBQYXRoT3duZXIgPSB1c2luZ0VsZW1lbnQ7XG4gICAgICB3aGlsZSAoY2xpcFBhdGhPd25lci5wYXJlbnROb2RlICYmIGNsaXBQYXRoT3duZXIuZ2V0QXR0cmlidXRlKCdjbGlwLXBhdGgnKSAhPT0gb2JqLmNsaXBQYXRoKSB7XG4gICAgICAgIGNsaXBQYXRoT3duZXIgPSBjbGlwUGF0aE93bmVyLnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgICBjbGlwUGF0aE93bmVyLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoY2xpcFBhdGhUYWcpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGlwUGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbGVtZW50ID0gY2xpcFBhdGhbaV07XG4gICAgICAgIGtsYXNzID0gdGhpcy5maW5kVGFnKGVsZW1lbnQpO1xuICAgICAgICBrbGFzcy5mcm9tRWxlbWVudChcbiAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgIHRoaXMuY3JlYXRlQ2xpcFBhdGhDYWxsYmFjayhvYmosIGNvbnRhaW5lciksXG4gICAgICAgICAgdGhpcy5vcHRpb25zXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoY29udGFpbmVyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjbGlwUGF0aCA9IGNvbnRhaW5lclswXTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjbGlwUGF0aCA9IG5ldyBmYWJyaWMuR3JvdXAoY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICAgIGdUcmFuc2Zvcm0gPSBmYWJyaWMudXRpbC5tdWx0aXBseVRyYW5zZm9ybU1hdHJpY2VzKFxuICAgICAgICBvYmpUcmFuc2Zvcm1JbnYsXG4gICAgICAgIGNsaXBQYXRoLmNhbGNUcmFuc2Zvcm1NYXRyaXgoKVxuICAgICAgKTtcbiAgICAgIGlmIChjbGlwUGF0aC5jbGlwUGF0aCkge1xuICAgICAgICB0aGlzLnJlc29sdmVDbGlwUGF0aChjbGlwUGF0aCwgY2xpcFBhdGhPd25lcik7XG4gICAgICB9XG4gICAgICB2YXIgb3B0aW9ucyA9IGZhYnJpYy51dGlsLnFyRGVjb21wb3NlKGdUcmFuc2Zvcm0pO1xuICAgICAgY2xpcFBhdGguZmxpcFggPSBmYWxzZTtcbiAgICAgIGNsaXBQYXRoLmZsaXBZID0gZmFsc2U7XG4gICAgICBjbGlwUGF0aC5zZXQoJ3NjYWxlWCcsIG9wdGlvbnMuc2NhbGVYKTtcbiAgICAgIGNsaXBQYXRoLnNldCgnc2NhbGVZJywgb3B0aW9ucy5zY2FsZVkpO1xuICAgICAgY2xpcFBhdGguYW5nbGUgPSBvcHRpb25zLmFuZ2xlO1xuICAgICAgY2xpcFBhdGguc2tld1ggPSBvcHRpb25zLnNrZXdYO1xuICAgICAgY2xpcFBhdGguc2tld1kgPSAwO1xuICAgICAgY2xpcFBhdGguc2V0UG9zaXRpb25CeU9yaWdpbih7IHg6IG9wdGlvbnMudHJhbnNsYXRlWCwgeTogb3B0aW9ucy50cmFuc2xhdGVZIH0sICdjZW50ZXInLCAnY2VudGVyJyk7XG4gICAgICBvYmouY2xpcFBhdGggPSBjbGlwUGF0aDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBpZiBjbGlwLXBhdGggZG9lcyBub3QgcmVzb2x2ZSB0byBhbnkgZWxlbWVudCwgZGVsZXRlIHRoZSBwcm9wZXJ0eS5cbiAgICAgIGRlbGV0ZSBvYmouY2xpcFBhdGg7XG4gICAgfVxuICB9O1xuXG4gIHByb3RvLmNoZWNrSWZEb25lID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKC0tdGhpcy5udW1FbGVtZW50cyA9PT0gMCkge1xuICAgICAgdGhpcy5pbnN0YW5jZXMgPSB0aGlzLmluc3RhbmNlcy5maWx0ZXIoZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsIGVxZXFlcVxuICAgICAgICByZXR1cm4gZWwgIT0gbnVsbDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLmluc3RhbmNlcywgdGhpcy5lbGVtZW50cyk7XG4gICAgfVxuICB9O1xufSkoZmFicmljLkVsZW1lbnRzUGFyc2VyLnByb3RvdHlwZSk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvKiBBZGFwdGF0aW9uIG9mIHdvcmsgb2YgS2V2aW4gTGluZHNleSAoa2V2aW5Aa2V2bGluZGV2LmNvbSkgKi9cblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSk7XG5cbiAgaWYgKGZhYnJpYy5Qb2ludCkge1xuICAgIGZhYnJpYy53YXJuKCdmYWJyaWMuUG9pbnQgaXMgYWxyZWFkeSBkZWZpbmVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZmFicmljLlBvaW50ID0gUG9pbnQ7XG5cbiAgLyoqXG4gICAqIFBvaW50IGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuUG9pbnRcbiAgICogQG1lbWJlck9mIGZhYnJpY1xuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICogQHJldHVybiB7ZmFicmljLlBvaW50fSB0aGlzQXJnXG4gICAqL1xuICBmdW5jdGlvbiBQb2ludCh4LCB5KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgUG9pbnQucHJvdG90eXBlID0gLyoqIEBsZW5kcyBmYWJyaWMuUG9pbnQucHJvdG90eXBlICovIHtcblxuICAgIHR5cGU6ICdwb2ludCcsXG5cbiAgICBjb25zdHJ1Y3RvcjogUG9pbnQsXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFub3RoZXIgcG9pbnQgdG8gdGhpcyBvbmUgYW5kIHJldHVybnMgYW5vdGhlciBvbmVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH0gbmV3IFBvaW50IGluc3RhbmNlIHdpdGggYWRkZWQgdmFsdWVzXG4gICAgICovXG4gICAgYWRkOiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggKyB0aGF0LngsIHRoaXMueSArIHRoYXQueSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYW5vdGhlciBwb2ludCB0byB0aGlzIG9uZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSB0aGF0XG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGFkZEVxdWFsczogZnVuY3Rpb24gKHRoYXQpIHtcbiAgICAgIHRoaXMueCArPSB0aGF0Lng7XG4gICAgICB0aGlzLnkgKz0gdGhhdC55O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZHMgdmFsdWUgdG8gdGhpcyBwb2ludCBhbmQgcmV0dXJucyBhIG5ldyBvbmVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGFyXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fSBuZXcgUG9pbnQgd2l0aCBhZGRlZCB2YWx1ZVxuICAgICAqL1xuICAgIHNjYWxhckFkZDogZnVuY3Rpb24gKHNjYWxhcikge1xuICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggKyBzY2FsYXIsIHRoaXMueSArIHNjYWxhcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZHMgdmFsdWUgdG8gdGhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2NhbGFyQWRkRXF1YWxzOiBmdW5jdGlvbiAoc2NhbGFyKSB7XG4gICAgICB0aGlzLnggKz0gc2NhbGFyO1xuICAgICAgdGhpcy55ICs9IHNjYWxhcjtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgYW5vdGhlciBwb2ludCBmcm9tIHRoaXMgcG9pbnQgYW5kIHJldHVybnMgYSBuZXcgb25lXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9IG5ldyBQb2ludCBvYmplY3Qgd2l0aCBzdWJ0cmFjdGVkIHZhbHVlc1xuICAgICAqL1xuICAgIHN1YnRyYWN0OiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggLSB0aGF0LngsIHRoaXMueSAtIHRoYXQueSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyBhbm90aGVyIHBvaW50IGZyb20gdGhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSB0aGF0XG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHN1YnRyYWN0RXF1YWxzOiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgdGhpcy54IC09IHRoYXQueDtcbiAgICAgIHRoaXMueSAtPSB0aGF0Lnk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3RzIHZhbHVlIGZyb20gdGhpcyBwb2ludCBhbmQgcmV0dXJucyBhIG5ldyBvbmVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGFyXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIHNjYWxhclN1YnRyYWN0OiBmdW5jdGlvbiAoc2NhbGFyKSB7XG4gICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAtIHNjYWxhciwgdGhpcy55IC0gc2NhbGFyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3RzIHZhbHVlIGZyb20gdGhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2NhbGFyU3VidHJhY3RFcXVhbHM6IGZ1bmN0aW9uIChzY2FsYXIpIHtcbiAgICAgIHRoaXMueCAtPSBzY2FsYXI7XG4gICAgICB0aGlzLnkgLT0gc2NhbGFyO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdGhpcyBwb2ludCBieSBhIHZhbHVlIGFuZCByZXR1cm5zIGEgbmV3IG9uZVxuICAgICAqIFRPRE86IHJlbmFtZSBpbiBzY2FsYXJNdWx0aXBseSBpbiAyLjBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGFyXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIG11bHRpcGx5OiBmdW5jdGlvbiAoc2NhbGFyKSB7XG4gICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAqIHNjYWxhciwgdGhpcy55ICogc2NhbGFyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGlzIHBvaW50IGJ5IGEgdmFsdWVcbiAgICAgKiBUT0RPOiByZW5hbWUgaW4gc2NhbGFyTXVsdGlwbHlFcXVhbHMgaW4gMi4wXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxhclxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBtdWx0aXBseUVxdWFsczogZnVuY3Rpb24gKHNjYWxhcikge1xuICAgICAgdGhpcy54ICo9IHNjYWxhcjtcbiAgICAgIHRoaXMueSAqPSBzY2FsYXI7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGl2aWRlcyB0aGlzIHBvaW50IGJ5IGEgdmFsdWUgYW5kIHJldHVybnMgYSBuZXcgb25lXG4gICAgICogVE9ETzogcmVuYW1lIGluIHNjYWxhckRpdmlkZSBpbiAyLjBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGFyXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIGRpdmlkZTogZnVuY3Rpb24gKHNjYWxhcikge1xuICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggLyBzY2FsYXIsIHRoaXMueSAvIHNjYWxhcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERpdmlkZXMgdGhpcyBwb2ludCBieSBhIHZhbHVlXG4gICAgICogVE9ETzogcmVuYW1lIGluIHNjYWxhckRpdmlkZUVxdWFscyBpbiAyLjBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGFyXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGRpdmlkZUVxdWFsczogZnVuY3Rpb24gKHNjYWxhcikge1xuICAgICAgdGhpcy54IC89IHNjYWxhcjtcbiAgICAgIHRoaXMueSAvPSBzY2FsYXI7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgcG9pbnQgaXMgZXF1YWwgdG8gYW5vdGhlciBvbmVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgZXE6IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICByZXR1cm4gKHRoaXMueCA9PT0gdGhhdC54ICYmIHRoaXMueSA9PT0gdGhhdC55KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgcG9pbnQgaXMgbGVzcyB0aGFuIGFub3RoZXIgb25lXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGx0OiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgcmV0dXJuICh0aGlzLnggPCB0aGF0LnggJiYgdGhpcy55IDwgdGhhdC55KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgcG9pbnQgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGFub3RoZXIgb25lXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGx0ZTogZnVuY3Rpb24gKHRoYXQpIHtcbiAgICAgIHJldHVybiAodGhpcy54IDw9IHRoYXQueCAmJiB0aGlzLnkgPD0gdGhhdC55KTtcbiAgICB9LFxuXG4gICAgLyoqXG5cbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBwb2ludCBpcyBncmVhdGVyIGFub3RoZXIgb25lXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGd0OiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgcmV0dXJuICh0aGlzLnggPiB0aGF0LnggJiYgdGhpcy55ID4gdGhhdC55KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgcG9pbnQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGFub3RoZXIgb25lXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGd0ZTogZnVuY3Rpb24gKHRoYXQpIHtcbiAgICAgIHJldHVybiAodGhpcy54ID49IHRoYXQueCAmJiB0aGlzLnkgPj0gdGhhdC55KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBuZXcgcG9pbnQgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBsaW5lYXIgaW50ZXJwb2xhdGlvbiB3aXRoIHRoaXMgb25lIGFuZCBhbm90aGVyIG9uZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSB0aGF0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHQgLCBwb3NpdGlvbiBvZiBpbnRlcnBvbGF0aW9uLCBiZXR3ZWVuIDAgYW5kIDEgZGVmYXVsdCAwLjVcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9XG4gICAgICovXG4gICAgbGVycDogZnVuY3Rpb24gKHRoYXQsIHQpIHtcbiAgICAgIGlmICh0eXBlb2YgdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdCA9IDAuNTtcbiAgICAgIH1cbiAgICAgIHQgPSBNYXRoLm1heChNYXRoLm1pbigxLCB0KSwgMCk7XG4gICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCArICh0aGF0LnggLSB0aGlzLngpICogdCwgdGhpcy55ICsgKHRoYXQueSAtIHRoaXMueSkgKiB0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBkaXN0YW5jZSBmcm9tIHRoaXMgcG9pbnQgYW5kIGFub3RoZXIgb25lXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZGlzdGFuY2VGcm9tOiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgdmFyIGR4ID0gdGhpcy54IC0gdGhhdC54LFxuICAgICAgICAgIGR5ID0gdGhpcy55IC0gdGhhdC55O1xuICAgICAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBvaW50IGJldHdlZW4gdGhpcyBwb2ludCBhbmQgYW5vdGhlciBvbmVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICBtaWRQb2ludEZyb206IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICByZXR1cm4gdGhpcy5sZXJwKHRoYXQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHBvaW50IHdoaWNoIGlzIHRoZSBtaW4gb2YgdGhpcyBhbmQgYW5vdGhlciBvbmVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICBtaW46IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICByZXR1cm4gbmV3IFBvaW50KE1hdGgubWluKHRoaXMueCwgdGhhdC54KSwgTWF0aC5taW4odGhpcy55LCB0aGF0LnkpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBwb2ludCB3aGljaCBpcyB0aGUgbWF4IG9mIHRoaXMgYW5kIGFub3RoZXIgb25lXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9XG4gICAgICovXG4gICAgbWF4OiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgcmV0dXJuIG5ldyBQb2ludChNYXRoLm1heCh0aGlzLngsIHRoYXQueCksIE1hdGgubWF4KHRoaXMueSwgdGhhdC55KSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnggKyAnLCcgKyB0aGlzLnk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgeC95IG9mIHRoaXMgcG9pbnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldFhZOiBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgdGhpcy54ID0geDtcbiAgICAgIHRoaXMueSA9IHk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB4IG9mIHRoaXMgcG9pbnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzZXRYOiBmdW5jdGlvbiAoeCkge1xuICAgICAgdGhpcy54ID0geDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHkgb2YgdGhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldFk6IGZ1bmN0aW9uICh5KSB7XG4gICAgICB0aGlzLnkgPSB5O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgeC95IG9mIHRoaXMgcG9pbnQgZnJvbSBhbm90aGVyIHBvaW50XG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0RnJvbVBvaW50OiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgdGhpcy54ID0gdGhhdC54O1xuICAgICAgdGhpcy55ID0gdGhhdC55O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN3YXBzIHgveSBvZiB0aGlzIHBvaW50IGFuZCBhbm90aGVyIHBvaW50XG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKi9cbiAgICBzd2FwOiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgICAgeSA9IHRoaXMueTtcbiAgICAgIHRoaXMueCA9IHRoYXQueDtcbiAgICAgIHRoaXMueSA9IHRoYXQueTtcbiAgICAgIHRoYXQueCA9IHg7XG4gICAgICB0aGF0LnkgPSB5O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gYSBjbG9uZWQgaW5zdGFuY2Ugb2YgdGhlIHBvaW50XG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCwgdGhpcy55KTtcbiAgICB9XG4gIH07XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qIEFkYXB0YXRpb24gb2Ygd29yayBvZiBLZXZpbiBMaW5kc2V5IChrZXZpbkBrZXZsaW5kZXYuY29tKSAqL1xuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSk7XG5cbiAgaWYgKGZhYnJpYy5JbnRlcnNlY3Rpb24pIHtcbiAgICBmYWJyaWMud2FybignZmFicmljLkludGVyc2VjdGlvbiBpcyBhbHJlYWR5IGRlZmluZWQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJzZWN0aW9uIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuSW50ZXJzZWN0aW9uXG4gICAqIEBtZW1iZXJPZiBmYWJyaWNcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBmdW5jdGlvbiBJbnRlcnNlY3Rpb24oc3RhdHVzKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5wb2ludHMgPSBbXTtcbiAgfVxuXG4gIGZhYnJpYy5JbnRlcnNlY3Rpb24gPSBJbnRlcnNlY3Rpb247XG5cbiAgZmFicmljLkludGVyc2VjdGlvbi5wcm90b3R5cGUgPSAvKiogQGxlbmRzIGZhYnJpYy5JbnRlcnNlY3Rpb24ucHJvdG90eXBlICovIHtcblxuICAgIGNvbnN0cnVjdG9yOiBJbnRlcnNlY3Rpb24sXG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIGEgcG9pbnQgdG8gaW50ZXJzZWN0aW9uXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHBvaW50XG4gICAgICogQHJldHVybiB7ZmFicmljLkludGVyc2VjdGlvbn0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBhcHBlbmRQb2ludDogZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICB0aGlzLnBvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIHBvaW50cyB0byBpbnRlcnNlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwb2ludHNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuSW50ZXJzZWN0aW9ufSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGFwcGVuZFBvaW50czogZnVuY3Rpb24gKHBvaW50cykge1xuICAgICAgdGhpcy5wb2ludHMgPSB0aGlzLnBvaW50cy5jb25jYXQocG9pbnRzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIG9uZSBsaW5lIGludGVyc2VjdHMgYW5vdGhlclxuICAgKiBUT0RPOiByZW5hbWUgaW4gaW50ZXJzZWN0U2VnbWVudFNlZ21lbnRcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gYTFcbiAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IGEyXG4gICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBiMVxuICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gYjJcbiAgICogQHJldHVybiB7ZmFicmljLkludGVyc2VjdGlvbn1cbiAgICovXG4gIGZhYnJpYy5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0TGluZUxpbmUgPSBmdW5jdGlvbiAoYTEsIGEyLCBiMSwgYjIpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgICB1YVQgPSAoYjIueCAtIGIxLngpICogKGExLnkgLSBiMS55KSAtIChiMi55IC0gYjEueSkgKiAoYTEueCAtIGIxLngpLFxuICAgICAgICB1YlQgPSAoYTIueCAtIGExLngpICogKGExLnkgLSBiMS55KSAtIChhMi55IC0gYTEueSkgKiAoYTEueCAtIGIxLngpLFxuICAgICAgICB1QiA9IChiMi55IC0gYjEueSkgKiAoYTIueCAtIGExLngpIC0gKGIyLnggLSBiMS54KSAqIChhMi55IC0gYTEueSk7XG4gICAgaWYgKHVCICE9PSAwKSB7XG4gICAgICB2YXIgdWEgPSB1YVQgLyB1QixcbiAgICAgICAgICB1YiA9IHViVCAvIHVCO1xuICAgICAgaWYgKDAgPD0gdWEgJiYgdWEgPD0gMSAmJiAwIDw9IHViICYmIHViIDw9IDEpIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbignSW50ZXJzZWN0aW9uJyk7XG4gICAgICAgIHJlc3VsdC5hcHBlbmRQb2ludChuZXcgZmFicmljLlBvaW50KGExLnggKyB1YSAqIChhMi54IC0gYTEueCksIGExLnkgKyB1YSAqIChhMi55IC0gYTEueSkpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKHVhVCA9PT0gMCB8fCB1YlQgPT09IDApIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbignQ29pbmNpZGVudCcpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oJ1BhcmFsbGVsJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBsaW5lIGludGVyc2VjdHMgcG9seWdvblxuICAgKiBUT0RPOiByZW5hbWUgaW4gaW50ZXJzZWN0U2VnbWVudFBvbHlnb25cbiAgICogZml4IGRldGVjdGlvbiBvZiBjb2luY2lkZW50XG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IGExXG4gICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBhMlxuICAgKiBAcGFyYW0ge0FycmF5fSBwb2ludHNcbiAgICogQHJldHVybiB7ZmFicmljLkludGVyc2VjdGlvbn1cbiAgICovXG4gIGZhYnJpYy5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0TGluZVBvbHlnb24gPSBmdW5jdGlvbihhMSwgYTIsIHBvaW50cykge1xuICAgIHZhciByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKCksXG4gICAgICAgIGxlbmd0aCA9IHBvaW50cy5sZW5ndGgsXG4gICAgICAgIGIxLCBiMiwgaW50ZXIsIGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGIxID0gcG9pbnRzW2ldO1xuICAgICAgYjIgPSBwb2ludHNbKGkgKyAxKSAlIGxlbmd0aF07XG4gICAgICBpbnRlciA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RMaW5lTGluZShhMSwgYTIsIGIxLCBiMik7XG5cbiAgICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIucG9pbnRzKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5wb2ludHMubGVuZ3RoID4gMCkge1xuICAgICAgcmVzdWx0LnN0YXR1cyA9ICdJbnRlcnNlY3Rpb24nO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgcG9seWdvbiBpbnRlcnNlY3RzIGFub3RoZXIgcG9seWdvblxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBvaW50czFcbiAgICogQHBhcmFtIHtBcnJheX0gcG9pbnRzMlxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW50ZXJzZWN0aW9ufVxuICAgKi9cbiAgZmFicmljLkludGVyc2VjdGlvbi5pbnRlcnNlY3RQb2x5Z29uUG9seWdvbiA9IGZ1bmN0aW9uIChwb2ludHMxLCBwb2ludHMyKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oKSxcbiAgICAgICAgbGVuZ3RoID0gcG9pbnRzMS5sZW5ndGgsIGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBhMSA9IHBvaW50czFbaV0sXG4gICAgICAgICAgYTIgPSBwb2ludHMxWyhpICsgMSkgJSBsZW5ndGhdLFxuICAgICAgICAgIGludGVyID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVQb2x5Z29uKGExLCBhMiwgcG9pbnRzMik7XG5cbiAgICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIucG9pbnRzKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5wb2ludHMubGVuZ3RoID4gMCkge1xuICAgICAgcmVzdWx0LnN0YXR1cyA9ICdJbnRlcnNlY3Rpb24nO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgcG9seWdvbiBpbnRlcnNlY3RzIHJlY3RhbmdsZVxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBvaW50c1xuICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcjFcbiAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHIyXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbnRlcnNlY3Rpb259XG4gICAqL1xuICBmYWJyaWMuSW50ZXJzZWN0aW9uLmludGVyc2VjdFBvbHlnb25SZWN0YW5nbGUgPSBmdW5jdGlvbiAocG9pbnRzLCByMSwgcjIpIHtcbiAgICB2YXIgbWluID0gcjEubWluKHIyKSxcbiAgICAgICAgbWF4ID0gcjEubWF4KHIyKSxcbiAgICAgICAgdG9wUmlnaHQgPSBuZXcgZmFicmljLlBvaW50KG1heC54LCBtaW4ueSksXG4gICAgICAgIGJvdHRvbUxlZnQgPSBuZXcgZmFicmljLlBvaW50KG1pbi54LCBtYXgueSksXG4gICAgICAgIGludGVyMSA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RMaW5lUG9seWdvbihtaW4sIHRvcFJpZ2h0LCBwb2ludHMpLFxuICAgICAgICBpbnRlcjIgPSBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0TGluZVBvbHlnb24odG9wUmlnaHQsIG1heCwgcG9pbnRzKSxcbiAgICAgICAgaW50ZXIzID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVQb2x5Z29uKG1heCwgYm90dG9tTGVmdCwgcG9pbnRzKSxcbiAgICAgICAgaW50ZXI0ID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVQb2x5Z29uKGJvdHRvbUxlZnQsIG1pbiwgcG9pbnRzKSxcbiAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbigpO1xuXG4gICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlcjEucG9pbnRzKTtcbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyMi5wb2ludHMpO1xuICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIzLnBvaW50cyk7XG4gICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlcjQucG9pbnRzKTtcblxuICAgIGlmIChyZXN1bHQucG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJlc3VsdC5zdGF0dXMgPSAnSW50ZXJzZWN0aW9uJztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pO1xuXG4gIGlmIChmYWJyaWMuQ29sb3IpIHtcbiAgICBmYWJyaWMud2FybignZmFicmljLkNvbG9yIGlzIGFscmVhZHkgZGVmaW5lZC4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ29sb3IgY2xhc3NcbiAgICogVGhlIHB1cnBvc2Ugb2Yge0BsaW5rIGZhYnJpYy5Db2xvcn0gaXMgdG8gYWJzdHJhY3QgYW5kIGVuY2Fwc3VsYXRlIGNvbW1vbiBjb2xvciBvcGVyYXRpb25zO1xuICAgKiB7QGxpbmsgZmFicmljLkNvbG9yfSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBjcmVhdGVzIGluc3RhbmNlcyBvZiB7QGxpbmsgZmFicmljLkNvbG9yfSBvYmplY3RzLlxuICAgKlxuICAgKiBAY2xhc3MgZmFicmljLkNvbG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvciBvcHRpb25hbCBpbiBoZXggb3IgcmdiKGEpIG9yIGhzbCBmb3JtYXQgb3IgZnJvbSBrbm93biBjb2xvciBsaXN0XG4gICAqIEByZXR1cm4ge2ZhYnJpYy5Db2xvcn0gdGhpc0FyZ1xuICAgKiBAdHV0b3JpYWwge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZmFicmljLWludHJvLXBhcnQtMi8jY29sb3JzfVxuICAgKi9cbiAgZnVuY3Rpb24gQ29sb3IoY29sb3IpIHtcbiAgICBpZiAoIWNvbG9yKSB7XG4gICAgICB0aGlzLnNldFNvdXJjZShbMCwgMCwgMCwgMV0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX3RyeVBhcnNpbmdDb2xvcihjb2xvcik7XG4gICAgfVxuICB9XG5cbiAgZmFicmljLkNvbG9yID0gQ29sb3I7XG5cbiAgZmFicmljLkNvbG9yLnByb3RvdHlwZSA9IC8qKiBAbGVuZHMgZmFicmljLkNvbG9yLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBjb2xvciBDb2xvciB2YWx1ZSB0byBwYXJzZVxuICAgICAqL1xuICAgIF90cnlQYXJzaW5nQ29sb3I6IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgICB2YXIgc291cmNlO1xuXG4gICAgICBpZiAoY29sb3IgaW4gQ29sb3IuY29sb3JOYW1lTWFwKSB7XG4gICAgICAgIGNvbG9yID0gQ29sb3IuY29sb3JOYW1lTWFwW2NvbG9yXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbG9yID09PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICAgIHNvdXJjZSA9IFsyNTUsIDI1NSwgMjU1LCAwXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgc291cmNlID0gQ29sb3Iuc291cmNlRnJvbUhleChjb2xvcik7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBzb3VyY2UgPSBDb2xvci5zb3VyY2VGcm9tUmdiKGNvbG9yKTtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHNvdXJjZSA9IENvbG9yLnNvdXJjZUZyb21Ic2woY29sb3IpO1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgLy9pZiBjb2xvciBpcyBub3QgcmVjb2duaXplIGxldCdzIG1ha2UgYmxhY2sgYXMgY2FudmFzIGRvZXNcbiAgICAgICAgc291cmNlID0gWzAsIDAsIDAsIDFdO1xuICAgICAgfVxuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICB0aGlzLnNldFNvdXJjZShzb3VyY2UpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGFwdGVkIGZyb20gPGEgaHJlZj1cImh0dHBzOi8vcmF3Z2l0aHViLmNvbS9tamlqYWNrc29uL21qaWphY2tzb24uZ2l0aHViLmNvbS9tYXN0ZXIvMjAwOC8wMi9yZ2ItdG8taHNsLWFuZC1yZ2ItdG8taHN2LWNvbG9yLW1vZGVsLWNvbnZlcnNpb24tYWxnb3JpdGhtcy1pbi1qYXZhc2NyaXB0Lmh0bWxcIj5odHRwczovL2dpdGh1Yi5jb20vbWppamFja3NvbjwvYT5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByIFJlZCBjb2xvciB2YWx1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBnIEdyZWVuIGNvbG9yIHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGIgQmx1ZSBjb2xvciB2YWx1ZVxuICAgICAqIEByZXR1cm4ge0FycmF5fSBIc2wgY29sb3JcbiAgICAgKi9cbiAgICBfcmdiVG9Ic2w6IGZ1bmN0aW9uKHIsIGcsIGIpIHtcbiAgICAgIHIgLz0gMjU1OyBnIC89IDI1NTsgYiAvPSAyNTU7XG5cbiAgICAgIHZhciBoLCBzLCBsLFxuICAgICAgICAgIG1heCA9IGZhYnJpYy51dGlsLmFycmF5Lm1heChbciwgZywgYl0pLFxuICAgICAgICAgIG1pbiA9IGZhYnJpYy51dGlsLmFycmF5Lm1pbihbciwgZywgYl0pO1xuXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgICAgaCA9IHMgPSAwOyAvLyBhY2hyb21hdGljXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgICAgc3dpdGNoIChtYXgpIHtcbiAgICAgICAgICBjYXNlIHI6XG4gICAgICAgICAgICBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIGc6XG4gICAgICAgICAgICBoID0gKGIgLSByKSAvIGQgKyAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBiOlxuICAgICAgICAgICAgaCA9IChyIC0gZykgLyBkICsgNDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGggLz0gNjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgTWF0aC5yb3VuZChoICogMzYwKSxcbiAgICAgICAgTWF0aC5yb3VuZChzICogMTAwKSxcbiAgICAgICAgTWF0aC5yb3VuZChsICogMTAwKVxuICAgICAgXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzb3VyY2Ugb2YgdGhpcyBjb2xvciAod2hlcmUgc291cmNlIGlzIGFuIGFycmF5IHJlcHJlc2VudGF0aW9uOyBleDogWzIwMCwgMjAwLCAxMDAsIDFdKVxuICAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICAqL1xuICAgIGdldFNvdXJjZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc291cmNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHNvdXJjZSBvZiB0aGlzIGNvbG9yICh3aGVyZSBzb3VyY2UgaXMgYW4gYXJyYXkgcmVwcmVzZW50YXRpb247IGV4OiBbMjAwLCAyMDAsIDEwMCwgMV0pXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlXG4gICAgICovXG4gICAgc2V0U291cmNlOiBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb2xvciByZXByZXNlbnRhdGlvbiBpbiBSR0IgZm9ybWF0XG4gICAgICogQHJldHVybiB7U3RyaW5nfSBleDogcmdiKDAtMjU1LDAtMjU1LDAtMjU1KVxuICAgICAqL1xuICAgIHRvUmdiOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZSgpO1xuICAgICAgcmV0dXJuICdyZ2IoJyArIHNvdXJjZVswXSArICcsJyArIHNvdXJjZVsxXSArICcsJyArIHNvdXJjZVsyXSArICcpJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb2xvciByZXByZXNlbnRhdGlvbiBpbiBSR0JBIGZvcm1hdFxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gZXg6IHJnYmEoMC0yNTUsMC0yNTUsMC0yNTUsMC0xKVxuICAgICAqL1xuICAgIHRvUmdiYTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0gdGhpcy5nZXRTb3VyY2UoKTtcbiAgICAgIHJldHVybiAncmdiYSgnICsgc291cmNlWzBdICsgJywnICsgc291cmNlWzFdICsgJywnICsgc291cmNlWzJdICsgJywnICsgc291cmNlWzNdICsgJyknO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvbG9yIHJlcHJlc2VudGF0aW9uIGluIEhTTCBmb3JtYXRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGV4OiBoc2woMC0zNjAsMCUtMTAwJSwwJS0xMDAlKVxuICAgICAqL1xuICAgIHRvSHNsOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZSgpLFxuICAgICAgICAgIGhzbCA9IHRoaXMuX3JnYlRvSHNsKHNvdXJjZVswXSwgc291cmNlWzFdLCBzb3VyY2VbMl0pO1xuXG4gICAgICByZXR1cm4gJ2hzbCgnICsgaHNsWzBdICsgJywnICsgaHNsWzFdICsgJyUsJyArIGhzbFsyXSArICclKSc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29sb3IgcmVwcmVzZW50YXRpb24gaW4gSFNMQSBmb3JtYXRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGV4OiBoc2xhKDAtMzYwLDAlLTEwMCUsMCUtMTAwJSwwLTEpXG4gICAgICovXG4gICAgdG9Ic2xhOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZSgpLFxuICAgICAgICAgIGhzbCA9IHRoaXMuX3JnYlRvSHNsKHNvdXJjZVswXSwgc291cmNlWzFdLCBzb3VyY2VbMl0pO1xuXG4gICAgICByZXR1cm4gJ2hzbGEoJyArIGhzbFswXSArICcsJyArIGhzbFsxXSArICclLCcgKyBoc2xbMl0gKyAnJSwnICsgc291cmNlWzNdICsgJyknO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvbG9yIHJlcHJlc2VudGF0aW9uIGluIEhFWCBmb3JtYXRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGV4OiBGRjU1NTVcbiAgICAgKi9cbiAgICB0b0hleDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0gdGhpcy5nZXRTb3VyY2UoKSwgciwgZywgYjtcblxuICAgICAgciA9IHNvdXJjZVswXS50b1N0cmluZygxNik7XG4gICAgICByID0gKHIubGVuZ3RoID09PSAxKSA/ICgnMCcgKyByKSA6IHI7XG5cbiAgICAgIGcgPSBzb3VyY2VbMV0udG9TdHJpbmcoMTYpO1xuICAgICAgZyA9IChnLmxlbmd0aCA9PT0gMSkgPyAoJzAnICsgZykgOiBnO1xuXG4gICAgICBiID0gc291cmNlWzJdLnRvU3RyaW5nKDE2KTtcbiAgICAgIGIgPSAoYi5sZW5ndGggPT09IDEpID8gKCcwJyArIGIpIDogYjtcblxuICAgICAgcmV0dXJuIHIudG9VcHBlckNhc2UoKSArIGcudG9VcHBlckNhc2UoKSArIGIudG9VcHBlckNhc2UoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb2xvciByZXByZXNlbnRhdGlvbiBpbiBIRVhBIGZvcm1hdFxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gZXg6IEZGNTU1NUNDXG4gICAgICovXG4gICAgdG9IZXhhOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZSgpLCBhO1xuXG4gICAgICBhID0gTWF0aC5yb3VuZChzb3VyY2VbM10gKiAyNTUpO1xuICAgICAgYSA9IGEudG9TdHJpbmcoMTYpO1xuICAgICAgYSA9IChhLmxlbmd0aCA9PT0gMSkgPyAoJzAnICsgYSkgOiBhO1xuXG4gICAgICByZXR1cm4gdGhpcy50b0hleCgpICsgYS50b1VwcGVyQ2FzZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHZhbHVlIG9mIGFscGhhIGNoYW5uZWwgZm9yIHRoaXMgY29sb3JcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IDAtMVxuICAgICAqL1xuICAgIGdldEFscGhhOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFNvdXJjZSgpWzNdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHZhbHVlIG9mIGFscGhhIGNoYW5uZWwgZm9yIHRoaXMgY29sb3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYWxwaGEgQWxwaGEgdmFsdWUgMC0xXG4gICAgICogQHJldHVybiB7ZmFicmljLkNvbG9yfSB0aGlzQXJnXG4gICAgICovXG4gICAgc2V0QWxwaGE6IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgICB2YXIgc291cmNlID0gdGhpcy5nZXRTb3VyY2UoKTtcbiAgICAgIHNvdXJjZVszXSA9IGFscGhhO1xuICAgICAgdGhpcy5zZXRTb3VyY2Uoc291cmNlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIGNvbG9yIHRvIGl0cyBncmF5c2NhbGUgcmVwcmVzZW50YXRpb25cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ29sb3J9IHRoaXNBcmdcbiAgICAgKi9cbiAgICB0b0dyYXlzY2FsZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0gdGhpcy5nZXRTb3VyY2UoKSxcbiAgICAgICAgICBhdmVyYWdlID0gcGFyc2VJbnQoKHNvdXJjZVswXSAqIDAuMyArIHNvdXJjZVsxXSAqIDAuNTkgKyBzb3VyY2VbMl0gKiAwLjExKS50b0ZpeGVkKDApLCAxMCksXG4gICAgICAgICAgY3VycmVudEFscGhhID0gc291cmNlWzNdO1xuICAgICAgdGhpcy5zZXRTb3VyY2UoW2F2ZXJhZ2UsIGF2ZXJhZ2UsIGF2ZXJhZ2UsIGN1cnJlbnRBbHBoYV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgY29sb3IgdG8gaXRzIGJsYWNrIGFuZCB3aGl0ZSByZXByZXNlbnRhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aHJlc2hvbGRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ29sb3J9IHRoaXNBcmdcbiAgICAgKi9cbiAgICB0b0JsYWNrV2hpdGU6IGZ1bmN0aW9uKHRocmVzaG9sZCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuZ2V0U291cmNlKCksXG4gICAgICAgICAgYXZlcmFnZSA9IChzb3VyY2VbMF0gKiAwLjMgKyBzb3VyY2VbMV0gKiAwLjU5ICsgc291cmNlWzJdICogMC4xMSkudG9GaXhlZCgwKSxcbiAgICAgICAgICBjdXJyZW50QWxwaGEgPSBzb3VyY2VbM107XG5cbiAgICAgIHRocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxMjc7XG5cbiAgICAgIGF2ZXJhZ2UgPSAoTnVtYmVyKGF2ZXJhZ2UpIDwgTnVtYmVyKHRocmVzaG9sZCkpID8gMCA6IDI1NTtcbiAgICAgIHRoaXMuc2V0U291cmNlKFthdmVyYWdlLCBhdmVyYWdlLCBhdmVyYWdlLCBjdXJyZW50QWxwaGFdKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBPdmVybGF5cyBjb2xvciB3aXRoIGFub3RoZXIgY29sb3JcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xmYWJyaWMuQ29sb3J9IG90aGVyQ29sb3JcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ29sb3J9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBvdmVybGF5V2l0aDogZnVuY3Rpb24ob3RoZXJDb2xvcikge1xuICAgICAgaWYgKCEob3RoZXJDb2xvciBpbnN0YW5jZW9mIENvbG9yKSkge1xuICAgICAgICBvdGhlckNvbG9yID0gbmV3IENvbG9yKG90aGVyQ29sb3IpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICAgICAgYWxwaGEgPSB0aGlzLmdldEFscGhhKCksXG4gICAgICAgICAgb3RoZXJBbHBoYSA9IDAuNSxcbiAgICAgICAgICBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZSgpLFxuICAgICAgICAgIG90aGVyU291cmNlID0gb3RoZXJDb2xvci5nZXRTb3VyY2UoKSwgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICByZXN1bHQucHVzaChNYXRoLnJvdW5kKChzb3VyY2VbaV0gKiAoMSAtIG90aGVyQWxwaGEpKSArIChvdGhlclNvdXJjZVtpXSAqIG90aGVyQWxwaGEpKSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFszXSA9IGFscGhhO1xuICAgICAgdGhpcy5zZXRTb3VyY2UocmVzdWx0KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmVnZXggbWF0Y2hpbmcgY29sb3IgaW4gUkdCIG9yIFJHQkEgZm9ybWF0cyAoZXg6IHJnYigwLCAwLCAwKSwgcmdiYSgyNTUsIDEwMCwgMTAsIDAuNSksIHJnYmEoIDI1NSAsIDEwMCAsIDEwICwgMC41ICksIHJnYigxLDEsMSksIHJnYmEoMTAwJSwgNjAlLCAxMCUsIDAuNSkpXG4gICAqIEBzdGF0aWNcbiAgICogQGZpZWxkXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuQ29sb3JcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gIGZhYnJpYy5Db2xvci5yZVJHQmEgPSAvXnJnYmE/XFwoXFxzKihcXGR7MSwzfSg/OlxcLlxcZCspP1xcJT8pXFxzKixcXHMqKFxcZHsxLDN9KD86XFwuXFxkKyk/XFwlPylcXHMqLFxccyooXFxkezEsM30oPzpcXC5cXGQrKT9cXCU/KVxccyooPzpcXHMqLFxccyooKD86XFxkKlxcLj9cXGQrKT8pXFxzKik/XFwpJC9pO1xuXG4gIC8qKlxuICAgKiBSZWdleCBtYXRjaGluZyBjb2xvciBpbiBIU0wgb3IgSFNMQSBmb3JtYXRzIChleDogaHNsKDIwMCwgODAlLCAxMCUpLCBoc2xhKDMwMCwgNTAlLCA4MCUsIDAuNSksIGhzbGEoIDMwMCAsIDUwJSAsIDgwJSAsIDAuNSApKVxuICAgKiBAc3RhdGljXG4gICAqIEBmaWVsZFxuICAgKiBAbWVtYmVyT2YgZmFicmljLkNvbG9yXG4gICAqL1xuICBmYWJyaWMuQ29sb3IucmVIU0xhID0gL15oc2xhP1xcKFxccyooXFxkezEsM30pXFxzKixcXHMqKFxcZHsxLDN9XFwlKVxccyosXFxzKihcXGR7MSwzfVxcJSlcXHMqKD86XFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFxzKik/XFwpJC9pO1xuXG4gIC8qKlxuICAgKiBSZWdleCBtYXRjaGluZyBjb2xvciBpbiBIRVggZm9ybWF0IChleDogI0ZGNTU0NENDLCAjRkY1NTU1LCAwMTAxNTUsIGFmZilcbiAgICogQHN0YXRpY1xuICAgKiBAZmllbGRcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Db2xvclxuICAgKi9cbiAgZmFicmljLkNvbG9yLnJlSGV4ID0gL14jPyhbMC05YS1mXXs4fXxbMC05YS1mXXs2fXxbMC05YS1mXXs0fXxbMC05YS1mXXszfSkkL2k7XG5cbiAgLyoqXG4gICAqIE1hcCBvZiB0aGUgMTQ4IGNvbG9yIG5hbWVzIHdpdGggSEVYIGNvZGVcbiAgICogQHN0YXRpY1xuICAgKiBAZmllbGRcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Db2xvclxuICAgKiBAc2VlOiBodHRwczovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8jc3ZnLWNvbG9yXG4gICAqL1xuICBmYWJyaWMuQ29sb3IuY29sb3JOYW1lTWFwID0ge1xuICAgIGFsaWNlYmx1ZTogICAgICAgICAgICAnI0YwRjhGRicsXG4gICAgYW50aXF1ZXdoaXRlOiAgICAgICAgICcjRkFFQkQ3JyxcbiAgICBhcXVhOiAgICAgICAgICAgICAgICAgJyMwMEZGRkYnLFxuICAgIGFxdWFtYXJpbmU6ICAgICAgICAgICAnIzdGRkZENCcsXG4gICAgYXp1cmU6ICAgICAgICAgICAgICAgICcjRjBGRkZGJyxcbiAgICBiZWlnZTogICAgICAgICAgICAgICAgJyNGNUY1REMnLFxuICAgIGJpc3F1ZTogICAgICAgICAgICAgICAnI0ZGRTRDNCcsXG4gICAgYmxhY2s6ICAgICAgICAgICAgICAgICcjMDAwMDAwJyxcbiAgICBibGFuY2hlZGFsbW9uZDogICAgICAgJyNGRkVCQ0QnLFxuICAgIGJsdWU6ICAgICAgICAgICAgICAgICAnIzAwMDBGRicsXG4gICAgYmx1ZXZpb2xldDogICAgICAgICAgICcjOEEyQkUyJyxcbiAgICBicm93bjogICAgICAgICAgICAgICAgJyNBNTJBMkEnLFxuICAgIGJ1cmx5d29vZDogICAgICAgICAgICAnI0RFQjg4NycsXG4gICAgY2FkZXRibHVlOiAgICAgICAgICAgICcjNUY5RUEwJyxcbiAgICBjaGFydHJldXNlOiAgICAgICAgICAgJyM3RkZGMDAnLFxuICAgIGNob2NvbGF0ZTogICAgICAgICAgICAnI0QyNjkxRScsXG4gICAgY29yYWw6ICAgICAgICAgICAgICAgICcjRkY3RjUwJyxcbiAgICBjb3JuZmxvd2VyYmx1ZTogICAgICAgJyM2NDk1RUQnLFxuICAgIGNvcm5zaWxrOiAgICAgICAgICAgICAnI0ZGRjhEQycsXG4gICAgY3JpbXNvbjogICAgICAgICAgICAgICcjREMxNDNDJyxcbiAgICBjeWFuOiAgICAgICAgICAgICAgICAgJyMwMEZGRkYnLFxuICAgIGRhcmtibHVlOiAgICAgICAgICAgICAnIzAwMDA4QicsXG4gICAgZGFya2N5YW46ICAgICAgICAgICAgICcjMDA4QjhCJyxcbiAgICBkYXJrZ29sZGVucm9kOiAgICAgICAgJyNCODg2MEInLFxuICAgIGRhcmtncmF5OiAgICAgICAgICAgICAnI0E5QTlBOScsXG4gICAgZGFya2dyZXk6ICAgICAgICAgICAgICcjQTlBOUE5JyxcbiAgICBkYXJrZ3JlZW46ICAgICAgICAgICAgJyMwMDY0MDAnLFxuICAgIGRhcmtraGFraTogICAgICAgICAgICAnI0JEQjc2QicsXG4gICAgZGFya21hZ2VudGE6ICAgICAgICAgICcjOEIwMDhCJyxcbiAgICBkYXJrb2xpdmVncmVlbjogICAgICAgJyM1NTZCMkYnLFxuICAgIGRhcmtvcmFuZ2U6ICAgICAgICAgICAnI0ZGOEMwMCcsXG4gICAgZGFya29yY2hpZDogICAgICAgICAgICcjOTkzMkNDJyxcbiAgICBkYXJrcmVkOiAgICAgICAgICAgICAgJyM4QjAwMDAnLFxuICAgIGRhcmtzYWxtb246ICAgICAgICAgICAnI0U5OTY3QScsXG4gICAgZGFya3NlYWdyZWVuOiAgICAgICAgICcjOEZCQzhGJyxcbiAgICBkYXJrc2xhdGVibHVlOiAgICAgICAgJyM0ODNEOEInLFxuICAgIGRhcmtzbGF0ZWdyYXk6ICAgICAgICAnIzJGNEY0RicsXG4gICAgZGFya3NsYXRlZ3JleTogICAgICAgICcjMkY0RjRGJyxcbiAgICBkYXJrdHVycXVvaXNlOiAgICAgICAgJyMwMENFRDEnLFxuICAgIGRhcmt2aW9sZXQ6ICAgICAgICAgICAnIzk0MDBEMycsXG4gICAgZGVlcHBpbms6ICAgICAgICAgICAgICcjRkYxNDkzJyxcbiAgICBkZWVwc2t5Ymx1ZTogICAgICAgICAgJyMwMEJGRkYnLFxuICAgIGRpbWdyYXk6ICAgICAgICAgICAgICAnIzY5Njk2OScsXG4gICAgZGltZ3JleTogICAgICAgICAgICAgICcjNjk2OTY5JyxcbiAgICBkb2RnZXJibHVlOiAgICAgICAgICAgJyMxRTkwRkYnLFxuICAgIGZpcmVicmljazogICAgICAgICAgICAnI0IyMjIyMicsXG4gICAgZmxvcmFsd2hpdGU6ICAgICAgICAgICcjRkZGQUYwJyxcbiAgICBmb3Jlc3RncmVlbjogICAgICAgICAgJyMyMjhCMjInLFxuICAgIGZ1Y2hzaWE6ICAgICAgICAgICAgICAnI0ZGMDBGRicsXG4gICAgZ2FpbnNib3JvOiAgICAgICAgICAgICcjRENEQ0RDJyxcbiAgICBnaG9zdHdoaXRlOiAgICAgICAgICAgJyNGOEY4RkYnLFxuICAgIGdvbGQ6ICAgICAgICAgICAgICAgICAnI0ZGRDcwMCcsXG4gICAgZ29sZGVucm9kOiAgICAgICAgICAgICcjREFBNTIwJyxcbiAgICBncmF5OiAgICAgICAgICAgICAgICAgJyM4MDgwODAnLFxuICAgIGdyZXk6ICAgICAgICAgICAgICAgICAnIzgwODA4MCcsXG4gICAgZ3JlZW46ICAgICAgICAgICAgICAgICcjMDA4MDAwJyxcbiAgICBncmVlbnllbGxvdzogICAgICAgICAgJyNBREZGMkYnLFxuICAgIGhvbmV5ZGV3OiAgICAgICAgICAgICAnI0YwRkZGMCcsXG4gICAgaG90cGluazogICAgICAgICAgICAgICcjRkY2OUI0JyxcbiAgICBpbmRpYW5yZWQ6ICAgICAgICAgICAgJyNDRDVDNUMnLFxuICAgIGluZGlnbzogICAgICAgICAgICAgICAnIzRCMDA4MicsXG4gICAgaXZvcnk6ICAgICAgICAgICAgICAgICcjRkZGRkYwJyxcbiAgICBraGFraTogICAgICAgICAgICAgICAgJyNGMEU2OEMnLFxuICAgIGxhdmVuZGVyOiAgICAgICAgICAgICAnI0U2RTZGQScsXG4gICAgbGF2ZW5kZXJibHVzaDogICAgICAgICcjRkZGMEY1JyxcbiAgICBsYXduZ3JlZW46ICAgICAgICAgICAgJyM3Q0ZDMDAnLFxuICAgIGxlbW9uY2hpZmZvbjogICAgICAgICAnI0ZGRkFDRCcsXG4gICAgbGlnaHRibHVlOiAgICAgICAgICAgICcjQUREOEU2JyxcbiAgICBsaWdodGNvcmFsOiAgICAgICAgICAgJyNGMDgwODAnLFxuICAgIGxpZ2h0Y3lhbjogICAgICAgICAgICAnI0UwRkZGRicsXG4gICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6ICcjRkFGQUQyJyxcbiAgICBsaWdodGdyYXk6ICAgICAgICAgICAgJyNEM0QzRDMnLFxuICAgIGxpZ2h0Z3JleTogICAgICAgICAgICAnI0QzRDNEMycsXG4gICAgbGlnaHRncmVlbjogICAgICAgICAgICcjOTBFRTkwJyxcbiAgICBsaWdodHBpbms6ICAgICAgICAgICAgJyNGRkI2QzEnLFxuICAgIGxpZ2h0c2FsbW9uOiAgICAgICAgICAnI0ZGQTA3QScsXG4gICAgbGlnaHRzZWFncmVlbjogICAgICAgICcjMjBCMkFBJyxcbiAgICBsaWdodHNreWJsdWU6ICAgICAgICAgJyM4N0NFRkEnLFxuICAgIGxpZ2h0c2xhdGVncmF5OiAgICAgICAnIzc3ODg5OScsXG4gICAgbGlnaHRzbGF0ZWdyZXk6ICAgICAgICcjNzc4ODk5JyxcbiAgICBsaWdodHN0ZWVsYmx1ZTogICAgICAgJyNCMEM0REUnLFxuICAgIGxpZ2h0eWVsbG93OiAgICAgICAgICAnI0ZGRkZFMCcsXG4gICAgbGltZTogICAgICAgICAgICAgICAgICcjMDBGRjAwJyxcbiAgICBsaW1lZ3JlZW46ICAgICAgICAgICAgJyMzMkNEMzInLFxuICAgIGxpbmVuOiAgICAgICAgICAgICAgICAnI0ZBRjBFNicsXG4gICAgbWFnZW50YTogICAgICAgICAgICAgICcjRkYwMEZGJyxcbiAgICBtYXJvb246ICAgICAgICAgICAgICAgJyM4MDAwMDAnLFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6ICAgICAnIzY2Q0RBQScsXG4gICAgbWVkaXVtYmx1ZTogICAgICAgICAgICcjMDAwMENEJyxcbiAgICBtZWRpdW1vcmNoaWQ6ICAgICAgICAgJyNCQTU1RDMnLFxuICAgIG1lZGl1bXB1cnBsZTogICAgICAgICAnIzkzNzBEQicsXG4gICAgbWVkaXVtc2VhZ3JlZW46ICAgICAgICcjM0NCMzcxJyxcbiAgICBtZWRpdW1zbGF0ZWJsdWU6ICAgICAgJyM3QjY4RUUnLFxuICAgIG1lZGl1bXNwcmluZ2dyZWVuOiAgICAnIzAwRkE5QScsXG4gICAgbWVkaXVtdHVycXVvaXNlOiAgICAgICcjNDhEMUNDJyxcbiAgICBtZWRpdW12aW9sZXRyZWQ6ICAgICAgJyNDNzE1ODUnLFxuICAgIG1pZG5pZ2h0Ymx1ZTogICAgICAgICAnIzE5MTk3MCcsXG4gICAgbWludGNyZWFtOiAgICAgICAgICAgICcjRjVGRkZBJyxcbiAgICBtaXN0eXJvc2U6ICAgICAgICAgICAgJyNGRkU0RTEnLFxuICAgIG1vY2Nhc2luOiAgICAgICAgICAgICAnI0ZGRTRCNScsXG4gICAgbmF2YWpvd2hpdGU6ICAgICAgICAgICcjRkZERUFEJyxcbiAgICBuYXZ5OiAgICAgICAgICAgICAgICAgJyMwMDAwODAnLFxuICAgIG9sZGxhY2U6ICAgICAgICAgICAgICAnI0ZERjVFNicsXG4gICAgb2xpdmU6ICAgICAgICAgICAgICAgICcjODA4MDAwJyxcbiAgICBvbGl2ZWRyYWI6ICAgICAgICAgICAgJyM2QjhFMjMnLFxuICAgIG9yYW5nZTogICAgICAgICAgICAgICAnI0ZGQTUwMCcsXG4gICAgb3JhbmdlcmVkOiAgICAgICAgICAgICcjRkY0NTAwJyxcbiAgICBvcmNoaWQ6ICAgICAgICAgICAgICAgJyNEQTcwRDYnLFxuICAgIHBhbGVnb2xkZW5yb2Q6ICAgICAgICAnI0VFRThBQScsXG4gICAgcGFsZWdyZWVuOiAgICAgICAgICAgICcjOThGQjk4JyxcbiAgICBwYWxldHVycXVvaXNlOiAgICAgICAgJyNBRkVFRUUnLFxuICAgIHBhbGV2aW9sZXRyZWQ6ICAgICAgICAnI0RCNzA5MycsXG4gICAgcGFwYXlhd2hpcDogICAgICAgICAgICcjRkZFRkQ1JyxcbiAgICBwZWFjaHB1ZmY6ICAgICAgICAgICAgJyNGRkRBQjknLFxuICAgIHBlcnU6ICAgICAgICAgICAgICAgICAnI0NEODUzRicsXG4gICAgcGluazogICAgICAgICAgICAgICAgICcjRkZDMENCJyxcbiAgICBwbHVtOiAgICAgICAgICAgICAgICAgJyNEREEwREQnLFxuICAgIHBvd2RlcmJsdWU6ICAgICAgICAgICAnI0IwRTBFNicsXG4gICAgcHVycGxlOiAgICAgICAgICAgICAgICcjODAwMDgwJyxcbiAgICByZWJlY2NhcHVycGxlOiAgICAgICAgJyM2NjMzOTknLFxuICAgIHJlZDogICAgICAgICAgICAgICAgICAnI0ZGMDAwMCcsXG4gICAgcm9zeWJyb3duOiAgICAgICAgICAgICcjQkM4RjhGJyxcbiAgICByb3lhbGJsdWU6ICAgICAgICAgICAgJyM0MTY5RTEnLFxuICAgIHNhZGRsZWJyb3duOiAgICAgICAgICAnIzhCNDUxMycsXG4gICAgc2FsbW9uOiAgICAgICAgICAgICAgICcjRkE4MDcyJyxcbiAgICBzYW5keWJyb3duOiAgICAgICAgICAgJyNGNEE0NjAnLFxuICAgIHNlYWdyZWVuOiAgICAgICAgICAgICAnIzJFOEI1NycsXG4gICAgc2Vhc2hlbGw6ICAgICAgICAgICAgICcjRkZGNUVFJyxcbiAgICBzaWVubmE6ICAgICAgICAgICAgICAgJyNBMDUyMkQnLFxuICAgIHNpbHZlcjogICAgICAgICAgICAgICAnI0MwQzBDMCcsXG4gICAgc2t5Ymx1ZTogICAgICAgICAgICAgICcjODdDRUVCJyxcbiAgICBzbGF0ZWJsdWU6ICAgICAgICAgICAgJyM2QTVBQ0QnLFxuICAgIHNsYXRlZ3JheTogICAgICAgICAgICAnIzcwODA5MCcsXG4gICAgc2xhdGVncmV5OiAgICAgICAgICAgICcjNzA4MDkwJyxcbiAgICBzbm93OiAgICAgICAgICAgICAgICAgJyNGRkZBRkEnLFxuICAgIHNwcmluZ2dyZWVuOiAgICAgICAgICAnIzAwRkY3RicsXG4gICAgc3RlZWxibHVlOiAgICAgICAgICAgICcjNDY4MkI0JyxcbiAgICB0YW46ICAgICAgICAgICAgICAgICAgJyNEMkI0OEMnLFxuICAgIHRlYWw6ICAgICAgICAgICAgICAgICAnIzAwODA4MCcsXG4gICAgdGhpc3RsZTogICAgICAgICAgICAgICcjRDhCRkQ4JyxcbiAgICB0b21hdG86ICAgICAgICAgICAgICAgJyNGRjYzNDcnLFxuICAgIHR1cnF1b2lzZTogICAgICAgICAgICAnIzQwRTBEMCcsXG4gICAgdmlvbGV0OiAgICAgICAgICAgICAgICcjRUU4MkVFJyxcbiAgICB3aGVhdDogICAgICAgICAgICAgICAgJyNGNURFQjMnLFxuICAgIHdoaXRlOiAgICAgICAgICAgICAgICAnI0ZGRkZGRicsXG4gICAgd2hpdGVzbW9rZTogICAgICAgICAgICcjRjVGNUY1JyxcbiAgICB5ZWxsb3c6ICAgICAgICAgICAgICAgJyNGRkZGMDAnLFxuICAgIHllbGxvd2dyZWVuOiAgICAgICAgICAnIzlBQ0QzMidcbiAgfTtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHFcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHRcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKi9cbiAgZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgaWYgKHQgPCAwKSB7XG4gICAgICB0ICs9IDE7XG4gICAgfVxuICAgIGlmICh0ID4gMSkge1xuICAgICAgdCAtPSAxO1xuICAgIH1cbiAgICBpZiAodCA8IDEgLyA2KSB7XG4gICAgICByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDtcbiAgICB9XG4gICAgaWYgKHQgPCAxIC8gMikge1xuICAgICAgcmV0dXJuIHE7XG4gICAgfVxuICAgIGlmICh0IDwgMiAvIDMpIHtcbiAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBuZXcgY29sb3Igb2JqZWN0LCB3aGVuIGdpdmVuIGEgY29sb3IgaW4gUkdCIGZvcm1hdFxuICAgKiBAbWVtYmVyT2YgZmFicmljLkNvbG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvciBDb2xvciB2YWx1ZSBleDogcmdiKDAtMjU1LDAtMjU1LDAtMjU1KVxuICAgKiBAcmV0dXJuIHtmYWJyaWMuQ29sb3J9XG4gICAqL1xuICBmYWJyaWMuQ29sb3IuZnJvbVJnYiA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgcmV0dXJuIENvbG9yLmZyb21Tb3VyY2UoQ29sb3Iuc291cmNlRnJvbVJnYihjb2xvcikpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFycmF5IHJlcHJlc2VudGF0aW9uIChleDogWzEwMCwgMTAwLCAyMDAsIDFdKSBvZiBhIGNvbG9yIHRoYXQncyBpbiBSR0Igb3IgUkdCQSBmb3JtYXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Db2xvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29sb3IgQ29sb3IgdmFsdWUgZXg6IHJnYigwLTI1NSwwLTI1NSwwLTI1NSksIHJnYigwJS0xMDAlLDAlLTEwMCUsMCUtMTAwJSlcbiAgICogQHJldHVybiB7QXJyYXl9IHNvdXJjZVxuICAgKi9cbiAgZmFicmljLkNvbG9yLnNvdXJjZUZyb21SZ2IgPSBmdW5jdGlvbihjb2xvcikge1xuICAgIHZhciBtYXRjaCA9IGNvbG9yLm1hdGNoKENvbG9yLnJlUkdCYSk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB2YXIgciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCkgLyAoLyUkLy50ZXN0KG1hdGNoWzFdKSA/IDEwMCA6IDEpICogKC8lJC8udGVzdChtYXRjaFsxXSkgPyAyNTUgOiAxKSxcbiAgICAgICAgICBnID0gcGFyc2VJbnQobWF0Y2hbMl0sIDEwKSAvICgvJSQvLnRlc3QobWF0Y2hbMl0pID8gMTAwIDogMSkgKiAoLyUkLy50ZXN0KG1hdGNoWzJdKSA/IDI1NSA6IDEpLFxuICAgICAgICAgIGIgPSBwYXJzZUludChtYXRjaFszXSwgMTApIC8gKC8lJC8udGVzdChtYXRjaFszXSkgPyAxMDAgOiAxKSAqICgvJSQvLnRlc3QobWF0Y2hbM10pID8gMjU1IDogMSk7XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHBhcnNlSW50KHIsIDEwKSxcbiAgICAgICAgcGFyc2VJbnQoZywgMTApLFxuICAgICAgICBwYXJzZUludChiLCAxMCksXG4gICAgICAgIG1hdGNoWzRdID8gcGFyc2VGbG9hdChtYXRjaFs0XSkgOiAxXG4gICAgICBdO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBuZXcgY29sb3Igb2JqZWN0LCB3aGVuIGdpdmVuIGEgY29sb3IgaW4gUkdCQSBmb3JtYXRcbiAgICogQHN0YXRpY1xuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIGZhYnJpYy5Db2xvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29sb3JcbiAgICogQHJldHVybiB7ZmFicmljLkNvbG9yfVxuICAgKi9cbiAgZmFicmljLkNvbG9yLmZyb21SZ2JhID0gQ29sb3IuZnJvbVJnYjtcblxuICAvKipcbiAgICogUmV0dXJucyBuZXcgY29sb3Igb2JqZWN0LCB3aGVuIGdpdmVuIGEgY29sb3IgaW4gSFNMIGZvcm1hdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29sb3IgQ29sb3IgdmFsdWUgZXg6IGhzbCgwLTI2MCwwJS0xMDAlLDAlLTEwMCUpXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuQ29sb3JcbiAgICogQHJldHVybiB7ZmFicmljLkNvbG9yfVxuICAgKi9cbiAgZmFicmljLkNvbG9yLmZyb21Ic2wgPSBmdW5jdGlvbihjb2xvcikge1xuICAgIHJldHVybiBDb2xvci5mcm9tU291cmNlKENvbG9yLnNvdXJjZUZyb21Ic2woY29sb3IpKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBhcnJheSByZXByZXNlbnRhdGlvbiAoZXg6IFsxMDAsIDEwMCwgMjAwLCAxXSkgb2YgYSBjb2xvciB0aGF0J3MgaW4gSFNMIG9yIEhTTEEgZm9ybWF0LlxuICAgKiBBZGFwdGVkIGZyb20gPGEgaHJlZj1cImh0dHBzOi8vcmF3Z2l0aHViLmNvbS9tamlqYWNrc29uL21qaWphY2tzb24uZ2l0aHViLmNvbS9tYXN0ZXIvMjAwOC8wMi9yZ2ItdG8taHNsLWFuZC1yZ2ItdG8taHN2LWNvbG9yLW1vZGVsLWNvbnZlcnNpb24tYWxnb3JpdGhtcy1pbi1qYXZhc2NyaXB0Lmh0bWxcIj5odHRwczovL2dpdGh1Yi5jb20vbWppamFja3NvbjwvYT5cbiAgICogQG1lbWJlck9mIGZhYnJpYy5Db2xvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29sb3IgQ29sb3IgdmFsdWUgZXg6IGhzbCgwLTM2MCwwJS0xMDAlLDAlLTEwMCUpIG9yIGhzbGEoMC0zNjAsMCUtMTAwJSwwJS0xMDAlLCAwLTEpXG4gICAqIEByZXR1cm4ge0FycmF5fSBzb3VyY2VcbiAgICogQHNlZSBodHRwOi8vaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8jaHNsLWNvbG9yXG4gICAqL1xuICBmYWJyaWMuQ29sb3Iuc291cmNlRnJvbUhzbCA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgdmFyIG1hdGNoID0gY29sb3IubWF0Y2goQ29sb3IucmVIU0xhKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGggPSAoKChwYXJzZUZsb2F0KG1hdGNoWzFdKSAlIDM2MCkgKyAzNjApICUgMzYwKSAvIDM2MCxcbiAgICAgICAgcyA9IHBhcnNlRmxvYXQobWF0Y2hbMl0pIC8gKC8lJC8udGVzdChtYXRjaFsyXSkgPyAxMDAgOiAxKSxcbiAgICAgICAgbCA9IHBhcnNlRmxvYXQobWF0Y2hbM10pIC8gKC8lJC8udGVzdChtYXRjaFszXSkgPyAxMDAgOiAxKSxcbiAgICAgICAgciwgZywgYjtcblxuICAgIGlmIChzID09PSAwKSB7XG4gICAgICByID0gZyA9IGIgPSBsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBxID0gbCA8PSAwLjUgPyBsICogKHMgKyAxKSA6IGwgKyBzIC0gbCAqIHMsXG4gICAgICAgICAgcCA9IGwgKiAyIC0gcTtcblxuICAgICAgciA9IGh1ZTJyZ2IocCwgcSwgaCArIDEgLyAzKTtcbiAgICAgIGcgPSBodWUycmdiKHAsIHEsIGgpO1xuICAgICAgYiA9IGh1ZTJyZ2IocCwgcSwgaCAtIDEgLyAzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW1xuICAgICAgTWF0aC5yb3VuZChyICogMjU1KSxcbiAgICAgIE1hdGgucm91bmQoZyAqIDI1NSksXG4gICAgICBNYXRoLnJvdW5kKGIgKiAyNTUpLFxuICAgICAgbWF0Y2hbNF0gPyBwYXJzZUZsb2F0KG1hdGNoWzRdKSA6IDFcbiAgICBdO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG5ldyBjb2xvciBvYmplY3QsIHdoZW4gZ2l2ZW4gYSBjb2xvciBpbiBIU0xBIGZvcm1hdFxuICAgKiBAc3RhdGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgZmFicmljLkNvbG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvclxuICAgKiBAcmV0dXJuIHtmYWJyaWMuQ29sb3J9XG4gICAqL1xuICBmYWJyaWMuQ29sb3IuZnJvbUhzbGEgPSBDb2xvci5mcm9tSHNsO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG5ldyBjb2xvciBvYmplY3QsIHdoZW4gZ2l2ZW4gYSBjb2xvciBpbiBIRVggZm9ybWF0XG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Db2xvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29sb3IgQ29sb3IgdmFsdWUgZXg6IEZGNTU1NVxuICAgKiBAcmV0dXJuIHtmYWJyaWMuQ29sb3J9XG4gICAqL1xuICBmYWJyaWMuQ29sb3IuZnJvbUhleCA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgcmV0dXJuIENvbG9yLmZyb21Tb3VyY2UoQ29sb3Iuc291cmNlRnJvbUhleChjb2xvcikpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFycmF5IHJlcHJlc2VudGF0aW9uIChleDogWzEwMCwgMTAwLCAyMDAsIDFdKSBvZiBhIGNvbG9yIHRoYXQncyBpbiBIRVggZm9ybWF0XG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Db2xvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29sb3IgZXg6IEZGNTU1NSBvciBGRjU1NDRDQyAoUkdCYSlcbiAgICogQHJldHVybiB7QXJyYXl9IHNvdXJjZVxuICAgKi9cbiAgZmFicmljLkNvbG9yLnNvdXJjZUZyb21IZXggPSBmdW5jdGlvbihjb2xvcikge1xuICAgIGlmIChjb2xvci5tYXRjaChDb2xvci5yZUhleCkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGNvbG9yLnNsaWNlKGNvbG9yLmluZGV4T2YoJyMnKSArIDEpLFxuICAgICAgICAgIGlzU2hvcnROb3RhdGlvbiA9ICh2YWx1ZS5sZW5ndGggPT09IDMgfHwgdmFsdWUubGVuZ3RoID09PSA0KSxcbiAgICAgICAgICBpc1JHQmEgPSAodmFsdWUubGVuZ3RoID09PSA4IHx8IHZhbHVlLmxlbmd0aCA9PT0gNCksXG4gICAgICAgICAgciA9IGlzU2hvcnROb3RhdGlvbiA/ICh2YWx1ZS5jaGFyQXQoMCkgKyB2YWx1ZS5jaGFyQXQoMCkpIDogdmFsdWUuc3Vic3RyaW5nKDAsIDIpLFxuICAgICAgICAgIGcgPSBpc1Nob3J0Tm90YXRpb24gPyAodmFsdWUuY2hhckF0KDEpICsgdmFsdWUuY2hhckF0KDEpKSA6IHZhbHVlLnN1YnN0cmluZygyLCA0KSxcbiAgICAgICAgICBiID0gaXNTaG9ydE5vdGF0aW9uID8gKHZhbHVlLmNoYXJBdCgyKSArIHZhbHVlLmNoYXJBdCgyKSkgOiB2YWx1ZS5zdWJzdHJpbmcoNCwgNiksXG4gICAgICAgICAgYSA9IGlzUkdCYSA/IChpc1Nob3J0Tm90YXRpb24gPyAodmFsdWUuY2hhckF0KDMpICsgdmFsdWUuY2hhckF0KDMpKSA6IHZhbHVlLnN1YnN0cmluZyg2LCA4KSkgOiAnRkYnO1xuXG4gICAgICByZXR1cm4gW1xuICAgICAgICBwYXJzZUludChyLCAxNiksXG4gICAgICAgIHBhcnNlSW50KGcsIDE2KSxcbiAgICAgICAgcGFyc2VJbnQoYiwgMTYpLFxuICAgICAgICBwYXJzZUZsb2F0KChwYXJzZUludChhLCAxNikgLyAyNTUpLnRvRml4ZWQoMikpXG4gICAgICBdO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBuZXcgY29sb3Igb2JqZWN0LCB3aGVuIGdpdmVuIGNvbG9yIGluIGFycmF5IHJlcHJlc2VudGF0aW9uIChleDogWzIwMCwgMTAwLCAxMDAsIDAuNV0pXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Db2xvclxuICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2VcbiAgICogQHJldHVybiB7ZmFicmljLkNvbG9yfVxuICAgKi9cbiAgZmFicmljLkNvbG9yLmZyb21Tb3VyY2UgPSBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICB2YXIgb0NvbG9yID0gbmV3IENvbG9yKCk7XG4gICAgb0NvbG9yLnNldFNvdXJjZShzb3VyY2UpO1xuICAgIHJldHVybiBvQ29sb3I7XG4gIH07XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIHNjYWxlTWFwID0gWydlJywgJ3NlJywgJ3MnLCAnc3cnLCAndycsICdudycsICduJywgJ25lJywgJ2UnXSxcbiAgICAgIHNrZXdNYXAgPSBbJ25zJywgJ25lc3cnLCAnZXcnLCAnbndzZSddLFxuICAgICAgY29udHJvbHMgPSB7fSxcbiAgICAgIExFRlQgPSAnbGVmdCcsIFRPUCA9ICd0b3AnLCBSSUdIVCA9ICdyaWdodCcsIEJPVFRPTSA9ICdib3R0b20nLCBDRU5URVIgPSAnY2VudGVyJyxcbiAgICAgIG9wcG9zaXRlID0ge1xuICAgICAgICB0b3A6IEJPVFRPTSxcbiAgICAgICAgYm90dG9tOiBUT1AsXG4gICAgICAgIGxlZnQ6IFJJR0hULFxuICAgICAgICByaWdodDogTEVGVCxcbiAgICAgICAgY2VudGVyOiBDRU5URVIsXG4gICAgICB9LCByYWRpYW5zVG9EZWdyZWVzID0gZmFicmljLnV0aWwucmFkaWFuc1RvRGVncmVlcyxcbiAgICAgIHNpZ24gPSAoTWF0aC5zaWduIHx8IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICgoeCA+IDApIC0gKHggPCAwKSkgfHwgK3g7IH0pO1xuXG4gIC8qKlxuICAgKiBDb21iaW5lIGNvbnRyb2wgcG9zaXRpb24gYW5kIG9iamVjdCBhbmdsZSB0byBmaW5kIHRoZSBjb250cm9sIGRpcmVjdGlvbiBjb21wYXJlZFxuICAgKiB0byB0aGUgb2JqZWN0IGNlbnRlci5cbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBmYWJyaWNPYmplY3QgdGhlIGZhYnJpYyBvYmplY3QgZm9yIHdoaWNoIHdlIGFyZSByZW5kZXJpbmcgY29udHJvbHNcbiAgICogQHBhcmFtIHtmYWJyaWMuQ29udHJvbH0gY29udHJvbCB0aGUgY29udHJvbCBjbGFzc1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IDAgLSA3IGEgcXVhZHJhbnQgbnVtYmVyXG4gICAqL1xuICBmdW5jdGlvbiBmaW5kQ29ybmVyUXVhZHJhbnQoZmFicmljT2JqZWN0LCBjb250cm9sKSB7XG4gICAgdmFyIGNvcm5lckFuZ2xlID0gZmFicmljT2JqZWN0LmFuZ2xlICsgcmFkaWFuc1RvRGVncmVlcyhNYXRoLmF0YW4yKGNvbnRyb2wueSwgY29udHJvbC54KSkgKyAzNjA7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoKGNvcm5lckFuZ2xlICUgMzYwKSAvIDQ1KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpcmVFdmVudChldmVudE5hbWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgdGFyZ2V0ID0gb3B0aW9ucy50cmFuc2Zvcm0udGFyZ2V0LFxuICAgICAgICBjYW52YXMgPSB0YXJnZXQuY2FudmFzLFxuICAgICAgICBjYW52YXNPcHRpb25zID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKG9wdGlvbnMpO1xuICAgIGNhbnZhc09wdGlvbnMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIGNhbnZhcyAmJiBjYW52YXMuZmlyZSgnb2JqZWN0OicgKyBldmVudE5hbWUsIGNhbnZhc09wdGlvbnMpO1xuICAgIHRhcmdldC5maXJlKGV2ZW50TmFtZSwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogSW5zcGVjdCBldmVudCBhbmQgZmFicmljT2JqZWN0IHByb3BlcnRpZXMgdG8gdW5kZXJzdGFuZCBpZiB0aGUgc2NhbGluZyBhY3Rpb25cbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIGZyb20gdGhlIHVzZXIgYWN0aW9uXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gZmFicmljT2JqZWN0IHRoZSBmYWJyaWMgb2JqZWN0IGFib3V0IHRvIHNjYWxlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgc2NhbGUgaXMgcHJvcG9ydGlvbmFsXG4gICAqL1xuICBmdW5jdGlvbiBzY2FsZUlzUHJvcG9ydGlvbmFsKGV2ZW50RGF0YSwgZmFicmljT2JqZWN0KSB7XG4gICAgdmFyIGNhbnZhcyA9IGZhYnJpY09iamVjdC5jYW52YXMsIHVuaVNjYWxlS2V5ID0gY2FudmFzLnVuaVNjYWxlS2V5LFxuICAgICAgICB1bmlmb3JtSXNUb2dnbGVkID0gZXZlbnREYXRhW3VuaVNjYWxlS2V5XTtcbiAgICByZXR1cm4gKGNhbnZhcy51bmlmb3JtU2NhbGluZyAmJiAhdW5pZm9ybUlzVG9nZ2xlZCkgfHxcbiAgICAoIWNhbnZhcy51bmlmb3JtU2NhbGluZyAmJiB1bmlmb3JtSXNUb2dnbGVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdHJhbnNmb3JtIGlzIGNlbnRlcmVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc2Zvcm0gdHJhbnNmb3JtIGRhdGFcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0cmFuc2Zvcm0gaXMgY2VudGVyZWRcbiAgICovXG4gIGZ1bmN0aW9uIGlzVHJhbnNmb3JtQ2VudGVyZWQodHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybS5vcmlnaW5YID09PSBDRU5URVIgJiYgdHJhbnNmb3JtLm9yaWdpblkgPT09IENFTlRFUjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNwZWN0IGZhYnJpY09iamVjdCB0byB1bmRlcnN0YW5kIGlmIHRoZSBjdXJyZW50IHNjYWxpbmcgYWN0aW9uIGlzIGFsbG93ZWRcbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBmYWJyaWNPYmplY3QgdGhlIGZhYnJpYyBvYmplY3QgYWJvdXQgdG8gc2NhbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGJ5ICd4JyBvciAneScgb3IgJydcbiAgICogQHBhcmFtIHtCb29sZWFufSBzY2FsZVByb3BvcnRpb25hbGx5IHRydWUgaWYgd2UgYXJlIHRyeWluZyB0byBzY2FsZSBwcm9wb3J0aW9uYWxseVxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHNjYWxpbmcgaXMgbm90IGFsbG93ZWQgYXQgY3VycmVudCBjb25kaXRpb25zXG4gICAqL1xuICBmdW5jdGlvbiBzY2FsaW5nSXNGb3JiaWRkZW4oZmFicmljT2JqZWN0LCBieSwgc2NhbGVQcm9wb3J0aW9uYWxseSkge1xuICAgIHZhciBsb2NrWCA9IGZhYnJpY09iamVjdC5sb2NrU2NhbGluZ1gsIGxvY2tZID0gZmFicmljT2JqZWN0LmxvY2tTY2FsaW5nWTtcbiAgICBpZiAobG9ja1ggJiYgbG9ja1kpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWJ5ICYmIChsb2NrWCB8fCBsb2NrWSkgJiYgc2NhbGVQcm9wb3J0aW9uYWxseSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChsb2NrWCAmJiBieSA9PT0gJ3gnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGxvY2tZICYmIGJ5ID09PSAneScpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJuIHRoZSBjb3JyZWN0IGN1cnNvciBzdHlsZSBmb3IgdGhlIHNjYWxlIGFjdGlvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgdGhlIGphdmFzY3JpcHQgZXZlbnQgdGhhdCBpcyBjYXVzaW5nIHRoZSBzY2FsZVxuICAgKiBAcGFyYW0ge2ZhYnJpYy5Db250cm9sfSBjb250cm9sIHRoZSBjb250cm9sIHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGUgYWN0aW9uXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gZmFicmljT2JqZWN0IHRoZSBmYWJyaWMgb2JqZWN0IHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGUgYWN0aW9uXG4gICAqIEByZXR1cm4ge1N0cmluZ30gYSB2YWxpZCBjc3Mgc3RyaW5nIGZvciB0aGUgY3Vyc29yXG4gICAqL1xuICBmdW5jdGlvbiBzY2FsZUN1cnNvclN0eWxlSGFuZGxlcihldmVudERhdGEsIGNvbnRyb2wsIGZhYnJpY09iamVjdCkge1xuICAgIHZhciBub3RBbGxvd2VkID0gJ25vdC1hbGxvd2VkJyxcbiAgICAgICAgc2NhbGVQcm9wb3J0aW9uYWxseSA9IHNjYWxlSXNQcm9wb3J0aW9uYWwoZXZlbnREYXRhLCBmYWJyaWNPYmplY3QpLFxuICAgICAgICBieSA9ICcnO1xuICAgIGlmIChjb250cm9sLnggIT09IDAgJiYgY29udHJvbC55ID09PSAwKSB7XG4gICAgICBieSA9ICd4JztcbiAgICB9XG4gICAgZWxzZSBpZiAoY29udHJvbC54ID09PSAwICYmIGNvbnRyb2wueSAhPT0gMCkge1xuICAgICAgYnkgPSAneSc7XG4gICAgfVxuICAgIGlmIChzY2FsaW5nSXNGb3JiaWRkZW4oZmFicmljT2JqZWN0LCBieSwgc2NhbGVQcm9wb3J0aW9uYWxseSkpIHtcbiAgICAgIHJldHVybiBub3RBbGxvd2VkO1xuICAgIH1cbiAgICB2YXIgbiA9IGZpbmRDb3JuZXJRdWFkcmFudChmYWJyaWNPYmplY3QsIGNvbnRyb2wpO1xuICAgIHJldHVybiBzY2FsZU1hcFtuXSArICctcmVzaXplJztcbiAgfVxuXG4gIC8qKlxuICAgKiByZXR1cm4gdGhlIGNvcnJlY3QgY3Vyc29yIHN0eWxlIGZvciB0aGUgc2tldyBhY3Rpb25cbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIHRoZSBqYXZhc2NyaXB0IGV2ZW50IHRoYXQgaXMgY2F1c2luZyB0aGUgc2NhbGVcbiAgICogQHBhcmFtIHtmYWJyaWMuQ29udHJvbH0gY29udHJvbCB0aGUgY29udHJvbCB0aGF0IGlzIGludGVyZXN0ZWQgaW4gdGhlIGFjdGlvblxuICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IGZhYnJpY09iamVjdCB0aGUgZmFicmljIG9iamVjdCB0aGF0IGlzIGludGVyZXN0ZWQgaW4gdGhlIGFjdGlvblxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IGEgdmFsaWQgY3NzIHN0cmluZyBmb3IgdGhlIGN1cnNvclxuICAgKi9cbiAgZnVuY3Rpb24gc2tld0N1cnNvclN0eWxlSGFuZGxlcihldmVudERhdGEsIGNvbnRyb2wsIGZhYnJpY09iamVjdCkge1xuICAgIHZhciBub3RBbGxvd2VkID0gJ25vdC1hbGxvd2VkJztcbiAgICBpZiAoY29udHJvbC54ICE9PSAwICYmIGZhYnJpY09iamVjdC5sb2NrU2tld2luZ1kpIHtcbiAgICAgIHJldHVybiBub3RBbGxvd2VkO1xuICAgIH1cbiAgICBpZiAoY29udHJvbC55ICE9PSAwICYmIGZhYnJpY09iamVjdC5sb2NrU2tld2luZ1gpIHtcbiAgICAgIHJldHVybiBub3RBbGxvd2VkO1xuICAgIH1cbiAgICB2YXIgbiA9IGZpbmRDb3JuZXJRdWFkcmFudChmYWJyaWNPYmplY3QsIGNvbnRyb2wpICUgNDtcbiAgICByZXR1cm4gc2tld01hcFtuXSArICctcmVzaXplJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21iaW5lIHNrZXcgYW5kIHNjYWxlIHN0eWxlIGhhbmRsZXJzIHRvIGNvdmVyIGZhYnJpYyBzdGFuZGFyZCB1c2UgY2FzZVxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgdGhlIGphdmFzY3JpcHQgZXZlbnQgdGhhdCBpcyBjYXVzaW5nIHRoZSBzY2FsZVxuICAgKiBAcGFyYW0ge2ZhYnJpYy5Db250cm9sfSBjb250cm9sIHRoZSBjb250cm9sIHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGUgYWN0aW9uXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gZmFicmljT2JqZWN0IHRoZSBmYWJyaWMgb2JqZWN0IHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGUgYWN0aW9uXG4gICAqIEByZXR1cm4ge1N0cmluZ30gYSB2YWxpZCBjc3Mgc3RyaW5nIGZvciB0aGUgY3Vyc29yXG4gICAqL1xuICBmdW5jdGlvbiBzY2FsZVNrZXdDdXJzb3JTdHlsZUhhbmRsZXIoZXZlbnREYXRhLCBjb250cm9sLCBmYWJyaWNPYmplY3QpIHtcbiAgICBpZiAoZXZlbnREYXRhW2ZhYnJpY09iamVjdC5jYW52YXMuYWx0QWN0aW9uS2V5XSkge1xuICAgICAgcmV0dXJuIGNvbnRyb2xzLnNrZXdDdXJzb3JTdHlsZUhhbmRsZXIoZXZlbnREYXRhLCBjb250cm9sLCBmYWJyaWNPYmplY3QpO1xuICAgIH1cbiAgICByZXR1cm4gY29udHJvbHMuc2NhbGVDdXJzb3JTdHlsZUhhbmRsZXIoZXZlbnREYXRhLCBjb250cm9sLCBmYWJyaWNPYmplY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc3BlY3QgZXZlbnQsIGNvbnRyb2wgYW5kIGZhYnJpY09iamVjdCB0byByZXR1cm4gdGhlIGNvcnJlY3QgYWN0aW9uIG5hbWVcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIHRoZSBqYXZhc2NyaXB0IGV2ZW50IHRoYXQgaXMgY2F1c2luZyB0aGUgc2NhbGVcbiAgICogQHBhcmFtIHtmYWJyaWMuQ29udHJvbH0gY29udHJvbCB0aGUgY29udHJvbCB0aGF0IGlzIGludGVyZXN0ZWQgaW4gdGhlIGFjdGlvblxuICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IGZhYnJpY09iamVjdCB0aGUgZmFicmljIG9iamVjdCB0aGF0IGlzIGludGVyZXN0ZWQgaW4gdGhlIGFjdGlvblxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IGFuIGFjdGlvbiBuYW1lXG4gICAqL1xuICBmdW5jdGlvbiBzY2FsZU9yU2tld0FjdGlvbk5hbWUoZXZlbnREYXRhLCBjb250cm9sLCBmYWJyaWNPYmplY3QpIHtcbiAgICB2YXIgaXNBbHRlcm5hdGl2ZSA9IGV2ZW50RGF0YVtmYWJyaWNPYmplY3QuY2FudmFzLmFsdEFjdGlvbktleV07XG4gICAgaWYgKGNvbnRyb2wueCA9PT0gMCkge1xuICAgICAgLy8gdGhlbiBpcyBzY2FsZVkgb3Igc2tld1hcbiAgICAgIHJldHVybiBpc0FsdGVybmF0aXZlID8gJ3NrZXdYJyA6ICdzY2FsZVknO1xuICAgIH1cbiAgICBpZiAoY29udHJvbC55ID09PSAwKSB7XG4gICAgICAvLyB0aGVuIGlzIHNjYWxlWSBvciBza2V3WFxuICAgICAgcmV0dXJuIGlzQWx0ZXJuYXRpdmUgPyAnc2tld1knIDogJ3NjYWxlWCc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgdGhlIGNvcnJlY3Qgc3R5bGUgZm9yIHRoZSBjb250cm9sIHRoYXQgaXMgdXNlZCBmb3Igcm90YXRpb24uXG4gICAqIHRoaXMgZnVuY3Rpb24gaXMgdmVyeSBzaW1wbGUgYW5kIGl0IGp1c3QgdGFrZSBjYXJlIG9mIG5vdC1hbGxvd2VkIG9yIHN0YW5kYXJkIGN1cnNvclxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgdGhlIGphdmFzY3JpcHQgZXZlbnQgdGhhdCBpcyBjYXVzaW5nIHRoZSBzY2FsZVxuICAgKiBAcGFyYW0ge2ZhYnJpYy5Db250cm9sfSBjb250cm9sIHRoZSBjb250cm9sIHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGUgYWN0aW9uXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gZmFicmljT2JqZWN0IHRoZSBmYWJyaWMgb2JqZWN0IHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGUgYWN0aW9uXG4gICAqIEByZXR1cm4ge1N0cmluZ30gYSB2YWxpZCBjc3Mgc3RyaW5nIGZvciB0aGUgY3Vyc29yXG4gICAqL1xuICBmdW5jdGlvbiByb3RhdGlvblN0eWxlSGFuZGxlcihldmVudERhdGEsIGNvbnRyb2wsIGZhYnJpY09iamVjdCkge1xuICAgIGlmIChmYWJyaWNPYmplY3QubG9ja1JvdGF0aW9uKSB7XG4gICAgICByZXR1cm4gJ25vdC1hbGxvd2VkJztcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyb2wuY3Vyc29yU3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBjb21tb25FdmVudEluZm8oZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZTogZXZlbnREYXRhLFxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICBwb2ludGVyOiB7XG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHksXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcmFwIGFuIGFjdGlvbiBoYW5kbGVyIHdpdGggc2F2aW5nL3Jlc3RvcmluZyBvYmplY3QgcG9zaXRpb24gb24gdGhlIHRyYW5zZm9ybS5cbiAgICogdGhpcyBpcyB0aGUgY29kZSB0aGF0IHBlcm1pdHMgdG8gb2JqZWN0cyB0byBrZWVwIHRoZWlyIHBvc2l0aW9uIHdoaWxlIHRyYW5zZm9ybWluZy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gYWN0aW9uSGFuZGxlciB0aGUgZnVuY3Rpb24gdG8gd3JhcFxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gYSBmdW5jdGlvbiB3aXRoIGFuIGFjdGlvbiBoYW5kbGVyIHNpZ25hdHVyZVxuICAgKi9cbiAgZnVuY3Rpb24gd3JhcFdpdGhGaXhlZEFuY2hvcihhY3Rpb25IYW5kbGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdHJhbnNmb3JtLnRhcmdldCwgY2VudGVyUG9pbnQgPSB0YXJnZXQuZ2V0Q2VudGVyUG9pbnQoKSxcbiAgICAgICAgICBjb25zdHJhaW50ID0gdGFyZ2V0LnRyYW5zbGF0ZVRvT3JpZ2luUG9pbnQoY2VudGVyUG9pbnQsIHRyYW5zZm9ybS5vcmlnaW5YLCB0cmFuc2Zvcm0ub3JpZ2luWSksXG4gICAgICAgICAgYWN0aW9uUGVyZm9ybWVkID0gYWN0aW9uSGFuZGxlcihldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSk7XG4gICAgICB0YXJnZXQuc2V0UG9zaXRpb25CeU9yaWdpbihjb25zdHJhaW50LCB0cmFuc2Zvcm0ub3JpZ2luWCwgdHJhbnNmb3JtLm9yaWdpblkpO1xuICAgICAgcmV0dXJuIGFjdGlvblBlcmZvcm1lZDtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFdyYXAgYW4gYWN0aW9uIGhhbmRsZXIgd2l0aCBmaXJpbmcgYW4gZXZlbnQgaWYgdGhlIGFjdGlvbiBpcyBwZXJmb3JtZWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gYWN0aW9uSGFuZGxlciB0aGUgZnVuY3Rpb24gdG8gd3JhcFxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gYSBmdW5jdGlvbiB3aXRoIGFuIGFjdGlvbiBoYW5kbGVyIHNpZ25hdHVyZVxuICAgKi9cbiAgZnVuY3Rpb24gd3JhcFdpdGhGaXJlRXZlbnQoZXZlbnROYW1lLCBhY3Rpb25IYW5kbGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSB7XG4gICAgICB2YXIgYWN0aW9uUGVyZm9ybWVkID0gYWN0aW9uSGFuZGxlcihldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSk7XG4gICAgICBpZiAoYWN0aW9uUGVyZm9ybWVkKSB7XG4gICAgICAgIGZpcmVFdmVudChldmVudE5hbWUsIGNvbW1vbkV2ZW50SW5mbyhldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjdGlvblBlcmZvcm1lZDtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgYSBwb2ludCBkZXNjcmliZWQgYnkgeCBhbmQgeSBpbiBhIGRpc3RhbmNlIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciBvZiB0aGUgb2JqZWN0XG4gICAqIGJvdW5kaW5nIGJveC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWFxuICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWVxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcmV0dXJuIHtGYWJyaWMuUG9pbnR9IHRoZSBub3JtYWxpemVkIHBvaW50XG4gICAqL1xuICBmdW5jdGlvbiBnZXRMb2NhbFBvaW50KHRyYW5zZm9ybSwgb3JpZ2luWCwgb3JpZ2luWSwgeCwgeSkge1xuICAgIHZhciB0YXJnZXQgPSB0cmFuc2Zvcm0udGFyZ2V0LFxuICAgICAgICBjb250cm9sID0gdGFyZ2V0LmNvbnRyb2xzW3RyYW5zZm9ybS5jb3JuZXJdLFxuICAgICAgICB6b29tID0gdGFyZ2V0LmNhbnZhcy5nZXRab29tKCksXG4gICAgICAgIHBhZGRpbmcgPSB0YXJnZXQucGFkZGluZyAvIHpvb20sXG4gICAgICAgIGxvY2FsUG9pbnQgPSB0YXJnZXQudG9Mb2NhbFBvaW50KG5ldyBmYWJyaWMuUG9pbnQoeCwgeSksIG9yaWdpblgsIG9yaWdpblkpO1xuICAgIGlmIChsb2NhbFBvaW50LnggPj0gcGFkZGluZykge1xuICAgICAgbG9jYWxQb2ludC54IC09IHBhZGRpbmc7XG4gICAgfVxuICAgIGlmIChsb2NhbFBvaW50LnggPD0gLXBhZGRpbmcpIHtcbiAgICAgIGxvY2FsUG9pbnQueCArPSBwYWRkaW5nO1xuICAgIH1cbiAgICBpZiAobG9jYWxQb2ludC55ID49IHBhZGRpbmcpIHtcbiAgICAgIGxvY2FsUG9pbnQueSAtPSBwYWRkaW5nO1xuICAgIH1cbiAgICBpZiAobG9jYWxQb2ludC55IDw9IHBhZGRpbmcpIHtcbiAgICAgIGxvY2FsUG9pbnQueSArPSBwYWRkaW5nO1xuICAgIH1cbiAgICBsb2NhbFBvaW50LnggLT0gY29udHJvbC5vZmZzZXRYO1xuICAgIGxvY2FsUG9pbnQueSAtPSBjb250cm9sLm9mZnNldFk7XG4gICAgcmV0dXJuIGxvY2FsUG9pbnQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZWN0IGlmIHRoZSBmYWJyaWMgb2JqZWN0IGlzIGZsaXBwZWQgb24gb25lIHNpZGUuXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gdGFyZ2V0XG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgb25lIGZsaXAsIGJ1dCBub3QgdHdvLlxuICAgKi9cbiAgZnVuY3Rpb24gdGFyZ2V0SGFzT25lRmxpcCh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0LmZsaXBYICE9PSB0YXJnZXQuZmxpcFk7XG4gIH1cblxuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBjb21wZW5zYXRlIHRoZSBzY2FsZSBmYWN0b3Igd2hlbiBza2V3IGlzIGFwcGxpZWQgb24gYm90aCBheGVzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjb21wZW5zYXRlU2NhbGVGb3JTa2V3KHRhcmdldCwgb3Bwb3NpdGVTa2V3LCBzY2FsZVRvQ29tcGVuc2F0ZSwgYXhpcywgcmVmZXJlbmNlKSB7XG4gICAgaWYgKHRhcmdldFtvcHBvc2l0ZVNrZXddICE9PSAwKSB7XG4gICAgICB2YXIgbmV3RGltID0gdGFyZ2V0Ll9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKVtheGlzXTtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IHJlZmVyZW5jZSAvIG5ld0RpbSAqIHRhcmdldFtzY2FsZVRvQ29tcGVuc2F0ZV07XG4gICAgICB0YXJnZXQuc2V0KHNjYWxlVG9Db21wZW5zYXRlLCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFjdGlvbiBoYW5kbGVyIGZvciBza2V3aW5nIG9uIHRoZSBYIGF4aXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHNrZXdPYmplY3RYKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSB7XG4gICAgdmFyIHRhcmdldCA9IHRyYW5zZm9ybS50YXJnZXQsXG4gICAgICAgIC8vIGZpbmQgaG93IGJpZyB0aGUgb2JqZWN0IHdvdWxkIGJlLCBpZiB0aGVyZSB3YXMgbm8gc2tld1guIHRha2VzIGluIGFjY291bnQgc2NhbGluZ1xuICAgICAgICBkaW1Ob1NrZXcgPSB0YXJnZXQuX2dldFRyYW5zZm9ybWVkRGltZW5zaW9ucygwLCB0YXJnZXQuc2tld1kpLFxuICAgICAgICBsb2NhbFBvaW50ID0gZ2V0TG9jYWxQb2ludCh0cmFuc2Zvcm0sIHRyYW5zZm9ybS5vcmlnaW5YLCB0cmFuc2Zvcm0ub3JpZ2luWSwgeCwgeSksXG4gICAgICAgIC8vIHRoZSBtb3VzZSBpcyBpbiB0aGUgY2VudGVyIG9mIHRoZSBvYmplY3QsIGFuZCB3ZSB3YW50IGl0IHRvIHN0YXkgdGhlcmUuXG4gICAgICAgIC8vIHNvIHRoZSBvYmplY3Qgd2lsbCBncm93IHR3aWNlIGFzIG11Y2ggYXMgdGhlIG1vdXNlLlxuICAgICAgICAvLyB0aGlzIG1ha2VzIHRoZSBza2V3IGdyb3d0aCB0byBsb2NhbFBvaW50ICogMiAtIGRpbU5vU2tldy5cbiAgICAgICAgdG90YWxTa2V3U2l6ZSA9IE1hdGguYWJzKGxvY2FsUG9pbnQueCAqIDIpIC0gZGltTm9Ta2V3LngsXG4gICAgICAgIGN1cnJlbnRTa2V3ID0gdGFyZ2V0LnNrZXdYLCBuZXdTa2V3O1xuICAgIGlmICh0b3RhbFNrZXdTaXplIDwgMikge1xuICAgICAgLy8gbGV0J3MgbWFrZSBpdCBlYXN5IHRvIGdvIGJhY2sgdG8gcG9zaXRpb24gMC5cbiAgICAgIG5ld1NrZXcgPSAwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG5ld1NrZXcgPSByYWRpYW5zVG9EZWdyZWVzKFxuICAgICAgICBNYXRoLmF0YW4yKCh0b3RhbFNrZXdTaXplIC8gdGFyZ2V0LnNjYWxlWCksIChkaW1Ob1NrZXcueSAvIHRhcmdldC5zY2FsZVkpKVxuICAgICAgKTtcbiAgICAgIC8vIG5vdyB3ZSBoYXZlIHRvIGZpbmQgdGhlIHNpZ24gb2YgdGhlIHNrZXcuXG4gICAgICAvLyBpdCBtb3N0bHkgZGVwZW5kIG9uIHRoZSBvcmlnaW4gb2YgdHJhbnNmb3JtYXRpb24uXG4gICAgICBpZiAodHJhbnNmb3JtLm9yaWdpblggPT09IExFRlQgJiYgdHJhbnNmb3JtLm9yaWdpblkgPT09IEJPVFRPTSkge1xuICAgICAgICBuZXdTa2V3ID0gLW5ld1NrZXc7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNmb3JtLm9yaWdpblggPT09IFJJR0hUICYmIHRyYW5zZm9ybS5vcmlnaW5ZID09PSBUT1ApIHtcbiAgICAgICAgbmV3U2tldyA9IC1uZXdTa2V3O1xuICAgICAgfVxuICAgICAgaWYgKHRhcmdldEhhc09uZUZsaXAodGFyZ2V0KSkge1xuICAgICAgICBuZXdTa2V3ID0gLW5ld1NrZXc7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBoYXNTa2V3ZWQgPSBjdXJyZW50U2tldyAhPT0gbmV3U2tldztcbiAgICBpZiAoaGFzU2tld2VkKSB7XG4gICAgICB2YXIgZGltQmVmb3JlU2tld2luZyA9IHRhcmdldC5fZ2V0VHJhbnNmb3JtZWREaW1lbnNpb25zKCkueTtcbiAgICAgIHRhcmdldC5zZXQoJ3NrZXdYJywgbmV3U2tldyk7XG4gICAgICBjb21wZW5zYXRlU2NhbGVGb3JTa2V3KHRhcmdldCwgJ3NrZXdZJywgJ3NjYWxlWScsICd5JywgZGltQmVmb3JlU2tld2luZyk7XG4gICAgfVxuICAgIHJldHVybiBoYXNTa2V3ZWQ7XG4gIH1cblxuICAvKipcbiAgICogQWN0aW9uIGhhbmRsZXIgZm9yIHNrZXdpbmcgb24gdGhlIFkgYXhpc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gc2tld09iamVjdFkoZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdHJhbnNmb3JtLnRhcmdldCxcbiAgICAgICAgLy8gZmluZCBob3cgYmlnIHRoZSBvYmplY3Qgd291bGQgYmUsIGlmIHRoZXJlIHdhcyBubyBza2V3WC4gdGFrZXMgaW4gYWNjb3VudCBzY2FsaW5nXG4gICAgICAgIGRpbU5vU2tldyA9IHRhcmdldC5fZ2V0VHJhbnNmb3JtZWREaW1lbnNpb25zKHRhcmdldC5za2V3WCwgMCksXG4gICAgICAgIGxvY2FsUG9pbnQgPSBnZXRMb2NhbFBvaW50KHRyYW5zZm9ybSwgdHJhbnNmb3JtLm9yaWdpblgsIHRyYW5zZm9ybS5vcmlnaW5ZLCB4LCB5KSxcbiAgICAgICAgLy8gdGhlIG1vdXNlIGlzIGluIHRoZSBjZW50ZXIgb2YgdGhlIG9iamVjdCwgYW5kIHdlIHdhbnQgaXQgdG8gc3RheSB0aGVyZS5cbiAgICAgICAgLy8gc28gdGhlIG9iamVjdCB3aWxsIGdyb3cgdHdpY2UgYXMgbXVjaCBhcyB0aGUgbW91c2UuXG4gICAgICAgIC8vIHRoaXMgbWFrZXMgdGhlIHNrZXcgZ3Jvd3RoIHRvIGxvY2FsUG9pbnQgKiAyIC0gZGltTm9Ta2V3LlxuICAgICAgICB0b3RhbFNrZXdTaXplID0gTWF0aC5hYnMobG9jYWxQb2ludC55ICogMikgLSBkaW1Ob1NrZXcueSxcbiAgICAgICAgY3VycmVudFNrZXcgPSB0YXJnZXQuc2tld1ksIG5ld1NrZXc7XG4gICAgaWYgKHRvdGFsU2tld1NpemUgPCAyKSB7XG4gICAgICAvLyBsZXQncyBtYWtlIGl0IGVhc3kgdG8gZ28gYmFjayB0byBwb3NpdGlvbiAwLlxuICAgICAgbmV3U2tldyA9IDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbmV3U2tldyA9IHJhZGlhbnNUb0RlZ3JlZXMoXG4gICAgICAgIE1hdGguYXRhbjIoKHRvdGFsU2tld1NpemUgLyB0YXJnZXQuc2NhbGVZKSwgKGRpbU5vU2tldy54IC8gdGFyZ2V0LnNjYWxlWCkpXG4gICAgICApO1xuICAgICAgLy8gbm93IHdlIGhhdmUgdG8gZmluZCB0aGUgc2lnbiBvZiB0aGUgc2tldy5cbiAgICAgIC8vIGl0IG1vc3RseSBkZXBlbmQgb24gdGhlIG9yaWdpbiBvZiB0cmFuc2Zvcm1hdGlvbi5cbiAgICAgIGlmICh0cmFuc2Zvcm0ub3JpZ2luWCA9PT0gTEVGVCAmJiB0cmFuc2Zvcm0ub3JpZ2luWSA9PT0gQk9UVE9NKSB7XG4gICAgICAgIG5ld1NrZXcgPSAtbmV3U2tldztcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2Zvcm0ub3JpZ2luWCA9PT0gUklHSFQgJiYgdHJhbnNmb3JtLm9yaWdpblkgPT09IFRPUCkge1xuICAgICAgICBuZXdTa2V3ID0gLW5ld1NrZXc7XG4gICAgICB9XG4gICAgICBpZiAodGFyZ2V0SGFzT25lRmxpcCh0YXJnZXQpKSB7XG4gICAgICAgIG5ld1NrZXcgPSAtbmV3U2tldztcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGhhc1NrZXdlZCA9IGN1cnJlbnRTa2V3ICE9PSBuZXdTa2V3O1xuICAgIGlmIChoYXNTa2V3ZWQpIHtcbiAgICAgIHZhciBkaW1CZWZvcmVTa2V3aW5nID0gdGFyZ2V0Ll9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKS54O1xuICAgICAgdGFyZ2V0LnNldCgnc2tld1knLCBuZXdTa2V3KTtcbiAgICAgIGNvbXBlbnNhdGVTY2FsZUZvclNrZXcodGFyZ2V0LCAnc2tld1gnLCAnc2NhbGVYJywgJ3gnLCBkaW1CZWZvcmVTa2V3aW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc1NrZXdlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcmFwcGVkIEFjdGlvbiBoYW5kbGVyIGZvciBza2V3aW5nIG9uIHRoZSBZIGF4aXMsIHRha2VzIGNhcmUgb2YgdGhlXG4gICAqIHNrZXcgZGlyZWN0aW9uIGFuZCBkZXRlcm1pbmUgdGhlIGNvcnJlY3QgdHJhbnNmb3JtIG9yaWdpbiBmb3IgdGhlIGFuY2hvciBwb2ludFxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgamF2YXNjcmlwdCBldmVudCB0aGF0IGlzIGRvaW5nIHRoZSB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybSBqYXZhc2NyaXB0IG9iamVjdCBjb250YWluaW5nIGEgc2VyaWVzIG9mIGluZm9ybWF0aW9uIGFyb3VuZCB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggY3VycmVudCBtb3VzZSB4IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcGFyYW0ge251bWJlcn0geSBjdXJyZW50IG1vdXNlIHkgcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgc29tZSBjaGFuZ2UgaGFwcGVuZWRcbiAgICovXG4gIGZ1bmN0aW9uIHNrZXdIYW5kbGVyWChldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSkge1xuICAgIC8vIHN0ZXAxIGZpZ3VyZSBvdXQgYW5kIGNoYW5nZSB0cmFuc2Zvcm0gb3JpZ2luLlxuICAgIC8vIGlmIHNrZXdYID4gMCBhbmQgb3JpZ2luWSBib3R0b20gd2UgYW5jaG9yIG9uIHJpZ2h0XG4gICAgLy8gaWYgc2tld1ggPiAwIGFuZCBvcmlnaW5ZIHRvcCB3ZSBhbmNob3Igb24gbGVmdFxuICAgIC8vIGlmIHNrZXdYIDwgMCBhbmQgb3JpZ2luWSBib3R0b20gd2UgYW5jaG9yIG9uIGxlZnRcbiAgICAvLyBpZiBza2V3WCA8IDAgYW5kIG9yaWdpblkgdG9wIHdlIGFuY2hvciBvbiByaWdodFxuICAgIC8vIGlmIHNrZXdYIGlzIDAsIHdlIGxvb2sgZm9yIG1vdXNlIHBvc2l0aW9uIHRvIHVuZGVyc3RhbmQgd2hlcmUgYXJlIHdlIGdvaW5nLlxuICAgIHZhciB0YXJnZXQgPSB0cmFuc2Zvcm0udGFyZ2V0LCBjdXJyZW50U2tldyA9IHRhcmdldC5za2V3WCwgb3JpZ2luWCwgb3JpZ2luWSA9IHRyYW5zZm9ybS5vcmlnaW5ZO1xuICAgIGlmICh0YXJnZXQubG9ja1NrZXdpbmdYKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChjdXJyZW50U2tldyA9PT0gMCkge1xuICAgICAgdmFyIGxvY2FsUG9pbnRGcm9tQ2VudGVyID0gZ2V0TG9jYWxQb2ludCh0cmFuc2Zvcm0sIENFTlRFUiwgQ0VOVEVSLCB4LCB5KTtcbiAgICAgIGlmIChsb2NhbFBvaW50RnJvbUNlbnRlci54ID4gMCkge1xuICAgICAgICAvLyB3ZSBhcmUgcHVsbGluZyByaWdodCwgYW5jaG9yIGxlZnQ7XG4gICAgICAgIG9yaWdpblggPSBMRUZUO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIHdlIGFyZSBwdWxsaW5nIHJpZ2h0LCBhbmNob3IgcmlnaHRcbiAgICAgICAgb3JpZ2luWCA9IFJJR0hUO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChjdXJyZW50U2tldyA+IDApIHtcbiAgICAgICAgb3JpZ2luWCA9IG9yaWdpblkgPT09IFRPUCA/IExFRlQgOiBSSUdIVDtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50U2tldyA8IDApIHtcbiAgICAgICAgb3JpZ2luWCA9IG9yaWdpblkgPT09IFRPUCA/IFJJR0hUIDogTEVGVDtcbiAgICAgIH1cbiAgICAgIC8vIGlzIHRoZSBvYmplY3QgZmxpcHBlZCBvbiBvbmUgc2lkZSBvbmx5PyBzd2FwIHRoZSBvcmlnaW4uXG4gICAgICBpZiAodGFyZ2V0SGFzT25lRmxpcCh0YXJnZXQpKSB7XG4gICAgICAgIG9yaWdpblggPSBvcmlnaW5YID09PSBMRUZUID8gUklHSFQgOiBMRUZUO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIG9uY2Ugd2UgaGF2ZSB0aGUgb3JpZ2luLCB3ZSBmaW5kIHRoZSBhbmNob3IgcG9pbnRcbiAgICB0cmFuc2Zvcm0ub3JpZ2luWCA9IG9yaWdpblg7XG4gICAgdmFyIGZpbmFsSGFuZGxlciA9IHdyYXBXaXRoRmlyZUV2ZW50KCdza2V3aW5nJywgd3JhcFdpdGhGaXhlZEFuY2hvcihza2V3T2JqZWN0WCkpO1xuICAgIHJldHVybiBmaW5hbEhhbmRsZXIoZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyYXBwZWQgQWN0aW9uIGhhbmRsZXIgZm9yIHNrZXdpbmcgb24gdGhlIFkgYXhpcywgdGFrZXMgY2FyZSBvZiB0aGVcbiAgICogc2tldyBkaXJlY3Rpb24gYW5kIGRldGVybWluZSB0aGUgY29ycmVjdCB0cmFuc2Zvcm0gb3JpZ2luIGZvciB0aGUgYW5jaG9yIHBvaW50XG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSBqYXZhc2NyaXB0IGV2ZW50IHRoYXQgaXMgZG9pbmcgdGhlIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtIGphdmFzY3JpcHQgb2JqZWN0IGNvbnRhaW5pbmcgYSBzZXJpZXMgb2YgaW5mb3JtYXRpb24gYXJvdW5kIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge251bWJlcn0geCBjdXJyZW50IG1vdXNlIHggcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGN1cnJlbnQgbW91c2UgeSBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBzb21lIGNoYW5nZSBoYXBwZW5lZFxuICAgKi9cbiAgZnVuY3Rpb24gc2tld0hhbmRsZXJZKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSB7XG4gICAgLy8gc3RlcDEgZmlndXJlIG91dCBhbmQgY2hhbmdlIHRyYW5zZm9ybSBvcmlnaW4uXG4gICAgLy8gaWYgc2tld1kgPiAwIGFuZCBvcmlnaW5YIGxlZnQgd2UgYW5jaG9yIG9uIHRvcFxuICAgIC8vIGlmIHNrZXdZID4gMCBhbmQgb3JpZ2luWCByaWdodCB3ZSBhbmNob3Igb24gYm90dG9tXG4gICAgLy8gaWYgc2tld1kgPCAwIGFuZCBvcmlnaW5YIGxlZnQgd2UgYW5jaG9yIG9uIGJvdHRvbVxuICAgIC8vIGlmIHNrZXdZIDwgMCBhbmQgb3JpZ2luWCByaWdodCB3ZSBhbmNob3Igb24gdG9wXG4gICAgLy8gaWYgc2tld1kgaXMgMCwgd2UgbG9vayBmb3IgbW91c2UgcG9zaXRpb24gdG8gdW5kZXJzdGFuZCB3aGVyZSBhcmUgd2UgZ29pbmcuXG4gICAgdmFyIHRhcmdldCA9IHRyYW5zZm9ybS50YXJnZXQsIGN1cnJlbnRTa2V3ID0gdGFyZ2V0LnNrZXdZLCBvcmlnaW5ZLCBvcmlnaW5YID0gdHJhbnNmb3JtLm9yaWdpblg7XG4gICAgaWYgKHRhcmdldC5sb2NrU2tld2luZ1kpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRTa2V3ID09PSAwKSB7XG4gICAgICB2YXIgbG9jYWxQb2ludEZyb21DZW50ZXIgPSBnZXRMb2NhbFBvaW50KHRyYW5zZm9ybSwgQ0VOVEVSLCBDRU5URVIsIHgsIHkpO1xuICAgICAgaWYgKGxvY2FsUG9pbnRGcm9tQ2VudGVyLnkgPiAwKSB7XG4gICAgICAgIC8vIHdlIGFyZSBwdWxsaW5nIGRvd24sIGFuY2hvciB1cDtcbiAgICAgICAgb3JpZ2luWSA9IFRPUDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyB3ZSBhcmUgcHVsbGluZyB1cCwgYW5jaG9yIGRvd25cbiAgICAgICAgb3JpZ2luWSA9IEJPVFRPTTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAoY3VycmVudFNrZXcgPiAwKSB7XG4gICAgICAgIG9yaWdpblkgPSBvcmlnaW5YID09PSBMRUZUID8gVE9QIDogQk9UVE9NO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRTa2V3IDwgMCkge1xuICAgICAgICBvcmlnaW5ZID0gb3JpZ2luWCA9PT0gTEVGVCA/IEJPVFRPTSA6IFRPUDtcbiAgICAgIH1cbiAgICAgIC8vIGlzIHRoZSBvYmplY3QgZmxpcHBlZCBvbiBvbmUgc2lkZSBvbmx5PyBzd2FwIHRoZSBvcmlnaW4uXG4gICAgICBpZiAodGFyZ2V0SGFzT25lRmxpcCh0YXJnZXQpKSB7XG4gICAgICAgIG9yaWdpblkgPSBvcmlnaW5ZID09PSBUT1AgPyBCT1RUT00gOiBUT1A7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gb25jZSB3ZSBoYXZlIHRoZSBvcmlnaW4sIHdlIGZpbmQgdGhlIGFuY2hvciBwb2ludFxuICAgIHRyYW5zZm9ybS5vcmlnaW5ZID0gb3JpZ2luWTtcbiAgICB2YXIgZmluYWxIYW5kbGVyID0gd3JhcFdpdGhGaXJlRXZlbnQoJ3NrZXdpbmcnLCB3cmFwV2l0aEZpeGVkQW5jaG9yKHNrZXdPYmplY3RZKSk7XG4gICAgcmV0dXJuIGZpbmFsSGFuZGxlcihldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSk7XG4gIH1cblxuICAvKipcbiAgICogQWN0aW9uIGhhbmRsZXIgZm9yIHJvdGF0aW9uIGFuZCBzbmFwcGluZywgd2l0aG91dCBhbmNob3IgcG9pbnQuXG4gICAqIE5lZWRzIHRvIGJlIHdyYXBwZWQgd2l0aCBgd3JhcFdpdGhGaXhlZEFuY2hvcmAgdG8gYmUgZWZmZWN0aXZlXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSBqYXZhc2NyaXB0IGV2ZW50IHRoYXQgaXMgZG9pbmcgdGhlIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtIGphdmFzY3JpcHQgb2JqZWN0IGNvbnRhaW5pbmcgYSBzZXJpZXMgb2YgaW5mb3JtYXRpb24gYXJvdW5kIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge251bWJlcn0geCBjdXJyZW50IG1vdXNlIHggcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGN1cnJlbnQgbW91c2UgeSBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBzb21lIGNoYW5nZSBoYXBwZW5lZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcm90YXRpb25XaXRoU25hcHBpbmcoZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpIHtcbiAgICB2YXIgdCA9IHRyYW5zZm9ybSxcbiAgICAgICAgdGFyZ2V0ID0gdC50YXJnZXQsXG4gICAgICAgIHBpdm90UG9pbnQgPSB0YXJnZXQudHJhbnNsYXRlVG9PcmlnaW5Qb2ludCh0YXJnZXQuZ2V0Q2VudGVyUG9pbnQoKSwgdC5vcmlnaW5YLCB0Lm9yaWdpblkpO1xuXG4gICAgaWYgKHRhcmdldC5sb2NrUm90YXRpb24pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGFzdEFuZ2xlID0gTWF0aC5hdGFuMih0LmV5IC0gcGl2b3RQb2ludC55LCB0LmV4IC0gcGl2b3RQb2ludC54KSxcbiAgICAgICAgY3VyQW5nbGUgPSBNYXRoLmF0YW4yKHkgLSBwaXZvdFBvaW50LnksIHggLSBwaXZvdFBvaW50LngpLFxuICAgICAgICBhbmdsZSA9IHJhZGlhbnNUb0RlZ3JlZXMoY3VyQW5nbGUgLSBsYXN0QW5nbGUgKyB0LnRoZXRhKSxcbiAgICAgICAgaGFzUm90YXRlZCA9IHRydWU7XG5cbiAgICBpZiAodGFyZ2V0LnNuYXBBbmdsZSA+IDApIHtcbiAgICAgIHZhciBzbmFwQW5nbGUgID0gdGFyZ2V0LnNuYXBBbmdsZSxcbiAgICAgICAgICBzbmFwVGhyZXNob2xkICA9IHRhcmdldC5zbmFwVGhyZXNob2xkIHx8IHNuYXBBbmdsZSxcbiAgICAgICAgICByaWdodEFuZ2xlTG9ja2VkID0gTWF0aC5jZWlsKGFuZ2xlIC8gc25hcEFuZ2xlKSAqIHNuYXBBbmdsZSxcbiAgICAgICAgICBsZWZ0QW5nbGVMb2NrZWQgPSBNYXRoLmZsb29yKGFuZ2xlIC8gc25hcEFuZ2xlKSAqIHNuYXBBbmdsZTtcblxuICAgICAgaWYgKE1hdGguYWJzKGFuZ2xlIC0gbGVmdEFuZ2xlTG9ja2VkKSA8IHNuYXBUaHJlc2hvbGQpIHtcbiAgICAgICAgYW5nbGUgPSBsZWZ0QW5nbGVMb2NrZWQ7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChNYXRoLmFicyhhbmdsZSAtIHJpZ2h0QW5nbGVMb2NrZWQpIDwgc25hcFRocmVzaG9sZCkge1xuICAgICAgICBhbmdsZSA9IHJpZ2h0QW5nbGVMb2NrZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbm9ybWFsaXplIGFuZ2xlIHRvIHBvc2l0aXZlIHZhbHVlXG4gICAgaWYgKGFuZ2xlIDwgMCkge1xuICAgICAgYW5nbGUgPSAzNjAgKyBhbmdsZTtcbiAgICB9XG4gICAgYW5nbGUgJT0gMzYwO1xuXG4gICAgaGFzUm90YXRlZCA9IHRhcmdldC5hbmdsZSAhPT0gYW5nbGU7XG4gICAgdGFyZ2V0LmFuZ2xlID0gYW5nbGU7XG4gICAgcmV0dXJuIGhhc1JvdGF0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogQmFzaWMgc2NhbGluZyBsb2dpYywgcmV1c2VkIHdpdGggZGlmZmVyZW50IGNvbnN0cmFpbiBmb3Igc2NhbGluZyBYLFksIGZyZWVseSBvciBlcXVhbGx5LlxuICAgKiBOZWVkcyB0byBiZSB3cmFwcGVkIHdpdGggYHdyYXBXaXRoRml4ZWRBbmNob3JgIHRvIGJlIGVmZmVjdGl2ZVxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgamF2YXNjcmlwdCBldmVudCB0aGF0IGlzIGRvaW5nIHRoZSB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybSBqYXZhc2NyaXB0IG9iamVjdCBjb250YWluaW5nIGEgc2VyaWVzIG9mIGluZm9ybWF0aW9uIGFyb3VuZCB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggY3VycmVudCBtb3VzZSB4IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcGFyYW0ge251bWJlcn0geSBjdXJyZW50IG1vdXNlIHkgcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gZm9yIHNjYWxpbmdcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuYnkgJ3gnLCAneScsICdlcXVhbGx5JyBvciAnJyB0byBpbmRpY2F0ZSB0eXBlIG9mIHNjYWxpbmdcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBzb21lIGNoYW5nZSBoYXBwZW5lZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gc2NhbGVPYmplY3QoZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHksIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgdGFyZ2V0ID0gdHJhbnNmb3JtLnRhcmdldCxcbiAgICAgICAgbG9ja1NjYWxpbmdYID0gdGFyZ2V0LmxvY2tTY2FsaW5nWCwgbG9ja1NjYWxpbmdZID0gdGFyZ2V0LmxvY2tTY2FsaW5nWSxcbiAgICAgICAgYnkgPSBvcHRpb25zLmJ5LCBuZXdQb2ludCwgc2NhbGVYLCBzY2FsZVksIGRpbSxcbiAgICAgICAgc2NhbGVQcm9wb3J0aW9uYWxseSA9IHNjYWxlSXNQcm9wb3J0aW9uYWwoZXZlbnREYXRhLCB0YXJnZXQpLFxuICAgICAgICBmb3JiaWRTY2FsaW5nID0gc2NhbGluZ0lzRm9yYmlkZGVuKHRhcmdldCwgYnksIHNjYWxlUHJvcG9ydGlvbmFsbHkpLFxuICAgICAgICBzaWduWCwgc2lnblksIGdlc3R1cmVTY2FsZSA9IHRyYW5zZm9ybS5nZXN0dXJlU2NhbGU7XG5cbiAgICBpZiAoZm9yYmlkU2NhbGluZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZ2VzdHVyZVNjYWxlKSB7XG4gICAgICBzY2FsZVggPSB0cmFuc2Zvcm0uc2NhbGVYICogZ2VzdHVyZVNjYWxlO1xuICAgICAgc2NhbGVZID0gdHJhbnNmb3JtLnNjYWxlWSAqIGdlc3R1cmVTY2FsZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBuZXdQb2ludCA9IGdldExvY2FsUG9pbnQodHJhbnNmb3JtLCB0cmFuc2Zvcm0ub3JpZ2luWCwgdHJhbnNmb3JtLm9yaWdpblksIHgsIHkpO1xuICAgICAgLy8gdXNlIG9mIHNpZ246IFdlIHVzZSBzaWduIHRvIGRldGVjdCBjaGFuZ2Ugb2YgZGlyZWN0aW9uIG9mIGFuIGFjdGlvbi4gc2lnbiB1c3VhbGx5IGNoYW5nZSB3aGVuXG4gICAgICAvLyB3ZSBjcm9zcyB0aGUgb3JpZ2luIHBvaW50IHdpdGggdGhlIG1vdXNlLiBTbyBhIHNjYWxlIGZsaXAgZm9yIGV4YW1wbGUuIFRoZXJlIGlzIGFuIGlzc3VlIHdoZW4gc2NhbGluZ1xuICAgICAgLy8gYnkgY2VudGVyIGFuZCBzY2FsaW5nIHVzaW5nIG9uZSBtaWRkbGUgY29udHJvbCAoIGRlZmF1bHQ6IG1yLCBtdCwgbWwsIG1iKSwgdGhlIG1vdXNlIG1vdmVtZW50IGNhbiBlYXNpbHlcbiAgICAgIC8vIGNyb3NzIG1hbnkgdGltZSB0aGUgb3JpZ2luIHBvaW50IGFuZCBmbGlwIHRoZSBvYmplY3QuIHNvIHdlIG5lZWQgYSB3YXkgdG8gZmlsdGVyIG91dCB0aGUgbm9pc2UuXG4gICAgICAvLyBUaGlzIHRlcm5hcnkgaGVyZSBzaG91bGQgYmUgb2sgdG8gZmlsdGVyIG91dCBYIHNjYWxpbmcgd2hlbiB3ZSB3YW50IFkgb25seSBhbmQgdmljZSB2ZXJzYS5cbiAgICAgIHNpZ25YID0gYnkgIT09ICd5JyA/IHNpZ24obmV3UG9pbnQueCkgOiAxO1xuICAgICAgc2lnblkgPSBieSAhPT0gJ3gnID8gc2lnbihuZXdQb2ludC55KSA6IDE7XG4gICAgICBpZiAoIXRyYW5zZm9ybS5zaWduWCkge1xuICAgICAgICB0cmFuc2Zvcm0uc2lnblggPSBzaWduWDtcbiAgICAgIH1cbiAgICAgIGlmICghdHJhbnNmb3JtLnNpZ25ZKSB7XG4gICAgICAgIHRyYW5zZm9ybS5zaWduWSA9IHNpZ25ZO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0LmxvY2tTY2FsaW5nRmxpcCAmJlxuICAgICAgICAodHJhbnNmb3JtLnNpZ25YICE9PSBzaWduWCB8fCB0cmFuc2Zvcm0uc2lnblkgIT09IHNpZ25ZKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZGltID0gdGFyZ2V0Ll9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKTtcbiAgICAgIC8vIG1pc3NpbmcgZGV0ZWN0aW9uIG9mIGZsaXAgYW5kIGxvZ2ljIHRvIHN3aXRjaCB0aGUgb3JpZ2luXG4gICAgICBpZiAoc2NhbGVQcm9wb3J0aW9uYWxseSAmJiAhYnkpIHtcbiAgICAgICAgLy8gdW5pZm9ybSBzY2FsaW5nXG4gICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKG5ld1BvaW50LngpICsgTWF0aC5hYnMobmV3UG9pbnQueSksXG4gICAgICAgICAgICBvcmlnaW5hbCA9IHRyYW5zZm9ybS5vcmlnaW5hbCxcbiAgICAgICAgICAgIG9yaWdpbmFsRGlzdGFuY2UgPSBNYXRoLmFicyhkaW0ueCAqIG9yaWdpbmFsLnNjYWxlWCAvIHRhcmdldC5zY2FsZVgpICtcbiAgICAgICAgICAgICAgTWF0aC5hYnMoZGltLnkgKiBvcmlnaW5hbC5zY2FsZVkgLyB0YXJnZXQuc2NhbGVZKSxcbiAgICAgICAgICAgIHNjYWxlID0gZGlzdGFuY2UgLyBvcmlnaW5hbERpc3RhbmNlO1xuICAgICAgICBzY2FsZVggPSBvcmlnaW5hbC5zY2FsZVggKiBzY2FsZTtcbiAgICAgICAgc2NhbGVZID0gb3JpZ2luYWwuc2NhbGVZICogc2NhbGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2NhbGVYID0gTWF0aC5hYnMobmV3UG9pbnQueCAqIHRhcmdldC5zY2FsZVggLyBkaW0ueCk7XG4gICAgICAgIHNjYWxlWSA9IE1hdGguYWJzKG5ld1BvaW50LnkgKiB0YXJnZXQuc2NhbGVZIC8gZGltLnkpO1xuICAgICAgfVxuICAgICAgLy8gaWYgd2UgYXJlIHNjYWxpbmcgYnkgY2VudGVyLCB3ZSBuZWVkIHRvIGRvdWJsZSB0aGUgc2NhbGVcbiAgICAgIGlmIChpc1RyYW5zZm9ybUNlbnRlcmVkKHRyYW5zZm9ybSkpIHtcbiAgICAgICAgc2NhbGVYICo9IDI7XG4gICAgICAgIHNjYWxlWSAqPSAyO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zZm9ybS5zaWduWCAhPT0gc2lnblggJiYgYnkgIT09ICd5Jykge1xuICAgICAgICB0cmFuc2Zvcm0ub3JpZ2luWCA9IG9wcG9zaXRlW3RyYW5zZm9ybS5vcmlnaW5YXTtcbiAgICAgICAgc2NhbGVYICo9IC0xO1xuICAgICAgICB0cmFuc2Zvcm0uc2lnblggPSBzaWduWDtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2Zvcm0uc2lnblkgIT09IHNpZ25ZICYmIGJ5ICE9PSAneCcpIHtcbiAgICAgICAgdHJhbnNmb3JtLm9yaWdpblkgPSBvcHBvc2l0ZVt0cmFuc2Zvcm0ub3JpZ2luWV07XG4gICAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgICAgdHJhbnNmb3JtLnNpZ25ZID0gc2lnblk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG1pblNjYWxlIGlzIHRha2VuIGFyZSBpbiB0aGUgc2V0dGVyLlxuICAgIHZhciBvbGRTY2FsZVggPSB0YXJnZXQuc2NhbGVYLCBvbGRTY2FsZVkgPSB0YXJnZXQuc2NhbGVZO1xuICAgIGlmICghYnkpIHtcbiAgICAgICFsb2NrU2NhbGluZ1ggJiYgdGFyZ2V0LnNldCgnc2NhbGVYJywgc2NhbGVYKTtcbiAgICAgICFsb2NrU2NhbGluZ1kgJiYgdGFyZ2V0LnNldCgnc2NhbGVZJywgc2NhbGVZKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBmb3JiaWRkZW4gY2FzZXMgYWxyZWFkeSBoYW5kbGVkIG9uIHRvcCBoZXJlLlxuICAgICAgYnkgPT09ICd4JyAmJiB0YXJnZXQuc2V0KCdzY2FsZVgnLCBzY2FsZVgpO1xuICAgICAgYnkgPT09ICd5JyAmJiB0YXJnZXQuc2V0KCdzY2FsZVknLCBzY2FsZVkpO1xuICAgIH1cbiAgICByZXR1cm4gb2xkU2NhbGVYICE9PSB0YXJnZXQuc2NhbGVYIHx8IG9sZFNjYWxlWSAhPT0gdGFyZ2V0LnNjYWxlWTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmljIHNjYWxpbmcgbG9naWMsIHRvIHNjYWxlIGZyb20gY29ybmVycyBlaXRoZXIgZXF1YWxseSBvciBmcmVlbHkuXG4gICAqIE5lZWRzIHRvIGJlIHdyYXBwZWQgd2l0aCBgd3JhcFdpdGhGaXhlZEFuY2hvcmAgdG8gYmUgZWZmZWN0aXZlXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSBqYXZhc2NyaXB0IGV2ZW50IHRoYXQgaXMgZG9pbmcgdGhlIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtIGphdmFzY3JpcHQgb2JqZWN0IGNvbnRhaW5pbmcgYSBzZXJpZXMgb2YgaW5mb3JtYXRpb24gYXJvdW5kIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge251bWJlcn0geCBjdXJyZW50IG1vdXNlIHggcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGN1cnJlbnQgbW91c2UgeSBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBzb21lIGNoYW5nZSBoYXBwZW5lZFxuICAgKi9cbiAgZnVuY3Rpb24gc2NhbGVPYmplY3RGcm9tQ29ybmVyKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSB7XG4gICAgcmV0dXJuIHNjYWxlT2JqZWN0KGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsaW5nIGxvZ2ljIGZvciB0aGUgWCBheGlzLlxuICAgKiBOZWVkcyB0byBiZSB3cmFwcGVkIHdpdGggYHdyYXBXaXRoRml4ZWRBbmNob3JgIHRvIGJlIGVmZmVjdGl2ZVxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgamF2YXNjcmlwdCBldmVudCB0aGF0IGlzIGRvaW5nIHRoZSB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybSBqYXZhc2NyaXB0IG9iamVjdCBjb250YWluaW5nIGEgc2VyaWVzIG9mIGluZm9ybWF0aW9uIGFyb3VuZCB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggY3VycmVudCBtb3VzZSB4IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcGFyYW0ge251bWJlcn0geSBjdXJyZW50IG1vdXNlIHkgcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgc29tZSBjaGFuZ2UgaGFwcGVuZWRcbiAgICovXG4gIGZ1bmN0aW9uIHNjYWxlT2JqZWN0WChldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSkge1xuICAgIHJldHVybiBzY2FsZU9iamVjdChldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSAsIHsgYnk6ICd4JyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsaW5nIGxvZ2ljIGZvciB0aGUgWSBheGlzLlxuICAgKiBOZWVkcyB0byBiZSB3cmFwcGVkIHdpdGggYHdyYXBXaXRoRml4ZWRBbmNob3JgIHRvIGJlIGVmZmVjdGl2ZVxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgamF2YXNjcmlwdCBldmVudCB0aGF0IGlzIGRvaW5nIHRoZSB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybSBqYXZhc2NyaXB0IG9iamVjdCBjb250YWluaW5nIGEgc2VyaWVzIG9mIGluZm9ybWF0aW9uIGFyb3VuZCB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggY3VycmVudCBtb3VzZSB4IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcGFyYW0ge251bWJlcn0geSBjdXJyZW50IG1vdXNlIHkgcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgc29tZSBjaGFuZ2UgaGFwcGVuZWRcbiAgICovXG4gIGZ1bmN0aW9uIHNjYWxlT2JqZWN0WShldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSkge1xuICAgIHJldHVybiBzY2FsZU9iamVjdChldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSAsIHsgYnk6ICd5JyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wb3NlZCBhY3Rpb24gaGFuZGxlciB0byBlaXRoZXIgc2NhbGUgWSBvciBza2V3IFhcbiAgICogTmVlZHMgdG8gYmUgd3JhcHBlZCB3aXRoIGB3cmFwV2l0aEZpeGVkQW5jaG9yYCB0byBiZSBlZmZlY3RpdmVcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIGphdmFzY3JpcHQgZXZlbnQgdGhhdCBpcyBkb2luZyB0aGUgdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc2Zvcm0gamF2YXNjcmlwdCBvYmplY3QgY29udGFpbmluZyBhIHNlcmllcyBvZiBpbmZvcm1hdGlvbiBhcm91bmQgdGhlIGN1cnJlbnQgdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IGN1cnJlbnQgbW91c2UgeCBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgY3VycmVudCBtb3VzZSB5IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHNvbWUgY2hhbmdlIGhhcHBlbmVkXG4gICAqL1xuICBmdW5jdGlvbiBzY2FsaW5nWU9yU2tld2luZ1goZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpIHtcbiAgICAvLyBvayBzb21lIHNhZmV0eSBuZWVkZWQgaGVyZS5cbiAgICBpZiAoZXZlbnREYXRhW3RyYW5zZm9ybS50YXJnZXQuY2FudmFzLmFsdEFjdGlvbktleV0pIHtcbiAgICAgIHJldHVybiBjb250cm9scy5za2V3SGFuZGxlclgoZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpO1xuICAgIH1cbiAgICByZXR1cm4gY29udHJvbHMuc2NhbGluZ1koZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXBvc2VkIGFjdGlvbiBoYW5kbGVyIHRvIGVpdGhlciBzY2FsZSBYIG9yIHNrZXcgWVxuICAgKiBOZWVkcyB0byBiZSB3cmFwcGVkIHdpdGggYHdyYXBXaXRoRml4ZWRBbmNob3JgIHRvIGJlIGVmZmVjdGl2ZVxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgamF2YXNjcmlwdCBldmVudCB0aGF0IGlzIGRvaW5nIHRoZSB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybSBqYXZhc2NyaXB0IG9iamVjdCBjb250YWluaW5nIGEgc2VyaWVzIG9mIGluZm9ybWF0aW9uIGFyb3VuZCB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggY3VycmVudCBtb3VzZSB4IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcGFyYW0ge251bWJlcn0geSBjdXJyZW50IG1vdXNlIHkgcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgc29tZSBjaGFuZ2UgaGFwcGVuZWRcbiAgICovXG4gIGZ1bmN0aW9uIHNjYWxpbmdYT3JTa2V3aW5nWShldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSkge1xuICAgIC8vIG9rIHNvbWUgc2FmZXR5IG5lZWRlZCBoZXJlLlxuICAgIGlmIChldmVudERhdGFbdHJhbnNmb3JtLnRhcmdldC5jYW52YXMuYWx0QWN0aW9uS2V5XSkge1xuICAgICAgcmV0dXJuIGNvbnRyb2xzLnNrZXdIYW5kbGVyWShldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSk7XG4gICAgfVxuICAgIHJldHVybiBjb250cm9scy5zY2FsaW5nWChldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSk7XG4gIH1cblxuICAvKipcbiAgICogQWN0aW9uIGhhbmRsZXIgdG8gY2hhbmdlIHRleHRib3ggd2lkdGhcbiAgICogTmVlZHMgdG8gYmUgd3JhcHBlZCB3aXRoIGB3cmFwV2l0aEZpeGVkQW5jaG9yYCB0byBiZSBlZmZlY3RpdmVcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIGphdmFzY3JpcHQgZXZlbnQgdGhhdCBpcyBkb2luZyB0aGUgdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc2Zvcm0gamF2YXNjcmlwdCBvYmplY3QgY29udGFpbmluZyBhIHNlcmllcyBvZiBpbmZvcm1hdGlvbiBhcm91bmQgdGhlIGN1cnJlbnQgdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IGN1cnJlbnQgbW91c2UgeCBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgY3VycmVudCBtb3VzZSB5IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHNvbWUgY2hhbmdlIGhhcHBlbmVkXG4gICAqL1xuICBmdW5jdGlvbiBjaGFuZ2VXaWR0aChldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSkge1xuICAgIHZhciB0YXJnZXQgPSB0cmFuc2Zvcm0udGFyZ2V0LCBsb2NhbFBvaW50ID0gZ2V0TG9jYWxQb2ludCh0cmFuc2Zvcm0sIHRyYW5zZm9ybS5vcmlnaW5YLCB0cmFuc2Zvcm0ub3JpZ2luWSwgeCwgeSksXG4gICAgICAgIHN0cm9rZVBhZGRpbmcgPSB0YXJnZXQuc3Ryb2tlV2lkdGggLyAodGFyZ2V0LnN0cm9rZVVuaWZvcm0gPyB0YXJnZXQuc2NhbGVYIDogMSksXG4gICAgICAgIG11bHRpcGxpZXIgPSBpc1RyYW5zZm9ybUNlbnRlcmVkKHRyYW5zZm9ybSkgPyAyIDogMSxcbiAgICAgICAgb2xkV2lkdGggPSB0YXJnZXQud2lkdGgsXG4gICAgICAgIG5ld1dpZHRoID0gTWF0aC5hYnMobG9jYWxQb2ludC54ICogbXVsdGlwbGllciAvIHRhcmdldC5zY2FsZVgpIC0gc3Ryb2tlUGFkZGluZztcbiAgICB0YXJnZXQuc2V0KCd3aWR0aCcsIE1hdGgubWF4KG5ld1dpZHRoLCAwKSk7XG4gICAgcmV0dXJuIG9sZFdpZHRoICE9PSBuZXdXaWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3Rpb24gaGFuZGxlclxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgamF2YXNjcmlwdCBldmVudCB0aGF0IGlzIGRvaW5nIHRoZSB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybSBqYXZhc2NyaXB0IG9iamVjdCBjb250YWluaW5nIGEgc2VyaWVzIG9mIGluZm9ybWF0aW9uIGFyb3VuZCB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggY3VycmVudCBtb3VzZSB4IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcGFyYW0ge251bWJlcn0geSBjdXJyZW50IG1vdXNlIHkgcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhlIHRyYW5zbGF0aW9uIG9jY3VycmVkXG4gICAqL1xuICBmdW5jdGlvbiBkcmFnSGFuZGxlcihldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSkge1xuICAgIHZhciB0YXJnZXQgPSB0cmFuc2Zvcm0udGFyZ2V0LFxuICAgICAgICBuZXdMZWZ0ID0geCAtIHRyYW5zZm9ybS5vZmZzZXRYLFxuICAgICAgICBuZXdUb3AgPSB5IC0gdHJhbnNmb3JtLm9mZnNldFksXG4gICAgICAgIG1vdmVYID0gIXRhcmdldC5nZXQoJ2xvY2tNb3ZlbWVudFgnKSAmJiB0YXJnZXQubGVmdCAhPT0gbmV3TGVmdCxcbiAgICAgICAgbW92ZVkgPSAhdGFyZ2V0LmdldCgnbG9ja01vdmVtZW50WScpICYmIHRhcmdldC50b3AgIT09IG5ld1RvcDtcbiAgICBtb3ZlWCAmJiB0YXJnZXQuc2V0KCdsZWZ0JywgbmV3TGVmdCk7XG4gICAgbW92ZVkgJiYgdGFyZ2V0LnNldCgndG9wJywgbmV3VG9wKTtcbiAgICBpZiAobW92ZVggfHwgbW92ZVkpIHtcbiAgICAgIGZpcmVFdmVudCgnbW92aW5nJywgY29tbW9uRXZlbnRJbmZvKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSk7XG4gICAgfVxuICAgIHJldHVybiBtb3ZlWCB8fCBtb3ZlWTtcbiAgfVxuXG4gIGNvbnRyb2xzLnNjYWxlQ3Vyc29yU3R5bGVIYW5kbGVyID0gc2NhbGVDdXJzb3JTdHlsZUhhbmRsZXI7XG4gIGNvbnRyb2xzLnNrZXdDdXJzb3JTdHlsZUhhbmRsZXIgPSBza2V3Q3Vyc29yU3R5bGVIYW5kbGVyO1xuICBjb250cm9scy5zY2FsZVNrZXdDdXJzb3JTdHlsZUhhbmRsZXIgPSBzY2FsZVNrZXdDdXJzb3JTdHlsZUhhbmRsZXI7XG4gIGNvbnRyb2xzLnJvdGF0aW9uV2l0aFNuYXBwaW5nID0gd3JhcFdpdGhGaXJlRXZlbnQoJ3JvdGF0aW5nJywgd3JhcFdpdGhGaXhlZEFuY2hvcihyb3RhdGlvbldpdGhTbmFwcGluZykpO1xuICBjb250cm9scy5zY2FsaW5nRXF1YWxseSA9IHdyYXBXaXRoRmlyZUV2ZW50KCdzY2FsaW5nJywgd3JhcFdpdGhGaXhlZEFuY2hvciggc2NhbGVPYmplY3RGcm9tQ29ybmVyKSk7XG4gIGNvbnRyb2xzLnNjYWxpbmdYID0gd3JhcFdpdGhGaXJlRXZlbnQoJ3NjYWxpbmcnLCB3cmFwV2l0aEZpeGVkQW5jaG9yKHNjYWxlT2JqZWN0WCkpO1xuICBjb250cm9scy5zY2FsaW5nWSA9IHdyYXBXaXRoRmlyZUV2ZW50KCdzY2FsaW5nJywgd3JhcFdpdGhGaXhlZEFuY2hvcihzY2FsZU9iamVjdFkpKTtcbiAgY29udHJvbHMuc2NhbGluZ1lPclNrZXdpbmdYID0gc2NhbGluZ1lPclNrZXdpbmdYO1xuICBjb250cm9scy5zY2FsaW5nWE9yU2tld2luZ1kgPSBzY2FsaW5nWE9yU2tld2luZ1k7XG4gIGNvbnRyb2xzLmNoYW5nZVdpZHRoID0gd3JhcFdpdGhGaXJlRXZlbnQoJ3Jlc2l6aW5nJywgd3JhcFdpdGhGaXhlZEFuY2hvcihjaGFuZ2VXaWR0aCkpO1xuICBjb250cm9scy5za2V3SGFuZGxlclggPSBza2V3SGFuZGxlclg7XG4gIGNvbnRyb2xzLnNrZXdIYW5kbGVyWSA9IHNrZXdIYW5kbGVyWTtcbiAgY29udHJvbHMuZHJhZ0hhbmRsZXIgPSBkcmFnSGFuZGxlcjtcbiAgY29udHJvbHMuc2NhbGVPclNrZXdBY3Rpb25OYW1lID0gc2NhbGVPclNrZXdBY3Rpb25OYW1lO1xuICBjb250cm9scy5yb3RhdGlvblN0eWxlSGFuZGxlciA9IHJvdGF0aW9uU3R5bGVIYW5kbGVyO1xuICBjb250cm9scy5maXJlRXZlbnQgPSBmaXJlRXZlbnQ7XG4gIGNvbnRyb2xzLndyYXBXaXRoRml4ZWRBbmNob3IgPSB3cmFwV2l0aEZpeGVkQW5jaG9yO1xuICBjb250cm9scy53cmFwV2l0aEZpcmVFdmVudCA9IHdyYXBXaXRoRmlyZUV2ZW50O1xuICBjb250cm9scy5nZXRMb2NhbFBvaW50ID0gZ2V0TG9jYWxQb2ludDtcbiAgZmFicmljLmNvbnRyb2xzVXRpbHMgPSBjb250cm9scztcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZGVncmVlc1RvUmFkaWFucyA9IGZhYnJpYy51dGlsLmRlZ3JlZXNUb1JhZGlhbnMsXG4gICAgICBjb250cm9scyA9IGZhYnJpYy5jb250cm9sc1V0aWxzO1xuXG4gIC8qKlxuICAgKiBSZW5kZXIgYSByb3VuZCBjb250cm9sLCBhcyBwZXIgZmFicmljIGZlYXR1cmVzLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHdyaXR0ZW4gdG8gcmVzcGVjdCBvYmplY3QgcHJvcGVydGllcyBsaWtlIHRyYW5zcGFyZW50Q29ybmVycywgY29ybmVyU2l6ZVxuICAgKiBjb3JuZXJDb2xvciwgY29ybmVyU3Ryb2tlQ29sb3JcbiAgICogcGx1cyB0aGUgYWRkaXRpb24gb2Ygb2Zmc2V0WSBhbmQgb2Zmc2V0WC5cbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBjb250ZXh0IHRvIHJlbmRlciBvblxuICAgKiBAcGFyYW0ge051bWJlcn0gbGVmdCB4IGNvb3JkaW5hdGUgd2hlcmUgdGhlIGNvbnRyb2wgY2VudGVyIHNob3VsZCBiZVxuICAgKiBAcGFyYW0ge051bWJlcn0gdG9wIHkgY29vcmRpbmF0ZSB3aGVyZSB0aGUgY29udHJvbCBjZW50ZXIgc2hvdWxkIGJlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZU92ZXJyaWRlIG92ZXJyaWRlIGZvciBmYWJyaWMuT2JqZWN0IGNvbnRyb2xzIHN0eWxlXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gZmFicmljT2JqZWN0IHRoZSBmYWJyaWMgb2JqZWN0IGZvciB3aGljaCB3ZSBhcmUgcmVuZGVyaW5nIGNvbnRyb2xzXG4gICAqL1xuICBmdW5jdGlvbiByZW5kZXJDaXJjbGVDb250cm9sIChjdHgsIGxlZnQsIHRvcCwgc3R5bGVPdmVycmlkZSwgZmFicmljT2JqZWN0KSB7XG4gICAgc3R5bGVPdmVycmlkZSA9IHN0eWxlT3ZlcnJpZGUgfHwge307XG4gICAgdmFyIHhTaXplID0gdGhpcy5zaXplWCB8fCBzdHlsZU92ZXJyaWRlLmNvcm5lclNpemUgfHwgZmFicmljT2JqZWN0LmNvcm5lclNpemUsXG4gICAgICAgIHlTaXplID0gdGhpcy5zaXplWSB8fCBzdHlsZU92ZXJyaWRlLmNvcm5lclNpemUgfHwgZmFicmljT2JqZWN0LmNvcm5lclNpemUsXG4gICAgICAgIHRyYW5zcGFyZW50Q29ybmVycyA9IHR5cGVvZiBzdHlsZU92ZXJyaWRlLnRyYW5zcGFyZW50Q29ybmVycyAhPT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgICAgIHN0eWxlT3ZlcnJpZGUudHJhbnNwYXJlbnRDb3JuZXJzIDogZmFicmljT2JqZWN0LnRyYW5zcGFyZW50Q29ybmVycyxcbiAgICAgICAgbWV0aG9kTmFtZSA9IHRyYW5zcGFyZW50Q29ybmVycyA/ICdzdHJva2UnIDogJ2ZpbGwnLFxuICAgICAgICBzdHJva2UgPSAhdHJhbnNwYXJlbnRDb3JuZXJzICYmIChzdHlsZU92ZXJyaWRlLmNvcm5lclN0cm9rZUNvbG9yIHx8IGZhYnJpY09iamVjdC5jb3JuZXJTdHJva2VDb2xvciksXG4gICAgICAgIG15TGVmdCA9IGxlZnQsXG4gICAgICAgIG15VG9wID0gdG9wLCBzaXplO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHN0eWxlT3ZlcnJpZGUuY29ybmVyQ29sb3IgfHwgZmFicmljT2JqZWN0LmNvcm5lckNvbG9yO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0eWxlT3ZlcnJpZGUuY29ybmVyU3Ryb2tlQ29sb3IgfHwgZmFicmljT2JqZWN0LmNvcm5lclN0cm9rZUNvbG9yO1xuICAgIC8vIGFzIHNvb24gYXMgZmFicmljIHJlYWN0IHY1LCByZW1vdmUgaWUxMSwgdXNlIHByb3BlciBlbGxpcHNlIGNvZGUuXG4gICAgaWYgKHhTaXplID4geVNpemUpIHtcbiAgICAgIHNpemUgPSB4U2l6ZTtcbiAgICAgIGN0eC5zY2FsZSgxLjAsIHlTaXplIC8geFNpemUpO1xuICAgICAgbXlUb3AgPSB0b3AgKiB4U2l6ZSAvIHlTaXplO1xuICAgIH1cbiAgICBlbHNlIGlmICh5U2l6ZSA+IHhTaXplKSB7XG4gICAgICBzaXplID0geVNpemU7XG4gICAgICBjdHguc2NhbGUoeFNpemUgLyB5U2l6ZSwgMS4wKTtcbiAgICAgIG15TGVmdCA9IGxlZnQgKiB5U2l6ZSAvIHhTaXplO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHNpemUgPSB4U2l6ZTtcbiAgICB9XG4gICAgLy8gdGhpcyBpcyBzdGlsbCB3cm9uZ1xuICAgIGN0eC5saW5lV2lkdGggPSAxO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKG15TGVmdCwgbXlUb3AsIHNpemUgLyAyLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgIGN0eFttZXRob2ROYW1lXSgpO1xuICAgIGlmIChzdHJva2UpIHtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYSBzcXVhcmUgY29udHJvbCwgYXMgcGVyIGZhYnJpYyBmZWF0dXJlcy5cbiAgICogVGhpcyBmdW5jdGlvbiBpcyB3cml0dGVuIHRvIHJlc3BlY3Qgb2JqZWN0IHByb3BlcnRpZXMgbGlrZSB0cmFuc3BhcmVudENvcm5lcnMsIGNvcm5lclNpemVcbiAgICogY29ybmVyQ29sb3IsIGNvcm5lclN0cm9rZUNvbG9yXG4gICAqIHBsdXMgdGhlIGFkZGl0aW9uIG9mIG9mZnNldFkgYW5kIG9mZnNldFguXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggY29udGV4dCB0byByZW5kZXIgb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlZnQgeCBjb29yZGluYXRlIHdoZXJlIHRoZSBjb250cm9sIGNlbnRlciBzaG91bGQgYmVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHRvcCB5IGNvb3JkaW5hdGUgd2hlcmUgdGhlIGNvbnRyb2wgY2VudGVyIHNob3VsZCBiZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVPdmVycmlkZSBvdmVycmlkZSBmb3IgZmFicmljLk9iamVjdCBjb250cm9scyBzdHlsZVxuICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IGZhYnJpY09iamVjdCB0aGUgZmFicmljIG9iamVjdCBmb3Igd2hpY2ggd2UgYXJlIHJlbmRlcmluZyBjb250cm9sc1xuICAgKi9cbiAgZnVuY3Rpb24gcmVuZGVyU3F1YXJlQ29udHJvbChjdHgsIGxlZnQsIHRvcCwgc3R5bGVPdmVycmlkZSwgZmFicmljT2JqZWN0KSB7XG4gICAgc3R5bGVPdmVycmlkZSA9IHN0eWxlT3ZlcnJpZGUgfHwge307XG4gICAgdmFyIHhTaXplID0gdGhpcy5zaXplWCB8fCBzdHlsZU92ZXJyaWRlLmNvcm5lclNpemUgfHwgZmFicmljT2JqZWN0LmNvcm5lclNpemUsXG4gICAgICAgIHlTaXplID0gdGhpcy5zaXplWSB8fCBzdHlsZU92ZXJyaWRlLmNvcm5lclNpemUgfHwgZmFicmljT2JqZWN0LmNvcm5lclNpemUsXG4gICAgICAgIHRyYW5zcGFyZW50Q29ybmVycyA9IHR5cGVvZiBzdHlsZU92ZXJyaWRlLnRyYW5zcGFyZW50Q29ybmVycyAhPT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgICAgIHN0eWxlT3ZlcnJpZGUudHJhbnNwYXJlbnRDb3JuZXJzIDogZmFicmljT2JqZWN0LnRyYW5zcGFyZW50Q29ybmVycyxcbiAgICAgICAgbWV0aG9kTmFtZSA9IHRyYW5zcGFyZW50Q29ybmVycyA/ICdzdHJva2UnIDogJ2ZpbGwnLFxuICAgICAgICBzdHJva2UgPSAhdHJhbnNwYXJlbnRDb3JuZXJzICYmIChcbiAgICAgICAgICBzdHlsZU92ZXJyaWRlLmNvcm5lclN0cm9rZUNvbG9yIHx8IGZhYnJpY09iamVjdC5jb3JuZXJTdHJva2VDb2xvclxuICAgICAgICApLCB4U2l6ZUJ5MiA9IHhTaXplIC8gMiwgeVNpemVCeTIgPSB5U2l6ZSAvIDI7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZmlsbFN0eWxlID0gc3R5bGVPdmVycmlkZS5jb3JuZXJDb2xvciB8fCBmYWJyaWNPYmplY3QuY29ybmVyQ29sb3I7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gc3R5bGVPdmVycmlkZS5jb3JuZXJTdHJva2VDb2xvciB8fCBmYWJyaWNPYmplY3QuY29ybmVyU3Ryb2tlQ29sb3I7XG4gICAgLy8gdGhpcyBpcyBzdGlsbCB3cm9uZ1xuICAgIGN0eC5saW5lV2lkdGggPSAxO1xuICAgIGN0eC50cmFuc2xhdGUobGVmdCwgdG9wKTtcbiAgICBjdHgucm90YXRlKGRlZ3JlZXNUb1JhZGlhbnMoZmFicmljT2JqZWN0LmFuZ2xlKSk7XG4gICAgLy8gdGhpcyBkb2VzIG5vdCB3b3JrLCBhbmQgZml4ZWQgd2l0aCAoICYmICkgZG9lcyBub3QgbWFrZSBzZW5zZS5cbiAgICAvLyB0byBoYXZlIHJlYWwgdHJhbnNwYXJlbnQgY29ybmVycyB3ZSBuZWVkIHRoZSBjb250cm9scyBvbiB1cHBlckNhbnZhc1xuICAgIC8vIHRyYW5zcGFyZW50Q29ybmVycyB8fCBjdHguY2xlYXJSZWN0KC14U2l6ZUJ5MiwgLXlTaXplQnkyLCB4U2l6ZSwgeVNpemUpO1xuICAgIGN0eFttZXRob2ROYW1lICsgJ1JlY3QnXSgteFNpemVCeTIsIC15U2l6ZUJ5MiwgeFNpemUsIHlTaXplKTtcbiAgICBpZiAoc3Ryb2tlKSB7XG4gICAgICBjdHguc3Ryb2tlUmVjdCgteFNpemVCeTIsIC15U2l6ZUJ5MiwgeFNpemUsIHlTaXplKTtcbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuXG4gIGNvbnRyb2xzLnJlbmRlckNpcmNsZUNvbnRyb2wgPSByZW5kZXJDaXJjbGVDb250cm9sO1xuICBjb250cm9scy5yZW5kZXJTcXVhcmVDb250cm9sID0gcmVuZGVyU3F1YXJlQ29udHJvbDtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pO1xuXG4gIGZ1bmN0aW9uIENvbnRyb2wob3B0aW9ucykge1xuICAgIGZvciAodmFyIGkgaW4gb3B0aW9ucykge1xuICAgICAgdGhpc1tpXSA9IG9wdGlvbnNbaV07XG4gICAgfVxuICB9XG5cbiAgZmFicmljLkNvbnRyb2wgPSBDb250cm9sO1xuXG4gIGZhYnJpYy5Db250cm9sLnByb3RvdHlwZSA9IC8qKiBAbGVuZHMgZmFicmljLkNvbnRyb2wucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIGtlZXAgdHJhY2sgb2YgY29udHJvbCB2aXNpYmlsaXR5LlxuICAgICAqIG1haW5seSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICAgKiBpZiB5b3UgZG8gbm90IHdhbnQgdG8gc2VlIGEgY29udHJvbCwgeW91IGNhbiByZW1vdmUgaXRcbiAgICAgKiBmcm9tIHRoZSBjb250cm9sc2V0LlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICB2aXNpYmxlOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogTmFtZSBvZiB0aGUgYWN0aW9uIHRoYXQgdGhlIGNvbnRyb2wgd2lsbCBsaWtlbHkgZXhlY3V0ZS5cbiAgICAgKiBUaGlzIGlzIG9wdGlvbmFsLiBGYWJyaWNKUyB1c2VzIHRvIGlkZW50aWZ5IHdoYXQgdGhlIHVzZXIgaXMgZG9pbmcgZm9yIHNvbWVcbiAgICAgKiBleHRyYSBvcHRpbWl6YXRpb25zLiBJZiB5b3UgYXJlIHdyaXRpbmcgYSBjdXN0b20gY29udHJvbCBhbmQgeW91IHdhbnQgdG8ga25vd1xuICAgICAqIHNvbWV3aGVyZSBlbHNlIGluIHRoZSBjb2RlIHdoYXQgaXMgZ29pbmcgb24sIHlvdSBjYW4gdXNlIHRoaXMgc3RyaW5nIGhlcmUuXG4gICAgICogeW91IGNhbiBhbHNvIHByb3ZpZGUgYSBjdXN0b20gZ2V0QWN0aW9uTmFtZSBpZiB5b3VyIGNvbnRyb2wgcnVuIG11bHRpcGxlIGFjdGlvbnNcbiAgICAgKiBkZXBlbmRpbmcgb24gc29tZSBleHRlcm5hbCBzdGF0ZS5cbiAgICAgKiBkZWZhdWx0IHRvIHNjYWxlIHNpbmNlIGlzIHRoZSBtb3N0IGNvbW1vbiwgdXNlZCBvbiA0IGNvcm5lcnMgYnkgZGVmYXVsdFxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQGRlZmF1bHQgJ3NjYWxlJ1xuICAgICAqL1xuICAgIGFjdGlvbk5hbWU6ICdzY2FsZScsXG5cbiAgICAvKipcbiAgICAgKiBEcmF3aW5nIGFuZ2xlIG9mIHRoZSBjb250cm9sLlxuICAgICAqIE5PVCB1c2VkIGZvciBub3csIGJ1dCBuYW1lIG1hcmtlZCBhcyBuZWVkZWQgZm9yIGludGVybmFsIGxvZ2ljXG4gICAgICogZXhhbXBsZTogdG8gcmV1c2UgdGhlIHNhbWUgZHJhd2luZyBmdW5jdGlvbiBmb3IgZGlmZmVyZW50IHJvdGF0ZWQgY29udHJvbHNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBhbmdsZTogMCxcblxuICAgIC8qKlxuICAgICAqIFJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBjb250cm9sLiBYXG4gICAgICogMCwwIGlzIHRoZSBjZW50ZXIgb2YgdGhlIE9iamVjdCwgd2hpbGUgLTAuNSAobGVmdCkgb3IgMC41IChyaWdodCkgYXJlIHRoZSBleHRyZW1pdGllc1xuICAgICAqIG9mIHRoZSBib3VuZGluZyBib3guXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgeDogMCxcblxuICAgIC8qKlxuICAgICAqIFJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBjb250cm9sLiBZXG4gICAgICogMCwwIGlzIHRoZSBjZW50ZXIgb2YgdGhlIE9iamVjdCwgd2hpbGUgLTAuNSAodG9wKSBvciAwLjUgKGJvdHRvbSkgYXJlIHRoZSBleHRyZW1pdGllc1xuICAgICAqIG9mIHRoZSBib3VuZGluZyBib3guXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgeTogMCxcblxuICAgIC8qKlxuICAgICAqIEhvcml6b250YWwgb2Zmc2V0IG9mIHRoZSBjb250cm9sIGZyb20gdGhlIGRlZmluZWQgcG9zaXRpb24uIEluIHBpeGVsc1xuICAgICAqIFBvc2l0aXZlIG9mZnNldCBtb3ZlcyB0aGUgY29udHJvbCB0byB0aGUgcmlnaHQsIG5lZ2F0aXZlIHRvIHRoZSBsZWZ0LlxuICAgICAqIEl0IHVzZWQgd2hlbiB5b3Ugd2FudCB0byBoYXZlIHBvc2l0aW9uIG9mIGNvbnRyb2wgdGhhdCBkb2VzIG5vdCBzY2FsZSB3aXRoXG4gICAgICogdGhlIGJvdW5kaW5nIGJveC4gRXhhbXBsZTogcm90YXRpb24gY29udHJvbCBpcyBwbGFjZWQgYXQgeDowLCB5OiAwLjUgb25cbiAgICAgKiB0aGUgYm91bmRpbmRib3gsIHdpdGggYW4gb2Zmc2V0IG9mIDMwIHBpeGVscyB2ZXJ0aWNhbGx5LiBUaG9zZSAzMCBwaXhlbHMgd2lsbFxuICAgICAqIHN0YXkgMzAgcGl4ZWxzIG5vIG1hdHRlciBob3cgdGhlIG9iamVjdCBpcyBiaWcuIEFub3RoZXIgZXhhbXBsZSBpcyBoYXZpbmcgMlxuICAgICAqIGNvbnRyb2xzIGluIHRoZSBjb3JuZXIsIHRoYXQgc3RheSBpbiB0aGUgc2FtZSBwb3NpdGlvbiB3aGVuIHRoZSBvYmplY3Qgc2NhbGUuXG4gICAgICogb2YgdGhlIGJvdW5kaW5nIGJveC5cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBvZmZzZXRYOiAwLFxuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwgb2Zmc2V0IG9mIHRoZSBjb250cm9sIGZyb20gdGhlIGRlZmluZWQgcG9zaXRpb24uIEluIHBpeGVsc1xuICAgICAqIFBvc2l0aXZlIG9mZnNldCBtb3ZlcyB0aGUgY29udHJvbCB0byB0aGUgYm90dG9tLCBuZWdhdGl2ZSB0byB0aGUgdG9wLlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIG9mZnNldFk6IDAsXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsZW5ndGggb2YgdGhlIGNvbnRyb2wuIElmIG51bGwsIGRlZmF1bHRzIHRvIG9iamVjdCdzIGNvcm5lclNpemUuXG4gICAgICogRXhwZWN0cyBib3RoIHNpemVYIGFuZCBzaXplWSB0byBiZSBzZXQgd2hlbiBzZXQuXG4gICAgICogQHR5cGUgez9OdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHNpemVYOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBjb250cm9sLiBJZiBudWxsLCBkZWZhdWx0cyB0byBvYmplY3QncyBjb3JuZXJTaXplLlxuICAgICAqIEV4cGVjdHMgYm90aCBzaXplWCBhbmQgc2l6ZVkgdG8gYmUgc2V0IHdoZW4gc2V0LlxuICAgICAqIEB0eXBlIHs/TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBzaXplWTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxlbmd0aCBvZiB0aGUgdG91Y2ggYXJlYSBvZiB0aGUgY29udHJvbC4gSWYgbnVsbCwgZGVmYXVsdHMgdG8gb2JqZWN0J3MgdG91Y2hDb3JuZXJTaXplLlxuICAgICAqIEV4cGVjdHMgYm90aCB0b3VjaFNpemVYIGFuZCB0b3VjaFNpemVZIHRvIGJlIHNldCB3aGVuIHNldC5cbiAgICAgKiBAdHlwZSB7P051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgdG91Y2hTaXplWDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhlaWdodCBvZiB0aGUgdG91Y2ggYXJlYSBvZiB0aGUgY29udHJvbC4gSWYgbnVsbCwgZGVmYXVsdHMgdG8gb2JqZWN0J3MgdG91Y2hDb3JuZXJTaXplLlxuICAgICAqIEV4cGVjdHMgYm90aCB0b3VjaFNpemVYIGFuZCB0b3VjaFNpemVZIHRvIGJlIHNldCB3aGVuIHNldC5cbiAgICAgKiBAdHlwZSB7P051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgdG91Y2hTaXplWTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIENzcyBjdXJzb3Igc3R5bGUgdG8gZGlzcGxheSB3aGVuIHRoZSBjb250cm9sIGlzIGhvdmVyZWQuXG4gICAgICogaWYgdGhlIG1ldGhvZCBgY3Vyc29yU3R5bGVIYW5kbGVyYCBpcyBwcm92aWRlZCwgdGhpcyBwcm9wZXJ0eSBpcyBpZ25vcmVkLlxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQGRlZmF1bHQgJ2Nyb3NzaGFpcidcbiAgICAgKi9cbiAgICBjdXJzb3JTdHlsZTogJ2Nyb3NzaGFpcicsXG5cbiAgICAvKipcbiAgICAgKiBJZiBjb250cm9scyBoYXMgYW4gb2Zmc2V0WSBvciBvZmZzZXRYLCBkcmF3IGEgbGluZSB0aGF0IGNvbm5lY3RzXG4gICAgICogdGhlIGNvbnRyb2wgdG8gdGhlIGJvdW5kaW5nIGJveFxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgd2l0aENvbm5lY3Rpb246IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRyb2wgYWN0aW9uSGFuZGxlciwgcHJvdmlkZSBvbmUgdG8gaGFuZGxlIGFjdGlvbiAoIGNvbnRyb2wgYmVpbmcgbW92ZWQgKVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSB0aGUgbmF0aXZlIG1vdXNlIGV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybURhdGEgcHJvcGVydGllcyBvZiB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge051bWJlcn0geCB4IHBvc2l0aW9uIG9mIHRoZSBjdXJzb3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geSB5IHBvc2l0aW9uIG9mIHRoZSBjdXJzb3JcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoZSBhY3Rpb24vZXZlbnQgbW9kaWZpZWQgdGhlIG9iamVjdFxuICAgICAqL1xuICAgIGFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uKC8qIGV2ZW50RGF0YSwgdHJhbnNmb3JtRGF0YSwgeCwgeSAqLykgeyB9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRyb2wgaGFuZGxlciBmb3IgbW91c2UgZG93biwgcHJvdmlkZSBvbmUgdG8gaGFuZGxlIG1vdXNlIGRvd24gb24gY29udHJvbFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSB0aGUgbmF0aXZlIG1vdXNlIGV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybURhdGEgcHJvcGVydGllcyBvZiB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge051bWJlcn0geCB4IHBvc2l0aW9uIG9mIHRoZSBjdXJzb3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geSB5IHBvc2l0aW9uIG9mIHRoZSBjdXJzb3JcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoZSBhY3Rpb24vZXZlbnQgbW9kaWZpZWQgdGhlIG9iamVjdFxuICAgICAqL1xuICAgIG1vdXNlRG93bkhhbmRsZXI6IGZ1bmN0aW9uKC8qIGV2ZW50RGF0YSwgdHJhbnNmb3JtRGF0YSwgeCwgeSAqLykgeyB9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRyb2wgbW91c2VVcEhhbmRsZXIsIHByb3ZpZGUgb25lIHRvIGhhbmRsZSBhbiBlZmZlY3Qgb24gbW91c2UgdXAuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIHRoZSBuYXRpdmUgbW91c2UgZXZlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtRGF0YSBwcm9wZXJ0aWVzIG9mIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IHggcG9zaXRpb24gb2YgdGhlIGN1cnNvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5IHkgcG9zaXRpb24gb2YgdGhlIGN1cnNvclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhlIGFjdGlvbi9ldmVudCBtb2RpZmllZCB0aGUgb2JqZWN0XG4gICAgICovXG4gICAgbW91c2VVcEhhbmRsZXI6IGZ1bmN0aW9uKC8qIGV2ZW50RGF0YSwgdHJhbnNmb3JtRGF0YSwgeCwgeSAqLykgeyB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb250cm9sIGFjdGlvbkhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgdGhlIG5hdGl2ZSBtb3VzZSBldmVudFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gZmFicmljT2JqZWN0IG9uIHdoaWNoIHRoZSBjb250cm9sIGlzIGRpc3BsYXllZFxuICAgICAqIEBwYXJhbSB7ZmFicmljLkNvbnRyb2x9IGNvbnRyb2wgY29udHJvbCBmb3Igd2hpY2ggdGhlIGFjdGlvbiBoYW5kbGVyIGlzIGJlaW5nIGFza2VkXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBhY3Rpb24gaGFuZGxlclxuICAgICAqL1xuICAgIGdldEFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uKC8qIGV2ZW50RGF0YSwgZmFicmljT2JqZWN0LCBjb250cm9sICovKSB7XG4gICAgICByZXR1cm4gdGhpcy5hY3Rpb25IYW5kbGVyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvbnRyb2wgbW91c2VEb3duIGhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgdGhlIG5hdGl2ZSBtb3VzZSBldmVudFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gZmFicmljT2JqZWN0IG9uIHdoaWNoIHRoZSBjb250cm9sIGlzIGRpc3BsYXllZFxuICAgICAqIEBwYXJhbSB7ZmFicmljLkNvbnRyb2x9IGNvbnRyb2wgY29udHJvbCBmb3Igd2hpY2ggdGhlIGFjdGlvbiBoYW5kbGVyIGlzIGJlaW5nIGFza2VkXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBhY3Rpb24gaGFuZGxlclxuICAgICAqL1xuICAgIGdldE1vdXNlRG93bkhhbmRsZXI6IGZ1bmN0aW9uKC8qIGV2ZW50RGF0YSwgZmFicmljT2JqZWN0LCBjb250cm9sICovKSB7XG4gICAgICByZXR1cm4gdGhpcy5tb3VzZURvd25IYW5kbGVyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvbnRyb2wgbW91c2VVcCBoYW5kbGVyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIHRoZSBuYXRpdmUgbW91c2UgZXZlbnRcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IGZhYnJpY09iamVjdCBvbiB3aGljaCB0aGUgY29udHJvbCBpcyBkaXNwbGF5ZWRcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Db250cm9sfSBjb250cm9sIGNvbnRyb2wgZm9yIHdoaWNoIHRoZSBhY3Rpb24gaGFuZGxlciBpcyBiZWluZyBhc2tlZFxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgYWN0aW9uIGhhbmRsZXJcbiAgICAgKi9cbiAgICBnZXRNb3VzZVVwSGFuZGxlcjogZnVuY3Rpb24oLyogZXZlbnREYXRhLCBmYWJyaWNPYmplY3QsIGNvbnRyb2wgKi8pIHtcbiAgICAgIHJldHVybiB0aGlzLm1vdXNlVXBIYW5kbGVyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvbnRyb2wgY3Vyc29yU3R5bGUgZm9yIGNzcyB1c2luZyBjdXJzb3JTdHlsZS4gSWYgeW91IG5lZWQgYSBtb3JlIGVsYWJvcmF0ZVxuICAgICAqIGZ1bmN0aW9uIHlvdSBjYW4gcGFzcyBvbmUgaW4gdGhlIGNvbnN0cnVjdG9yXG4gICAgICogdGhlIGN1cnNvclN0eWxlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIHRoZSBuYXRpdmUgbW91c2UgZXZlbnRcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Db250cm9sfSBjb250cm9sIHRoZSBjdXJyZW50IGNvbnRyb2wgKCBsaWtlbHkgdGhpcylcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBvbiB3aGljaCB0aGUgY29udHJvbCBpcyBkaXNwbGF5ZWRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgY3Vyc29yU3R5bGVIYW5kbGVyOiBmdW5jdGlvbihldmVudERhdGEsIGNvbnRyb2wgLyogZmFicmljT2JqZWN0ICovKSB7XG4gICAgICByZXR1cm4gY29udHJvbC5jdXJzb3JTdHlsZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWN0aW9uIG5hbWUuIFRoZSBiYXNpYyBpbXBsZW1lbnRhdGlvbiBqdXN0IHJldHVybiB0aGUgYWN0aW9uTmFtZSBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgdGhlIG5hdGl2ZSBtb3VzZSBldmVudFxuICAgICAqIEBwYXJhbSB7ZmFicmljLkNvbnRyb2x9IGNvbnRyb2wgdGhlIGN1cnJlbnQgY29udHJvbCAoIGxpa2VseSB0aGlzKVxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IG9uIHdoaWNoIHRoZSBjb250cm9sIGlzIGRpc3BsYXllZFxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRBY3Rpb25OYW1lOiBmdW5jdGlvbihldmVudERhdGEsIGNvbnRyb2wgLyogZmFicmljT2JqZWN0ICovKSB7XG4gICAgICByZXR1cm4gY29udHJvbC5hY3Rpb25OYW1lO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvbnRyb2xzIHZpc2liaWxpdHlcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBvbiB3aGljaCB0aGUgY29udHJvbCBpcyBkaXNwbGF5ZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29udHJvbEtleSBrZXkgd2hlcmUgdGhlIGNvbnRyb2wgaXMgbWVtb3JpemVkIG9uIHRoZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0VmlzaWJpbGl0eTogZnVuY3Rpb24oZmFicmljT2JqZWN0LCBjb250cm9sS2V5KSB7XG4gICAgICB2YXIgb2JqZWN0VmlzaWJpbGl0eSA9IGZhYnJpY09iamVjdC5fY29udHJvbHNWaXNpYmlsaXR5O1xuICAgICAgaWYgKG9iamVjdFZpc2liaWxpdHkgJiYgdHlwZW9mIG9iamVjdFZpc2liaWxpdHlbY29udHJvbEtleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBvYmplY3RWaXNpYmlsaXR5W2NvbnRyb2xLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudmlzaWJsZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBjb250cm9scyB2aXNpYmlsaXR5XG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2aXNpYmlsaXR5IGZvciB0aGUgb2JqZWN0XG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBzZXRWaXNpYmlsaXR5OiBmdW5jdGlvbih2aXNpYmlsaXR5IC8qIG5hbWUsIGZhYnJpY09iamVjdCAqLykge1xuICAgICAgdGhpcy52aXNpYmxlID0gdmlzaWJpbGl0eTtcbiAgICB9LFxuXG5cbiAgICBwb3NpdGlvbkhhbmRsZXI6IGZ1bmN0aW9uKGRpbSwgZmluYWxNYXRyaXggLyosIGZhYnJpY09iamVjdCwgY3VycmVudENvbnRyb2wgKi8pIHtcbiAgICAgIHZhciBwb2ludCA9IGZhYnJpYy51dGlsLnRyYW5zZm9ybVBvaW50KHtcbiAgICAgICAgeDogdGhpcy54ICogZGltLnggKyB0aGlzLm9mZnNldFgsXG4gICAgICAgIHk6IHRoaXMueSAqIGRpbS55ICsgdGhpcy5vZmZzZXRZIH0sIGZpbmFsTWF0cml4KTtcbiAgICAgIHJldHVybiBwb2ludDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29vcmRzIGZvciB0aGlzIGNvbnRyb2wgYmFzZWQgb24gb2JqZWN0IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2JqZWN0QW5nbGUgYW5nbGUgZnJvbSB0aGUgZmFicmljIG9iamVjdCBob2xkaW5nIHRoZSBjb250cm9sXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9iamVjdENvcm5lclNpemUgY29ybmVyU2l6ZSBmcm9tIHRoZSBmYWJyaWMgb2JqZWN0IGhvbGRpbmcgdGhlIGNvbnRyb2wgKG9yIHRvdWNoQ29ybmVyU2l6ZSBpZlxuICAgICAqICAgaXNUb3VjaCBpcyB0cnVlKVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjZW50ZXJYIHggY29vcmRpbmF0ZSB3aGVyZSB0aGUgY29udHJvbCBjZW50ZXIgc2hvdWxkIGJlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNlbnRlclkgeSBjb29yZGluYXRlIHdoZXJlIHRoZSBjb250cm9sIGNlbnRlciBzaG91bGQgYmVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzVG91Y2ggdHJ1ZSBpZiB0b3VjaCBjb3JuZXIsIGZhbHNlIGlmIG5vcm1hbCBjb3JuZXJcbiAgICAgKi9cbiAgICBjYWxjQ29ybmVyQ29vcmRzOiBmdW5jdGlvbihvYmplY3RBbmdsZSwgb2JqZWN0Q29ybmVyU2l6ZSwgY2VudGVyWCwgY2VudGVyWSwgaXNUb3VjaCkge1xuICAgICAgdmFyIGNvc0hhbGZPZmZzZXQsXG4gICAgICAgICAgc2luSGFsZk9mZnNldCxcbiAgICAgICAgICBjb3NIYWxmT2Zmc2V0Q29tcCxcbiAgICAgICAgICBzaW5IYWxmT2Zmc2V0Q29tcCxcbiAgICAgICAgICB4U2l6ZSA9IChpc1RvdWNoKSA/IHRoaXMudG91Y2hTaXplWCA6IHRoaXMuc2l6ZVgsXG4gICAgICAgICAgeVNpemUgPSAoaXNUb3VjaCkgPyB0aGlzLnRvdWNoU2l6ZVkgOiB0aGlzLnNpemVZO1xuICAgICAgaWYgKHhTaXplICYmIHlTaXplICYmIHhTaXplICE9PSB5U2l6ZSkge1xuICAgICAgICAvLyBoYW5kbGUgcmVjdGFuZ3VsYXIgY29ybmVyc1xuICAgICAgICB2YXIgY29udHJvbFRyaWFuZ2xlQW5nbGUgPSBNYXRoLmF0YW4yKHlTaXplLCB4U2l6ZSk7XG4gICAgICAgIHZhciBjb3JuZXJIeXBvdGVudXNlID0gTWF0aC5zcXJ0KHhTaXplICogeFNpemUgKyB5U2l6ZSAqIHlTaXplKSAvIDI7XG4gICAgICAgIHZhciBuZXdUaGV0YSA9IGNvbnRyb2xUcmlhbmdsZUFuZ2xlIC0gZmFicmljLnV0aWwuZGVncmVlc1RvUmFkaWFucyhvYmplY3RBbmdsZSk7XG4gICAgICAgIHZhciBuZXdUaGV0YUNvbXAgPSBNYXRoLlBJIC8gMiAtIGNvbnRyb2xUcmlhbmdsZUFuZ2xlIC0gZmFicmljLnV0aWwuZGVncmVlc1RvUmFkaWFucyhvYmplY3RBbmdsZSk7XG4gICAgICAgIGNvc0hhbGZPZmZzZXQgPSBjb3JuZXJIeXBvdGVudXNlICogZmFicmljLnV0aWwuY29zKG5ld1RoZXRhKTtcbiAgICAgICAgc2luSGFsZk9mZnNldCA9IGNvcm5lckh5cG90ZW51c2UgKiBmYWJyaWMudXRpbC5zaW4obmV3VGhldGEpO1xuICAgICAgICAvLyB1c2UgY29tcGxlbWVudGFyeSBhbmdsZSBmb3IgdHdvIGNvcm5lcnNcbiAgICAgICAgY29zSGFsZk9mZnNldENvbXAgPSBjb3JuZXJIeXBvdGVudXNlICogZmFicmljLnV0aWwuY29zKG5ld1RoZXRhQ29tcCk7XG4gICAgICAgIHNpbkhhbGZPZmZzZXRDb21wID0gY29ybmVySHlwb3RlbnVzZSAqIGZhYnJpYy51dGlsLnNpbihuZXdUaGV0YUNvbXApO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIGhhbmRsZSBzcXVhcmUgY29ybmVyc1xuICAgICAgICAvLyB1c2UgZGVmYXVsdCBvYmplY3QgY29ybmVyIHNpemUgdW5sZXNzIHNpemUgaXMgZGVmaW5lZFxuICAgICAgICB2YXIgY29ybmVyU2l6ZSA9ICh4U2l6ZSAmJiB5U2l6ZSkgPyB4U2l6ZSA6IG9iamVjdENvcm5lclNpemU7XG4gICAgICAgIC8qIDAuNzA3MTA2NzgxMiBzdGFuZHMgZm9yIHNxcnQoMikvMiAqL1xuICAgICAgICBjb3JuZXJIeXBvdGVudXNlID0gY29ybmVyU2l6ZSAqIDAuNzA3MTA2NzgxMjtcbiAgICAgICAgLy8gY29tcGxlbWVudGFyeSBhbmdsZXMgYXJlIGVxdWFsIHNpbmNlIHRoZXkncmUgYm90aCA0NSBkZWdyZWVzXG4gICAgICAgIHZhciBuZXdUaGV0YSA9IGZhYnJpYy51dGlsLmRlZ3JlZXNUb1JhZGlhbnMoNDUgLSBvYmplY3RBbmdsZSk7XG4gICAgICAgIGNvc0hhbGZPZmZzZXQgPSBjb3NIYWxmT2Zmc2V0Q29tcCA9IGNvcm5lckh5cG90ZW51c2UgKiBmYWJyaWMudXRpbC5jb3MobmV3VGhldGEpO1xuICAgICAgICBzaW5IYWxmT2Zmc2V0ID0gc2luSGFsZk9mZnNldENvbXAgPSBjb3JuZXJIeXBvdGVudXNlICogZmFicmljLnV0aWwuc2luKG5ld1RoZXRhKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGw6IHtcbiAgICAgICAgICB4OiBjZW50ZXJYIC0gc2luSGFsZk9mZnNldENvbXAsXG4gICAgICAgICAgeTogY2VudGVyWSAtIGNvc0hhbGZPZmZzZXRDb21wLFxuICAgICAgICB9LFxuICAgICAgICB0cjoge1xuICAgICAgICAgIHg6IGNlbnRlclggKyBjb3NIYWxmT2Zmc2V0LFxuICAgICAgICAgIHk6IGNlbnRlclkgLSBzaW5IYWxmT2Zmc2V0LFxuICAgICAgICB9LFxuICAgICAgICBibDoge1xuICAgICAgICAgIHg6IGNlbnRlclggLSBjb3NIYWxmT2Zmc2V0LFxuICAgICAgICAgIHk6IGNlbnRlclkgKyBzaW5IYWxmT2Zmc2V0LFxuICAgICAgICB9LFxuICAgICAgICBicjoge1xuICAgICAgICAgIHg6IGNlbnRlclggKyBzaW5IYWxmT2Zmc2V0Q29tcCxcbiAgICAgICAgICB5OiBjZW50ZXJZICsgY29zSGFsZk9mZnNldENvbXAsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAqIFJlbmRlciBmdW5jdGlvbiBmb3IgdGhlIGNvbnRyb2wuXG4gICAgKiBXaGVuIHRoaXMgZnVuY3Rpb24gcnVucyB0aGUgY29udGV4dCBpcyB1bnNjYWxlZC4gdW5yb3RhdGUuIEp1c3QgcmV0aW5hIHNjYWxlZC5cbiAgICAqIGFsbCB0aGUgZnVuY3Rpb25zIHdpbGwgaGF2ZSB0byB0cmFuc2xhdGUgdG8gdGhlIHBvaW50IGxlZnQsdG9wIGJlZm9yZSBzdGFydGluZyBEcmF3aW5nXG4gICAgKiBpZiB0aGV5IHdhbnQgdG8gZHJhdyBhIGNvbnRyb2wgd2hlcmUgdGhlIHBvc2l0aW9uIGlzIGRldGVjdGVkLlxuICAgICogbGVmdCBhbmQgdG9wIGFyZSB0aGUgcmVzdWx0IG9mIHRoZSBwb3NpdGlvbkhhbmRsZXIgZnVuY3Rpb25cbiAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dDJEfSBjdHggdGhlIGNvbnRleHQgd2hlcmUgdGhlIGNvbnRyb2wgd2lsbCBiZSBkcmF3blxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGxlZnQgcG9zaXRpb24gb2YgdGhlIGNhbnZhcyB3aGVyZSB3ZSBhcmUgYWJvdXQgdG8gcmVuZGVyIHRoZSBjb250cm9sLlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHRvcCBwb3NpdGlvbiBvZiB0aGUgY2FudmFzIHdoZXJlIHdlIGFyZSBhYm91dCB0byByZW5kZXIgdGhlIGNvbnRyb2wuXG4gICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVPdmVycmlkZVxuICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBmYWJyaWNPYmplY3QgdGhlIG9iamVjdCB3aGVyZSB0aGUgY29udHJvbCBpcyBhYm91dCB0byBiZSByZW5kZXJlZFxuICAgICovXG4gICAgcmVuZGVyOiBmdW5jdGlvbihjdHgsIGxlZnQsIHRvcCwgc3R5bGVPdmVycmlkZSwgZmFicmljT2JqZWN0KSB7XG4gICAgICBzdHlsZU92ZXJyaWRlID0gc3R5bGVPdmVycmlkZSB8fCB7fTtcbiAgICAgIHN3aXRjaCAoc3R5bGVPdmVycmlkZS5jb3JuZXJTdHlsZSB8fCBmYWJyaWNPYmplY3QuY29ybmVyU3R5bGUpIHtcbiAgICAgICAgY2FzZSAnY2lyY2xlJzpcbiAgICAgICAgICBmYWJyaWMuY29udHJvbHNVdGlscy5yZW5kZXJDaXJjbGVDb250cm9sLmNhbGwodGhpcywgY3R4LCBsZWZ0LCB0b3AsIHN0eWxlT3ZlcnJpZGUsIGZhYnJpY09iamVjdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZmFicmljLmNvbnRyb2xzVXRpbHMucmVuZGVyU3F1YXJlQ29udHJvbC5jYWxsKHRoaXMsIGN0eCwgbGVmdCwgdG9wLCBzdHlsZU92ZXJyaWRlLCBmYWJyaWNPYmplY3QpO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgLyogX0ZST01fU1ZHX1NUQVJUXyAqL1xuICBmdW5jdGlvbiBnZXRDb2xvclN0b3AoZWwsIG11bHRpcGxpZXIpIHtcbiAgICB2YXIgc3R5bGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyksXG4gICAgICAgIG9mZnNldCA9IGVsLmdldEF0dHJpYnV0ZSgnb2Zmc2V0JykgfHwgMCxcbiAgICAgICAgY29sb3IsIGNvbG9yQWxwaGEsIG9wYWNpdHksIGk7XG5cbiAgICAvLyBjb252ZXJ0IHBlcmNlbnRzIHRvIGFic29sdXRlIHZhbHVlc1xuICAgIG9mZnNldCA9IHBhcnNlRmxvYXQob2Zmc2V0KSAvICgvJSQvLnRlc3Qob2Zmc2V0KSA/IDEwMCA6IDEpO1xuICAgIG9mZnNldCA9IG9mZnNldCA8IDAgPyAwIDogb2Zmc2V0ID4gMSA/IDEgOiBvZmZzZXQ7XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICB2YXIga2V5VmFsdWVQYWlycyA9IHN0eWxlLnNwbGl0KC9cXHMqO1xccyovKTtcblxuICAgICAgaWYgKGtleVZhbHVlUGFpcnNba2V5VmFsdWVQYWlycy5sZW5ndGggLSAxXSA9PT0gJycpIHtcbiAgICAgICAga2V5VmFsdWVQYWlycy5wb3AoKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0ga2V5VmFsdWVQYWlycy5sZW5ndGg7IGktLTsgKSB7XG5cbiAgICAgICAgdmFyIHNwbGl0ID0ga2V5VmFsdWVQYWlyc1tpXS5zcGxpdCgvXFxzKjpcXHMqLyksXG4gICAgICAgICAgICBrZXkgPSBzcGxpdFswXS50cmltKCksXG4gICAgICAgICAgICB2YWx1ZSA9IHNwbGl0WzFdLnRyaW0oKTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnc3RvcC1jb2xvcicpIHtcbiAgICAgICAgICBjb2xvciA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0b3Atb3BhY2l0eScpIHtcbiAgICAgICAgICBvcGFjaXR5ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNvbG9yKSB7XG4gICAgICBjb2xvciA9IGVsLmdldEF0dHJpYnV0ZSgnc3RvcC1jb2xvcicpIHx8ICdyZ2IoMCwwLDApJztcbiAgICB9XG4gICAgaWYgKCFvcGFjaXR5KSB7XG4gICAgICBvcGFjaXR5ID0gZWwuZ2V0QXR0cmlidXRlKCdzdG9wLW9wYWNpdHknKTtcbiAgICB9XG5cbiAgICBjb2xvciA9IG5ldyBmYWJyaWMuQ29sb3IoY29sb3IpO1xuICAgIGNvbG9yQWxwaGEgPSBjb2xvci5nZXRBbHBoYSgpO1xuICAgIG9wYWNpdHkgPSBpc05hTihwYXJzZUZsb2F0KG9wYWNpdHkpKSA/IDEgOiBwYXJzZUZsb2F0KG9wYWNpdHkpO1xuICAgIG9wYWNpdHkgKj0gY29sb3JBbHBoYSAqIG11bHRpcGxpZXI7XG5cbiAgICByZXR1cm4ge1xuICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICBjb2xvcjogY29sb3IudG9SZ2IoKSxcbiAgICAgIG9wYWNpdHk6IG9wYWNpdHlcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TGluZWFyQ29vcmRzKGVsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHgxOiBlbC5nZXRBdHRyaWJ1dGUoJ3gxJykgfHwgMCxcbiAgICAgIHkxOiBlbC5nZXRBdHRyaWJ1dGUoJ3kxJykgfHwgMCxcbiAgICAgIHgyOiBlbC5nZXRBdHRyaWJ1dGUoJ3gyJykgfHwgJzEwMCUnLFxuICAgICAgeTI6IGVsLmdldEF0dHJpYnV0ZSgneTInKSB8fCAwXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJhZGlhbENvb3JkcyhlbCkge1xuICAgIHJldHVybiB7XG4gICAgICB4MTogZWwuZ2V0QXR0cmlidXRlKCdmeCcpIHx8IGVsLmdldEF0dHJpYnV0ZSgnY3gnKSB8fCAnNTAlJyxcbiAgICAgIHkxOiBlbC5nZXRBdHRyaWJ1dGUoJ2Z5JykgfHwgZWwuZ2V0QXR0cmlidXRlKCdjeScpIHx8ICc1MCUnLFxuICAgICAgcjE6IDAsXG4gICAgICB4MjogZWwuZ2V0QXR0cmlidXRlKCdjeCcpIHx8ICc1MCUnLFxuICAgICAgeTI6IGVsLmdldEF0dHJpYnV0ZSgnY3knKSB8fCAnNTAlJyxcbiAgICAgIHIyOiBlbC5nZXRBdHRyaWJ1dGUoJ3InKSB8fCAnNTAlJ1xuICAgIH07XG4gIH1cbiAgLyogX0ZST01fU1ZHX0VORF8gKi9cblxuICB2YXIgY2xvbmUgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmU7XG5cbiAgLyoqXG4gICAqIEdyYWRpZW50IGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuR3JhZGllbnRcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTIjZ3JhZGllbnRzfVxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuR3JhZGllbnQjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICovXG4gIGZhYnJpYy5HcmFkaWVudCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKC8qKiBAbGVuZHMgZmFicmljLkdyYWRpZW50LnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBIb3Jpem9udGFsIG9mZnNldCBmb3IgYWxpZ25pbmcgZ3JhZGllbnRzIGNvbWluZyBmcm9tIFNWRyB3aGVuIG91dHNpZGUgcGF0aGdyb3Vwc1xuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBvZmZzZXRYOiAwLFxuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwgb2Zmc2V0IGZvciBhbGlnbmluZyBncmFkaWVudHMgY29taW5nIGZyb20gU1ZHIHdoZW4gb3V0c2lkZSBwYXRoZ3JvdXBzXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIG9mZnNldFk6IDAsXG5cbiAgICAvKipcbiAgICAgKiBBIHRyYW5zZm9ybSBtYXRyaXggdG8gYXBwbHkgdG8gdGhlIGdyYWRpZW50IGJlZm9yZSBwYWludGluZy5cbiAgICAgKiBJbXBvcnRlZCBmcm9tIHN2ZyBncmFkaWVudHMsIGlzIG5vdCBhcHBsaWVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNmb3JtIGluIHRoZSBjZW50ZXIuXG4gICAgICogQmVmb3JlIHRoaXMgdHJhbnNmb3JtIGlzIGFwcGxpZWQsIHRoZSBvcmlnaW4gcG9pbnQgaXMgYXQgdGhlIHRvcCBsZWZ0IGNvcm5lciBvZiB0aGUgb2JqZWN0XG4gICAgICogcGx1cyB0aGUgYWRkaXRpb24gb2Ygb2Zmc2V0WSBhbmQgb2Zmc2V0WC5cbiAgICAgKiBAdHlwZSBOdW1iZXJbXVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBncmFkaWVudFRyYW5zZm9ybTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIGNvb3JkaW5hdGVzIHVuaXRzIGZvciBjb29yZHMuXG4gICAgICogSWYgYHBpeGVsc2AsIHRoZSBudW1iZXIgb2YgY29vcmRzIGFyZSBpbiB0aGUgc2FtZSB1bml0IG9mIHdpZHRoIC8gaGVpZ2h0LlxuICAgICAqIElmIHNldCBhcyBgcGVyY2VudGFnZWAgdGhlIGNvb3JkcyBhcmUgc3RpbGwgYSBudW1iZXIsIGJ1dCAxIG1lYW5zIDEwMCUgb2Ygd2lkdGhcbiAgICAgKiBmb3IgdGhlIFggYW5kIDEwMCUgb2YgdGhlIGhlaWdodCBmb3IgdGhlIHkuIEl0IGNhbiBiZSBiaWdnZXIgdGhhbiAxIGFuZCBuZWdhdGl2ZS5cbiAgICAgKiBhbGxvd2VkIHZhbHVlcyBwaXhlbHMgb3IgcGVyY2VudGFnZS5cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdCAncGl4ZWxzJ1xuICAgICAqL1xuICAgIGdyYWRpZW50VW5pdHM6ICdwaXhlbHMnLFxuXG4gICAgLyoqXG4gICAgICogR3JhZGllbnQgdHlwZSBsaW5lYXIgb3IgcmFkaWFsXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHQgJ3BpeGVscydcbiAgICAgKi9cbiAgICB0eXBlOiAnbGluZWFyJyxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBvYmplY3Qgd2l0aCB0eXBlLCBjb29yZHMsIGdyYWRpZW50VW5pdHMgYW5kIGNvbG9yU3RvcHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMudHlwZV0gZ3JhZGllbnQgdHlwZSBsaW5lYXIgb3IgcmFkaWFsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmdyYWRpZW50VW5pdHNdIGdyYWRpZW50IHVuaXRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLm9mZnNldFhdIFNWRyBpbXBvcnQgY29tcGF0aWJpbGl0eVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5vZmZzZXRZXSBTVkcgaW1wb3J0IGNvbXBhdGliaWxpdHlcbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBvcHRpb25zLmNvbG9yU3RvcHMgY29udGFpbnMgdGhlIGNvbG9yc3RvcHMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuY29vcmRzIGNvbnRhaW5zIHRoZSBjb29yZHMgb2YgdGhlIGdyYWRpZW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmNvb3Jkcy54MV0gWCBjb29yZGlhbnRlIG9mIHRoZSBmaXJzdCBwb2ludCBmb3IgbGluZWFyIG9yIG9mIHRoZSBmb2NhbCBwb2ludCBmb3IgcmFkaWFsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmNvb3Jkcy55MV0gWSBjb29yZGlhbnRlIG9mIHRoZSBmaXJzdCBwb2ludCBmb3IgbGluZWFyIG9yIG9mIHRoZSBmb2NhbCBwb2ludCBmb3IgcmFkaWFsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmNvb3Jkcy54Ml0gWCBjb29yZGlhbnRlIG9mIHRoZSBzZWNvbmQgcG9pbnQgZm9yIGxpbmVhciBvciBvZiB0aGUgY2VudGVyIHBvaW50IGZvciByYWRpYWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuY29vcmRzLnkyXSBZIGNvb3JkaWFudGUgb2YgdGhlIHNlY29uZCBwb2ludCBmb3IgbGluZWFyIG9yIG9mIHRoZSBjZW50ZXIgcG9pbnQgZm9yIHJhZGlhbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5jb29yZHMucjFdIG9ubHkgZm9yIHJhZGlhbCBncmFkaWVudCwgcmFkaXVzIG9mIHRoZSBpbm5lciBjaXJjbGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuY29vcmRzLnIyXSBvbmx5IGZvciByYWRpYWwgZ3JhZGllbnQsIHJhZGl1cyBvZiB0aGUgZXh0ZXJuYWwgY2lyY2xlXG4gICAgICogQHJldHVybiB7ZmFicmljLkdyYWRpZW50fSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG4gICAgICBvcHRpb25zLmNvb3JkcyB8fCAob3B0aW9ucy5jb29yZHMgPSB7IH0pO1xuXG4gICAgICB2YXIgY29vcmRzLCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vIHNldHMgZXZlcnl0aGluZywgdGhlbiBjb29yZHMgYW5kIGNvbG9yc3RvcHMgZ2V0IHNldHMgYWdhaW5cbiAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgIF90aGlzW29wdGlvbl0gPSBvcHRpb25zW29wdGlvbl07XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuaWQpIHtcbiAgICAgICAgdGhpcy5pZCArPSAnXycgKyBmYWJyaWMuT2JqZWN0Ll9fdWlkKys7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5pZCA9IGZhYnJpYy5PYmplY3QuX191aWQrKztcbiAgICAgIH1cblxuICAgICAgY29vcmRzID0ge1xuICAgICAgICB4MTogb3B0aW9ucy5jb29yZHMueDEgfHwgMCxcbiAgICAgICAgeTE6IG9wdGlvbnMuY29vcmRzLnkxIHx8IDAsXG4gICAgICAgIHgyOiBvcHRpb25zLmNvb3Jkcy54MiB8fCAwLFxuICAgICAgICB5Mjogb3B0aW9ucy5jb29yZHMueTIgfHwgMFxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ3JhZGlhbCcpIHtcbiAgICAgICAgY29vcmRzLnIxID0gb3B0aW9ucy5jb29yZHMucjEgfHwgMDtcbiAgICAgICAgY29vcmRzLnIyID0gb3B0aW9ucy5jb29yZHMucjIgfHwgMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb29yZHMgPSBjb29yZHM7XG4gICAgICB0aGlzLmNvbG9yU3RvcHMgPSBvcHRpb25zLmNvbG9yU3RvcHMuc2xpY2UoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbm90aGVyIGNvbG9yU3RvcFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb2xvclN0b3AgT2JqZWN0IHdpdGggb2Zmc2V0IGFuZCBjb2xvclxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5HcmFkaWVudH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIGFkZENvbG9yU3RvcDogZnVuY3Rpb24oY29sb3JTdG9wcykge1xuICAgICAgZm9yICh2YXIgcG9zaXRpb24gaW4gY29sb3JTdG9wcykge1xuICAgICAgICB2YXIgY29sb3IgPSBuZXcgZmFicmljLkNvbG9yKGNvbG9yU3RvcHNbcG9zaXRpb25dKTtcbiAgICAgICAgdGhpcy5jb2xvclN0b3BzLnB1c2goe1xuICAgICAgICAgIG9mZnNldDogcGFyc2VGbG9hdChwb3NpdGlvbiksXG4gICAgICAgICAgY29sb3I6IGNvbG9yLnRvUmdiKCksXG4gICAgICAgICAgb3BhY2l0eTogY29sb3IuZ2V0QWxwaGEoKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhIGdyYWRpZW50XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24ocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgdmFyIG9iamVjdCA9IHtcbiAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICBjb29yZHM6IHRoaXMuY29vcmRzLFxuICAgICAgICBjb2xvclN0b3BzOiB0aGlzLmNvbG9yU3RvcHMsXG4gICAgICAgIG9mZnNldFg6IHRoaXMub2Zmc2V0WCxcbiAgICAgICAgb2Zmc2V0WTogdGhpcy5vZmZzZXRZLFxuICAgICAgICBncmFkaWVudFVuaXRzOiB0aGlzLmdyYWRpZW50VW5pdHMsXG4gICAgICAgIGdyYWRpZW50VHJhbnNmb3JtOiB0aGlzLmdyYWRpZW50VHJhbnNmb3JtID8gdGhpcy5ncmFkaWVudFRyYW5zZm9ybS5jb25jYXQoKSA6IHRoaXMuZ3JhZGllbnRUcmFuc2Zvcm1cbiAgICAgIH07XG4gICAgICBmYWJyaWMudXRpbC5wb3B1bGF0ZVdpdGhQcm9wZXJ0aWVzKHRoaXMsIG9iamVjdCwgcHJvcGVydGllc1RvSW5jbHVkZSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSxcblxuICAgIC8qIF9UT19TVkdfU1RBUlRfICovXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBTVkcgcmVwcmVzZW50YXRpb24gb2YgYW4gZ3JhZGllbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYSBncmFkaWVudCBmb3JcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFNWRyByZXByZXNlbnRhdGlvbiBvZiBhbiBncmFkaWVudCAobGluZWFyL3JhZGlhbClcbiAgICAgKi9cbiAgICB0b1NWRzogZnVuY3Rpb24ob2JqZWN0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgY29vcmRzID0gY2xvbmUodGhpcy5jb29yZHMsIHRydWUpLCBpLCBsZW4sIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9LFxuICAgICAgICAgIG1hcmt1cCwgY29tbW9uQXR0cmlidXRlcywgY29sb3JTdG9wcyA9IGNsb25lKHRoaXMuY29sb3JTdG9wcywgdHJ1ZSksXG4gICAgICAgICAgbmVlZHNTd2FwID0gY29vcmRzLnIxID4gY29vcmRzLnIyLFxuICAgICAgICAgIHRyYW5zZm9ybSA9IHRoaXMuZ3JhZGllbnRUcmFuc2Zvcm0gPyB0aGlzLmdyYWRpZW50VHJhbnNmb3JtLmNvbmNhdCgpIDogZmFicmljLmlNYXRyaXguY29uY2F0KCksXG4gICAgICAgICAgb2Zmc2V0WCA9IC10aGlzLm9mZnNldFgsIG9mZnNldFkgPSAtdGhpcy5vZmZzZXRZLFxuICAgICAgICAgIHdpdGhWaWV3cG9ydCA9ICEhb3B0aW9ucy5hZGRpdGlvbmFsVHJhbnNmb3JtLFxuICAgICAgICAgIGdyYWRpZW50VW5pdHMgPSB0aGlzLmdyYWRpZW50VW5pdHMgPT09ICdwaXhlbHMnID8gJ3VzZXJTcGFjZU9uVXNlJyA6ICdvYmplY3RCb3VuZGluZ0JveCc7XG4gICAgICAvLyBjb2xvclN0b3BzIG11c3QgYmUgc29ydGVkIGFzY2VuZGluZ1xuICAgICAgY29sb3JTdG9wcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEub2Zmc2V0IC0gYi5vZmZzZXQ7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGdyYWRpZW50VW5pdHMgPT09ICdvYmplY3RCb3VuZGluZ0JveCcpIHtcbiAgICAgICAgb2Zmc2V0WCAvPSBvYmplY3Qud2lkdGg7XG4gICAgICAgIG9mZnNldFkgLz0gb2JqZWN0LmhlaWdodDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBvZmZzZXRYICs9IG9iamVjdC53aWR0aCAvIDI7XG4gICAgICAgIG9mZnNldFkgKz0gb2JqZWN0LmhlaWdodCAvIDI7XG4gICAgICB9XG4gICAgICBpZiAob2JqZWN0LnR5cGUgPT09ICdwYXRoJyAmJiB0aGlzLmdyYWRpZW50VW5pdHMgIT09ICdwZXJjZW50YWdlJykge1xuICAgICAgICBvZmZzZXRYIC09IG9iamVjdC5wYXRoT2Zmc2V0Lng7XG4gICAgICAgIG9mZnNldFkgLT0gb2JqZWN0LnBhdGhPZmZzZXQueTtcbiAgICAgIH1cblxuXG4gICAgICB0cmFuc2Zvcm1bNF0gLT0gb2Zmc2V0WDtcbiAgICAgIHRyYW5zZm9ybVs1XSAtPSBvZmZzZXRZO1xuXG4gICAgICBjb21tb25BdHRyaWJ1dGVzID0gJ2lkPVwiU1ZHSURfJyArIHRoaXMuaWQgK1xuICAgICAgICAgICAgICAgICAgICAgJ1wiIGdyYWRpZW50VW5pdHM9XCInICsgZ3JhZGllbnRVbml0cyArICdcIic7XG4gICAgICBjb21tb25BdHRyaWJ1dGVzICs9ICcgZ3JhZGllbnRUcmFuc2Zvcm09XCInICsgKHdpdGhWaWV3cG9ydCA/XG4gICAgICAgIG9wdGlvbnMuYWRkaXRpb25hbFRyYW5zZm9ybSArICcgJyA6ICcnKSArIGZhYnJpYy51dGlsLm1hdHJpeFRvU1ZHKHRyYW5zZm9ybSkgKyAnXCIgJztcblxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2xpbmVhcicpIHtcbiAgICAgICAgbWFya3VwID0gW1xuICAgICAgICAgICc8bGluZWFyR3JhZGllbnQgJyxcbiAgICAgICAgICBjb21tb25BdHRyaWJ1dGVzLFxuICAgICAgICAgICcgeDE9XCInLCBjb29yZHMueDEsXG4gICAgICAgICAgJ1wiIHkxPVwiJywgY29vcmRzLnkxLFxuICAgICAgICAgICdcIiB4Mj1cIicsIGNvb3Jkcy54MixcbiAgICAgICAgICAnXCIgeTI9XCInLCBjb29yZHMueTIsXG4gICAgICAgICAgJ1wiPlxcbidcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ3JhZGlhbCcpIHtcbiAgICAgICAgLy8gc3ZnIHJhZGlhbCBncmFkaWVudCBoYXMganVzdCAxIHJhZGl1cy4gdGhlIGJpZ2dlc3QuXG4gICAgICAgIG1hcmt1cCA9IFtcbiAgICAgICAgICAnPHJhZGlhbEdyYWRpZW50ICcsXG4gICAgICAgICAgY29tbW9uQXR0cmlidXRlcyxcbiAgICAgICAgICAnIGN4PVwiJywgbmVlZHNTd2FwID8gY29vcmRzLngxIDogY29vcmRzLngyLFxuICAgICAgICAgICdcIiBjeT1cIicsIG5lZWRzU3dhcCA/IGNvb3Jkcy55MSA6IGNvb3Jkcy55MixcbiAgICAgICAgICAnXCIgcj1cIicsIG5lZWRzU3dhcCA/IGNvb3Jkcy5yMSA6IGNvb3Jkcy5yMixcbiAgICAgICAgICAnXCIgZng9XCInLCBuZWVkc1N3YXAgPyBjb29yZHMueDIgOiBjb29yZHMueDEsXG4gICAgICAgICAgJ1wiIGZ5PVwiJywgbmVlZHNTd2FwID8gY29vcmRzLnkyIDogY29vcmRzLnkxLFxuICAgICAgICAgICdcIj5cXG4nXG4gICAgICAgIF07XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdyYWRpYWwnKSB7XG4gICAgICAgIGlmIChuZWVkc1N3YXApIHtcbiAgICAgICAgICAvLyBzdmcgZ29lcyBmcm9tIGludGVybmFsIHRvIGV4dGVybmFsIHJhZGl1cy4gaWYgcmFkaXVzIGFyZSBpbnZlcnRlZCwgc3dhcCBjb2xvciBzdG9wcy5cbiAgICAgICAgICBjb2xvclN0b3BzID0gY29sb3JTdG9wcy5jb25jYXQoKTtcbiAgICAgICAgICBjb2xvclN0b3BzLnJldmVyc2UoKTtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBjb2xvclN0b3BzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb2xvclN0b3BzW2ldLm9mZnNldCA9IDEgLSBjb2xvclN0b3BzW2ldLm9mZnNldDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1pblJhZGl1cyA9IE1hdGgubWluKGNvb3Jkcy5yMSwgY29vcmRzLnIyKTtcbiAgICAgICAgaWYgKG1pblJhZGl1cyA+IDApIHtcbiAgICAgICAgICAvLyBpIGhhdmUgdG8gc2hpZnQgYWxsIGNvbG9yU3RvcHMgYW5kIGFkZCBuZXcgb25lIGluIDAuXG4gICAgICAgICAgdmFyIG1heFJhZGl1cyA9IE1hdGgubWF4KGNvb3Jkcy5yMSwgY29vcmRzLnIyKSxcbiAgICAgICAgICAgICAgcGVyY2VudGFnZVNoaWZ0ID0gbWluUmFkaXVzIC8gbWF4UmFkaXVzO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGNvbG9yU3RvcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbG9yU3RvcHNbaV0ub2Zmc2V0ICs9IHBlcmNlbnRhZ2VTaGlmdCAqICgxIC0gY29sb3JTdG9wc1tpXS5vZmZzZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSBjb2xvclN0b3BzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBjb2xvclN0b3AgPSBjb2xvclN0b3BzW2ldO1xuICAgICAgICBtYXJrdXAucHVzaChcbiAgICAgICAgICAnPHN0b3AgJyxcbiAgICAgICAgICAnb2Zmc2V0PVwiJywgKGNvbG9yU3RvcC5vZmZzZXQgKiAxMDApICsgJyUnLFxuICAgICAgICAgICdcIiBzdHlsZT1cInN0b3AtY29sb3I6JywgY29sb3JTdG9wLmNvbG9yLFxuICAgICAgICAgICh0eXBlb2YgY29sb3JTdG9wLm9wYWNpdHkgIT09ICd1bmRlZmluZWQnID8gJztzdG9wLW9wYWNpdHk6ICcgKyBjb2xvclN0b3Aub3BhY2l0eSA6ICc7JyksXG4gICAgICAgICAgJ1wiLz5cXG4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIG1hcmt1cC5wdXNoKCh0aGlzLnR5cGUgPT09ICdsaW5lYXInID8gJzwvbGluZWFyR3JhZGllbnQ+XFxuJyA6ICc8L3JhZGlhbEdyYWRpZW50PlxcbicpKTtcblxuICAgICAgcmV0dXJuIG1hcmt1cC5qb2luKCcnKTtcbiAgICB9LFxuICAgIC8qIF9UT19TVkdfRU5EXyAqL1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBpbnN0YW5jZSBvZiBDYW52YXNHcmFkaWVudFxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKiBAcmV0dXJuIHtDYW52YXNHcmFkaWVudH1cbiAgICAgKi9cbiAgICB0b0xpdmU6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgdmFyIGdyYWRpZW50LCBjb29yZHMgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUodGhpcy5jb29yZHMpLCBpLCBsZW47XG5cbiAgICAgIGlmICghdGhpcy50eXBlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2xpbmVhcicpIHtcbiAgICAgICAgZ3JhZGllbnQgPSBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQoXG4gICAgICAgICAgY29vcmRzLngxLCBjb29yZHMueTEsIGNvb3Jkcy54MiwgY29vcmRzLnkyKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ3JhZGlhbCcpIHtcbiAgICAgICAgZ3JhZGllbnQgPSBjdHguY3JlYXRlUmFkaWFsR3JhZGllbnQoXG4gICAgICAgICAgY29vcmRzLngxLCBjb29yZHMueTEsIGNvb3Jkcy5yMSwgY29vcmRzLngyLCBjb29yZHMueTIsIGNvb3Jkcy5yMik7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHRoaXMuY29sb3JTdG9wcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgY29sb3IgPSB0aGlzLmNvbG9yU3RvcHNbaV0uY29sb3IsXG4gICAgICAgICAgICBvcGFjaXR5ID0gdGhpcy5jb2xvclN0b3BzW2ldLm9wYWNpdHksXG4gICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmNvbG9yU3RvcHNbaV0ub2Zmc2V0O1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb2xvciA9IG5ldyBmYWJyaWMuQ29sb3IoY29sb3IpLnNldEFscGhhKG9wYWNpdHkpLnRvUmdiYSgpO1xuICAgICAgICB9XG4gICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcChvZmZzZXQsIGNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdyYWRpZW50O1xuICAgIH1cbiAgfSk7XG5cbiAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuR3JhZGllbnQsIHtcblxuICAgIC8qIF9GUk9NX1NWR19TVEFSVF8gKi9cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHtAbGluayBmYWJyaWMuR3JhZGllbnR9IGluc3RhbmNlIGZyb20gYW4gU1ZHIGVsZW1lbnRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5HcmFkaWVudFxuICAgICAqIEBwYXJhbSB7U1ZHR3JhZGllbnRFbGVtZW50fSBlbCBTVkcgZ3JhZGllbnQgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3BhY2l0eUF0dHIgQSBmaWxsLW9wYWNpdHkgb3Igc3Ryb2tlLW9wYWNpdHkgYXR0cmlidXRlIHRvIG11bHRpcGx5IHRvIGVhY2ggc3RvcCdzIG9wYWNpdHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN2Z09wdGlvbnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHNpemUgb2YgdGhlIFNWRyBpbiBvcmRlciB0byBwYXJzZSBjb3JyZWN0bHkgZ3JhZGllbnRzXG4gICAgICogdGhhdCB1c2VzIGdyYWRpZW50VW5pdHMgYXMgJ3VzZXJTcGFjZU9uVXNlJyBhbmQgcGVyY2VudGFnZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3QubnVtYmVyfSB2aWV3Qm94V2lkdGggd2lkdGggcGFydCBvZiB0aGUgdmlld0JveCBhdHRyaWJ1dGUgb24gc3ZnXG4gICAgICogQHBhcmFtIHtPYmplY3QubnVtYmVyfSB2aWV3Qm94SGVpZ2h0IGhlaWdodCBwYXJ0IG9mIHRoZSB2aWV3Qm94IGF0dHJpYnV0ZSBvbiBzdmdcbiAgICAgKiBAcGFyYW0ge09iamVjdC5udW1iZXJ9IHdpZHRoIHdpZHRoIHBhcnQgb2YgdGhlIHN2ZyB0YWcgaWYgdmlld0JveCBpcyBub3Qgc3BlY2lmaWVkXG4gICAgICogQHBhcmFtIHtPYmplY3QubnVtYmVyfSBoZWlnaHQgaGVpZ2h0IHBhcnQgb2YgdGhlIHN2ZyB0YWcgaWYgdmlld0JveCBpcyBub3Qgc3BlY2lmaWVkXG4gICAgICogQHJldHVybiB7ZmFicmljLkdyYWRpZW50fSBHcmFkaWVudCBpbnN0YW5jZVxuICAgICAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3BzZXJ2ZXJzLmh0bWwjTGluZWFyR3JhZGllbnRFbGVtZW50XG4gICAgICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvcHNlcnZlcnMuaHRtbCNSYWRpYWxHcmFkaWVudEVsZW1lbnRcbiAgICAgKi9cbiAgICBmcm9tRWxlbWVudDogZnVuY3Rpb24oZWwsIGluc3RhbmNlLCBvcGFjaXR5QXR0ciwgc3ZnT3B0aW9ucykge1xuICAgICAgLyoqXG4gICAgICAgKiAgQGV4YW1wbGU6XG4gICAgICAgKlxuICAgICAgICogIDxsaW5lYXJHcmFkaWVudCBpZD1cImxpbmVhckdyYWQxXCI+XG4gICAgICAgKiAgICA8c3RvcCBvZmZzZXQ9XCIwJVwiIHN0b3AtY29sb3I9XCJ3aGl0ZVwiLz5cbiAgICAgICAqICAgIDxzdG9wIG9mZnNldD1cIjEwMCVcIiBzdG9wLWNvbG9yPVwiYmxhY2tcIi8+XG4gICAgICAgKiAgPC9saW5lYXJHcmFkaWVudD5cbiAgICAgICAqXG4gICAgICAgKiAgT1JcbiAgICAgICAqXG4gICAgICAgKiAgPGxpbmVhckdyYWRpZW50IGlkPVwibGluZWFyR3JhZDJcIj5cbiAgICAgICAqICAgIDxzdG9wIG9mZnNldD1cIjBcIiBzdHlsZT1cInN0b3AtY29sb3I6cmdiKDI1NSwyNTUsMjU1KVwiLz5cbiAgICAgICAqICAgIDxzdG9wIG9mZnNldD1cIjFcIiBzdHlsZT1cInN0b3AtY29sb3I6cmdiKDAsMCwwKVwiLz5cbiAgICAgICAqICA8L2xpbmVhckdyYWRpZW50PlxuICAgICAgICpcbiAgICAgICAqICBPUlxuICAgICAgICpcbiAgICAgICAqICA8cmFkaWFsR3JhZGllbnQgaWQ9XCJyYWRpYWxHcmFkMVwiPlxuICAgICAgICogICAgPHN0b3Agb2Zmc2V0PVwiMCVcIiBzdG9wLWNvbG9yPVwid2hpdGVcIiBzdG9wLW9wYWNpdHk9XCIxXCIgLz5cbiAgICAgICAqICAgIDxzdG9wIG9mZnNldD1cIjUwJVwiIHN0b3AtY29sb3I9XCJibGFja1wiIHN0b3Atb3BhY2l0eT1cIjAuNVwiIC8+XG4gICAgICAgKiAgICA8c3RvcCBvZmZzZXQ9XCIxMDAlXCIgc3RvcC1jb2xvcj1cIndoaXRlXCIgc3RvcC1vcGFjaXR5PVwiMVwiIC8+XG4gICAgICAgKiAgPC9yYWRpYWxHcmFkaWVudD5cbiAgICAgICAqXG4gICAgICAgKiAgT1JcbiAgICAgICAqXG4gICAgICAgKiAgPHJhZGlhbEdyYWRpZW50IGlkPVwicmFkaWFsR3JhZDJcIj5cbiAgICAgICAqICAgIDxzdG9wIG9mZnNldD1cIjBcIiBzdG9wLWNvbG9yPVwicmdiKDI1NSwyNTUsMjU1KVwiIC8+XG4gICAgICAgKiAgICA8c3RvcCBvZmZzZXQ9XCIwLjVcIiBzdG9wLWNvbG9yPVwicmdiKDAsMCwwKVwiIC8+XG4gICAgICAgKiAgICA8c3RvcCBvZmZzZXQ9XCIxXCIgc3RvcC1jb2xvcj1cInJnYigyNTUsMjU1LDI1NSlcIiAvPlxuICAgICAgICogIDwvcmFkaWFsR3JhZGllbnQ+XG4gICAgICAgKlxuICAgICAgICovXG5cbiAgICAgIHZhciBtdWx0aXBsaWVyID0gcGFyc2VGbG9hdChvcGFjaXR5QXR0cikgLyAoLyUkLy50ZXN0KG9wYWNpdHlBdHRyKSA/IDEwMCA6IDEpO1xuICAgICAgbXVsdGlwbGllciA9IG11bHRpcGxpZXIgPCAwID8gMCA6IG11bHRpcGxpZXIgPiAxID8gMSA6IG11bHRpcGxpZXI7XG4gICAgICBpZiAoaXNOYU4obXVsdGlwbGllcikpIHtcbiAgICAgICAgbXVsdGlwbGllciA9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb2xvclN0b3BFbHMgPSBlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3RvcCcpLFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgZ3JhZGllbnRVbml0cyA9IGVsLmdldEF0dHJpYnV0ZSgnZ3JhZGllbnRVbml0cycpID09PSAndXNlclNwYWNlT25Vc2UnID9cbiAgICAgICAgICAgICdwaXhlbHMnIDogJ3BlcmNlbnRhZ2UnLFxuICAgICAgICAgIGdyYWRpZW50VHJhbnNmb3JtID0gZWwuZ2V0QXR0cmlidXRlKCdncmFkaWVudFRyYW5zZm9ybScpIHx8ICcnLFxuICAgICAgICAgIGNvbG9yU3RvcHMgPSBbXSxcbiAgICAgICAgICBjb29yZHMsIGksIG9mZnNldFggPSAwLCBvZmZzZXRZID0gMCxcbiAgICAgICAgICB0cmFuc2Zvcm1NYXRyaXg7XG4gICAgICBpZiAoZWwubm9kZU5hbWUgPT09ICdsaW5lYXJHcmFkaWVudCcgfHwgZWwubm9kZU5hbWUgPT09ICdMSU5FQVJHUkFESUVOVCcpIHtcbiAgICAgICAgdHlwZSA9ICdsaW5lYXInO1xuICAgICAgICBjb29yZHMgPSBnZXRMaW5lYXJDb29yZHMoZWwpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHR5cGUgPSAncmFkaWFsJztcbiAgICAgICAgY29vcmRzID0gZ2V0UmFkaWFsQ29vcmRzKGVsKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gY29sb3JTdG9wRWxzLmxlbmd0aDsgaS0tOyApIHtcbiAgICAgICAgY29sb3JTdG9wcy5wdXNoKGdldENvbG9yU3RvcChjb2xvclN0b3BFbHNbaV0sIG11bHRpcGxpZXIpKTtcbiAgICAgIH1cblxuICAgICAgdHJhbnNmb3JtTWF0cml4ID0gZmFicmljLnBhcnNlVHJhbnNmb3JtQXR0cmlidXRlKGdyYWRpZW50VHJhbnNmb3JtKTtcblxuICAgICAgX19jb252ZXJ0UGVyY2VudFVuaXRzVG9WYWx1ZXMoaW5zdGFuY2UsIGNvb3Jkcywgc3ZnT3B0aW9ucywgZ3JhZGllbnRVbml0cyk7XG5cbiAgICAgIGlmIChncmFkaWVudFVuaXRzID09PSAncGl4ZWxzJykge1xuICAgICAgICBvZmZzZXRYID0gLWluc3RhbmNlLmxlZnQ7XG4gICAgICAgIG9mZnNldFkgPSAtaW5zdGFuY2UudG9wO1xuICAgICAgfVxuXG4gICAgICB2YXIgZ3JhZGllbnQgPSBuZXcgZmFicmljLkdyYWRpZW50KHtcbiAgICAgICAgaWQ6IGVsLmdldEF0dHJpYnV0ZSgnaWQnKSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgY29vcmRzOiBjb29yZHMsXG4gICAgICAgIGNvbG9yU3RvcHM6IGNvbG9yU3RvcHMsXG4gICAgICAgIGdyYWRpZW50VW5pdHM6IGdyYWRpZW50VW5pdHMsXG4gICAgICAgIGdyYWRpZW50VHJhbnNmb3JtOiB0cmFuc2Zvcm1NYXRyaXgsXG4gICAgICAgIG9mZnNldFg6IG9mZnNldFgsXG4gICAgICAgIG9mZnNldFk6IG9mZnNldFksXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGdyYWRpZW50O1xuICAgIH1cbiAgICAvKiBfRlJPTV9TVkdfRU5EXyAqL1xuICB9KTtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIF9fY29udmVydFBlcmNlbnRVbml0c1RvVmFsdWVzKGluc3RhbmNlLCBvcHRpb25zLCBzdmdPcHRpb25zLCBncmFkaWVudFVuaXRzKSB7XG4gICAgdmFyIHByb3BWYWx1ZSwgZmluYWxWYWx1ZTtcbiAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIHByb3BWYWx1ZSA9IG9wdGlvbnNbcHJvcF07XG4gICAgICBpZiAocHJvcFZhbHVlID09PSAnSW5maW5pdHknKSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAocHJvcFZhbHVlID09PSAnLUluZmluaXR5Jykge1xuICAgICAgICBmaW5hbFZhbHVlID0gMDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmaW5hbFZhbHVlID0gcGFyc2VGbG9hdChvcHRpb25zW3Byb3BdLCAxMCk7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJyAmJiAvXihcXGQrXFwuXFxkKyklfChcXGQrKSUkLy50ZXN0KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICBmaW5hbFZhbHVlICo9IDAuMDE7XG4gICAgICAgICAgaWYgKGdyYWRpZW50VW5pdHMgPT09ICdwaXhlbHMnKSB7XG4gICAgICAgICAgICAvLyB0aGVuIHdlIG5lZWQgdG8gZml4IHRob3NlIHBlcmNlbnRhZ2VzIGhlcmUgaW4gc3ZnIHBhcnNpbmdcbiAgICAgICAgICAgIGlmIChwcm9wID09PSAneDEnIHx8IHByb3AgPT09ICd4MicgfHwgcHJvcCA9PT0gJ3IyJykge1xuICAgICAgICAgICAgICBmaW5hbFZhbHVlICo9IHN2Z09wdGlvbnMudmlld0JveFdpZHRoIHx8IHN2Z09wdGlvbnMud2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3kxJyB8fCBwcm9wID09PSAneTInKSB7XG4gICAgICAgICAgICAgIGZpbmFsVmFsdWUgKj0gc3ZnT3B0aW9ucy52aWV3Qm94SGVpZ2h0IHx8IHN2Z09wdGlvbnMuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3B0aW9uc1twcm9wXSA9IGZpbmFsVmFsdWU7XG4gICAgfSk7XG4gIH1cbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdG9GaXhlZCA9IGZhYnJpYy51dGlsLnRvRml4ZWQ7XG5cbiAgLyoqXG4gICAqIFBhdHRlcm4gY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5QYXR0ZXJuXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vcGF0dGVybnN8UGF0dGVybiBkZW1vfVxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2R5bmFtaWMtcGF0dGVybnN8RHluYW1pY1BhdHRlcm4gZGVtb31cbiAgICogQHNlZSB7QGxpbmsgZmFicmljLlBhdHRlcm4jaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICovXG5cblxuICBmYWJyaWMuUGF0dGVybiA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKC8qKiBAbGVuZHMgZmFicmljLlBhdHRlcm4ucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIFJlcGVhdCBwcm9wZXJ0eSBvZiBhIHBhdHRlcm4gKG9uZSBvZiByZXBlYXQsIHJlcGVhdC14LCByZXBlYXQteSBvciBuby1yZXBlYXQpXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICByZXBlYXQ6ICdyZXBlYXQnLFxuXG4gICAgLyoqXG4gICAgICogUGF0dGVybiBob3Jpem9udGFsIG9mZnNldCBmcm9tIG9iamVjdCdzIGxlZnQvdG9wIGNvcm5lclxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgb2Zmc2V0WDogMCxcblxuICAgIC8qKlxuICAgICAqIFBhdHRlcm4gdmVydGljYWwgb2Zmc2V0IGZyb20gb2JqZWN0J3MgbGVmdC90b3AgY29ybmVyXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBvZmZzZXRZOiAwLFxuXG4gICAgLyoqXG4gICAgICogY3Jvc3NPcmlnaW4gdmFsdWUgKG9uZSBvZiBcIlwiLCBcImFub255bW91c1wiLCBcInVzZS1jcmVkZW50aWFsc1wiKVxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9IVE1ML0NPUlNfc2V0dGluZ3NfYXR0cmlidXRlc1xuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY3Jvc3NPcmlnaW46ICcnLFxuXG4gICAgLyoqXG4gICAgICogdHJhbnNmb3JtIG1hdHJpeCB0byBjaGFuZ2UgdGhlIHBhdHRlcm4sIGltcG9ydGVkIGZyb20gc3Zncy5cbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcGF0dGVyblRyYW5zZm9ybTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gZnVuY3Rpb24gdG8gaW52b2tlIGFmdGVyIGNhbGxiYWNrIGluaXQuXG4gICAgICogQHJldHVybiB7ZmFicmljLlBhdHRlcm59IHRoaXNBcmdcbiAgICAgKi9cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG5cbiAgICAgIHRoaXMuaWQgPSBmYWJyaWMuT2JqZWN0Ll9fdWlkKys7XG4gICAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICBpZiAoIW9wdGlvbnMuc291cmNlIHx8IChvcHRpb25zLnNvdXJjZSAmJiB0eXBlb2Ygb3B0aW9ucy5zb3VyY2UgIT09ICdzdHJpbmcnKSkge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayh0aGlzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIGltZyBzcmMgc3RyaW5nXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc291cmNlID0gZmFicmljLnV0aWwuY3JlYXRlSW1hZ2UoKTtcbiAgICAgICAgZmFicmljLnV0aWwubG9hZEltYWdlKG9wdGlvbnMuc291cmNlLCBmdW5jdGlvbihpbWcsIGlzRXJyb3IpIHtcbiAgICAgICAgICBfdGhpcy5zb3VyY2UgPSBpbWc7XG4gICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soX3RoaXMsIGlzRXJyb3IpO1xuICAgICAgICB9LCBudWxsLCB0aGlzLmNyb3NzT3JpZ2luKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYSBwYXR0ZXJuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGEgcGF0dGVybiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICB2YXIgTlVNX0ZSQUNUSU9OX0RJR0lUUyA9IGZhYnJpYy5PYmplY3QuTlVNX0ZSQUNUSU9OX0RJR0lUUyxcbiAgICAgICAgICBzb3VyY2UsIG9iamVjdDtcblxuICAgICAgLy8gPGltZz4gZWxlbWVudFxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnNvdXJjZS5zcmMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNvdXJjZSA9IHRoaXMuc291cmNlLnNyYztcbiAgICAgIH1cbiAgICAgIC8vIDxjYW52YXM+IGVsZW1lbnRcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLnNvdXJjZSA9PT0gJ29iamVjdCcgJiYgdGhpcy5zb3VyY2UudG9EYXRhVVJMKSB7XG4gICAgICAgIHNvdXJjZSA9IHRoaXMuc291cmNlLnRvRGF0YVVSTCgpO1xuICAgICAgfVxuXG4gICAgICBvYmplY3QgPSB7XG4gICAgICAgIHR5cGU6ICdwYXR0ZXJuJyxcbiAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgIHJlcGVhdDogdGhpcy5yZXBlYXQsXG4gICAgICAgIGNyb3NzT3JpZ2luOiB0aGlzLmNyb3NzT3JpZ2luLFxuICAgICAgICBvZmZzZXRYOiB0b0ZpeGVkKHRoaXMub2Zmc2V0WCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgIG9mZnNldFk6IHRvRml4ZWQodGhpcy5vZmZzZXRZLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgcGF0dGVyblRyYW5zZm9ybTogdGhpcy5wYXR0ZXJuVHJhbnNmb3JtID8gdGhpcy5wYXR0ZXJuVHJhbnNmb3JtLmNvbmNhdCgpIDogbnVsbFxuICAgICAgfTtcbiAgICAgIGZhYnJpYy51dGlsLnBvcHVsYXRlV2l0aFByb3BlcnRpZXModGhpcywgb2JqZWN0LCBwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuXG4gICAgLyogX1RPX1NWR19TVEFSVF8gKi9cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIFNWRyByZXByZXNlbnRhdGlvbiBvZiBhIHBhdHRlcm5cbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdFxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gU1ZHIHJlcHJlc2VudGF0aW9uIG9mIGEgcGF0dGVyblxuICAgICAqL1xuICAgIHRvU1ZHOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciBwYXR0ZXJuU291cmNlID0gdHlwZW9mIHRoaXMuc291cmNlID09PSAnZnVuY3Rpb24nID8gdGhpcy5zb3VyY2UoKSA6IHRoaXMuc291cmNlLFxuICAgICAgICAgIHBhdHRlcm5XaWR0aCA9IHBhdHRlcm5Tb3VyY2Uud2lkdGggLyBvYmplY3Qud2lkdGgsXG4gICAgICAgICAgcGF0dGVybkhlaWdodCA9IHBhdHRlcm5Tb3VyY2UuaGVpZ2h0IC8gb2JqZWN0LmhlaWdodCxcbiAgICAgICAgICBwYXR0ZXJuT2Zmc2V0WCA9IHRoaXMub2Zmc2V0WCAvIG9iamVjdC53aWR0aCxcbiAgICAgICAgICBwYXR0ZXJuT2Zmc2V0WSA9IHRoaXMub2Zmc2V0WSAvIG9iamVjdC5oZWlnaHQsXG4gICAgICAgICAgcGF0dGVybkltZ1NyYyA9ICcnO1xuICAgICAgaWYgKHRoaXMucmVwZWF0ID09PSAncmVwZWF0LXgnIHx8IHRoaXMucmVwZWF0ID09PSAnbm8tcmVwZWF0Jykge1xuICAgICAgICBwYXR0ZXJuSGVpZ2h0ID0gMTtcbiAgICAgICAgaWYgKHBhdHRlcm5PZmZzZXRZKSB7XG4gICAgICAgICAgcGF0dGVybkhlaWdodCArPSBNYXRoLmFicyhwYXR0ZXJuT2Zmc2V0WSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJlcGVhdCA9PT0gJ3JlcGVhdC15JyB8fCB0aGlzLnJlcGVhdCA9PT0gJ25vLXJlcGVhdCcpIHtcbiAgICAgICAgcGF0dGVybldpZHRoID0gMTtcbiAgICAgICAgaWYgKHBhdHRlcm5PZmZzZXRYKSB7XG4gICAgICAgICAgcGF0dGVybldpZHRoICs9IE1hdGguYWJzKHBhdHRlcm5PZmZzZXRYKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgICBpZiAocGF0dGVyblNvdXJjZS5zcmMpIHtcbiAgICAgICAgcGF0dGVybkltZ1NyYyA9IHBhdHRlcm5Tb3VyY2Uuc3JjO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAocGF0dGVyblNvdXJjZS50b0RhdGFVUkwpIHtcbiAgICAgICAgcGF0dGVybkltZ1NyYyA9IHBhdHRlcm5Tb3VyY2UudG9EYXRhVVJMKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnPHBhdHRlcm4gaWQ9XCJTVkdJRF8nICsgdGhpcy5pZCArXG4gICAgICAgICAgICAgICAgICAgICdcIiB4PVwiJyArIHBhdHRlcm5PZmZzZXRYICtcbiAgICAgICAgICAgICAgICAgICAgJ1wiIHk9XCInICsgcGF0dGVybk9mZnNldFkgK1xuICAgICAgICAgICAgICAgICAgICAnXCIgd2lkdGg9XCInICsgcGF0dGVybldpZHRoICtcbiAgICAgICAgICAgICAgICAgICAgJ1wiIGhlaWdodD1cIicgKyBwYXR0ZXJuSGVpZ2h0ICsgJ1wiPlxcbicgK1xuICAgICAgICAgICAgICAgJzxpbWFnZSB4PVwiMFwiIHk9XCIwXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAnIHdpZHRoPVwiJyArIHBhdHRlcm5Tb3VyY2Uud2lkdGggK1xuICAgICAgICAgICAgICAgICAgICAgICdcIiBoZWlnaHQ9XCInICsgcGF0dGVyblNvdXJjZS5oZWlnaHQgK1xuICAgICAgICAgICAgICAgICAgICAgICdcIiB4bGluazpocmVmPVwiJyArIHBhdHRlcm5JbWdTcmMgK1xuICAgICAgICAgICAgICAgJ1wiPjwvaW1hZ2U+XFxuJyArXG4gICAgICAgICAgICAgJzwvcGF0dGVybj5cXG4nO1xuICAgIH0sXG4gICAgLyogX1RPX1NWR19FTkRfICovXG5cbiAgICBzZXRPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpc1twcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2YgQ2FudmFzUGF0dGVyblxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byBjcmVhdGUgcGF0dGVyblxuICAgICAqIEByZXR1cm4ge0NhbnZhc1BhdHRlcm59XG4gICAgICovXG4gICAgdG9MaXZlOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgIC8vIGlmIHRoZSBpbWFnZSBmYWlsZWQgdG8gbG9hZCwgcmV0dXJuLCBhbmQgYWxsb3cgcmVzdCB0byBjb250aW51ZSBsb2FkaW5nXG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGFuIGltYWdlXG4gICAgICBpZiAodHlwZW9mIHNvdXJjZS5zcmMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICghc291cmNlLmNvbXBsZXRlKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3VyY2UubmF0dXJhbFdpZHRoID09PSAwIHx8IHNvdXJjZS5uYXR1cmFsSGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY3R4LmNyZWF0ZVBhdHRlcm4oc291cmNlLCB0aGlzLnJlcGVhdCk7XG4gICAgfVxuICB9KTtcbn0pKCk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICB0b0ZpeGVkID0gZmFicmljLnV0aWwudG9GaXhlZDtcblxuICBpZiAoZmFicmljLlNoYWRvdykge1xuICAgIGZhYnJpYy53YXJuKCdmYWJyaWMuU2hhZG93IGlzIGFscmVhZHkgZGVmaW5lZC4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2hhZG93IGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuU2hhZG93XG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vc2hhZG93c3xTaGFkb3cgZGVtb31cbiAgICogQHNlZSB7QGxpbmsgZmFicmljLlNoYWRvdyNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKi9cbiAgZmFicmljLlNoYWRvdyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKC8qKiBAbGVuZHMgZmFicmljLlNoYWRvdy5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogU2hhZG93IGNvbG9yXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjb2xvcjogJ3JnYigwLDAsMCknLFxuXG4gICAgLyoqXG4gICAgICogU2hhZG93IGJsdXJcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKi9cbiAgICBibHVyOiAwLFxuXG4gICAgLyoqXG4gICAgICogU2hhZG93IGhvcml6b250YWwgb2Zmc2V0XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBvZmZzZXRYOiAwLFxuXG4gICAgLyoqXG4gICAgICogU2hhZG93IHZlcnRpY2FsIG9mZnNldFxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgb2Zmc2V0WTogMCxcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHNoYWRvdyBzaG91bGQgYWZmZWN0IHN0cm9rZSBvcGVyYXRpb25zXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgYWZmZWN0U3Ryb2tlOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRvT2JqZWN0IHNob3VsZCBpbmNsdWRlIGRlZmF1bHQgdmFsdWVzXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgaW5jbHVkZURlZmF1bHRWYWx1ZXM6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGBmYWxzZWAsIHRoZSBzaGFkb3cgd2lsbCBzY2FsZSB3aXRoIHRoZSBvYmplY3QuXG4gICAgICogV2hlbiBgdHJ1ZWAsIHRoZSBzaGFkb3cncyBvZmZzZXRYLCBvZmZzZXRZLCBhbmQgYmx1ciB3aWxsIG5vdCBiZSBhZmZlY3RlZCBieSB0aGUgb2JqZWN0J3Mgc2NhbGUuXG4gICAgICogZGVmYXVsdCB0byBmYWxzZVxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG5vblNjYWxpbmc6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdCB3aXRoIGFueSBvZiBjb2xvciwgYmx1ciwgb2Zmc2V0WCwgb2Zmc2V0WSBwcm9wZXJ0aWVzIG9yIHN0cmluZyAoZS5nLiBcInJnYmEoMCwwLDAsMC4yKSAycHggMnB4IDEwcHhcIilcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuU2hhZG93fSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLl9wYXJzZVNoYWRvdyhvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBvcHRpb25zKSB7XG4gICAgICAgIHRoaXNbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmlkID0gZmFicmljLk9iamVjdC5fX3VpZCsrO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzaGFkb3cgU2hhZG93IHZhbHVlIHRvIHBhcnNlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBTaGFkb3cgb2JqZWN0IHdpdGggY29sb3IsIG9mZnNldFgsIG9mZnNldFkgYW5kIGJsdXJcbiAgICAgKi9cbiAgICBfcGFyc2VTaGFkb3c6IGZ1bmN0aW9uKHNoYWRvdykge1xuICAgICAgdmFyIHNoYWRvd1N0ciA9IHNoYWRvdy50cmltKCksXG4gICAgICAgICAgb2Zmc2V0c0FuZEJsdXIgPSBmYWJyaWMuU2hhZG93LnJlT2Zmc2V0c0FuZEJsdXIuZXhlYyhzaGFkb3dTdHIpIHx8IFtdLFxuICAgICAgICAgIGNvbG9yID0gc2hhZG93U3RyLnJlcGxhY2UoZmFicmljLlNoYWRvdy5yZU9mZnNldHNBbmRCbHVyLCAnJykgfHwgJ3JnYigwLDAsMCknO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb2xvcjogY29sb3IudHJpbSgpLFxuICAgICAgICBvZmZzZXRYOiBwYXJzZUZsb2F0KG9mZnNldHNBbmRCbHVyWzFdLCAxMCkgfHwgMCxcbiAgICAgICAgb2Zmc2V0WTogcGFyc2VGbG9hdChvZmZzZXRzQW5kQmx1clsyXSwgMTApIHx8IDAsXG4gICAgICAgIGJsdXI6IHBhcnNlRmxvYXQob2Zmc2V0c0FuZEJsdXJbM10sIDEwKSB8fCAwXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MtdGV4dC1kZWNvci0zLyN0ZXh0LXNoYWRvd1xuICAgICAqIEByZXR1cm4ge1N0cmluZ30gUmV0dXJucyBDU1MzIHRleHQtc2hhZG93IGRlY2xhcmF0aW9uXG4gICAgICovXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFt0aGlzLm9mZnNldFgsIHRoaXMub2Zmc2V0WSwgdGhpcy5ibHVyLCB0aGlzLmNvbG9yXS5qb2luKCdweCAnKTtcbiAgICB9LFxuXG4gICAgLyogX1RPX1NWR19TVEFSVF8gKi9cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIFNWRyByZXByZXNlbnRhdGlvbiBvZiBhIHNoYWRvd1xuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0XG4gICAgICogQHJldHVybiB7U3RyaW5nfSBTVkcgcmVwcmVzZW50YXRpb24gb2YgYSBzaGFkb3dcbiAgICAgKi9cbiAgICB0b1NWRzogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgZkJveFggPSA0MCwgZkJveFkgPSA0MCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyA9IGZhYnJpYy5PYmplY3QuTlVNX0ZSQUNUSU9OX0RJR0lUUyxcbiAgICAgICAgICBvZmZzZXQgPSBmYWJyaWMudXRpbC5yb3RhdGVWZWN0b3IoXG4gICAgICAgICAgICB7IHg6IHRoaXMub2Zmc2V0WCwgeTogdGhpcy5vZmZzZXRZIH0sXG4gICAgICAgICAgICBmYWJyaWMudXRpbC5kZWdyZWVzVG9SYWRpYW5zKC1vYmplY3QuYW5nbGUpKSxcbiAgICAgICAgICBCTFVSX0JPWCA9IDIwLCBjb2xvciA9IG5ldyBmYWJyaWMuQ29sb3IodGhpcy5jb2xvcik7XG5cbiAgICAgIGlmIChvYmplY3Qud2lkdGggJiYgb2JqZWN0LmhlaWdodCkge1xuICAgICAgICAvL2h0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9maWx0ZXJzLmh0bWwjRmlsdGVyRWZmZWN0c1JlZ2lvblxuICAgICAgICAvLyB3ZSBhZGQgc29tZSBleHRyYSBzcGFjZSB0byBmaWx0ZXIgYm94IHRvIGNvbnRhaW4gdGhlIGJsdXIgKCAyMCApXG4gICAgICAgIGZCb3hYID0gdG9GaXhlZCgoTWF0aC5hYnMob2Zmc2V0LngpICsgdGhpcy5ibHVyKSAvIG9iamVjdC53aWR0aCwgTlVNX0ZSQUNUSU9OX0RJR0lUUykgKiAxMDAgKyBCTFVSX0JPWDtcbiAgICAgICAgZkJveFkgPSB0b0ZpeGVkKChNYXRoLmFicyhvZmZzZXQueSkgKyB0aGlzLmJsdXIpIC8gb2JqZWN0LmhlaWdodCwgTlVNX0ZSQUNUSU9OX0RJR0lUUykgKiAxMDAgKyBCTFVSX0JPWDtcbiAgICAgIH1cbiAgICAgIGlmIChvYmplY3QuZmxpcFgpIHtcbiAgICAgICAgb2Zmc2V0LnggKj0gLTE7XG4gICAgICB9XG4gICAgICBpZiAob2JqZWN0LmZsaXBZKSB7XG4gICAgICAgIG9mZnNldC55ICo9IC0xO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKFxuICAgICAgICAnPGZpbHRlciBpZD1cIlNWR0lEXycgKyB0aGlzLmlkICsgJ1wiIHk9XCItJyArIGZCb3hZICsgJyVcIiBoZWlnaHQ9XCInICsgKDEwMCArIDIgKiBmQm94WSkgKyAnJVwiICcgK1xuICAgICAgICAgICd4PVwiLScgKyBmQm94WCArICclXCIgd2lkdGg9XCInICsgKDEwMCArIDIgKiBmQm94WCkgKyAnJVwiICcgKyAnPlxcbicgK1xuICAgICAgICAgICdcXHQ8ZmVHYXVzc2lhbkJsdXIgaW49XCJTb3VyY2VBbHBoYVwiIHN0ZERldmlhdGlvbj1cIicgK1xuICAgICAgICAgICAgdG9GaXhlZCh0aGlzLmJsdXIgPyB0aGlzLmJsdXIgLyAyIDogMCwgTlVNX0ZSQUNUSU9OX0RJR0lUUykgKyAnXCI+PC9mZUdhdXNzaWFuQmx1cj5cXG4nICtcbiAgICAgICAgICAnXFx0PGZlT2Zmc2V0IGR4PVwiJyArIHRvRml4ZWQob2Zmc2V0LngsIE5VTV9GUkFDVElPTl9ESUdJVFMpICtcbiAgICAgICAgICAnXCIgZHk9XCInICsgdG9GaXhlZChvZmZzZXQueSwgTlVNX0ZSQUNUSU9OX0RJR0lUUykgKyAnXCIgcmVzdWx0PVwib0JsdXJcIiA+PC9mZU9mZnNldD5cXG4nICtcbiAgICAgICAgICAnXFx0PGZlRmxvb2QgZmxvb2QtY29sb3I9XCInICsgY29sb3IudG9SZ2IoKSArICdcIiBmbG9vZC1vcGFjaXR5PVwiJyArIGNvbG9yLmdldEFscGhhKCkgKyAnXCIvPlxcbicgK1xuICAgICAgICAgICdcXHQ8ZmVDb21wb3NpdGUgaW4yPVwib0JsdXJcIiBvcGVyYXRvcj1cImluXCIgLz5cXG4nICtcbiAgICAgICAgICAnXFx0PGZlTWVyZ2U+XFxuJyArXG4gICAgICAgICAgICAnXFx0XFx0PGZlTWVyZ2VOb2RlPjwvZmVNZXJnZU5vZGU+XFxuJyArXG4gICAgICAgICAgICAnXFx0XFx0PGZlTWVyZ2VOb2RlIGluPVwiU291cmNlR3JhcGhpY1wiPjwvZmVNZXJnZU5vZGU+XFxuJyArXG4gICAgICAgICAgJ1xcdDwvZmVNZXJnZT5cXG4nICtcbiAgICAgICAgJzwvZmlsdGVyPlxcbicpO1xuICAgIH0sXG4gICAgLyogX1RPX1NWR19FTkRfICovXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhIHNoYWRvd1xuICAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGEgc2hhZG93IGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuaW5jbHVkZURlZmF1bHRWYWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb2xvcjogdGhpcy5jb2xvcixcbiAgICAgICAgICBibHVyOiB0aGlzLmJsdXIsXG4gICAgICAgICAgb2Zmc2V0WDogdGhpcy5vZmZzZXRYLFxuICAgICAgICAgIG9mZnNldFk6IHRoaXMub2Zmc2V0WSxcbiAgICAgICAgICBhZmZlY3RTdHJva2U6IHRoaXMuYWZmZWN0U3Ryb2tlLFxuICAgICAgICAgIG5vblNjYWxpbmc6IHRoaXMubm9uU2NhbGluZ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFyIG9iaiA9IHsgfSwgcHJvdG8gPSBmYWJyaWMuU2hhZG93LnByb3RvdHlwZTtcblxuICAgICAgWydjb2xvcicsICdibHVyJywgJ29mZnNldFgnLCAnb2Zmc2V0WScsICdhZmZlY3RTdHJva2UnLCAnbm9uU2NhbGluZyddLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICBpZiAodGhpc1twcm9wXSAhPT0gcHJvdG9bcHJvcF0pIHtcbiAgICAgICAgICBvYmpbcHJvcF0gPSB0aGlzW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9LCB0aGlzKTtcblxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZWdleCBtYXRjaGluZyBzaGFkb3cgb2Zmc2V0WCwgb2Zmc2V0WSBhbmQgYmx1ciAoZXg6IFwiMnB4IDJweCAxMHB4IHJnYmEoMCwwLDAsMC4yKVwiLCBcInJnYigwLDI1NSwwKSAycHggMnB4XCIpXG4gICAqIEBzdGF0aWNcbiAgICogQGZpZWxkXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuU2hhZG93XG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICBmYWJyaWMuU2hhZG93LnJlT2Zmc2V0c0FuZEJsdXIgPSAvKD86XFxzfF4pKC0/XFxkKyg/OlxcLlxcZCopPyg/OnB4KT8oPzpcXHM/fCQpKT8oLT9cXGQrKD86XFwuXFxkKik/KD86cHgpPyg/Olxccz98JCkpPyhcXGQrKD86XFwuXFxkKik/KD86cHgpPyk/KD86XFxzP3wkKSg/OiR8XFxzKS87XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24gKCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoZmFicmljLlN0YXRpY0NhbnZhcykge1xuICAgIGZhYnJpYy53YXJuKCdmYWJyaWMuU3RhdGljQ2FudmFzIGlzIGFscmVhZHkgZGVmaW5lZC4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBhbGlhc2VzIGZvciBmYXN0ZXIgcmVzb2x1dGlvblxuICB2YXIgZXh0ZW5kID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCxcbiAgICAgIGdldEVsZW1lbnRPZmZzZXQgPSBmYWJyaWMudXRpbC5nZXRFbGVtZW50T2Zmc2V0LFxuICAgICAgcmVtb3ZlRnJvbUFycmF5ID0gZmFicmljLnV0aWwucmVtb3ZlRnJvbUFycmF5LFxuICAgICAgdG9GaXhlZCA9IGZhYnJpYy51dGlsLnRvRml4ZWQsXG4gICAgICB0cmFuc2Zvcm1Qb2ludCA9IGZhYnJpYy51dGlsLnRyYW5zZm9ybVBvaW50LFxuICAgICAgaW52ZXJ0VHJhbnNmb3JtID0gZmFicmljLnV0aWwuaW52ZXJ0VHJhbnNmb3JtLFxuICAgICAgZ2V0Tm9kZUNhbnZhcyA9IGZhYnJpYy51dGlsLmdldE5vZGVDYW52YXMsXG4gICAgICBjcmVhdGVDYW52YXNFbGVtZW50ID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCxcblxuICAgICAgQ0FOVkFTX0lOSVRfRVJST1IgPSBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBpbml0aWFsaXplIGBjYW52YXNgIGVsZW1lbnQnKTtcblxuICAvKipcbiAgICogU3RhdGljIGNhbnZhcyBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLlN0YXRpY0NhbnZhc1xuICAgKiBAbWl4ZXMgZmFicmljLkNvbGxlY3Rpb25cbiAgICogQG1peGVzIGZhYnJpYy5PYnNlcnZhYmxlXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vc3RhdGljX2NhbnZhc3xTdGF0aWNDYW52YXMgZGVtb31cbiAgICogQHNlZSB7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcyNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKiBAZmlyZXMgYmVmb3JlOnJlbmRlclxuICAgKiBAZmlyZXMgYWZ0ZXI6cmVuZGVyXG4gICAqIEBmaXJlcyBjYW52YXM6Y2xlYXJlZFxuICAgKiBAZmlyZXMgb2JqZWN0OmFkZGVkXG4gICAqIEBmaXJlcyBvYmplY3Q6cmVtb3ZlZFxuICAgKi9cbiAgZmFicmljLlN0YXRpY0NhbnZhcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5Db21tb25NZXRob2RzLCAvKiogQGxlbmRzIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudCB8IFN0cmluZ30gZWwgJmx0O2NhbnZhcz4gZWxlbWVudCB0byBpbml0aWFsaXplIGluc3RhbmNlIG9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGVsLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0geyB9KTtcbiAgICAgIHRoaXMucmVuZGVyQW5kUmVzZXRCb3VuZCA9IHRoaXMucmVuZGVyQW5kUmVzZXQuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMucmVxdWVzdFJlbmRlckFsbEJvdW5kID0gdGhpcy5yZXF1ZXN0UmVuZGVyQWxsLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9pbml0U3RhdGljKGVsLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQmFja2dyb3VuZCBjb2xvciBvZiBjYW52YXMgaW5zdGFuY2UuXG4gICAgICogU2hvdWxkIGJlIHNldCB2aWEge0BsaW5rIGZhYnJpYy5TdGF0aWNDYW52YXMjc2V0QmFja2dyb3VuZENvbG9yfS5cbiAgICAgKiBAdHlwZSB7KFN0cmluZ3xmYWJyaWMuUGF0dGVybil9XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcnLFxuXG4gICAgLyoqXG4gICAgICogQmFja2dyb3VuZCBpbWFnZSBvZiBjYW52YXMgaW5zdGFuY2UuXG4gICAgICogc2luY2UgMi40LjAgaW1hZ2UgY2FjaGluZyBpcyBhY3RpdmUsIHBsZWFzZSB3aGVuIHB1dHRpbmcgYW4gaW1hZ2UgYXMgYmFja2dyb3VuZCwgYWRkIHRvIHRoZVxuICAgICAqIGNhbnZhcyBwcm9wZXJ0eSBhIHJlZmVyZW5jZSB0byB0aGUgY2FudmFzIGl0IGlzIG9uLiBPdGhlcndpc2UgdGhlIGltYWdlIGNhbm5vdCBkZXRlY3QgdGhlIHpvb21cbiAgICAgKiB2YWxlLiBBcyBhbiBhbHRlcm5hdGl2ZSB5b3UgY2FuIGRpc2FibGUgaW1hZ2Ugb2JqZWN0Q2FjaGluZ1xuICAgICAqIEB0eXBlIGZhYnJpYy5JbWFnZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgYmFja2dyb3VuZEltYWdlOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogT3ZlcmxheSBjb2xvciBvZiBjYW52YXMgaW5zdGFuY2UuXG4gICAgICogU2hvdWxkIGJlIHNldCB2aWEge0BsaW5rIGZhYnJpYy5TdGF0aWNDYW52YXMjc2V0T3ZlcmxheUNvbG9yfVxuICAgICAqIEBzaW5jZSAxLjMuOVxuICAgICAqIEB0eXBlIHsoU3RyaW5nfGZhYnJpYy5QYXR0ZXJuKX1cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG92ZXJsYXlDb2xvcjogJycsXG5cbiAgICAvKipcbiAgICAgKiBPdmVybGF5IGltYWdlIG9mIGNhbnZhcyBpbnN0YW5jZS5cbiAgICAgKiBzaW5jZSAyLjQuMCBpbWFnZSBjYWNoaW5nIGlzIGFjdGl2ZSwgcGxlYXNlIHdoZW4gcHV0dGluZyBhbiBpbWFnZSBhcyBvdmVybGF5LCBhZGQgdG8gdGhlXG4gICAgICogY2FudmFzIHByb3BlcnR5IGEgcmVmZXJlbmNlIHRvIHRoZSBjYW52YXMgaXQgaXMgb24uIE90aGVyd2lzZSB0aGUgaW1hZ2UgY2Fubm90IGRldGVjdCB0aGUgem9vbVxuICAgICAqIHZhbGUuIEFzIGFuIGFsdGVybmF0aXZlIHlvdSBjYW4gZGlzYWJsZSBpbWFnZSBvYmplY3RDYWNoaW5nXG4gICAgICogQHR5cGUgZmFicmljLkltYWdlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBvdmVybGF5SW1hZ2U6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0b09iamVjdC90b0RhdGFsZXNzT2JqZWN0IHNob3VsZCBpbmNsdWRlIGRlZmF1bHQgdmFsdWVzXG4gICAgICogaWYgc2V0IHRvIGZhbHNlLCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhlIG9iamVjdCB2YWx1ZS5cbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBpbmNsdWRlRGVmYXVsdFZhbHVlczogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIG9iamVjdHMnIHN0YXRlIHNob3VsZCBiZSBzYXZlZFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHN0YXRlZnVsOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHtAbGluayBmYWJyaWMuQ29sbGVjdGlvbi5hZGR9LCB7QGxpbmsgZmFicmljLkNvbGxlY3Rpb24uaW5zZXJ0QXR9IGFuZCB7QGxpbmsgZmFicmljLkNvbGxlY3Rpb24ucmVtb3ZlfSxcbiAgICAgKiB7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcy5tb3ZlVG99LCB7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcy5jbGVhcn0gYW5kIG1hbnkgbW9yZSwgc2hvdWxkIGFsc28gcmUtcmVuZGVyIGNhbnZhcy5cbiAgICAgKiBEaXNhYmxpbmcgdGhpcyBvcHRpb24gd2lsbCBub3QgZ2l2ZSBhIHBlcmZvcm1hbmNlIGJvb3N0IHdoZW4gYWRkaW5nL3JlbW92aW5nIGEgbG90IG9mIG9iamVjdHMgdG8vZnJvbSBjYW52YXMgYXQgb25jZVxuICAgICAqIHNpbmNlIHRoZSByZW5kZXJzIGFyZSBxdWVxdWVkIGFuZCBleGVjdXRlZCBvbmUgcGVyIGZyYW1lLlxuICAgICAqIERpc2FibGluZyBpcyBzdWdnZXN0ZWQgYW55d2F5IGFuZCBtYW5hZ2luZyB0aGUgcmVuZGVycyBvZiB0aGUgYXBwIG1hbnVhbGx5IGlzIG5vdCBhIGJpZyBlZmZvcnQgKCBjYW52YXMucmVxdWVzdFJlbmRlckFsbCgpIClcbiAgICAgKiBMZWZ0IGRlZmF1bHQgdG8gdHJ1ZSB0byBkbyBub3QgYnJlYWsgZG9jdW1lbnRhdGlvbiBhbmQgb2xkIGFwcCwgZmlkZGxlcy5cbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICByZW5kZXJPbkFkZFJlbW92ZTogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIG9iamVjdCBjb250cm9scyAoYm9yZGVycy9jb250cm9scykgYXJlIHJlbmRlcmVkIGFib3ZlIG92ZXJsYXkgaW1hZ2VcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjb250cm9sc0Fib3ZlT3ZlcmxheTogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYnJvd3NlciBjYW4gYmUgc2Nyb2xsZWQgd2hlbiB1c2luZyBhIHRvdWNoc2NyZWVuIGFuZCBkcmFnZ2luZyBvbiB0aGUgY2FudmFzXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgYWxsb3dUb3VjaFNjcm9sbGluZzogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIGNhbnZhcyB3aWxsIHVzZSBpbWFnZSBzbW9vdGhpbmcsIHRoaXMgaXMgb24gYnkgZGVmYXVsdCBpbiBicm93c2Vyc1xuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGltYWdlU21vb3RoaW5nRW5hYmxlZDogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIFRoZSB0cmFuc2Zvcm1hdGlvbiAoYSBDYW52YXMgMkQgQVBJIHRyYW5zZm9ybSBtYXRyaXgpIHdoaWNoIGZvY3VzZXMgdGhlIHZpZXdwb3J0XG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5EZWZhdWx0IHRyYW5zZm9ybTwvY2FwdGlvbj5cbiAgICAgKiBjYW52YXMudmlld3BvcnRUcmFuc2Zvcm0gPSBbMSwgMCwgMCwgMSwgMCwgMF07XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+U2NhbGUgYnkgNzAlIGFuZCB0cmFuc2xhdGUgdG93YXJkIGJvdHRvbS1yaWdodCBieSA1MCwgd2l0aG91dCBza2V3aW5nPC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy52aWV3cG9ydFRyYW5zZm9ybSA9IFswLjcsIDAsIDAsIDAuNywgNTAsIDUwXTtcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHZpZXdwb3J0VHJhbnNmb3JtOiBmYWJyaWMuaU1hdHJpeC5jb25jYXQoKSxcblxuICAgIC8qKlxuICAgICAqIGlmIHNldCB0byBmYWxzZSBiYWNrZ3JvdW5kIGltYWdlIGlzIG5vdCBhZmZlY3RlZCBieSB2aWV3cG9ydCB0cmFuc2Zvcm1cbiAgICAgKiBAc2luY2UgMS42LjNcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBiYWNrZ3JvdW5kVnB0OiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogaWYgc2V0IHRvIGZhbHNlIG92ZXJseWEgaW1hZ2UgaXMgbm90IGFmZmVjdGVkIGJ5IHZpZXdwb3J0IHRyYW5zZm9ybVxuICAgICAqIEBzaW5jZSAxLjYuM1xuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG92ZXJsYXlWcHQ6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIGNhbnZhcyBpcyBzY2FsZWQgYnkgZGV2aWNlUGl4ZWxSYXRpbyBmb3IgYmV0dGVyIHJlbmRlcmluZyBvbiByZXRpbmEgc2NyZWVuc1xuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGVuYWJsZVJldGluYVNjYWxpbmc6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmliZSBjYW52YXMgZWxlbWVudCBleHRlbnNpb24gb3ZlciBkZXNpZ25cbiAgICAgKiBwcm9wZXJ0aWVzIGFyZSB0bCx0cixibCxici5cbiAgICAgKiBpZiBjYW52YXMgaXMgbm90IHpvb21lZC9wYW5uZWQgdGhvc2UgcG9pbnRzIGFyZSB0aGUgZm91ciBjb3JuZXIgb2YgY2FudmFzXG4gICAgICogaWYgY2FudmFzIGlzIHZpZXdwb3J0VHJhbnNmb3JtZWQgeW91IHRob3NlIHBvaW50cyBpbmRpY2F0ZSB0aGUgZXh0ZW5zaW9uXG4gICAgICogb2YgY2FudmFzIGVsZW1lbnQgaW4gcGxhaW4gdW50cmFzZm9ybWVkIGNvb3JkaW5hdGVzXG4gICAgICogVGhlIGNvb3JkaW5hdGVzIGdldCB1cGRhdGVkIHdpdGggQG1ldGhvZCBjYWxjVmlld3BvcnRCb3VuZGFyaWVzLlxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZVxuICAgICAqL1xuICAgIHZwdENvb3JkczogeyB9LFxuXG4gICAgLyoqXG4gICAgICogQmFzZWQgb24gdnB0Q29vcmRzIGFuZCBvYmplY3QuYUNvb3Jkcywgc2tpcCByZW5kZXJpbmcgb2Ygb2JqZWN0cyB0aGF0XG4gICAgICogYXJlIG5vdCBpbmNsdWRlZCBpbiBjdXJyZW50IHZpZXdwb3J0LlxuICAgICAqIE1heSBncmVhdGx5IGhlbHAgaW4gYXBwbGljYXRpb25zIHdpdGggY3Jvd2RlZCBjYW52YXMgYW5kIHVzZSBvZiB6b29tL3BhblxuICAgICAqIElmIE9uZSBvZiB0aGUgY29ybmVyIG9mIHRoZSBib3VuZGluZyBib3ggb2YgdGhlIG9iamVjdCBpcyBvbiB0aGUgY2FudmFzXG4gICAgICogdGhlIG9iamVjdHMgZ2V0IHJlbmRlcmVkLlxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZVxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNraXBPZmZzY3JlZW46IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBhIGZhYnJpY09iamVjdCB0aGF0LCB3aXRob3V0IHN0cm9rZSBkZWZpbmUgYSBjbGlwcGluZyBhcmVhIHdpdGggdGhlaXIgc2hhcGUuIGZpbGxlZCBpbiBibGFja1xuICAgICAqIHRoZSBjbGlwUGF0aCBvYmplY3QgZ2V0cyB1c2VkIHdoZW4gdGhlIGNhbnZhcyBoYXMgcmVuZGVyZWQsIGFuZCB0aGUgY29udGV4dCBpcyBwbGFjZWQgaW4gdGhlXG4gICAgICogdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBjYW52YXMuXG4gICAgICogY2xpcFBhdGggd2lsbCBjbGlwIGF3YXkgY29udHJvbHMsIGlmIHlvdSBkbyBub3Qgd2FudCB0aGlzIHRvIGhhcHBlbiB1c2UgY29udHJvbHNBYm92ZU92ZXJsYXkgPSB0cnVlXG4gICAgICogQHR5cGUgZmFicmljLk9iamVjdFxuICAgICAqL1xuICAgIGNsaXBQYXRoOiB1bmRlZmluZWQsXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnQgfCBTdHJpbmd9IGVsICZsdDtjYW52YXM+IGVsZW1lbnQgdG8gaW5pdGlhbGl6ZSBpbnN0YW5jZSBvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKi9cbiAgICBfaW5pdFN0YXRpYzogZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjYiA9IHRoaXMucmVxdWVzdFJlbmRlckFsbEJvdW5kO1xuICAgICAgdGhpcy5fb2JqZWN0cyA9IFtdO1xuICAgICAgdGhpcy5fY3JlYXRlTG93ZXJDYW52YXMoZWwpO1xuICAgICAgdGhpcy5faW5pdE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAvLyBvbmx5IGluaXRpYWxpemUgcmV0aW5hIHNjYWxpbmcgb25jZVxuICAgICAgaWYgKCF0aGlzLmludGVyYWN0aXZlKSB7XG4gICAgICAgIHRoaXMuX2luaXRSZXRpbmFTY2FsaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLm92ZXJsYXlJbWFnZSkge1xuICAgICAgICB0aGlzLnNldE92ZXJsYXlJbWFnZShvcHRpb25zLm92ZXJsYXlJbWFnZSwgY2IpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuYmFja2dyb3VuZEltYWdlKSB7XG4gICAgICAgIHRoaXMuc2V0QmFja2dyb3VuZEltYWdlKG9wdGlvbnMuYmFja2dyb3VuZEltYWdlLCBjYik7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgdGhpcy5zZXRCYWNrZ3JvdW5kQ29sb3Iob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsIGNiKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLm92ZXJsYXlDb2xvcikge1xuICAgICAgICB0aGlzLnNldE92ZXJsYXlDb2xvcihvcHRpb25zLm92ZXJsYXlDb2xvciwgY2IpO1xuICAgICAgfVxuICAgICAgdGhpcy5jYWxjT2Zmc2V0KCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2lzUmV0aW5hU2NhbGluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKGZhYnJpYy5kZXZpY2VQaXhlbFJhdGlvID4gMSAmJiB0aGlzLmVuYWJsZVJldGluYVNjYWxpbmcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4ge051bWJlcn0gcmV0aW5hU2NhbGluZyBpZiBhcHBsaWVkLCBvdGhlcndpc2UgMTtcbiAgICAgKi9cbiAgICBnZXRSZXRpbmFTY2FsaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc1JldGluYVNjYWxpbmcoKSA/IE1hdGgubWF4KDEsIGZhYnJpYy5kZXZpY2VQaXhlbFJhdGlvKSA6IDE7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2luaXRSZXRpbmFTY2FsaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5faXNSZXRpbmFTY2FsaW5nKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHNjYWxlUmF0aW8gPSBmYWJyaWMuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgIHRoaXMuX19pbml0UmV0aW5hU2NhbGluZyhzY2FsZVJhdGlvLCB0aGlzLmxvd2VyQ2FudmFzRWwsIHRoaXMuY29udGV4dENvbnRhaW5lcik7XG4gICAgICBpZiAodGhpcy51cHBlckNhbnZhc0VsKSB7XG4gICAgICAgIHRoaXMuX19pbml0UmV0aW5hU2NhbGluZyhzY2FsZVJhdGlvLCB0aGlzLnVwcGVyQ2FudmFzRWwsIHRoaXMuY29udGV4dFRvcCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9faW5pdFJldGluYVNjYWxpbmc6IGZ1bmN0aW9uKHNjYWxlUmF0aW8sIGNhbnZhcywgY29udGV4dCkge1xuICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLndpZHRoICogc2NhbGVSYXRpbyk7XG4gICAgICBjYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmhlaWdodCAqIHNjYWxlUmF0aW8pO1xuICAgICAgY29udGV4dC5zY2FsZShzY2FsZVJhdGlvLCBzY2FsZVJhdGlvKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGNhbnZhcyBlbGVtZW50IG9mZnNldCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnRcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBhbHNvIGF0dGFjaGVkIGFzIFwicmVzaXplXCIgZXZlbnQgaGFuZGxlciBvZiB3aW5kb3dcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBjYWxjT2Zmc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9vZmZzZXQgPSBnZXRFbGVtZW50T2Zmc2V0KHRoaXMubG93ZXJDYW52YXNFbCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcyNvdmVybGF5SW1hZ2V8b3ZlcmxheSBpbWFnZX0gZm9yIHRoaXMgY2FudmFzXG4gICAgICogQHBhcmFtIHsoZmFicmljLkltYWdlfFN0cmluZyl9IGltYWdlIGZhYnJpYy5JbWFnZSBpbnN0YW5jZSBvciBVUkwgb2YgYW4gaW1hZ2UgdG8gc2V0IG92ZXJsYXkgdG9cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBjYWxsYmFjayB0byBpbnZva2Ugd2hlbiBpbWFnZSBpcyBsb2FkZWQgYW5kIHNldCBhcyBhbiBvdmVybGF5XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBvcHRpb25zIHRvIHNldCBmb3IgdGhlIHtAbGluayBmYWJyaWMuSW1hZ2V8b3ZlcmxheSBpbWFnZX0uXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKiBAc2VlIHtAbGluayBodHRwOi8vanNmaWRkbGUubmV0L2ZhYnJpY2pzL01uekhUL3xqc0ZpZGRsZSBkZW1vfVxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPk5vcm1hbCBvdmVybGF5SW1hZ2Ugd2l0aCBsZWZ0L3RvcCA9IDA8L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldE92ZXJsYXlJbWFnZSgnaHR0cDovL2ZhYnJpY2pzLmNvbS9hc3NldHMvamFpbF9jZWxsX2JhcnMucG5nJywgY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcyksIHtcbiAgICAgKiAgIC8vIE5lZWRlZCB0byBwb3NpdGlvbiBvdmVybGF5SW1hZ2UgYXQgMC8wXG4gICAgICogICBvcmlnaW5YOiAnbGVmdCcsXG4gICAgICogICBvcmlnaW5ZOiAndG9wJ1xuICAgICAqIH0pO1xuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPm92ZXJsYXlJbWFnZSB3aXRoIGRpZmZlcmVudCBwcm9wZXJ0aWVzPC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy5zZXRPdmVybGF5SW1hZ2UoJ2h0dHA6Ly9mYWJyaWNqcy5jb20vYXNzZXRzL2phaWxfY2VsbF9iYXJzLnBuZycsIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpLCB7XG4gICAgICogICBvcGFjaXR5OiAwLjUsXG4gICAgICogICBhbmdsZTogNDUsXG4gICAgICogICBsZWZ0OiA0MDAsXG4gICAgICogICB0b3A6IDQwMCxcbiAgICAgKiAgIG9yaWdpblg6ICdsZWZ0JyxcbiAgICAgKiAgIG9yaWdpblk6ICd0b3AnXG4gICAgICogfSk7XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+U3RyZXRjaGVkIG92ZXJsYXlJbWFnZSAjMSAtIHdpZHRoL2hlaWdodCBjb3JyZXNwb25kIHRvIGNhbnZhcyB3aWR0aC9oZWlnaHQ8L2NhcHRpb24+XG4gICAgICogZmFicmljLkltYWdlLmZyb21VUkwoJ2h0dHA6Ly9mYWJyaWNqcy5jb20vYXNzZXRzL2phaWxfY2VsbF9iYXJzLnBuZycsIGZ1bmN0aW9uKGltZywgaXNFcnJvcikge1xuICAgICAqICAgIGltZy5zZXQoe3dpZHRoOiBjYW52YXMud2lkdGgsIGhlaWdodDogY2FudmFzLmhlaWdodCwgb3JpZ2luWDogJ2xlZnQnLCBvcmlnaW5ZOiAndG9wJ30pO1xuICAgICAqICAgIGNhbnZhcy5zZXRPdmVybGF5SW1hZ2UoaW1nLCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSk7XG4gICAgICogfSk7XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+U3RyZXRjaGVkIG92ZXJsYXlJbWFnZSAjMiAtIHdpZHRoL2hlaWdodCBjb3JyZXNwb25kIHRvIGNhbnZhcyB3aWR0aC9oZWlnaHQ8L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldE92ZXJsYXlJbWFnZSgnaHR0cDovL2ZhYnJpY2pzLmNvbS9hc3NldHMvamFpbF9jZWxsX2JhcnMucG5nJywgY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcyksIHtcbiAgICAgKiAgIHdpZHRoOiBjYW52YXMud2lkdGgsXG4gICAgICogICBoZWlnaHQ6IGNhbnZhcy5oZWlnaHQsXG4gICAgICogICAvLyBOZWVkZWQgdG8gcG9zaXRpb24gb3ZlcmxheUltYWdlIGF0IDAvMFxuICAgICAqICAgb3JpZ2luWDogJ2xlZnQnLFxuICAgICAqICAgb3JpZ2luWTogJ3RvcCdcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5vdmVybGF5SW1hZ2UgbG9hZGVkIGZyb20gY3Jvc3Mtb3JpZ2luPC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy5zZXRPdmVybGF5SW1hZ2UoJ2h0dHA6Ly9mYWJyaWNqcy5jb20vYXNzZXRzL2phaWxfY2VsbF9iYXJzLnBuZycsIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpLCB7XG4gICAgICogICBvcGFjaXR5OiAwLjUsXG4gICAgICogICBhbmdsZTogNDUsXG4gICAgICogICBsZWZ0OiA0MDAsXG4gICAgICogICB0b3A6IDQwMCxcbiAgICAgKiAgIG9yaWdpblg6ICdsZWZ0JyxcbiAgICAgKiAgIG9yaWdpblk6ICd0b3AnLFxuICAgICAqICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnXG4gICAgICogfSk7XG4gICAgICovXG4gICAgc2V0T3ZlcmxheUltYWdlOiBmdW5jdGlvbiAoaW1hZ2UsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3NldEJnT3ZlcmxheUltYWdlKCdvdmVybGF5SW1hZ2UnLCBpbWFnZSwgY2FsbGJhY2ssIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHtAbGluayBmYWJyaWMuU3RhdGljQ2FudmFzI2JhY2tncm91bmRJbWFnZXxiYWNrZ3JvdW5kIGltYWdlfSBmb3IgdGhpcyBjYW52YXNcbiAgICAgKiBAcGFyYW0geyhmYWJyaWMuSW1hZ2V8U3RyaW5nKX0gaW1hZ2UgZmFicmljLkltYWdlIGluc3RhbmNlIG9yIFVSTCBvZiBhbiBpbWFnZSB0byBzZXQgYmFja2dyb3VuZCB0b1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGltYWdlIGlzIGxvYWRlZCBhbmQgc2V0IGFzIGJhY2tncm91bmRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIG9wdGlvbnMgdG8gc2V0IGZvciB0aGUge0BsaW5rIGZhYnJpYy5JbWFnZXxiYWNrZ3JvdW5kIGltYWdlfS5cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvZGpucjhvN2EvMjgvfGpzRmlkZGxlIGRlbW99XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+Tm9ybWFsIGJhY2tncm91bmRJbWFnZSB3aXRoIGxlZnQvdG9wID0gMDwvY2FwdGlvbj5cbiAgICAgKiBjYW52YXMuc2V0QmFja2dyb3VuZEltYWdlKCdodHRwOi8vZmFicmljanMuY29tL2Fzc2V0cy9ob25leV9pbV9zdWJ0bGUucG5nJywgY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcyksIHtcbiAgICAgKiAgIC8vIE5lZWRlZCB0byBwb3NpdGlvbiBiYWNrZ3JvdW5kSW1hZ2UgYXQgMC8wXG4gICAgICogICBvcmlnaW5YOiAnbGVmdCcsXG4gICAgICogICBvcmlnaW5ZOiAndG9wJ1xuICAgICAqIH0pO1xuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPmJhY2tncm91bmRJbWFnZSB3aXRoIGRpZmZlcmVudCBwcm9wZXJ0aWVzPC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy5zZXRCYWNrZ3JvdW5kSW1hZ2UoJ2h0dHA6Ly9mYWJyaWNqcy5jb20vYXNzZXRzL2hvbmV5X2ltX3N1YnRsZS5wbmcnLCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSwge1xuICAgICAqICAgb3BhY2l0eTogMC41LFxuICAgICAqICAgYW5nbGU6IDQ1LFxuICAgICAqICAgbGVmdDogNDAwLFxuICAgICAqICAgdG9wOiA0MDAsXG4gICAgICogICBvcmlnaW5YOiAnbGVmdCcsXG4gICAgICogICBvcmlnaW5ZOiAndG9wJ1xuICAgICAqIH0pO1xuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPlN0cmV0Y2hlZCBiYWNrZ3JvdW5kSW1hZ2UgIzEgLSB3aWR0aC9oZWlnaHQgY29ycmVzcG9uZCB0byBjYW52YXMgd2lkdGgvaGVpZ2h0PC9jYXB0aW9uPlxuICAgICAqIGZhYnJpYy5JbWFnZS5mcm9tVVJMKCdodHRwOi8vZmFicmljanMuY29tL2Fzc2V0cy9ob25leV9pbV9zdWJ0bGUucG5nJywgZnVuY3Rpb24oaW1nLCBpc0Vycm9yKSB7XG4gICAgICogICAgaW1nLnNldCh7d2lkdGg6IGNhbnZhcy53aWR0aCwgaGVpZ2h0OiBjYW52YXMuaGVpZ2h0LCBvcmlnaW5YOiAnbGVmdCcsIG9yaWdpblk6ICd0b3AnfSk7XG4gICAgICogICAgY2FudmFzLnNldEJhY2tncm91bmRJbWFnZShpbWcsIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5TdHJldGNoZWQgYmFja2dyb3VuZEltYWdlICMyIC0gd2lkdGgvaGVpZ2h0IGNvcnJlc3BvbmQgdG8gY2FudmFzIHdpZHRoL2hlaWdodDwvY2FwdGlvbj5cbiAgICAgKiBjYW52YXMuc2V0QmFja2dyb3VuZEltYWdlKCdodHRwOi8vZmFicmljanMuY29tL2Fzc2V0cy9ob25leV9pbV9zdWJ0bGUucG5nJywgY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcyksIHtcbiAgICAgKiAgIHdpZHRoOiBjYW52YXMud2lkdGgsXG4gICAgICogICBoZWlnaHQ6IGNhbnZhcy5oZWlnaHQsXG4gICAgICogICAvLyBOZWVkZWQgdG8gcG9zaXRpb24gYmFja2dyb3VuZEltYWdlIGF0IDAvMFxuICAgICAqICAgb3JpZ2luWDogJ2xlZnQnLFxuICAgICAqICAgb3JpZ2luWTogJ3RvcCdcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5iYWNrZ3JvdW5kSW1hZ2UgbG9hZGVkIGZyb20gY3Jvc3Mtb3JpZ2luPC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy5zZXRCYWNrZ3JvdW5kSW1hZ2UoJ2h0dHA6Ly9mYWJyaWNqcy5jb20vYXNzZXRzL2hvbmV5X2ltX3N1YnRsZS5wbmcnLCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSwge1xuICAgICAqICAgb3BhY2l0eTogMC41LFxuICAgICAqICAgYW5nbGU6IDQ1LFxuICAgICAqICAgbGVmdDogNDAwLFxuICAgICAqICAgdG9wOiA0MDAsXG4gICAgICogICBvcmlnaW5YOiAnbGVmdCcsXG4gICAgICogICBvcmlnaW5ZOiAndG9wJyxcbiAgICAgKiAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJ1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIC8vIFRPRE86IGZpeCBzdHJldGNoZWQgZXhhbXBsZXNcbiAgICBzZXRCYWNrZ3JvdW5kSW1hZ2U6IGZ1bmN0aW9uIChpbWFnZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fc2V0QmdPdmVybGF5SW1hZ2UoJ2JhY2tncm91bmRJbWFnZScsIGltYWdlLCBjYWxsYmFjaywgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMge0BsaW5rIGZhYnJpYy5TdGF0aWNDYW52YXMjb3ZlcmxheUNvbG9yfGZvcmVncm91bmQgY29sb3J9IGZvciB0aGlzIGNhbnZhc1xuICAgICAqIEBwYXJhbSB7KFN0cmluZ3xmYWJyaWMuUGF0dGVybil9IG92ZXJsYXlDb2xvciBDb2xvciBvciBwYXR0ZXJuIHRvIHNldCBmb3JlZ3JvdW5kIGNvbG9yIHRvXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gZm9yZWdyb3VuZCBjb2xvciBpcyBzZXRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvZmFicmljanMvcEI1NWgvfGpzRmlkZGxlIGRlbW99XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+Tm9ybWFsIG92ZXJsYXlDb2xvciAtIGNvbG9yIHZhbHVlPC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy5zZXRPdmVybGF5Q29sb3IoJ3JnYmEoMjU1LCA3MywgNjQsIDAuNiknLCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSk7XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+ZmFicmljLlBhdHRlcm4gdXNlZCBhcyBvdmVybGF5Q29sb3I8L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldE92ZXJsYXlDb2xvcih7XG4gICAgICogICBzb3VyY2U6ICdodHRwOi8vZmFicmljanMuY29tL2Fzc2V0cy9lc2NoZXJlc3F1ZV9zdGUucG5nJ1xuICAgICAqIH0sIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpKTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5mYWJyaWMuUGF0dGVybiB1c2VkIGFzIG92ZXJsYXlDb2xvciB3aXRoIHJlcGVhdCBhbmQgb2Zmc2V0PC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy5zZXRPdmVybGF5Q29sb3Ioe1xuICAgICAqICAgc291cmNlOiAnaHR0cDovL2ZhYnJpY2pzLmNvbS9hc3NldHMvZXNjaGVyZXNxdWVfc3RlLnBuZycsXG4gICAgICogICByZXBlYXQ6ICdyZXBlYXQnLFxuICAgICAqICAgb2Zmc2V0WDogMjAwLFxuICAgICAqICAgb2Zmc2V0WTogMTAwXG4gICAgICogfSwgY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcykpO1xuICAgICAqL1xuICAgIHNldE92ZXJsYXlDb2xvcjogZnVuY3Rpb24ob3ZlcmxheUNvbG9yLCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMuX19zZXRCZ092ZXJsYXlDb2xvcignb3ZlcmxheUNvbG9yJywgb3ZlcmxheUNvbG9yLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMge0BsaW5rIGZhYnJpYy5TdGF0aWNDYW52YXMjYmFja2dyb3VuZENvbG9yfGJhY2tncm91bmQgY29sb3J9IGZvciB0aGlzIGNhbnZhc1xuICAgICAqIEBwYXJhbSB7KFN0cmluZ3xmYWJyaWMuUGF0dGVybil9IGJhY2tncm91bmRDb2xvciBDb2xvciBvciBwYXR0ZXJuIHRvIHNldCBiYWNrZ3JvdW5kIGNvbG9yIHRvXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gYmFja2dyb3VuZCBjb2xvciBpcyBzZXRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvZmFicmljanMvaFh6dmsvfGpzRmlkZGxlIGRlbW99XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+Tm9ybWFsIGJhY2tncm91bmRDb2xvciAtIGNvbG9yIHZhbHVlPC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy5zZXRCYWNrZ3JvdW5kQ29sb3IoJ3JnYmEoMjU1LCA3MywgNjQsIDAuNiknLCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSk7XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+ZmFicmljLlBhdHRlcm4gdXNlZCBhcyBiYWNrZ3JvdW5kQ29sb3I8L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldEJhY2tncm91bmRDb2xvcih7XG4gICAgICogICBzb3VyY2U6ICdodHRwOi8vZmFicmljanMuY29tL2Fzc2V0cy9lc2NoZXJlc3F1ZV9zdGUucG5nJ1xuICAgICAqIH0sIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpKTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5mYWJyaWMuUGF0dGVybiB1c2VkIGFzIGJhY2tncm91bmRDb2xvciB3aXRoIHJlcGVhdCBhbmQgb2Zmc2V0PC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy5zZXRCYWNrZ3JvdW5kQ29sb3Ioe1xuICAgICAqICAgc291cmNlOiAnaHR0cDovL2ZhYnJpY2pzLmNvbS9hc3NldHMvZXNjaGVyZXNxdWVfc3RlLnBuZycsXG4gICAgICogICByZXBlYXQ6ICdyZXBlYXQnLFxuICAgICAqICAgb2Zmc2V0WDogMjAwLFxuICAgICAqICAgb2Zmc2V0WTogMTAwXG4gICAgICogfSwgY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcykpO1xuICAgICAqL1xuICAgIHNldEJhY2tncm91bmRDb2xvcjogZnVuY3Rpb24oYmFja2dyb3VuZENvbG9yLCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMuX19zZXRCZ092ZXJsYXlDb2xvcignYmFja2dyb3VuZENvbG9yJywgYmFja2dyb3VuZENvbG9yLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRvIHNldCAoe0BsaW5rIGZhYnJpYy5TdGF0aWNDYW52YXMjYmFja2dyb3VuZEltYWdlfGJhY2tncm91bmRJbWFnZX1cbiAgICAgKiBvciB7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcyNvdmVybGF5SW1hZ2V8b3ZlcmxheUltYWdlfSlcbiAgICAgKiBAcGFyYW0geyhmYWJyaWMuSW1hZ2V8U3RyaW5nfG51bGwpfSBpbWFnZSBmYWJyaWMuSW1hZ2UgaW5zdGFuY2UsIFVSTCBvZiBhbiBpbWFnZSBvciBudWxsIHRvIHNldCBiYWNrZ3JvdW5kIG9yIG92ZXJsYXkgdG9cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiBpbWFnZSBpcyBsb2FkZWQgYW5kIHNldCBhcyBiYWNrZ3JvdW5kIG9yIG92ZXJsYXkuIFRoZSBmaXJzdCBhcmd1bWVudCBpcyB0aGUgY3JlYXRlZCBpbWFnZSwgdGhlIHNlY29uZCBhcmd1bWVudCBpcyBhIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIGFuIGVycm9yIG9jY3VycmVkIG9yIG5vdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIG9wdGlvbnMgdG8gc2V0IGZvciB0aGUge0BsaW5rIGZhYnJpYy5JbWFnZXxpbWFnZX0uXG4gICAgICovXG4gICAgX19zZXRCZ092ZXJsYXlJbWFnZTogZnVuY3Rpb24ocHJvcGVydHksIGltYWdlLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiBpbWFnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZmFicmljLnV0aWwubG9hZEltYWdlKGltYWdlLCBmdW5jdGlvbihpbWcsIGlzRXJyb3IpIHtcbiAgICAgICAgICBpZiAoaW1nKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgZmFicmljLkltYWdlKGltZywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzW3Byb3BlcnR5XSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgaW5zdGFuY2UuY2FudmFzID0gdGhpcztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soaW1nLCBpc0Vycm9yKTtcbiAgICAgICAgfSwgdGhpcywgb3B0aW9ucyAmJiBvcHRpb25zLmNyb3NzT3JpZ2luKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBvcHRpb25zICYmIGltYWdlLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHRoaXNbcHJvcGVydHldID0gaW1hZ2U7XG4gICAgICAgIGltYWdlICYmIChpbWFnZS5jYW52YXMgPSB0aGlzKTtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soaW1hZ2UsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRvIHNldCAoe0BsaW5rIGZhYnJpYy5TdGF0aWNDYW52YXMjYmFja2dyb3VuZENvbG9yfGJhY2tncm91bmRDb2xvcn1cbiAgICAgKiBvciB7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcyNvdmVybGF5Q29sb3J8b3ZlcmxheUNvbG9yfSlcbiAgICAgKiBAcGFyYW0geyhPYmplY3R8U3RyaW5nfG51bGwpfSBjb2xvciBPYmplY3Qgd2l0aCBwYXR0ZXJuIGluZm9ybWF0aW9uLCBjb2xvciB2YWx1ZSBvciBudWxsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBDYWxsYmFjayBpcyBpbnZva2VkIHdoZW4gY29sb3IgaXMgc2V0XG4gICAgICovXG4gICAgX19zZXRCZ092ZXJsYXlDb2xvcjogZnVuY3Rpb24ocHJvcGVydHksIGNvbG9yLCBjYWxsYmFjaykge1xuICAgICAgdGhpc1twcm9wZXJ0eV0gPSBjb2xvcjtcbiAgICAgIHRoaXMuX2luaXRHcmFkaWVudChjb2xvciwgcHJvcGVydHkpO1xuICAgICAgdGhpcy5faW5pdFBhdHRlcm4oY29sb3IsIHByb3BlcnR5LCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY3JlYXRlQ2FudmFzRWxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IGNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICB0aHJvdyBDQU5WQVNfSU5JVF9FUlJPUjtcbiAgICAgIH1cbiAgICAgIGlmICghZWxlbWVudC5zdHlsZSkge1xuICAgICAgICBlbGVtZW50LnN0eWxlID0geyB9O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBlbGVtZW50LmdldENvbnRleHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IENBTlZBU19JTklUX0VSUk9SO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqL1xuICAgIF9pbml0T3B0aW9uczogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIHZhciBsb3dlckNhbnZhc0VsID0gdGhpcy5sb3dlckNhbnZhc0VsO1xuICAgICAgdGhpcy5fc2V0T3B0aW9ucyhvcHRpb25zKTtcblxuICAgICAgdGhpcy53aWR0aCA9IHRoaXMud2lkdGggfHwgcGFyc2VJbnQobG93ZXJDYW52YXNFbC53aWR0aCwgMTApIHx8IDA7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMuaGVpZ2h0IHx8IHBhcnNlSW50KGxvd2VyQ2FudmFzRWwuaGVpZ2h0LCAxMCkgfHwgMDtcblxuICAgICAgaWYgKCF0aGlzLmxvd2VyQ2FudmFzRWwuc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsb3dlckNhbnZhc0VsLndpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgIGxvd2VyQ2FudmFzRWwuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG5cbiAgICAgIGxvd2VyQ2FudmFzRWwuc3R5bGUud2lkdGggPSB0aGlzLndpZHRoICsgJ3B4JztcbiAgICAgIGxvd2VyQ2FudmFzRWwuc3R5bGUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgKyAncHgnO1xuXG4gICAgICB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybS5zbGljZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYm90dG9tIGNhbnZhc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gW2NhbnZhc0VsXVxuICAgICAqL1xuICAgIF9jcmVhdGVMb3dlckNhbnZhczogZnVuY3Rpb24gKGNhbnZhc0VsKSB7XG4gICAgICAvLyBjYW52YXNFbCA9PT0gJ0hUTUxDYW52YXNFbGVtZW50JyBkb2VzIG5vdCB3b3JrIG9uIGpzZG9tL25vZGVcbiAgICAgIGlmIChjYW52YXNFbCAmJiBjYW52YXNFbC5nZXRDb250ZXh0KSB7XG4gICAgICAgIHRoaXMubG93ZXJDYW52YXNFbCA9IGNhbnZhc0VsO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMubG93ZXJDYW52YXNFbCA9IGZhYnJpYy51dGlsLmdldEJ5SWQoY2FudmFzRWwpIHx8IHRoaXMuX2NyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgIH1cblxuICAgICAgZmFicmljLnV0aWwuYWRkQ2xhc3ModGhpcy5sb3dlckNhbnZhc0VsLCAnbG93ZXItY2FudmFzJyk7XG4gICAgICB0aGlzLl9vcmlnaW5hbENhbnZhc1N0eWxlID0gdGhpcy5sb3dlckNhbnZhc0VsLnN0eWxlO1xuICAgICAgaWYgKHRoaXMuaW50ZXJhY3RpdmUpIHtcbiAgICAgICAgdGhpcy5fYXBwbHlDYW52YXNTdHlsZSh0aGlzLmxvd2VyQ2FudmFzRWwpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRleHRDb250YWluZXIgPSB0aGlzLmxvd2VyQ2FudmFzRWwuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjYW52YXMgd2lkdGggKGluIHB4KVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXRXaWR0aDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMud2lkdGg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY2FudmFzIGhlaWdodCAoaW4gcHgpXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldEhlaWdodDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGVpZ2h0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHdpZHRoIG9mIHRoaXMgY2FudmFzIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSB2YWx1ZSAgICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZSB0byBzZXQgd2lkdGggdG9cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgIFtvcHRpb25zXSAgICAgICAgICAgICAgICAgICAgIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSAgICAgICBbb3B0aW9ucy5iYWNrc3RvcmVPbmx5PWZhbHNlXSBTZXQgdGhlIGdpdmVuIGRpbWVuc2lvbnMgb25seSBhcyBjYW52YXMgYmFja3N0b3JlIGRpbWVuc2lvbnNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59ICAgICAgIFtvcHRpb25zLmNzc09ubHk9ZmFsc2VdICAgICAgIFNldCB0aGUgZ2l2ZW4gZGltZW5zaW9ucyBvbmx5IGFzIGNzcyBkaW1lbnNpb25zXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gaW5zdGFuY2VcbiAgICAgKiBAY2hhaW5hYmxlIHRydWVcbiAgICAgKi9cbiAgICBzZXRXaWR0aDogZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXREaW1lbnNpb25zKHsgd2lkdGg6IHZhbHVlIH0sIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGhlaWdodCBvZiB0aGlzIGNhbnZhcyBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gdmFsdWUgICAgICAgICAgICAgICAgICAgICAgICAgVmFsdWUgdG8gc2V0IGhlaWdodCB0b1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgW29wdGlvbnNdICAgICAgICAgICAgICAgICAgICAgT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59ICAgICAgIFtvcHRpb25zLmJhY2tzdG9yZU9ubHk9ZmFsc2VdIFNldCB0aGUgZ2l2ZW4gZGltZW5zaW9ucyBvbmx5IGFzIGNhbnZhcyBiYWNrc3RvcmUgZGltZW5zaW9uc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gICAgICAgW29wdGlvbnMuY3NzT25seT1mYWxzZV0gICAgICAgU2V0IHRoZSBnaXZlbiBkaW1lbnNpb25zIG9ubHkgYXMgY3NzIGRpbWVuc2lvbnNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGUgdHJ1ZVxuICAgICAqL1xuICAgIHNldEhlaWdodDogZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXREaW1lbnNpb25zKHsgaGVpZ2h0OiB2YWx1ZSB9LCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBkaW1lbnNpb25zICh3aWR0aCwgaGVpZ2h0KSBvZiB0aGlzIGNhbnZhcyBpbnN0YW5jZS4gd2hlbiBvcHRpb25zLmNzc09ubHkgZmxhZyBhY3RpdmUgeW91IHNob3VsZCBhbHNvIHN1cHBseSB0aGUgdW5pdCBvZiBtZWFzdXJlIChweC8lL2VtKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgZGltZW5zaW9ucyAgICAgICAgICAgICAgICAgICAgT2JqZWN0IHdpdGggd2lkdGgvaGVpZ2h0IHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IFtkaW1lbnNpb25zLndpZHRoXSAgICAgICAgICAgIFdpZHRoIG9mIGNhbnZhcyBlbGVtZW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBbZGltZW5zaW9ucy5oZWlnaHRdICAgICAgICAgICBIZWlnaHQgb2YgY2FudmFzIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgIFtvcHRpb25zXSAgICAgICAgICAgICAgICAgICAgIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSAgICAgICBbb3B0aW9ucy5iYWNrc3RvcmVPbmx5PWZhbHNlXSBTZXQgdGhlIGdpdmVuIGRpbWVuc2lvbnMgb25seSBhcyBjYW52YXMgYmFja3N0b3JlIGRpbWVuc2lvbnNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59ICAgICAgIFtvcHRpb25zLmNzc09ubHk9ZmFsc2VdICAgICAgIFNldCB0aGUgZ2l2ZW4gZGltZW5zaW9ucyBvbmx5IGFzIGNzcyBkaW1lbnNpb25zXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzZXREaW1lbnNpb25zOiBmdW5jdGlvbiAoZGltZW5zaW9ucywgb3B0aW9ucykge1xuICAgICAgdmFyIGNzc1ZhbHVlO1xuXG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBkaW1lbnNpb25zKSB7XG4gICAgICAgIGNzc1ZhbHVlID0gZGltZW5zaW9uc1twcm9wXTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMuY3NzT25seSkge1xuICAgICAgICAgIHRoaXMuX3NldEJhY2tzdG9yZURpbWVuc2lvbihwcm9wLCBkaW1lbnNpb25zW3Byb3BdKTtcbiAgICAgICAgICBjc3NWYWx1ZSArPSAncHgnO1xuICAgICAgICAgIHRoaXMuaGFzTG9zdENvbnRleHQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLmJhY2tzdG9yZU9ubHkpIHtcbiAgICAgICAgICB0aGlzLl9zZXRDc3NEaW1lbnNpb24ocHJvcCwgY3NzVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5faXNDdXJyZW50bHlEcmF3aW5nKSB7XG4gICAgICAgIHRoaXMuZnJlZURyYXdpbmdCcnVzaCAmJiB0aGlzLmZyZWVEcmF3aW5nQnJ1c2guX3NldEJydXNoU3R5bGVzKHRoaXMuY29udGV4dFRvcCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9pbml0UmV0aW5hU2NhbGluZygpO1xuICAgICAgdGhpcy5jYWxjT2Zmc2V0KCk7XG5cbiAgICAgIGlmICghb3B0aW9ucy5jc3NPbmx5KSB7XG4gICAgICAgIHRoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGVscGVyIGZvciBzZXR0aW5nIHdpZHRoL2hlaWdodFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3AgcHJvcGVydHkgKHdpZHRofGhlaWdodClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgdmFsdWUgdG8gc2V0IHByb3BlcnR5IHRvXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gaW5zdGFuY2VcbiAgICAgKiBAY2hhaW5hYmxlIHRydWVcbiAgICAgKi9cbiAgICBfc2V0QmFja3N0b3JlRGltZW5zaW9uOiBmdW5jdGlvbiAocHJvcCwgdmFsdWUpIHtcbiAgICAgIHRoaXMubG93ZXJDYW52YXNFbFtwcm9wXSA9IHZhbHVlO1xuXG4gICAgICBpZiAodGhpcy51cHBlckNhbnZhc0VsKSB7XG4gICAgICAgIHRoaXMudXBwZXJDYW52YXNFbFtwcm9wXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jYWNoZUNhbnZhc0VsKSB7XG4gICAgICAgIHRoaXMuY2FjaGVDYW52YXNFbFtwcm9wXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzW3Byb3BdID0gdmFsdWU7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZm9yIHNldHRpbmcgY3NzIHdpZHRoL2hlaWdodFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3AgcHJvcGVydHkgKHdpZHRofGhlaWdodClcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgdmFsdWUgdG8gc2V0IHByb3BlcnR5IHRvXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gaW5zdGFuY2VcbiAgICAgKiBAY2hhaW5hYmxlIHRydWVcbiAgICAgKi9cbiAgICBfc2V0Q3NzRGltZW5zaW9uOiBmdW5jdGlvbiAocHJvcCwgdmFsdWUpIHtcbiAgICAgIHRoaXMubG93ZXJDYW52YXNFbC5zdHlsZVtwcm9wXSA9IHZhbHVlO1xuXG4gICAgICBpZiAodGhpcy51cHBlckNhbnZhc0VsKSB7XG4gICAgICAgIHRoaXMudXBwZXJDYW52YXNFbC5zdHlsZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy53cmFwcGVyRWwpIHtcbiAgICAgICAgdGhpcy53cmFwcGVyRWwuc3R5bGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY2FudmFzIHpvb20gbGV2ZWxcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0Wm9vbTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bMF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdmlld3BvcnQgdHJhbnNmb3JtYXRpb24gb2YgdGhpcyBjYW52YXMgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2cHQgYSBDYW52YXMgMkQgQVBJIHRyYW5zZm9ybSBtYXRyaXhcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGUgdHJ1ZVxuICAgICAqL1xuICAgIHNldFZpZXdwb3J0VHJhbnNmb3JtOiBmdW5jdGlvbiAodnB0KSB7XG4gICAgICB2YXIgYWN0aXZlT2JqZWN0ID0gdGhpcy5fYWN0aXZlT2JqZWN0LFxuICAgICAgICAgIGJhY2tncm91bmRPYmplY3QgPSB0aGlzLmJhY2tncm91bmRJbWFnZSxcbiAgICAgICAgICBvdmVybGF5T2JqZWN0ID0gdGhpcy5vdmVybGF5SW1hZ2UsXG4gICAgICAgICAgb2JqZWN0LCBpLCBsZW47XG4gICAgICB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtID0gdnB0O1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBvYmplY3QgPSB0aGlzLl9vYmplY3RzW2ldO1xuICAgICAgICBvYmplY3QuZ3JvdXAgfHwgb2JqZWN0LnNldENvb3Jkcyh0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChhY3RpdmVPYmplY3QpIHtcbiAgICAgICAgYWN0aXZlT2JqZWN0LnNldENvb3JkcygpO1xuICAgICAgfVxuICAgICAgaWYgKGJhY2tncm91bmRPYmplY3QpIHtcbiAgICAgICAgYmFja2dyb3VuZE9iamVjdC5zZXRDb29yZHModHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAob3ZlcmxheU9iamVjdCkge1xuICAgICAgICBvdmVybGF5T2JqZWN0LnNldENvb3Jkcyh0cnVlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2FsY1ZpZXdwb3J0Qm91bmRhcmllcygpO1xuICAgICAgdGhpcy5yZW5kZXJPbkFkZFJlbW92ZSAmJiB0aGlzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHpvb20gbGV2ZWwgb2YgdGhpcyBjYW52YXMgaW5zdGFuY2UsIHRoZSB6b29tIGNlbnRlcmVkIGFyb3VuZCBwb2ludFxuICAgICAqIG1lYW5pbmcgdGhhdCBmb2xsb3dpbmcgem9vbSB0byBwb2ludCB3aXRoIHRoZSBzYW1lIHBvaW50IHdpbGwgaGF2ZSB0aGUgdmlzdWFsXG4gICAgICogZWZmZWN0IG9mIHRoZSB6b29tIG9yaWdpbmF0aW5nIGZyb20gdGhhdCBwb2ludC4gVGhlIHBvaW50IHdvbid0IG1vdmUuXG4gICAgICogSXQgaGFzIG5vdGhpbmcgdG8gZG8gd2l0aCBjYW52YXMgY2VudGVyIG9yIHZpc3VhbCBjZW50ZXIgb2YgdGhlIHZpZXdwb3J0LlxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBwb2ludCB0byB6b29tIHdpdGggcmVzcGVjdCB0b1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSB0byBzZXQgem9vbSB0bywgbGVzcyB0aGFuIDEgem9vbXMgb3V0XG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gaW5zdGFuY2VcbiAgICAgKiBAY2hhaW5hYmxlIHRydWVcbiAgICAgKi9cbiAgICB6b29tVG9Qb2ludDogZnVuY3Rpb24gKHBvaW50LCB2YWx1ZSkge1xuICAgICAgLy8gVE9ETzoganVzdCBjaGFuZ2UgdGhlIHNjYWxlLCBwcmVzZXJ2ZSBvdGhlciB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgIHZhciBiZWZvcmUgPSBwb2ludCwgdnB0ID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybS5zbGljZSgwKTtcbiAgICAgIHBvaW50ID0gdHJhbnNmb3JtUG9pbnQocG9pbnQsIGludmVydFRyYW5zZm9ybSh0aGlzLnZpZXdwb3J0VHJhbnNmb3JtKSk7XG4gICAgICB2cHRbMF0gPSB2YWx1ZTtcbiAgICAgIHZwdFszXSA9IHZhbHVlO1xuICAgICAgdmFyIGFmdGVyID0gdHJhbnNmb3JtUG9pbnQocG9pbnQsIHZwdCk7XG4gICAgICB2cHRbNF0gKz0gYmVmb3JlLnggLSBhZnRlci54O1xuICAgICAgdnB0WzVdICs9IGJlZm9yZS55IC0gYWZ0ZXIueTtcbiAgICAgIHJldHVybiB0aGlzLnNldFZpZXdwb3J0VHJhbnNmb3JtKHZwdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgem9vbSBsZXZlbCBvZiB0aGlzIGNhbnZhcyBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSB0byBzZXQgem9vbSB0bywgbGVzcyB0aGFuIDEgem9vbXMgb3V0XG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gaW5zdGFuY2VcbiAgICAgKiBAY2hhaW5hYmxlIHRydWVcbiAgICAgKi9cbiAgICBzZXRab29tOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHRoaXMuem9vbVRvUG9pbnQobmV3IGZhYnJpYy5Qb2ludCgwLCAwKSwgdmFsdWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFBhbiB2aWV3cG9ydCBzbyBhcyB0byBwbGFjZSBwb2ludCBhdCB0b3AgbGVmdCBjb3JuZXIgb2YgY2FudmFzXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHBvaW50IHRvIG1vdmUgdG9cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGUgdHJ1ZVxuICAgICAqL1xuICAgIGFic29sdXRlUGFuOiBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgIHZhciB2cHQgPSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtLnNsaWNlKDApO1xuICAgICAgdnB0WzRdID0gLXBvaW50Lng7XG4gICAgICB2cHRbNV0gPSAtcG9pbnQueTtcbiAgICAgIHJldHVybiB0aGlzLnNldFZpZXdwb3J0VHJhbnNmb3JtKHZwdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFBhbnMgdmlld3BvaW50IHJlbGF0aXZlbHlcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9pbnQgKHBvc2l0aW9uIHZlY3RvcikgdG8gbW92ZSBieVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IGluc3RhbmNlXG4gICAgICogQGNoYWluYWJsZSB0cnVlXG4gICAgICovXG4gICAgcmVsYXRpdmVQYW46IGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzb2x1dGVQYW4obmV3IGZhYnJpYy5Qb2ludChcbiAgICAgICAgLXBvaW50LnggLSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtWzRdLFxuICAgICAgICAtcG9pbnQueSAtIHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bNV1cbiAgICAgICkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zICZsdDtjYW52YXM+IGVsZW1lbnQgY29ycmVzcG9uZGluZyB0byB0aGlzIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7SFRNTENhbnZhc0VsZW1lbnR9XG4gICAgICovXG4gICAgZ2V0RWxlbWVudDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubG93ZXJDYW52YXNFbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iaiBPYmplY3QgdGhhdCB3YXMgYWRkZWRcbiAgICAgKi9cbiAgICBfb25PYmplY3RBZGRlZDogZnVuY3Rpb24ob2JqKSB7XG4gICAgICB0aGlzLnN0YXRlZnVsICYmIG9iai5zZXR1cFN0YXRlKCk7XG4gICAgICBvYmouX3NldCgnY2FudmFzJywgdGhpcyk7XG4gICAgICBvYmouc2V0Q29vcmRzKCk7XG4gICAgICB0aGlzLmZpcmUoJ29iamVjdDphZGRlZCcsIHsgdGFyZ2V0OiBvYmogfSk7XG4gICAgICBvYmouZmlyZSgnYWRkZWQnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iaiBPYmplY3QgdGhhdCB3YXMgcmVtb3ZlZFxuICAgICAqL1xuICAgIF9vbk9iamVjdFJlbW92ZWQ6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgdGhpcy5maXJlKCdvYmplY3Q6cmVtb3ZlZCcsIHsgdGFyZ2V0OiBvYmogfSk7XG4gICAgICBvYmouZmlyZSgncmVtb3ZlZCcpO1xuICAgICAgZGVsZXRlIG9iai5jYW52YXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBzcGVjaWZpZWQgY29udGV4dCBvZiBjYW52YXMgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byBjbGVhclxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgY2xlYXJDb250ZXh0OiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29udGV4dCBvZiBjYW52YXMgd2hlcmUgb2JqZWN0cyBhcmUgZHJhd25cbiAgICAgKiBAcmV0dXJuIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9XG4gICAgICovXG4gICAgZ2V0Q29udGV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dENvbnRhaW5lcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBjb250ZXh0cyAoYmFja2dyb3VuZCwgbWFpbiwgdG9wKSBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucmVtb3ZlLmFwcGx5KHRoaXMsIHRoaXMuZ2V0T2JqZWN0cygpKTtcbiAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlID0gbnVsbDtcbiAgICAgIHRoaXMub3ZlcmxheUltYWdlID0gbnVsbDtcbiAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gJyc7XG4gICAgICB0aGlzLm92ZXJsYXlDb2xvciA9ICcnO1xuICAgICAgaWYgKHRoaXMuX2hhc0lUZXh0SGFuZGxlcnMpIHtcbiAgICAgICAgdGhpcy5vZmYoJ21vdXNlOnVwJywgdGhpcy5fbW91c2VVcElUZXh0SGFuZGxlcik7XG4gICAgICAgIHRoaXMuX2lUZXh0SW5zdGFuY2VzID0gbnVsbDtcbiAgICAgICAgdGhpcy5faGFzSVRleHRIYW5kbGVycyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5jbGVhckNvbnRleHQodGhpcy5jb250ZXh0Q29udGFpbmVyKTtcbiAgICAgIHRoaXMuZmlyZSgnY2FudmFzOmNsZWFyZWQnKTtcbiAgICAgIHRoaXMucmVuZGVyT25BZGRSZW1vdmUgJiYgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgY2FudmFzXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gaW5zdGFuY2VcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgcmVuZGVyQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2FudmFzVG9EcmF3T24gPSB0aGlzLmNvbnRleHRDb250YWluZXI7XG4gICAgICB0aGlzLnJlbmRlckNhbnZhcyhjYW52YXNUb0RyYXdPbiwgdGhpcy5fb2JqZWN0cyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gY3JlYXRlZCB0byBiZSBpbnN0YW5jZSBib3VuZCBhdCBpbml0aWFsaXphdGlvblxuICAgICAqIHVzZWQgaW4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHJlbmRlcmluZ1xuICAgICAqIExldCB0aGUgZmFicmljSlMgY2FsbCBpdC4gSWYgeW91IGNhbGwgaXQgbWFudWFsbHkgeW91IGNvdWxkIGhhdmUgbW9yZVxuICAgICAqIGFuaW1hdGlvbkZyYW1lIHN0YWNraW5nIG9uIHRvIG9mIGVhY2ggb3RoZXJcbiAgICAgKiBmb3IgYW4gaW1wZXJhdGl2ZSByZW5kZXJpbmcsIHVzZSBjYW52YXMucmVuZGVyQWxsXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICByZW5kZXJBbmRSZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmlzUmVuZGVyaW5nID0gMDtcbiAgICAgIHRoaXMucmVuZGVyQWxsKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGVuZCBhIHJlbmRlckFsbCByZXF1ZXN0IHRvIG5leHQgYW5pbWF0aW9uIGZyYW1lLlxuICAgICAqIHVubGVzcyBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcywgaW4gdGhhdCBjYXNlIG5vdGhpbmcgaXMgZG9uZVxuICAgICAqIGEgYm9vbGVhbiBmbGFnIHdpbGwgYXZvaWQgYXBwZW5kaW5nIG1vcmUuXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gaW5zdGFuY2VcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgcmVxdWVzdFJlbmRlckFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLmlzUmVuZGVyaW5nKSB7XG4gICAgICAgIHRoaXMuaXNSZW5kZXJpbmcgPSBmYWJyaWMudXRpbC5yZXF1ZXN0QW5pbUZyYW1lKHRoaXMucmVuZGVyQW5kUmVzZXRCb3VuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgNCBjb3JuZXIgb2YgY2FudmFzIHdpdGggY3VycmVudCB2aWV3cG9ydFRyYW5zZm9ybS5cbiAgICAgKiBoZWxwcyB0byBkZXRlcm1pbmF0ZSB3aGVuIGFuIG9iamVjdCBpcyBpbiB0aGUgY3VycmVudCByZW5kZXJpbmcgdmlld3BvcnQgdXNpbmdcbiAgICAgKiBvYmplY3QgYWJzb2x1dGUgY29vcmRpbmF0ZXMgKCBhQ29vcmRzIClcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHBvaW50cy50bFxuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBjYWxjVmlld3BvcnRCb3VuZGFyaWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwb2ludHMgPSB7IH0sIHdpZHRoID0gdGhpcy53aWR0aCwgaGVpZ2h0ID0gdGhpcy5oZWlnaHQsXG4gICAgICAgICAgaVZwdCA9IGludmVydFRyYW5zZm9ybSh0aGlzLnZpZXdwb3J0VHJhbnNmb3JtKTtcbiAgICAgIHBvaW50cy50bCA9IHRyYW5zZm9ybVBvaW50KHsgeDogMCwgeTogMCB9LCBpVnB0KTtcbiAgICAgIHBvaW50cy5iciA9IHRyYW5zZm9ybVBvaW50KHsgeDogd2lkdGgsIHk6IGhlaWdodCB9LCBpVnB0KTtcbiAgICAgIHBvaW50cy50ciA9IG5ldyBmYWJyaWMuUG9pbnQocG9pbnRzLmJyLngsIHBvaW50cy50bC55KTtcbiAgICAgIHBvaW50cy5ibCA9IG5ldyBmYWJyaWMuUG9pbnQocG9pbnRzLnRsLngsIHBvaW50cy5ici55KTtcbiAgICAgIHRoaXMudnB0Q29vcmRzID0gcG9pbnRzO1xuICAgICAgcmV0dXJuIHBvaW50cztcbiAgICB9LFxuXG4gICAgY2FuY2VsUmVxdWVzdGVkUmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmlzUmVuZGVyaW5nKSB7XG4gICAgICAgIGZhYnJpYy51dGlsLmNhbmNlbEFuaW1GcmFtZSh0aGlzLmlzUmVuZGVyaW5nKTtcbiAgICAgICAgdGhpcy5pc1JlbmRlcmluZyA9IDA7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgYmFja2dyb3VuZCwgb2JqZWN0cywgb3ZlcmxheSBhbmQgY29udHJvbHMuXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG9iamVjdHMgdG8gcmVuZGVyXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gaW5zdGFuY2VcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgcmVuZGVyQ2FudmFzOiBmdW5jdGlvbihjdHgsIG9iamVjdHMpIHtcbiAgICAgIHZhciB2ID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybSwgcGF0aCA9IHRoaXMuY2xpcFBhdGg7XG4gICAgICB0aGlzLmNhbmNlbFJlcXVlc3RlZFJlbmRlcigpO1xuICAgICAgdGhpcy5jYWxjVmlld3BvcnRCb3VuZGFyaWVzKCk7XG4gICAgICB0aGlzLmNsZWFyQ29udGV4dChjdHgpO1xuICAgICAgZmFicmljLnV0aWwuc2V0SW1hZ2VTbW9vdGhpbmcoY3R4LCB0aGlzLmltYWdlU21vb3RoaW5nRW5hYmxlZCk7XG4gICAgICB0aGlzLmZpcmUoJ2JlZm9yZTpyZW5kZXInLCB7IGN0eDogY3R4LCB9KTtcbiAgICAgIHRoaXMuX3JlbmRlckJhY2tncm91bmQoY3R4KTtcblxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIC8vYXBwbHkgdmlld3BvcnQgdHJhbnNmb3JtIG9uY2UgZm9yIGFsbCByZW5kZXJpbmcgcHJvY2Vzc1xuICAgICAgY3R4LnRyYW5zZm9ybSh2WzBdLCB2WzFdLCB2WzJdLCB2WzNdLCB2WzRdLCB2WzVdKTtcbiAgICAgIHRoaXMuX3JlbmRlck9iamVjdHMoY3R4LCBvYmplY3RzKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICBpZiAoIXRoaXMuY29udHJvbHNBYm92ZU92ZXJsYXkgJiYgdGhpcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgICB0aGlzLmRyYXdDb250cm9scyhjdHgpO1xuICAgICAgfVxuICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgcGF0aC5jYW52YXMgPSB0aGlzO1xuICAgICAgICAvLyBuZWVkZWQgdG8gc2V0dXAgYSBjb3VwbGUgb2YgdmFyaWFibGVzXG4gICAgICAgIHBhdGguc2hvdWxkQ2FjaGUoKTtcbiAgICAgICAgcGF0aC5fdHJhbnNmb3JtRG9uZSA9IHRydWU7XG4gICAgICAgIHBhdGgucmVuZGVyQ2FjaGUoeyBmb3JDbGlwcGluZzogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5kcmF3Q2xpcFBhdGhPbkNhbnZhcyhjdHgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmVuZGVyT3ZlcmxheShjdHgpO1xuICAgICAgaWYgKHRoaXMuY29udHJvbHNBYm92ZU92ZXJsYXkgJiYgdGhpcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgICB0aGlzLmRyYXdDb250cm9scyhjdHgpO1xuICAgICAgfVxuICAgICAgdGhpcy5maXJlKCdhZnRlcjpyZW5kZXInLCB7IGN0eDogY3R4LCB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGFpbnQgdGhlIGNhY2hlZCBjbGlwUGF0aCBvbiB0aGUgbG93ZXJDYW52YXNFbFxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBkcmF3Q2xpcFBhdGhPbkNhbnZhczogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB2YXIgdiA9IHRoaXMudmlld3BvcnRUcmFuc2Zvcm0sIHBhdGggPSB0aGlzLmNsaXBQYXRoO1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC50cmFuc2Zvcm0odlswXSwgdlsxXSwgdlsyXSwgdlszXSwgdls0XSwgdls1XSk7XG4gICAgICAvLyBERUJVRzogdW5jb21tZW50IHRoaXMgbGluZSwgY29tbWVudCB0aGUgZm9sbG93aW5nXG4gICAgICAvLyBjdHguZ2xvYmFsQWxwaGEgPSAwLjQ7XG4gICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ2Rlc3RpbmF0aW9uLWluJztcbiAgICAgIHBhdGgudHJhbnNmb3JtKGN0eCk7XG4gICAgICBjdHguc2NhbGUoMSAvIHBhdGguem9vbVgsIDEgLyBwYXRoLnpvb21ZKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2UocGF0aC5fY2FjaGVDYW52YXMsIC1wYXRoLmNhY2hlVHJhbnNsYXRpb25YLCAtcGF0aC5jYWNoZVRyYW5zbGF0aW9uWSk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvYmplY3RzIHRvIHJlbmRlclxuICAgICAqL1xuICAgIF9yZW5kZXJPYmplY3RzOiBmdW5jdGlvbihjdHgsIG9iamVjdHMpIHtcbiAgICAgIHZhciBpLCBsZW47XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSBvYmplY3RzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIG9iamVjdHNbaV0gJiYgb2JqZWN0c1tpXS5yZW5kZXIoY3R4KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5ICdiYWNrZ3JvdW5kJyBvciAnb3ZlcmxheSdcbiAgICAgKi9cbiAgICBfcmVuZGVyQmFja2dyb3VuZE9yT3ZlcmxheTogZnVuY3Rpb24oY3R4LCBwcm9wZXJ0eSkge1xuICAgICAgdmFyIGZpbGwgPSB0aGlzW3Byb3BlcnR5ICsgJ0NvbG9yJ10sIG9iamVjdCA9IHRoaXNbcHJvcGVydHkgKyAnSW1hZ2UnXSxcbiAgICAgICAgICB2ID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybSwgbmVlZHNWcHQgPSB0aGlzW3Byb3BlcnR5ICsgJ1ZwdCddO1xuICAgICAgaWYgKCFmaWxsICYmICFvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGZpbGwpIHtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKDAsIDApO1xuICAgICAgICBjdHgubGluZVRvKHRoaXMud2lkdGgsIDApO1xuICAgICAgICBjdHgubGluZVRvKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgY3R4LmxpbmVUbygwLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGZpbGwudG9MaXZlXG4gICAgICAgICAgPyBmaWxsLnRvTGl2ZShjdHgsIHRoaXMpXG4gICAgICAgICAgOiBmaWxsO1xuICAgICAgICBpZiAobmVlZHNWcHQpIHtcbiAgICAgICAgICBjdHgudHJhbnNmb3JtKHZbMF0sIHZbMV0sIHZbMl0sIHZbM10sIHZbNF0sIHZbNV0pO1xuICAgICAgICB9XG4gICAgICAgIGN0eC50cmFuc2Zvcm0oMSwgMCwgMCwgMSwgZmlsbC5vZmZzZXRYIHx8IDAsIGZpbGwub2Zmc2V0WSB8fCAwKTtcbiAgICAgICAgdmFyIG0gPSBmaWxsLmdyYWRpZW50VHJhbnNmb3JtIHx8IGZpbGwucGF0dGVyblRyYW5zZm9ybTtcbiAgICAgICAgbSAmJiBjdHgudHJhbnNmb3JtKG1bMF0sIG1bMV0sIG1bMl0sIG1bM10sIG1bNF0sIG1bNV0pO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgfVxuICAgICAgaWYgKG9iamVjdCkge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBpZiAobmVlZHNWcHQpIHtcbiAgICAgICAgICBjdHgudHJhbnNmb3JtKHZbMF0sIHZbMV0sIHZbMl0sIHZbM10sIHZbNF0sIHZbNV0pO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdC5yZW5kZXIoY3R4KTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlckJhY2tncm91bmQ6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgdGhpcy5fcmVuZGVyQmFja2dyb3VuZE9yT3ZlcmxheShjdHgsICdiYWNrZ3JvdW5kJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXJPdmVybGF5OiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIHRoaXMuX3JlbmRlckJhY2tncm91bmRPck92ZXJsYXkoY3R4LCAnb3ZlcmxheScpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvb3JkaW5hdGVzIG9mIGEgY2VudGVyIG9mIGNhbnZhcy5cbiAgICAgKiBSZXR1cm5lZCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCB0b3AgYW5kIGxlZnQgcHJvcGVydGllc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHdpdGggXCJ0b3BcIiBhbmQgXCJsZWZ0XCIgbnVtYmVyIHZhbHVlc1xuICAgICAqIEBkZXByZWNhdGVkIG1pZ3JhdGUgdG8gYGdldENlbnRlclBvaW50YFxuICAgICAqL1xuICAgIGdldENlbnRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB0aGlzLmhlaWdodCAvIDIsXG4gICAgICAgIGxlZnQ6IHRoaXMud2lkdGggLyAyXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvb3JkaW5hdGVzIG9mIGEgY2VudGVyIG9mIGNhbnZhcy5cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9IFxuICAgICAqL1xuICAgIGdldENlbnRlclBvaW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IGZhYnJpYy5Qb2ludCh0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2VudGVycyBvYmplY3QgaG9yaXpvbnRhbGx5IGluIHRoZSBjYW52YXNcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY2VudGVyIGhvcml6b250YWxseVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBjZW50ZXJPYmplY3RIOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5fY2VudGVyT2JqZWN0KG9iamVjdCwgbmV3IGZhYnJpYy5Qb2ludCh0aGlzLmdldENlbnRlclBvaW50KCkueCwgb2JqZWN0LmdldENlbnRlclBvaW50KCkueSkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDZW50ZXJzIG9iamVjdCB2ZXJ0aWNhbGx5IGluIHRoZSBjYW52YXNcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY2VudGVyIHZlcnRpY2FsbHlcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGNlbnRlck9iamVjdFY6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jZW50ZXJPYmplY3Qob2JqZWN0LCBuZXcgZmFicmljLlBvaW50KG9iamVjdC5nZXRDZW50ZXJQb2ludCgpLngsIHRoaXMuZ2V0Q2VudGVyUG9pbnQoKS55KSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENlbnRlcnMgb2JqZWN0IHZlcnRpY2FsbHkgYW5kIGhvcml6b250YWxseSBpbiB0aGUgY2FudmFzXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNlbnRlciB2ZXJ0aWNhbGx5IGFuZCBob3Jpem9udGFsbHlcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGNlbnRlck9iamVjdDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgcmV0dXJuIHRoaXMuX2NlbnRlck9iamVjdChvYmplY3QsIGNlbnRlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENlbnRlcnMgb2JqZWN0IHZlcnRpY2FsbHkgYW5kIGhvcml6b250YWxseSBpbiB0aGUgdmlld3BvcnRcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY2VudGVyIHZlcnRpY2FsbHkgYW5kIGhvcml6b250YWxseVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgdmlld3BvcnRDZW50ZXJPYmplY3Q6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHZwQ2VudGVyID0gdGhpcy5nZXRWcENlbnRlcigpO1xuICAgICAgcmV0dXJuIHRoaXMuX2NlbnRlck9iamVjdChvYmplY3QsIHZwQ2VudGVyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2VudGVycyBvYmplY3QgaG9yaXpvbnRhbGx5IGluIHRoZSB2aWV3cG9ydCwgb2JqZWN0LnRvcCBpcyB1bmNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY2VudGVyIHZlcnRpY2FsbHkgYW5kIGhvcml6b250YWxseVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgdmlld3BvcnRDZW50ZXJPYmplY3RIOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciB2cENlbnRlciA9IHRoaXMuZ2V0VnBDZW50ZXIoKTtcbiAgICAgIHRoaXMuX2NlbnRlck9iamVjdChvYmplY3QsIG5ldyBmYWJyaWMuUG9pbnQodnBDZW50ZXIueCwgb2JqZWN0LmdldENlbnRlclBvaW50KCkueSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENlbnRlcnMgb2JqZWN0IFZlcnRpY2FsbHkgaW4gdGhlIHZpZXdwb3J0LCBvYmplY3QudG9wIGlzIHVuY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjZW50ZXIgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5XG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICB2aWV3cG9ydENlbnRlck9iamVjdFY6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHZwQ2VudGVyID0gdGhpcy5nZXRWcENlbnRlcigpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2VudGVyT2JqZWN0KG9iamVjdCwgbmV3IGZhYnJpYy5Qb2ludChvYmplY3QuZ2V0Q2VudGVyUG9pbnQoKS54LCB2cENlbnRlci55KSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgcG9pbnQgaW4gY2FudmFzIHRoYXQgY29ycmVzcG9uZCB0byB0aGUgY2VudGVyIG9mIGFjdHVhbCB2aWV3cG9ydC5cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9IHZwQ2VudGVyLCB2aWV3cG9ydCBjZW50ZXJcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgZ2V0VnBDZW50ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNlbnRlciA9IHRoaXMuZ2V0Q2VudGVyUG9pbnQoKSxcbiAgICAgICAgICBpVnB0ID0gaW52ZXJ0VHJhbnNmb3JtKHRoaXMudmlld3BvcnRUcmFuc2Zvcm0pO1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybVBvaW50KGNlbnRlciwgaVZwdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNlbnRlclxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBjZW50ZXIgQ2VudGVyIHBvaW50XG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBfY2VudGVyT2JqZWN0OiBmdW5jdGlvbihvYmplY3QsIGNlbnRlcikge1xuICAgICAgb2JqZWN0LnNldFBvc2l0aW9uQnlPcmlnaW4oY2VudGVyLCAnY2VudGVyJywgJ2NlbnRlcicpO1xuICAgICAgb2JqZWN0LnNldENvb3JkcygpO1xuICAgICAgdGhpcy5yZW5kZXJPbkFkZFJlbW92ZSAmJiB0aGlzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGRhdGFsZXNzIEpTT04gcmVwcmVzZW50YXRpb24gb2YgY2FudmFzXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge1N0cmluZ30ganNvbiBzdHJpbmdcbiAgICAgKi9cbiAgICB0b0RhdGFsZXNzSlNPTjogZnVuY3Rpb24gKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvRGF0YWxlc3NPYmplY3QocHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGNhbnZhc1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbiAocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RvT2JqZWN0TWV0aG9kKCd0b09iamVjdCcsIHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGRhdGFsZXNzIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBjYW52YXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b0RhdGFsZXNzT2JqZWN0OiBmdW5jdGlvbiAocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RvT2JqZWN0TWV0aG9kKCd0b0RhdGFsZXNzT2JqZWN0JywgcHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3RvT2JqZWN0TWV0aG9kOiBmdW5jdGlvbiAobWV0aG9kTmFtZSwgcHJvcGVydGllc1RvSW5jbHVkZSkge1xuXG4gICAgICB2YXIgY2xpcFBhdGggPSB0aGlzLmNsaXBQYXRoLCBkYXRhID0ge1xuICAgICAgICB2ZXJzaW9uOiBmYWJyaWMudmVyc2lvbixcbiAgICAgICAgb2JqZWN0czogdGhpcy5fdG9PYmplY3RzKG1ldGhvZE5hbWUsIHByb3BlcnRpZXNUb0luY2x1ZGUpLFxuICAgICAgfTtcbiAgICAgIGlmIChjbGlwUGF0aCAmJiAhY2xpcFBhdGguZXhjbHVkZUZyb21FeHBvcnQpIHtcbiAgICAgICAgZGF0YS5jbGlwUGF0aCA9IHRoaXMuX3RvT2JqZWN0KHRoaXMuY2xpcFBhdGgsIG1ldGhvZE5hbWUsIHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgfVxuICAgICAgZXh0ZW5kKGRhdGEsIHRoaXMuX19zZXJpYWxpemVCZ092ZXJsYXkobWV0aG9kTmFtZSwgcHJvcGVydGllc1RvSW5jbHVkZSkpO1xuXG4gICAgICBmYWJyaWMudXRpbC5wb3B1bGF0ZVdpdGhQcm9wZXJ0aWVzKHRoaXMsIGRhdGEsIHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdG9PYmplY3RzOiBmdW5jdGlvbihtZXRob2ROYW1lLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0cy5maWx0ZXIoZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiAhb2JqZWN0LmV4Y2x1ZGVGcm9tRXhwb3J0O1xuICAgICAgfSkubWFwKGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90b09iamVjdChpbnN0YW5jZSwgbWV0aG9kTmFtZSwgcHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdG9PYmplY3Q6IGZ1bmN0aW9uKGluc3RhbmNlLCBtZXRob2ROYW1lLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICB2YXIgb3JpZ2luYWxWYWx1ZTtcblxuICAgICAgaWYgKCF0aGlzLmluY2x1ZGVEZWZhdWx0VmFsdWVzKSB7XG4gICAgICAgIG9yaWdpbmFsVmFsdWUgPSBpbnN0YW5jZS5pbmNsdWRlRGVmYXVsdFZhbHVlcztcbiAgICAgICAgaW5zdGFuY2UuaW5jbHVkZURlZmF1bHRWYWx1ZXMgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9iamVjdCA9IGluc3RhbmNlW21ldGhvZE5hbWVdKHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgaWYgKCF0aGlzLmluY2x1ZGVEZWZhdWx0VmFsdWVzKSB7XG4gICAgICAgIGluc3RhbmNlLmluY2x1ZGVEZWZhdWx0VmFsdWVzID0gb3JpZ2luYWxWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX19zZXJpYWxpemVCZ092ZXJsYXk6IGZ1bmN0aW9uKG1ldGhvZE5hbWUsIHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHZhciBkYXRhID0ge30sIGJnSW1hZ2UgPSB0aGlzLmJhY2tncm91bmRJbWFnZSwgb3ZlcmxheUltYWdlID0gdGhpcy5vdmVybGF5SW1hZ2UsXG4gICAgICAgICAgYmdDb2xvciA9IHRoaXMuYmFja2dyb3VuZENvbG9yLCBvdmVybGF5Q29sb3IgPSB0aGlzLm92ZXJsYXlDb2xvcjtcblxuICAgICAgaWYgKGJnQ29sb3IgJiYgYmdDb2xvci50b09iamVjdCkge1xuICAgICAgICBpZiAoIWJnQ29sb3IuZXhjbHVkZUZyb21FeHBvcnQpIHtcbiAgICAgICAgICBkYXRhLmJhY2tncm91bmQgPSBiZ0NvbG9yLnRvT2JqZWN0KHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChiZ0NvbG9yKSB7XG4gICAgICAgIGRhdGEuYmFja2dyb3VuZCA9IGJnQ29sb3I7XG4gICAgICB9XG5cbiAgICAgIGlmIChvdmVybGF5Q29sb3IgJiYgb3ZlcmxheUNvbG9yLnRvT2JqZWN0KSB7XG4gICAgICAgIGlmICghb3ZlcmxheUNvbG9yLmV4Y2x1ZGVGcm9tRXhwb3J0KSB7XG4gICAgICAgICAgZGF0YS5vdmVybGF5ID0gb3ZlcmxheUNvbG9yLnRvT2JqZWN0KHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvdmVybGF5Q29sb3IpIHtcbiAgICAgICAgZGF0YS5vdmVybGF5ID0gb3ZlcmxheUNvbG9yO1xuICAgICAgfVxuXG4gICAgICBpZiAoYmdJbWFnZSAmJiAhYmdJbWFnZS5leGNsdWRlRnJvbUV4cG9ydCkge1xuICAgICAgICBkYXRhLmJhY2tncm91bmRJbWFnZSA9IHRoaXMuX3RvT2JqZWN0KGJnSW1hZ2UsIG1ldGhvZE5hbWUsIHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgfVxuICAgICAgaWYgKG92ZXJsYXlJbWFnZSAmJiAhb3ZlcmxheUltYWdlLmV4Y2x1ZGVGcm9tRXhwb3J0KSB7XG4gICAgICAgIGRhdGEub3ZlcmxheUltYWdlID0gdGhpcy5fdG9PYmplY3Qob3ZlcmxheUltYWdlLCBtZXRob2ROYW1lLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSxcblxuICAgIC8qIF9UT19TVkdfU1RBUlRfICovXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCBnZXRTdmdUcmFuc2Zvcm0oKSB3aWxsIGFwcGx5IHRoZSBTdGF0aWNDYW52YXMudmlld3BvcnRUcmFuc2Zvcm0gdG8gdGhlIFNWRyB0cmFuc2Zvcm1hdGlvbi4gV2hlbiB0cnVlLFxuICAgICAqIGEgem9vbWVkIGNhbnZhcyB3aWxsIHRoZW4gcHJvZHVjZSB6b29tZWQgU1ZHIG91dHB1dC5cbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdmdWaWV3cG9ydFRyYW5zZm9ybWF0aW9uOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBTVkcgcmVwcmVzZW50YXRpb24gb2YgY2FudmFzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdCBmb3IgU1ZHIG91dHB1dFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuc3VwcHJlc3NQcmVhbWJsZT1mYWxzZV0gSWYgdHJ1ZSB4bWwgdGFnIGlzIG5vdCBpbmNsdWRlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy52aWV3Qm94XSBTVkcgdmlld2JveCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMudmlld0JveC54XSB4LWNvb3JkaW5hdGUgb2Ygdmlld2JveFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy52aWV3Qm94LnldIHktY29vcmRpbmF0ZSBvZiB2aWV3Ym94XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnZpZXdCb3gud2lkdGhdIFdpZHRoIG9mIHZpZXdib3hcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMudmlld0JveC5oZWlnaHRdIEhlaWdodCBvZiB2aWV3Ym94XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmVuY29kaW5nPVVURi04XSBFbmNvZGluZyBvZiBTVkcgb3V0cHV0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLndpZHRoXSBkZXNpcmVkIHdpZHRoIG9mIHN2ZyB3aXRoIG9yIHdpdGhvdXQgdW5pdHNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuaGVpZ2h0XSBkZXNpcmVkIGhlaWdodCBvZiBzdmcgd2l0aCBvciB3aXRob3V0IHVuaXRzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdIE1ldGhvZCBmb3IgZnVydGhlciBwYXJzaW5nIG9mIHN2ZyBlbGVtZW50cywgY2FsbGVkIGFmdGVyIGVhY2ggZmFicmljIG9iamVjdCBjb252ZXJ0ZWQgaW50byBzdmcgcmVwcmVzZW50YXRpb24uXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBTVkcgc3RyaW5nXG4gICAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTMjc2VyaWFsaXphdGlvbn1cbiAgICAgKiBAc2VlIHtAbGluayBodHRwOi8vanNmaWRkbGUubmV0L2ZhYnJpY2pzL2pRM1paL3xqc0ZpZGRsZSBkZW1vfVxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPk5vcm1hbCBTVkcgb3V0cHV0PC9jYXB0aW9uPlxuICAgICAqIHZhciBzdmcgPSBjYW52YXMudG9TVkcoKTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5TVkcgb3V0cHV0IHdpdGhvdXQgcHJlYW1ibGUgKHdpdGhvdXQgJmx0Oz94bWwgLi4vPik8L2NhcHRpb24+XG4gICAgICogdmFyIHN2ZyA9IGNhbnZhcy50b1NWRyh7c3VwcHJlc3NQcmVhbWJsZTogdHJ1ZX0pO1xuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPlNWRyBvdXRwdXQgd2l0aCB2aWV3Qm94IGF0dHJpYnV0ZTwvY2FwdGlvbj5cbiAgICAgKiB2YXIgc3ZnID0gY2FudmFzLnRvU1ZHKHtcbiAgICAgKiAgIHZpZXdCb3g6IHtcbiAgICAgKiAgICAgeDogMTAwLFxuICAgICAqICAgICB5OiAxMDAsXG4gICAgICogICAgIHdpZHRoOiAyMDAsXG4gICAgICogICAgIGhlaWdodDogMzAwXG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+U1ZHIG91dHB1dCB3aXRoIGRpZmZlcmVudCBlbmNvZGluZyAoZGVmYXVsdDogVVRGLTgpPC9jYXB0aW9uPlxuICAgICAqIHZhciBzdmcgPSBjYW52YXMudG9TVkcoe2VuY29kaW5nOiAnSVNPLTg4NTktMSd9KTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5Nb2RpZnkgU1ZHIG91dHB1dCB3aXRoIHJldml2ZXIgZnVuY3Rpb248L2NhcHRpb24+XG4gICAgICogdmFyIHN2ZyA9IGNhbnZhcy50b1NWRyhudWxsLCBmdW5jdGlvbihzdmcpIHtcbiAgICAgKiAgIHJldHVybiBzdmcucmVwbGFjZSgnc3Ryb2tlLWRhc2hhcnJheTogOyBzdHJva2UtbGluZWNhcDogYnV0dDsgc3Ryb2tlLWxpbmVqb2luOiBtaXRlcjsgc3Ryb2tlLW1pdGVybGltaXQ6IDEwOyAnLCAnJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgdG9TVkc6IGZ1bmN0aW9uKG9wdGlvbnMsIHJldml2ZXIpIHtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7IH0pO1xuICAgICAgb3B0aW9ucy5yZXZpdmVyID0gcmV2aXZlcjtcbiAgICAgIHZhciBtYXJrdXAgPSBbXTtcblxuICAgICAgdGhpcy5fc2V0U1ZHUHJlYW1ibGUobWFya3VwLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuX3NldFNWR0hlYWRlcihtYXJrdXAsIG9wdGlvbnMpO1xuICAgICAgaWYgKHRoaXMuY2xpcFBhdGgpIHtcbiAgICAgICAgbWFya3VwLnB1c2goJzxnIGNsaXAtcGF0aD1cInVybCgjJyArIHRoaXMuY2xpcFBhdGguY2xpcFBhdGhJZCArICcpXCIgPlxcbicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2V0U1ZHQmdPdmVybGF5Q29sb3IobWFya3VwLCAnYmFja2dyb3VuZCcpO1xuICAgICAgdGhpcy5fc2V0U1ZHQmdPdmVybGF5SW1hZ2UobWFya3VwLCAnYmFja2dyb3VuZEltYWdlJywgcmV2aXZlcik7XG4gICAgICB0aGlzLl9zZXRTVkdPYmplY3RzKG1hcmt1cCwgcmV2aXZlcik7XG4gICAgICBpZiAodGhpcy5jbGlwUGF0aCkge1xuICAgICAgICBtYXJrdXAucHVzaCgnPC9nPlxcbicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2V0U1ZHQmdPdmVybGF5Q29sb3IobWFya3VwLCAnb3ZlcmxheScpO1xuICAgICAgdGhpcy5fc2V0U1ZHQmdPdmVybGF5SW1hZ2UobWFya3VwLCAnb3ZlcmxheUltYWdlJywgcmV2aXZlcik7XG5cbiAgICAgIG1hcmt1cC5wdXNoKCc8L3N2Zz4nKTtcblxuICAgICAgcmV0dXJuIG1hcmt1cC5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0U1ZHUHJlYW1ibGU6IGZ1bmN0aW9uKG1hcmt1cCwgb3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMuc3VwcHJlc3NQcmVhbWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBtYXJrdXAucHVzaChcbiAgICAgICAgJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIicsIChvcHRpb25zLmVuY29kaW5nIHx8ICdVVEYtOCcpLCAnXCIgc3RhbmRhbG9uZT1cIm5vXCIgPz5cXG4nLFxuICAgICAgICAnPCFET0NUWVBFIHN2ZyBQVUJMSUMgXCItLy9XM0MvL0RURCBTVkcgMS4xLy9FTlwiICcsXG4gICAgICAgICdcImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZFwiPlxcbidcbiAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldFNWR0hlYWRlcjogZnVuY3Rpb24obWFya3VwLCBvcHRpb25zKSB7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoIHx8IHRoaXMud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgfHwgdGhpcy5oZWlnaHQsXG4gICAgICAgICAgdnB0LCB2aWV3Qm94ID0gJ3ZpZXdCb3g9XCIwIDAgJyArIHRoaXMud2lkdGggKyAnICcgKyB0aGlzLmhlaWdodCArICdcIiAnLFxuICAgICAgICAgIE5VTV9GUkFDVElPTl9ESUdJVFMgPSBmYWJyaWMuT2JqZWN0Lk5VTV9GUkFDVElPTl9ESUdJVFM7XG5cbiAgICAgIGlmIChvcHRpb25zLnZpZXdCb3gpIHtcbiAgICAgICAgdmlld0JveCA9ICd2aWV3Qm94PVwiJyArXG4gICAgICAgICAgICAgICAgb3B0aW9ucy52aWV3Qm94LnggKyAnICcgK1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudmlld0JveC55ICsgJyAnICtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnZpZXdCb3gud2lkdGggKyAnICcgK1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudmlld0JveC5oZWlnaHQgKyAnXCIgJztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5zdmdWaWV3cG9ydFRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgICAgdnB0ID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybTtcbiAgICAgICAgICB2aWV3Qm94ID0gJ3ZpZXdCb3g9XCInICtcbiAgICAgICAgICAgICAgICAgIHRvRml4ZWQoLXZwdFs0XSAvIHZwdFswXSwgTlVNX0ZSQUNUSU9OX0RJR0lUUykgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgdG9GaXhlZCgtdnB0WzVdIC8gdnB0WzNdLCBOVU1fRlJBQ1RJT05fRElHSVRTKSArICcgJyArXG4gICAgICAgICAgICAgICAgICB0b0ZpeGVkKHRoaXMud2lkdGggLyB2cHRbMF0sIE5VTV9GUkFDVElPTl9ESUdJVFMpICsgJyAnICtcbiAgICAgICAgICAgICAgICAgIHRvRml4ZWQodGhpcy5oZWlnaHQgLyB2cHRbM10sIE5VTV9GUkFDVElPTl9ESUdJVFMpICsgJ1wiICc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWFya3VwLnB1c2goXG4gICAgICAgICc8c3ZnICcsXG4gICAgICAgICd4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgJyxcbiAgICAgICAgJ3htbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiICcsXG4gICAgICAgICd2ZXJzaW9uPVwiMS4xXCIgJyxcbiAgICAgICAgJ3dpZHRoPVwiJywgd2lkdGgsICdcIiAnLFxuICAgICAgICAnaGVpZ2h0PVwiJywgaGVpZ2h0LCAnXCIgJyxcbiAgICAgICAgdmlld0JveCxcbiAgICAgICAgJ3htbDpzcGFjZT1cInByZXNlcnZlXCI+XFxuJyxcbiAgICAgICAgJzxkZXNjPkNyZWF0ZWQgd2l0aCBGYWJyaWMuanMgJywgZmFicmljLnZlcnNpb24sICc8L2Rlc2M+XFxuJyxcbiAgICAgICAgJzxkZWZzPlxcbicsXG4gICAgICAgIHRoaXMuY3JlYXRlU1ZHRm9udEZhY2VzTWFya3VwKCksXG4gICAgICAgIHRoaXMuY3JlYXRlU1ZHUmVmRWxlbWVudHNNYXJrdXAoKSxcbiAgICAgICAgdGhpcy5jcmVhdGVTVkdDbGlwUGF0aE1hcmt1cChvcHRpb25zKSxcbiAgICAgICAgJzwvZGVmcz5cXG4nXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBjcmVhdGVTVkdDbGlwUGF0aE1hcmt1cDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGNsaXBQYXRoID0gdGhpcy5jbGlwUGF0aDtcbiAgICAgIGlmIChjbGlwUGF0aCkge1xuICAgICAgICBjbGlwUGF0aC5jbGlwUGF0aElkID0gJ0NMSVBQQVRIXycgKyBmYWJyaWMuT2JqZWN0Ll9fdWlkKys7XG4gICAgICAgIHJldHVybiAgJzxjbGlwUGF0aCBpZD1cIicgKyBjbGlwUGF0aC5jbGlwUGF0aElkICsgJ1wiID5cXG4nICtcbiAgICAgICAgICB0aGlzLmNsaXBQYXRoLnRvQ2xpcFBhdGhTVkcob3B0aW9ucy5yZXZpdmVyKSArXG4gICAgICAgICAgJzwvY2xpcFBhdGg+XFxuJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBtYXJrdXAgY29udGFpbmluZyBTVkcgcmVmZXJlbmNlZCBlbGVtZW50cyBsaWtlIHBhdHRlcm5zLCBncmFkaWVudHMgZXRjLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBjcmVhdGVTVkdSZWZFbGVtZW50c01hcmt1cDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIG1hcmt1cCA9IFsnYmFja2dyb3VuZCcsICdvdmVybGF5J10ubWFwKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgICAgIHZhciBmaWxsID0gX3RoaXNbcHJvcCArICdDb2xvciddO1xuICAgICAgICAgICAgaWYgKGZpbGwgJiYgZmlsbC50b0xpdmUpIHtcbiAgICAgICAgICAgICAgdmFyIHNob3VsZFRyYW5zZm9ybSA9IF90aGlzW3Byb3AgKyAnVnB0J10sIHZwdCA9IF90aGlzLnZpZXdwb3J0VHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgICAgb2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogX3RoaXMud2lkdGggLyAoc2hvdWxkVHJhbnNmb3JtID8gdnB0WzBdIDogMSksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogX3RoaXMuaGVpZ2h0IC8gKHNob3VsZFRyYW5zZm9ybSA/IHZwdFszXSA6IDEpXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZXR1cm4gZmlsbC50b1NWRyhcbiAgICAgICAgICAgICAgICBvYmplY3QsXG4gICAgICAgICAgICAgICAgeyBhZGRpdGlvbmFsVHJhbnNmb3JtOiBzaG91bGRUcmFuc2Zvcm0gPyBmYWJyaWMudXRpbC5tYXRyaXhUb1NWRyh2cHQpIDogJycgfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hcmt1cC5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBtYXJrdXAgY29udGFpbmluZyBTVkcgZm9udCBmYWNlcyxcbiAgICAgKiBmb250IFVSTHMgZm9yIGZvbnQgZmFjZXMgbXVzdCBiZSBjb2xsZWN0ZWQgYnkgZGV2ZWxvcGVyc1xuICAgICAqIGFuZCBhcmUgbm90IGV4dHJhY3RlZCBmcm9tIHRoZSBET00gYnkgZmFicmljanNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvYmplY3RzIEFycmF5IG9mIGZhYnJpYyBvYmplY3RzXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIGNyZWF0ZVNWR0ZvbnRGYWNlc01hcmt1cDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWFya3VwID0gJycsIGZvbnRMaXN0ID0geyB9LCBvYmosIGZvbnRGYW1pbHksXG4gICAgICAgICAgc3R5bGUsIHJvdywgcm93SW5kZXgsIF9jaGFyLCBjaGFySW5kZXgsIGksIGxlbixcbiAgICAgICAgICBmb250UGF0aHMgPSBmYWJyaWMuZm9udFBhdGhzLCBvYmplY3RzID0gW107XG5cbiAgICAgIHRoaXMuX29iamVjdHMuZm9yRWFjaChmdW5jdGlvbiBhZGQob2JqZWN0KSB7XG4gICAgICAgIG9iamVjdHMucHVzaChvYmplY3QpO1xuICAgICAgICBpZiAob2JqZWN0Ll9vYmplY3RzKSB7XG4gICAgICAgICAgb2JqZWN0Ll9vYmplY3RzLmZvckVhY2goYWRkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IG9iamVjdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgb2JqID0gb2JqZWN0c1tpXTtcbiAgICAgICAgZm9udEZhbWlseSA9IG9iai5mb250RmFtaWx5O1xuICAgICAgICBpZiAob2JqLnR5cGUuaW5kZXhPZigndGV4dCcpID09PSAtMSB8fCBmb250TGlzdFtmb250RmFtaWx5XSB8fCAhZm9udFBhdGhzW2ZvbnRGYW1pbHldKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9udExpc3RbZm9udEZhbWlseV0gPSB0cnVlO1xuICAgICAgICBpZiAoIW9iai5zdHlsZXMpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBzdHlsZSA9IG9iai5zdHlsZXM7XG4gICAgICAgIGZvciAocm93SW5kZXggaW4gc3R5bGUpIHtcbiAgICAgICAgICByb3cgPSBzdHlsZVtyb3dJbmRleF07XG4gICAgICAgICAgZm9yIChjaGFySW5kZXggaW4gcm93KSB7XG4gICAgICAgICAgICBfY2hhciA9IHJvd1tjaGFySW5kZXhdO1xuICAgICAgICAgICAgZm9udEZhbWlseSA9IF9jaGFyLmZvbnRGYW1pbHk7XG4gICAgICAgICAgICBpZiAoIWZvbnRMaXN0W2ZvbnRGYW1pbHldICYmIGZvbnRQYXRoc1tmb250RmFtaWx5XSkge1xuICAgICAgICAgICAgICBmb250TGlzdFtmb250RmFtaWx5XSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogaW4gZm9udExpc3QpIHtcbiAgICAgICAgbWFya3VwICs9IFtcbiAgICAgICAgICAnXFx0XFx0QGZvbnQtZmFjZSB7XFxuJyxcbiAgICAgICAgICAnXFx0XFx0XFx0Zm9udC1mYW1pbHk6IFxcJycsIGosICdcXCc7XFxuJyxcbiAgICAgICAgICAnXFx0XFx0XFx0c3JjOiB1cmwoXFwnJywgZm9udFBhdGhzW2pdLCAnXFwnKTtcXG4nLFxuICAgICAgICAgICdcXHRcXHR9XFxuJ1xuICAgICAgICBdLmpvaW4oJycpO1xuICAgICAgfVxuXG4gICAgICBpZiAobWFya3VwKSB7XG4gICAgICAgIG1hcmt1cCA9IFtcbiAgICAgICAgICAnXFx0PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPicsXG4gICAgICAgICAgJzwhW0NEQVRBW1xcbicsXG4gICAgICAgICAgbWFya3VwLFxuICAgICAgICAgICddXT4nLFxuICAgICAgICAgICc8L3N0eWxlPlxcbidcbiAgICAgICAgXS5qb2luKCcnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hcmt1cDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0U1ZHT2JqZWN0czogZnVuY3Rpb24obWFya3VwLCByZXZpdmVyKSB7XG4gICAgICB2YXIgaW5zdGFuY2UsIGksIGxlbiwgb2JqZWN0cyA9IHRoaXMuX29iamVjdHM7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSBvYmplY3RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGluc3RhbmNlID0gb2JqZWN0c1tpXTtcbiAgICAgICAgaWYgKGluc3RhbmNlLmV4Y2x1ZGVGcm9tRXhwb3J0KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2V0U1ZHT2JqZWN0KG1hcmt1cCwgaW5zdGFuY2UsIHJldml2ZXIpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXRTVkdPYmplY3Q6IGZ1bmN0aW9uKG1hcmt1cCwgaW5zdGFuY2UsIHJldml2ZXIpIHtcbiAgICAgIG1hcmt1cC5wdXNoKGluc3RhbmNlLnRvU1ZHKHJldml2ZXIpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0U1ZHQmdPdmVybGF5SW1hZ2U6IGZ1bmN0aW9uKG1hcmt1cCwgcHJvcGVydHksIHJldml2ZXIpIHtcbiAgICAgIGlmICh0aGlzW3Byb3BlcnR5XSAmJiAhdGhpc1twcm9wZXJ0eV0uZXhjbHVkZUZyb21FeHBvcnQgJiYgdGhpc1twcm9wZXJ0eV0udG9TVkcpIHtcbiAgICAgICAgbWFya3VwLnB1c2godGhpc1twcm9wZXJ0eV0udG9TVkcocmV2aXZlcikpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXRTVkdCZ092ZXJsYXlDb2xvcjogZnVuY3Rpb24obWFya3VwLCBwcm9wZXJ0eSkge1xuICAgICAgdmFyIGZpbGxlciA9IHRoaXNbcHJvcGVydHkgKyAnQ29sb3InXSwgdnB0ID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybSwgZmluYWxXaWR0aCA9IHRoaXMud2lkdGgsXG4gICAgICAgICAgZmluYWxIZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICAgIGlmICghZmlsbGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChmaWxsZXIudG9MaXZlKSB7XG4gICAgICAgIHZhciByZXBlYXQgPSBmaWxsZXIucmVwZWF0LCBpVnB0ID0gZmFicmljLnV0aWwuaW52ZXJ0VHJhbnNmb3JtKHZwdCksIHNob3VsZEludmVydCA9IHRoaXNbcHJvcGVydHkgKyAnVnB0J10sXG4gICAgICAgICAgICBhZGRpdGlvbmFsVHJhbnNmb3JtID0gc2hvdWxkSW52ZXJ0ID8gZmFicmljLnV0aWwubWF0cml4VG9TVkcoaVZwdCkgOiAnJztcbiAgICAgICAgbWFya3VwLnB1c2goXG4gICAgICAgICAgJzxyZWN0IHRyYW5zZm9ybT1cIicgKyBhZGRpdGlvbmFsVHJhbnNmb3JtICsgJyB0cmFuc2xhdGUoJywgZmluYWxXaWR0aCAvIDIsICcsJywgZmluYWxIZWlnaHQgLyAyLCAnKVwiJyxcbiAgICAgICAgICAnIHg9XCInLCBmaWxsZXIub2Zmc2V0WCAtIGZpbmFsV2lkdGggLyAyLFxuICAgICAgICAgICdcIiB5PVwiJywgZmlsbGVyLm9mZnNldFkgLSBmaW5hbEhlaWdodCAvIDIsICdcIiAnLFxuICAgICAgICAgICd3aWR0aD1cIicsXG4gICAgICAgICAgKHJlcGVhdCA9PT0gJ3JlcGVhdC15JyB8fCByZXBlYXQgPT09ICduby1yZXBlYXQnXG4gICAgICAgICAgICA/IGZpbGxlci5zb3VyY2Uud2lkdGhcbiAgICAgICAgICAgIDogZmluYWxXaWR0aCApLFxuICAgICAgICAgICdcIiBoZWlnaHQ9XCInLFxuICAgICAgICAgIChyZXBlYXQgPT09ICdyZXBlYXQteCcgfHwgcmVwZWF0ID09PSAnbm8tcmVwZWF0J1xuICAgICAgICAgICAgPyBmaWxsZXIuc291cmNlLmhlaWdodFxuICAgICAgICAgICAgOiBmaW5hbEhlaWdodCksXG4gICAgICAgICAgJ1wiIGZpbGw9XCJ1cmwoI1NWR0lEXycgKyBmaWxsZXIuaWQgKyAnKVwiJyxcbiAgICAgICAgICAnPjwvcmVjdD5cXG4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbWFya3VwLnB1c2goXG4gICAgICAgICAgJzxyZWN0IHg9XCIwXCIgeT1cIjBcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgJyxcbiAgICAgICAgICAnZmlsbD1cIicsIGZpbGxlciwgJ1wiJyxcbiAgICAgICAgICAnPjwvcmVjdD5cXG4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKiBfVE9fU1ZHX0VORF8gKi9cblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGFuIG9iamVjdCBvciB0aGUgb2JqZWN0cyBvZiBhIG11bHRpcGxlIHNlbGVjdGlvblxuICAgICAqIHRvIHRoZSBib3R0b20gb2YgdGhlIHN0YWNrIG9mIGRyYXduIG9iamVjdHNcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gc2VuZCB0byBiYWNrXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzZW5kVG9CYWNrOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAoIW9iamVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBhY3RpdmVTZWxlY3Rpb24gPSB0aGlzLl9hY3RpdmVPYmplY3QsXG4gICAgICAgICAgaSwgb2JqLCBvYmpzO1xuICAgICAgaWYgKG9iamVjdCA9PT0gYWN0aXZlU2VsZWN0aW9uICYmIG9iamVjdC50eXBlID09PSAnYWN0aXZlU2VsZWN0aW9uJykge1xuICAgICAgICBvYmpzID0gYWN0aXZlU2VsZWN0aW9uLl9vYmplY3RzO1xuICAgICAgICBmb3IgKGkgPSBvYmpzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgIG9iaiA9IG9ianNbaV07XG4gICAgICAgICAgcmVtb3ZlRnJvbUFycmF5KHRoaXMuX29iamVjdHMsIG9iaik7XG4gICAgICAgICAgdGhpcy5fb2JqZWN0cy51bnNoaWZ0KG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZW1vdmVGcm9tQXJyYXkodGhpcy5fb2JqZWN0cywgb2JqZWN0KTtcbiAgICAgICAgdGhpcy5fb2JqZWN0cy51bnNoaWZ0KG9iamVjdCk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbmRlck9uQWRkUmVtb3ZlICYmIHRoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGFuIG9iamVjdCBvciB0aGUgb2JqZWN0cyBvZiBhIG11bHRpcGxlIHNlbGVjdGlvblxuICAgICAqIHRvIHRoZSB0b3Agb2YgdGhlIHN0YWNrIG9mIGRyYXduIG9iamVjdHNcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gc2VuZFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgYnJpbmdUb0Zyb250OiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAoIW9iamVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBhY3RpdmVTZWxlY3Rpb24gPSB0aGlzLl9hY3RpdmVPYmplY3QsXG4gICAgICAgICAgaSwgb2JqLCBvYmpzO1xuICAgICAgaWYgKG9iamVjdCA9PT0gYWN0aXZlU2VsZWN0aW9uICYmIG9iamVjdC50eXBlID09PSAnYWN0aXZlU2VsZWN0aW9uJykge1xuICAgICAgICBvYmpzID0gYWN0aXZlU2VsZWN0aW9uLl9vYmplY3RzO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb2Jqcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG9iaiA9IG9ianNbaV07XG4gICAgICAgICAgcmVtb3ZlRnJvbUFycmF5KHRoaXMuX29iamVjdHMsIG9iaik7XG4gICAgICAgICAgdGhpcy5fb2JqZWN0cy5wdXNoKG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZW1vdmVGcm9tQXJyYXkodGhpcy5fb2JqZWN0cywgb2JqZWN0KTtcbiAgICAgICAgdGhpcy5fb2JqZWN0cy5wdXNoKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbmRlck9uQWRkUmVtb3ZlICYmIHRoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGFuIG9iamVjdCBvciBhIHNlbGVjdGlvbiBkb3duIGluIHN0YWNrIG9mIGRyYXduIG9iamVjdHNcbiAgICAgKiBBbiBvcHRpb25hbCBwYXJhbWV0ZXIsIGludGVyc2VjdGluZyBhbGxvd3MgdG8gbW92ZSB0aGUgb2JqZWN0IGluIGJlaGluZFxuICAgICAqIHRoZSBmaXJzdCBpbnRlcnNlY3Rpbmcgb2JqZWN0LiBXaGVyZSBpbnRlcnNlY3Rpb24gaXMgY2FsY3VsYXRlZCB3aXRoXG4gICAgICogYm91bmRpbmcgYm94LiBJZiBubyBpbnRlcnNlY3Rpb24gaXMgZm91bmQsIHRoZXJlIHdpbGwgbm90IGJlIGNoYW5nZSBpbiB0aGVcbiAgICAgKiBzdGFjay5cbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gc2VuZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ludGVyc2VjdGluZ10gSWYgYHRydWVgLCBzZW5kIG9iamVjdCBiZWhpbmQgbmV4dCBsb3dlciBpbnRlcnNlY3Rpbmcgb2JqZWN0XG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzZW5kQmFja3dhcmRzOiBmdW5jdGlvbiAob2JqZWN0LCBpbnRlcnNlY3RpbmcpIHtcbiAgICAgIGlmICghb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIGFjdGl2ZVNlbGVjdGlvbiA9IHRoaXMuX2FjdGl2ZU9iamVjdCxcbiAgICAgICAgICBpLCBvYmosIGlkeCwgbmV3SWR4LCBvYmpzLCBvYmpzTW92ZWQgPSAwO1xuXG4gICAgICBpZiAob2JqZWN0ID09PSBhY3RpdmVTZWxlY3Rpb24gJiYgb2JqZWN0LnR5cGUgPT09ICdhY3RpdmVTZWxlY3Rpb24nKSB7XG4gICAgICAgIG9ianMgPSBhY3RpdmVTZWxlY3Rpb24uX29iamVjdHM7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBvYmpzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgb2JqID0gb2Jqc1tpXTtcbiAgICAgICAgICBpZHggPSB0aGlzLl9vYmplY3RzLmluZGV4T2Yob2JqKTtcbiAgICAgICAgICBpZiAoaWR4ID4gMCArIG9ianNNb3ZlZCkge1xuICAgICAgICAgICAgbmV3SWR4ID0gaWR4IC0gMTtcbiAgICAgICAgICAgIHJlbW92ZUZyb21BcnJheSh0aGlzLl9vYmplY3RzLCBvYmopO1xuICAgICAgICAgICAgdGhpcy5fb2JqZWN0cy5zcGxpY2UobmV3SWR4LCAwLCBvYmopO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmpzTW92ZWQrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlkeCA9IHRoaXMuX29iamVjdHMuaW5kZXhPZihvYmplY3QpO1xuICAgICAgICBpZiAoaWR4ICE9PSAwKSB7XG4gICAgICAgICAgLy8gaWYgb2JqZWN0IGlzIG5vdCBvbiB0aGUgYm90dG9tIG9mIHN0YWNrXG4gICAgICAgICAgbmV3SWR4ID0gdGhpcy5fZmluZE5ld0xvd2VySW5kZXgob2JqZWN0LCBpZHgsIGludGVyc2VjdGluZyk7XG4gICAgICAgICAgcmVtb3ZlRnJvbUFycmF5KHRoaXMuX29iamVjdHMsIG9iamVjdCk7XG4gICAgICAgICAgdGhpcy5fb2JqZWN0cy5zcGxpY2UobmV3SWR4LCAwLCBvYmplY3QpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnJlbmRlck9uQWRkUmVtb3ZlICYmIHRoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2ZpbmROZXdMb3dlckluZGV4OiBmdW5jdGlvbihvYmplY3QsIGlkeCwgaW50ZXJzZWN0aW5nKSB7XG4gICAgICB2YXIgbmV3SWR4LCBpO1xuXG4gICAgICBpZiAoaW50ZXJzZWN0aW5nKSB7XG4gICAgICAgIG5ld0lkeCA9IGlkeDtcblxuICAgICAgICAvLyB0cmF2ZXJzZSBkb3duIHRoZSBzdGFjayBsb29raW5nIGZvciB0aGUgbmVhcmVzdCBpbnRlcnNlY3Rpbmcgb2JqZWN0XG4gICAgICAgIGZvciAoaSA9IGlkeCAtIDE7IGkgPj0gMDsgLS1pKSB7XG5cbiAgICAgICAgICB2YXIgaXNJbnRlcnNlY3RpbmcgPSBvYmplY3QuaW50ZXJzZWN0c1dpdGhPYmplY3QodGhpcy5fb2JqZWN0c1tpXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuaXNDb250YWluZWRXaXRoaW5PYmplY3QodGhpcy5fb2JqZWN0c1tpXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vYmplY3RzW2ldLmlzQ29udGFpbmVkV2l0aGluT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgICAgICBpZiAoaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgIG5ld0lkeCA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdJZHggPSBpZHggLSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3SWR4O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNb3ZlcyBhbiBvYmplY3Qgb3IgYSBzZWxlY3Rpb24gdXAgaW4gc3RhY2sgb2YgZHJhd24gb2JqZWN0c1xuICAgICAqIEFuIG9wdGlvbmFsIHBhcmFtZXRlciwgaW50ZXJzZWN0aW5nIGFsbG93cyB0byBtb3ZlIHRoZSBvYmplY3QgaW4gZnJvbnRcbiAgICAgKiBvZiB0aGUgZmlyc3QgaW50ZXJzZWN0aW5nIG9iamVjdC4gV2hlcmUgaW50ZXJzZWN0aW9uIGlzIGNhbGN1bGF0ZWQgd2l0aFxuICAgICAqIGJvdW5kaW5nIGJveC4gSWYgbm8gaW50ZXJzZWN0aW9uIGlzIGZvdW5kLCB0aGVyZSB3aWxsIG5vdCBiZSBjaGFuZ2UgaW4gdGhlXG4gICAgICogc3RhY2suXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIHNlbmRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpbnRlcnNlY3RpbmddIElmIGB0cnVlYCwgc2VuZCBvYmplY3QgaW4gZnJvbnQgb2YgbmV4dCB1cHBlciBpbnRlcnNlY3Rpbmcgb2JqZWN0XG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBicmluZ0ZvcndhcmQ6IGZ1bmN0aW9uIChvYmplY3QsIGludGVyc2VjdGluZykge1xuICAgICAgaWYgKCFvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgYWN0aXZlU2VsZWN0aW9uID0gdGhpcy5fYWN0aXZlT2JqZWN0LFxuICAgICAgICAgIGksIG9iaiwgaWR4LCBuZXdJZHgsIG9ianMsIG9ianNNb3ZlZCA9IDA7XG5cbiAgICAgIGlmIChvYmplY3QgPT09IGFjdGl2ZVNlbGVjdGlvbiAmJiBvYmplY3QudHlwZSA9PT0gJ2FjdGl2ZVNlbGVjdGlvbicpIHtcbiAgICAgICAgb2JqcyA9IGFjdGl2ZVNlbGVjdGlvbi5fb2JqZWN0cztcbiAgICAgICAgZm9yIChpID0gb2Jqcy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICBvYmogPSBvYmpzW2ldO1xuICAgICAgICAgIGlkeCA9IHRoaXMuX29iamVjdHMuaW5kZXhPZihvYmopO1xuICAgICAgICAgIGlmIChpZHggPCB0aGlzLl9vYmplY3RzLmxlbmd0aCAtIDEgLSBvYmpzTW92ZWQpIHtcbiAgICAgICAgICAgIG5ld0lkeCA9IGlkeCArIDE7XG4gICAgICAgICAgICByZW1vdmVGcm9tQXJyYXkodGhpcy5fb2JqZWN0cywgb2JqKTtcbiAgICAgICAgICAgIHRoaXMuX29iamVjdHMuc3BsaWNlKG5ld0lkeCwgMCwgb2JqKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2Jqc01vdmVkKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZHggPSB0aGlzLl9vYmplY3RzLmluZGV4T2Yob2JqZWN0KTtcbiAgICAgICAgaWYgKGlkeCAhPT0gdGhpcy5fb2JqZWN0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgLy8gaWYgb2JqZWN0IGlzIG5vdCBvbiB0b3Agb2Ygc3RhY2sgKGxhc3QgaXRlbSBpbiBhbiBhcnJheSlcbiAgICAgICAgICBuZXdJZHggPSB0aGlzLl9maW5kTmV3VXBwZXJJbmRleChvYmplY3QsIGlkeCwgaW50ZXJzZWN0aW5nKTtcbiAgICAgICAgICByZW1vdmVGcm9tQXJyYXkodGhpcy5fb2JqZWN0cywgb2JqZWN0KTtcbiAgICAgICAgICB0aGlzLl9vYmplY3RzLnNwbGljZShuZXdJZHgsIDAsIG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMucmVuZGVyT25BZGRSZW1vdmUgJiYgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZmluZE5ld1VwcGVySW5kZXg6IGZ1bmN0aW9uKG9iamVjdCwgaWR4LCBpbnRlcnNlY3RpbmcpIHtcbiAgICAgIHZhciBuZXdJZHgsIGksIGxlbjtcblxuICAgICAgaWYgKGludGVyc2VjdGluZykge1xuICAgICAgICBuZXdJZHggPSBpZHg7XG5cbiAgICAgICAgLy8gdHJhdmVyc2UgdXAgdGhlIHN0YWNrIGxvb2tpbmcgZm9yIHRoZSBuZWFyZXN0IGludGVyc2VjdGluZyBvYmplY3RcbiAgICAgICAgZm9yIChpID0gaWR4ICsgMSwgbGVuID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuXG4gICAgICAgICAgdmFyIGlzSW50ZXJzZWN0aW5nID0gb2JqZWN0LmludGVyc2VjdHNXaXRoT2JqZWN0KHRoaXMuX29iamVjdHNbaV0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmlzQ29udGFpbmVkV2l0aGluT2JqZWN0KHRoaXMuX29iamVjdHNbaV0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb2JqZWN0c1tpXS5pc0NvbnRhaW5lZFdpdGhpbk9iamVjdChvYmplY3QpO1xuXG4gICAgICAgICAgaWYgKGlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICBuZXdJZHggPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbmV3SWR4ID0gaWR4ICsgMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld0lkeDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYW4gb2JqZWN0IHRvIHNwZWNpZmllZCBsZXZlbCBpbiBzdGFjayBvZiBkcmF3biBvYmplY3RzXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIHNlbmRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggUG9zaXRpb24gdG8gbW92ZSB0b1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgbW92ZVRvOiBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCkge1xuICAgICAgcmVtb3ZlRnJvbUFycmF5KHRoaXMuX29iamVjdHMsIG9iamVjdCk7XG4gICAgICB0aGlzLl9vYmplY3RzLnNwbGljZShpbmRleCwgMCwgb2JqZWN0KTtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlck9uQWRkUmVtb3ZlICYmIHRoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYSBjYW52YXMgZWxlbWVudCBhbmQgZGlzcG9zZSBvYmplY3RzXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBjYW5jZWwgZXZlbnR1YWxseSBvbmdvaW5nIHJlbmRlcnNcbiAgICAgIGlmICh0aGlzLmlzUmVuZGVyaW5nKSB7XG4gICAgICAgIGZhYnJpYy51dGlsLmNhbmNlbEFuaW1GcmFtZSh0aGlzLmlzUmVuZGVyaW5nKTtcbiAgICAgICAgdGhpcy5pc1JlbmRlcmluZyA9IDA7XG4gICAgICB9XG4gICAgICB0aGlzLmZvckVhY2hPYmplY3QoZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIG9iamVjdC5kaXNwb3NlICYmIG9iamVjdC5kaXNwb3NlKCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX29iamVjdHMgPSBbXTtcbiAgICAgIGlmICh0aGlzLmJhY2tncm91bmRJbWFnZSAmJiB0aGlzLmJhY2tncm91bmRJbWFnZS5kaXNwb3NlKSB7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLm92ZXJsYXlJbWFnZSAmJiB0aGlzLm92ZXJsYXlJbWFnZS5kaXNwb3NlKSB7XG4gICAgICAgIHRoaXMub3ZlcmxheUltYWdlLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub3ZlcmxheUltYWdlID0gbnVsbDtcbiAgICAgIHRoaXMuX2lUZXh0SW5zdGFuY2VzID0gbnVsbDtcbiAgICAgIHRoaXMuY29udGV4dENvbnRhaW5lciA9IG51bGw7XG4gICAgICAvLyByZXN0b3JlIGNhbnZhcyBzdHlsZVxuICAgICAgdGhpcy5sb3dlckNhbnZhc0VsLmNsYXNzTGlzdC5yZW1vdmUoJ2xvd2VyLWNhbnZhcycpO1xuICAgICAgZmFicmljLnV0aWwuc2V0U3R5bGUodGhpcy5sb3dlckNhbnZhc0VsLCB0aGlzLl9vcmlnaW5hbENhbnZhc1N0eWxlKTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9vcmlnaW5hbENhbnZhc1N0eWxlO1xuICAgICAgLy8gcmVzdG9yZSBjYW52YXMgc2l6ZSB0byBvcmlnaW5hbCBzaXplIGluIGNhc2UgcmV0aW5hIHNjYWxpbmcgd2FzIGFwcGxpZWRcbiAgICAgIHRoaXMubG93ZXJDYW52YXNFbC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy53aWR0aCk7XG4gICAgICB0aGlzLmxvd2VyQ2FudmFzRWwuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmhlaWdodCk7XG4gICAgICBmYWJyaWMudXRpbC5jbGVhblVwSnNkb21Ob2RlKHRoaXMubG93ZXJDYW52YXNFbCk7XG4gICAgICB0aGlzLmxvd2VyQ2FudmFzRWwgPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAnIzxmYWJyaWMuQ2FudmFzICgnICsgdGhpcy5jb21wbGV4aXR5KCkgKyAnKTogJyArXG4gICAgICAgICAgICAgICAneyBvYmplY3RzOiAnICsgdGhpcy5fb2JqZWN0cy5sZW5ndGggKyAnIH0+JztcbiAgICB9XG4gIH0pO1xuXG4gIGV4dGVuZChmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZSwgZmFicmljLk9ic2VydmFibGUpO1xuICBleHRlbmQoZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUsIGZhYnJpYy5Db2xsZWN0aW9uKTtcbiAgZXh0ZW5kKGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLCBmYWJyaWMuRGF0YVVSTEV4cG9ydGVyKTtcblxuICBleHRlbmQoZmFicmljLlN0YXRpY0NhbnZhcywgLyoqIEBsZW5kcyBmYWJyaWMuU3RhdGljQ2FudmFzICovIHtcblxuICAgIC8qKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIEVNUFRZX0pTT046ICd7XCJvYmplY3RzXCI6IFtdLCBcImJhY2tncm91bmRcIjogXCJ3aGl0ZVwifScsXG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBhIHdheSB0byBjaGVjayBzdXBwb3J0IG9mIHNvbWUgb2YgdGhlIGNhbnZhcyBtZXRob2RzXG4gICAgICogKGVpdGhlciB0aG9zZSBvZiBIVE1MQ2FudmFzRWxlbWVudCBpdHNlbGYsIG9yIHJlbmRlcmluZyBjb250ZXh0KVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZE5hbWUgTWV0aG9kIHRvIGNoZWNrIHN1cHBvcnQgZm9yO1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvdWxkIGJlIG9uZSBvZiBcInNldExpbmVEYXNoXCJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFuIHwgbnVsbH0gYHRydWVgIGlmIG1ldGhvZCBpcyBzdXBwb3J0ZWQgKG9yIGF0IGxlYXN0IGV4aXN0cyksXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGBudWxsYCBpZiBjYW52YXMgZWxlbWVudCBvciBjb250ZXh0IGNhbiBub3QgYmUgaW5pdGlhbGl6ZWRcbiAgICAgKi9cbiAgICBzdXBwb3J0czogZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBlbCA9IGNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcblxuICAgICAgaWYgKCFlbCB8fCAhZWwuZ2V0Q29udGV4dCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGN0eCA9IGVsLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBpZiAoIWN0eCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChtZXRob2ROYW1lKSB7XG5cbiAgICAgICAgY2FzZSAnc2V0TGluZURhc2gnOlxuICAgICAgICAgIHJldHVybiB0eXBlb2YgY3R4LnNldExpbmVEYXNoICE9PSAndW5kZWZpbmVkJztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGNhbnZhc1xuICAgKiB0aGlzIGFsaWFzIGlzIHByb3ZpZGVkIGJlY2F1c2UgaWYgeW91IGNhbGwgSlNPTi5zdHJpbmdpZnkgb24gYW4gaW5zdGFuY2UsXG4gICAqIHRoZSB0b0pTT04gb2JqZWN0IHdpbGwgYmUgaW52b2tlZCBpZiBpdCBleGlzdHMuXG4gICAqIEhhdmluZyBhIHRvSlNPTiBtZXRob2QgbWVhbnMgeW91IGNhbiBkbyBKU09OLnN0cmluZ2lmeShteUNhbnZhcylcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICogQHJldHVybiB7T2JqZWN0fSBKU09OIGNvbXBhdGlibGUgb2JqZWN0XG4gICAqIEB0dXRvcmlhbCB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9mYWJyaWMtaW50cm8tcGFydC0zI3NlcmlhbGl6YXRpb259XG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvZmFicmljanMvcGVjODYvfGpzRmlkZGxlIGRlbW99XG4gICAqIEBleGFtcGxlIDxjYXB0aW9uPkpTT04gd2l0aG91dCBhZGRpdGlvbmFsIHByb3BlcnRpZXM8L2NhcHRpb24+XG4gICAqIHZhciBqc29uID0gY2FudmFzLnRvSlNPTigpO1xuICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5KU09OIHdpdGggYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGluY2x1ZGVkPC9jYXB0aW9uPlxuICAgKiB2YXIganNvbiA9IGNhbnZhcy50b0pTT04oWydsb2NrTW92ZW1lbnRYJywgJ2xvY2tNb3ZlbWVudFknLCAnbG9ja1JvdGF0aW9uJywgJ2xvY2tTY2FsaW5nWCcsICdsb2NrU2NhbGluZ1knXSk7XG4gICAqIEBleGFtcGxlIDxjYXB0aW9uPkpTT04gd2l0aG91dCBkZWZhdWx0IHZhbHVlczwvY2FwdGlvbj5cbiAgICogY2FudmFzLmluY2x1ZGVEZWZhdWx0VmFsdWVzID0gZmFsc2U7XG4gICAqIHZhciBqc29uID0gY2FudmFzLnRvSlNPTigpO1xuICAgKi9cbiAgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUudG9KU09OID0gZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUudG9PYmplY3Q7XG5cbiAgaWYgKGZhYnJpYy5pc0xpa2VseU5vZGUpIHtcbiAgICBmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZS5jcmVhdGVQTkdTdHJlYW0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbXBsID0gZ2V0Tm9kZUNhbnZhcyh0aGlzLmxvd2VyQ2FudmFzRWwpO1xuICAgICAgcmV0dXJuIGltcGwgJiYgaW1wbC5jcmVhdGVQTkdTdHJlYW0oKTtcbiAgICB9O1xuICAgIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLmNyZWF0ZUpQRUdTdHJlYW0gPSBmdW5jdGlvbihvcHRzKSB7XG4gICAgICB2YXIgaW1wbCA9IGdldE5vZGVDYW52YXModGhpcy5sb3dlckNhbnZhc0VsKTtcbiAgICAgIHJldHVybiBpbXBsICYmIGltcGwuY3JlYXRlSlBFR1N0cmVhbShvcHRzKTtcbiAgICB9O1xuICB9XG59KSgpO1xuXG5cbi8qKlxuICogQmFzZUJydXNoIGNsYXNzXG4gKiBAY2xhc3MgZmFicmljLkJhc2VCcnVzaFxuICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9mcmVlZHJhd2luZ3xGcmVlZHJhd2luZyBkZW1vfVxuICovXG5mYWJyaWMuQmFzZUJydXNoID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoLyoqIEBsZW5kcyBmYWJyaWMuQmFzZUJydXNoLnByb3RvdHlwZSAqLyB7XG5cbiAgLyoqXG4gICAqIENvbG9yIG9mIGEgYnJ1c2hcbiAgICogQHR5cGUgU3RyaW5nXG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICBjb2xvcjogJ3JnYigwLCAwLCAwKScsXG5cbiAgLyoqXG4gICAqIFdpZHRoIG9mIGEgYnJ1c2gsIGhhcyB0byBiZSBhIE51bWJlciwgbm8gc3RyaW5nIGxpdGVyYWxzXG4gICAqIEB0eXBlIE51bWJlclxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgd2lkdGg6IDEsXG5cbiAgLyoqXG4gICAqIFNoYWRvdyBvYmplY3QgcmVwcmVzZW50aW5nIHNoYWRvdyBvZiB0aGlzIHNoYXBlLlxuICAgKiA8Yj5CYWNrd2FyZHMgaW5jb21wYXRpYmlsaXR5IG5vdGU6PC9iPiBUaGlzIHByb3BlcnR5IHJlcGxhY2VzIFwic2hhZG93Q29sb3JcIiAoU3RyaW5nKSwgXCJzaGFkb3dPZmZzZXRYXCIgKE51bWJlciksXG4gICAqIFwic2hhZG93T2Zmc2V0WVwiIChOdW1iZXIpIGFuZCBcInNoYWRvd0JsdXJcIiAoTnVtYmVyKSBzaW5jZSB2MS4yLjEyXG4gICAqIEB0eXBlIGZhYnJpYy5TaGFkb3dcbiAgICogQGRlZmF1bHRcbiAgICovXG4gIHNoYWRvdzogbnVsbCxcblxuICAvKipcbiAgICogTGluZSBlbmRpbmdzIHN0eWxlIG9mIGEgYnJ1c2ggKG9uZSBvZiBcImJ1dHRcIiwgXCJyb3VuZFwiLCBcInNxdWFyZVwiKVxuICAgKiBAdHlwZSBTdHJpbmdcbiAgICogQGRlZmF1bHRcbiAgICovXG4gIHN0cm9rZUxpbmVDYXA6ICdyb3VuZCcsXG5cbiAgLyoqXG4gICAqIENvcm5lciBzdHlsZSBvZiBhIGJydXNoIChvbmUgb2YgXCJiZXZlbFwiLCBcInJvdW5kXCIsIFwibWl0ZXJcIilcbiAgICogQHR5cGUgU3RyaW5nXG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICBzdHJva2VMaW5lSm9pbjogJ3JvdW5kJyxcblxuICAvKipcbiAgICogTWF4aW11bSBtaXRlciBsZW5ndGggKHVzZWQgZm9yIHN0cm9rZUxpbmVKb2luID0gXCJtaXRlclwiKSBvZiBhIGJydXNoJ3NcbiAgICogQHR5cGUgTnVtYmVyXG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICBzdHJva2VNaXRlckxpbWl0OiAgICAgICAgIDEwLFxuXG4gIC8qKlxuICAgKiBTdHJva2UgRGFzaCBBcnJheS5cbiAgICogQHR5cGUgQXJyYXlcbiAgICogQGRlZmF1bHRcbiAgICovXG4gIHN0cm9rZURhc2hBcnJheTogbnVsbCxcblxuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAsIHRoZSBmcmVlIGRyYXdpbmcgaXMgbGltaXRlZCB0byB0aGUgd2hpdGVib2FyZCBzaXplLiBEZWZhdWx0IHRvIGZhbHNlLlxuICAgKiBAdHlwZSBCb29sZWFuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICovXG5cbiAgbGltaXRlZFRvQ2FudmFzU2l6ZTogZmFsc2UsXG5cblxuICAvKipcbiAgICogU2V0cyBicnVzaCBzdHlsZXNcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICAgKi9cbiAgX3NldEJydXNoU3R5bGVzOiBmdW5jdGlvbiAoY3R4KSB7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5jb2xvcjtcbiAgICBjdHgubGluZVdpZHRoID0gdGhpcy53aWR0aDtcbiAgICBjdHgubGluZUNhcCA9IHRoaXMuc3Ryb2tlTGluZUNhcDtcbiAgICBjdHgubWl0ZXJMaW1pdCA9IHRoaXMuc3Ryb2tlTWl0ZXJMaW1pdDtcbiAgICBjdHgubGluZUpvaW4gPSB0aGlzLnN0cm9rZUxpbmVKb2luO1xuICAgIGN0eC5zZXRMaW5lRGFzaCh0aGlzLnN0cm9rZURhc2hBcnJheSB8fCBbXSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHRyYW5zZm9ybWF0aW9uIG9uIGdpdmVuIGNvbnRleHRcbiAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0MmR9IGN0eCBjb250ZXh0IHRvIHJlbmRlciBvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NhdmVBbmRUcmFuc2Zvcm06IGZ1bmN0aW9uKGN0eCkge1xuICAgIHZhciB2ID0gdGhpcy5jYW52YXMudmlld3BvcnRUcmFuc2Zvcm07XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNmb3JtKHZbMF0sIHZbMV0sIHZbMl0sIHZbM10sIHZbNF0sIHZbNV0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGJydXNoIHNoYWRvdyBzdHlsZXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRTaGFkb3c6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5zaGFkb3cpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2FudmFzID0gdGhpcy5jYW52YXMsXG4gICAgICAgIHNoYWRvdyA9IHRoaXMuc2hhZG93LFxuICAgICAgICBjdHggPSBjYW52YXMuY29udGV4dFRvcCxcbiAgICAgICAgem9vbSA9IGNhbnZhcy5nZXRab29tKCk7XG4gICAgaWYgKGNhbnZhcyAmJiBjYW52YXMuX2lzUmV0aW5hU2NhbGluZygpKSB7XG4gICAgICB6b29tICo9IGZhYnJpYy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIH1cblxuICAgIGN0eC5zaGFkb3dDb2xvciA9IHNoYWRvdy5jb2xvcjtcbiAgICBjdHguc2hhZG93Qmx1ciA9IHNoYWRvdy5ibHVyICogem9vbTtcbiAgICBjdHguc2hhZG93T2Zmc2V0WCA9IHNoYWRvdy5vZmZzZXRYICogem9vbTtcbiAgICBjdHguc2hhZG93T2Zmc2V0WSA9IHNoYWRvdy5vZmZzZXRZICogem9vbTtcbiAgfSxcblxuICBuZWVkc0Z1bGxSZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb2xvciA9IG5ldyBmYWJyaWMuQ29sb3IodGhpcy5jb2xvcik7XG4gICAgcmV0dXJuIGNvbG9yLmdldEFscGhhKCkgPCAxIHx8ICEhdGhpcy5zaGFkb3c7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYnJ1c2ggc2hhZG93IHN0eWxlc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Jlc2V0U2hhZG93OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3R4ID0gdGhpcy5jYW52YXMuY29udGV4dFRvcDtcblxuICAgIGN0eC5zaGFkb3dDb2xvciA9ICcnO1xuICAgIGN0eC5zaGFkb3dCbHVyID0gY3R4LnNoYWRvd09mZnNldFggPSBjdHguc2hhZG93T2Zmc2V0WSA9IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlzIHBvaW50ZXIgaXMgb3V0c2lkZSBjYW52YXMgYm91bmRhcmllc1xuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlclxuICAgKiBAcHJpdmF0ZVxuICAqL1xuICBfaXNPdXRTaWRlQ2FudmFzOiBmdW5jdGlvbihwb2ludGVyKSB7XG4gICAgcmV0dXJuIHBvaW50ZXIueCA8IDAgfHwgcG9pbnRlci54ID4gdGhpcy5jYW52YXMuZ2V0V2lkdGgoKSB8fCBwb2ludGVyLnkgPCAwIHx8IHBvaW50ZXIueSA+IHRoaXMuY2FudmFzLmdldEhlaWdodCgpO1xuICB9XG59KTtcblxuXG4oZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiBQZW5jaWxCcnVzaCBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLlBlbmNpbEJydXNoXG4gICAqIEBleHRlbmRzIGZhYnJpYy5CYXNlQnJ1c2hcbiAgICovXG4gIGZhYnJpYy5QZW5jaWxCcnVzaCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5CYXNlQnJ1c2gsIC8qKiBAbGVuZHMgZmFicmljLlBlbmNpbEJydXNoLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBEaXNjYXJkIHBvaW50cyB0aGF0IGFyZSBsZXNzIHRoYW4gYGRlY2ltYXRlYCBwaXhlbCBkaXN0YW50IGZyb20gZWFjaCBvdGhlclxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0IDAuNFxuICAgICAqL1xuICAgIGRlY2ltYXRlOiAwLjQsXG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBhIHN0cmFpZ2h0IGxpbmUgYmV0d2VlbiBsYXN0IHJlY29yZGVkIHBvaW50IHRvIGN1cnJlbnQgcG9pbnRlclxuICAgICAqIFVzZWQgZm9yIGBzaGlmdGAgZnVuY3Rpb25hbGl0eVxuICAgICAqXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgZHJhd1N0cmFpZ2h0TGluZTogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZXZlbnQgbW9kaWZpZXIga2V5IHRoYXQgbWFrZXMgdGhlIGJydXNoIGRyYXcgYSBzdHJhaWdodCBsaW5lLlxuICAgICAqIElmIGBudWxsYCBvciAnbm9uZScgb3IgYW55IG90aGVyIHN0cmluZyB0aGF0IGlzIG5vdCBhIG1vZGlmaWVyIGtleSB0aGUgZmVhdHVyZSBpcyBkaXNhYmxlZC5cbiAgICAgKiBAdHlwZSB7J2FsdEtleScgfCAnc2hpZnRLZXknIHwgJ2N0cmxLZXknIHwgJ25vbmUnIHwgdW5kZWZpbmVkIHwgbnVsbH1cbiAgICAgKi9cbiAgICBzdHJhaWdodExpbmVLZXk6ICdzaGlmdEtleScsXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7ZmFicmljLkNhbnZhc30gY2FudmFzXG4gICAgICogQHJldHVybiB7ZmFicmljLlBlbmNpbEJydXNofSBJbnN0YW5jZSBvZiBhIHBlbmNpbCBicnVzaFxuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICB0aGlzLl9wb2ludHMgPSBbXTtcbiAgICB9LFxuXG4gICAgbmVlZHNGdWxsUmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsU3VwZXIoJ25lZWRzRnVsbFJlbmRlcicpIHx8IHRoaXMuX2hhc1N0cmFpZ2h0TGluZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCBpbnNpZGUgb24gbW91c2UgZG93biBhbmQgbW91c2UgbW92ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyXG4gICAgICovXG4gICAgX2RyYXdTZWdtZW50OiBmdW5jdGlvbiAoY3R4LCBwMSwgcDIpIHtcbiAgICAgIHZhciBtaWRQb2ludCA9IHAxLm1pZFBvaW50RnJvbShwMik7XG4gICAgICBjdHgucXVhZHJhdGljQ3VydmVUbyhwMS54LCBwMS55LCBtaWRQb2ludC54LCBtaWRQb2ludC55KTtcbiAgICAgIHJldHVybiBtaWRQb2ludDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCBvbiBtb3VzZSBkb3duXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXJcbiAgICAgKi9cbiAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24ocG9pbnRlciwgb3B0aW9ucykge1xuICAgICAgaWYgKCF0aGlzLmNhbnZhcy5faXNNYWluRXZlbnQob3B0aW9ucy5lKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmRyYXdTdHJhaWdodExpbmUgPSBvcHRpb25zLmVbdGhpcy5zdHJhaWdodExpbmVLZXldO1xuICAgICAgdGhpcy5fcHJlcGFyZUZvckRyYXdpbmcocG9pbnRlcik7XG4gICAgICAvLyBjYXB0dXJlIGNvb3JkaW5hdGVzIGltbWVkaWF0ZWx5XG4gICAgICAvLyB0aGlzIGFsbG93cyB0byBkcmF3IGRvdHMgKHdoZW4gbW92ZW1lbnQgbmV2ZXIgb2NjdXJzKVxuICAgICAgdGhpcy5fY2FwdHVyZURyYXdpbmdQYXRoKHBvaW50ZXIpO1xuICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgb24gbW91c2UgbW92ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyXG4gICAgICovXG4gICAgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uKHBvaW50ZXIsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghdGhpcy5jYW52YXMuX2lzTWFpbkV2ZW50KG9wdGlvbnMuZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5kcmF3U3RyYWlnaHRMaW5lID0gb3B0aW9ucy5lW3RoaXMuc3RyYWlnaHRMaW5lS2V5XTtcbiAgICAgIGlmICh0aGlzLmxpbWl0ZWRUb0NhbnZhc1NpemUgPT09IHRydWUgJiYgdGhpcy5faXNPdXRTaWRlQ2FudmFzKHBvaW50ZXIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9jYXB0dXJlRHJhd2luZ1BhdGgocG9pbnRlcikgJiYgdGhpcy5fcG9pbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgaWYgKHRoaXMubmVlZHNGdWxsUmVuZGVyKCkpIHtcbiAgICAgICAgICAvLyByZWRyYXcgY3VydmVcbiAgICAgICAgICAvLyBjbGVhciB0b3AgY2FudmFzXG4gICAgICAgICAgdGhpcy5jYW52YXMuY2xlYXJDb250ZXh0KHRoaXMuY2FudmFzLmNvbnRleHRUb3ApO1xuICAgICAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBwb2ludHMgPSB0aGlzLl9wb2ludHMsIGxlbmd0aCA9IHBvaW50cy5sZW5ndGgsIGN0eCA9IHRoaXMuY2FudmFzLmNvbnRleHRUb3A7XG4gICAgICAgICAgLy8gZHJhdyB0aGUgY3VydmUgdXBkYXRlXG4gICAgICAgICAgdGhpcy5fc2F2ZUFuZFRyYW5zZm9ybShjdHgpO1xuICAgICAgICAgIGlmICh0aGlzLm9sZEVuZCkge1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh0aGlzLm9sZEVuZC54LCB0aGlzLm9sZEVuZC55KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5vbGRFbmQgPSB0aGlzLl9kcmF3U2VnbWVudChjdHgsIHBvaW50c1tsZW5ndGggLSAyXSwgcG9pbnRzW2xlbmd0aCAtIDFdLCB0cnVlKTtcbiAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIG9uIG1vdXNlIHVwXG4gICAgICovXG4gICAgb25Nb3VzZVVwOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBpZiAoIXRoaXMuY2FudmFzLl9pc01haW5FdmVudChvcHRpb25zLmUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5kcmF3U3RyYWlnaHRMaW5lID0gZmFsc2U7XG4gICAgICB0aGlzLm9sZEVuZCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2ZpbmFsaXplQW5kQWRkUGF0aCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyIEFjdHVhbCBtb3VzZSBwb3NpdGlvbiByZWxhdGVkIHRvIHRoZSBjYW52YXMuXG4gICAgICovXG4gICAgX3ByZXBhcmVGb3JEcmF3aW5nOiBmdW5jdGlvbihwb2ludGVyKSB7XG5cbiAgICAgIHZhciBwID0gbmV3IGZhYnJpYy5Qb2ludChwb2ludGVyLngsIHBvaW50ZXIueSk7XG5cbiAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICB0aGlzLl9hZGRQb2ludChwKTtcbiAgICAgIHRoaXMuY2FudmFzLmNvbnRleHRUb3AubW92ZVRvKHAueCwgcC55KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9pbnQgUG9pbnQgdG8gYmUgYWRkZWQgdG8gcG9pbnRzIGFycmF5XG4gICAgICovXG4gICAgX2FkZFBvaW50OiBmdW5jdGlvbihwb2ludCkge1xuICAgICAgaWYgKHRoaXMuX3BvaW50cy5sZW5ndGggPiAxICYmIHBvaW50LmVxKHRoaXMuX3BvaW50c1t0aGlzLl9wb2ludHMubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmRyYXdTdHJhaWdodExpbmUgJiYgdGhpcy5fcG9pbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy5faGFzU3RyYWlnaHRMaW5lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcG9pbnRzLnBvcCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFyIHBvaW50cyBhcnJheSBhbmQgc2V0IGNvbnRleHRUb3AgY2FudmFzIHN0eWxlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3Jlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3BvaW50cyA9IFtdO1xuICAgICAgdGhpcy5fc2V0QnJ1c2hTdHlsZXModGhpcy5jYW52YXMuY29udGV4dFRvcCk7XG4gICAgICB0aGlzLl9zZXRTaGFkb3coKTtcbiAgICAgIHRoaXMuX2hhc1N0cmFpZ2h0TGluZSA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyIEFjdHVhbCBtb3VzZSBwb3NpdGlvbiByZWxhdGVkIHRvIHRoZSBjYW52YXMuXG4gICAgICovXG4gICAgX2NhcHR1cmVEcmF3aW5nUGF0aDogZnVuY3Rpb24ocG9pbnRlcikge1xuICAgICAgdmFyIHBvaW50ZXJQb2ludCA9IG5ldyBmYWJyaWMuUG9pbnQocG9pbnRlci54LCBwb2ludGVyLnkpO1xuICAgICAgcmV0dXJuIHRoaXMuX2FkZFBvaW50KHBvaW50ZXJQb2ludCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERyYXcgYSBzbW9vdGggcGF0aCBvbiB0aGUgdG9wQ2FudmFzIHVzaW5nIHF1YWRyYXRpY0N1cnZlVG9cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBbY3R4XVxuICAgICAqL1xuICAgIF9yZW5kZXI6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgdmFyIGksIGxlbixcbiAgICAgICAgICBwMSA9IHRoaXMuX3BvaW50c1swXSxcbiAgICAgICAgICBwMiA9IHRoaXMuX3BvaW50c1sxXTtcbiAgICAgIGN0eCA9IGN0eCB8fCB0aGlzLmNhbnZhcy5jb250ZXh0VG9wO1xuICAgICAgdGhpcy5fc2F2ZUFuZFRyYW5zZm9ybShjdHgpO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgLy9pZiB3ZSBvbmx5IGhhdmUgMiBwb2ludHMgaW4gdGhlIHBhdGggYW5kIHRoZXkgYXJlIHRoZSBzYW1lXG4gICAgICAvL2l0IG1lYW5zIHRoYXQgdGhlIHVzZXIgb25seSBjbGlja2VkIHRoZSBjYW52YXMgd2l0aG91dCBtb3ZpbmcgdGhlIG1vdXNlXG4gICAgICAvL3RoZW4gd2Ugc2hvdWxkIGJlIGRyYXdpbmcgYSBkb3QuIEEgcGF0aCBpc24ndCBkcmF3biBiZXR3ZWVuIHR3byBpZGVudGljYWwgZG90c1xuICAgICAgLy90aGF0J3Mgd2h5IHdlIHNldCB0aGVtIGFwYXJ0IGEgYml0XG4gICAgICBpZiAodGhpcy5fcG9pbnRzLmxlbmd0aCA9PT0gMiAmJiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnkpIHtcbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy53aWR0aCAvIDEwMDA7XG4gICAgICAgIHAxID0gbmV3IGZhYnJpYy5Qb2ludChwMS54LCBwMS55KTtcbiAgICAgICAgcDIgPSBuZXcgZmFicmljLlBvaW50KHAyLngsIHAyLnkpO1xuICAgICAgICBwMS54IC09IHdpZHRoO1xuICAgICAgICBwMi54ICs9IHdpZHRoO1xuICAgICAgfVxuICAgICAgY3R4Lm1vdmVUbyhwMS54LCBwMS55KTtcblxuICAgICAgZm9yIChpID0gMSwgbGVuID0gdGhpcy5fcG9pbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIC8vIHdlIHBpY2sgdGhlIHBvaW50IGJldHdlZW4gcGkgKyAxICYgcGkgKyAyIGFzIHRoZVxuICAgICAgICAvLyBlbmQgcG9pbnQgYW5kIHAxIGFzIG91ciBjb250cm9sIHBvaW50LlxuICAgICAgICB0aGlzLl9kcmF3U2VnbWVudChjdHgsIHAxLCBwMik7XG4gICAgICAgIHAxID0gdGhpcy5fcG9pbnRzW2ldO1xuICAgICAgICBwMiA9IHRoaXMuX3BvaW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBEcmF3IGxhc3QgbGluZSBhcyBhIHN0cmFpZ2h0IGxpbmUgd2hpbGVcbiAgICAgIC8vIHdlIHdhaXQgZm9yIHRoZSBuZXh0IHBvaW50IHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlXG4gICAgICAvLyB0aGUgYmV6aWVyIGNvbnRyb2wgcG9pbnRcbiAgICAgIGN0eC5saW5lVG8ocDEueCwgcDEueSk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBwb2ludHMgdG8gU1ZHIHBhdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwb2ludHMgQXJyYXkgb2YgcG9pbnRzXG4gICAgICogQHJldHVybiB7KHN0cmluZ3xudW1iZXIpW11bXX0gU1ZHIHBhdGggY29tbWFuZHNcbiAgICAgKi9cbiAgICBjb252ZXJ0UG9pbnRzVG9TVkdQYXRoOiBmdW5jdGlvbiAocG9pbnRzKSB7XG4gICAgICB2YXIgY29ycmVjdGlvbiA9IHRoaXMud2lkdGggLyAxMDAwO1xuICAgICAgcmV0dXJuIGZhYnJpYy51dGlsLmdldFNtb290aFBhdGhGcm9tUG9pbnRzKHBvaW50cywgY29ycmVjdGlvbik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcilbXVtdfSBwYXRoRGF0YSBTVkcgcGF0aCBjb21tYW5kc1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIF9pc0VtcHR5U1ZHUGF0aDogZnVuY3Rpb24gKHBhdGhEYXRhKSB7XG4gICAgICB2YXIgcGF0aFN0cmluZyA9IGZhYnJpYy51dGlsLmpvaW5QYXRoKHBhdGhEYXRhKTtcbiAgICAgIHJldHVybiBwYXRoU3RyaW5nID09PSAnTSAwIDAgUSAwIDAgMCAwIEwgMCAwJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBmYWJyaWMuUGF0aCBvYmplY3QgdG8gYWRkIG9uIGNhbnZhc1xuICAgICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpW11bXX0gcGF0aERhdGEgUGF0aCBkYXRhXG4gICAgICogQHJldHVybiB7ZmFicmljLlBhdGh9IFBhdGggdG8gYWRkIG9uIGNhbnZhc1xuICAgICAqL1xuICAgIGNyZWF0ZVBhdGg6IGZ1bmN0aW9uKHBhdGhEYXRhKSB7XG4gICAgICB2YXIgcGF0aCA9IG5ldyBmYWJyaWMuUGF0aChwYXRoRGF0YSwge1xuICAgICAgICBmaWxsOiBudWxsLFxuICAgICAgICBzdHJva2U6IHRoaXMuY29sb3IsXG4gICAgICAgIHN0cm9rZVdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICBzdHJva2VMaW5lQ2FwOiB0aGlzLnN0cm9rZUxpbmVDYXAsXG4gICAgICAgIHN0cm9rZU1pdGVyTGltaXQ6IHRoaXMuc3Ryb2tlTWl0ZXJMaW1pdCxcbiAgICAgICAgc3Ryb2tlTGluZUpvaW46IHRoaXMuc3Ryb2tlTGluZUpvaW4sXG4gICAgICAgIHN0cm9rZURhc2hBcnJheTogdGhpcy5zdHJva2VEYXNoQXJyYXksXG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLnNoYWRvdykge1xuICAgICAgICB0aGlzLnNoYWRvdy5hZmZlY3RTdHJva2UgPSB0cnVlO1xuICAgICAgICBwYXRoLnNoYWRvdyA9IG5ldyBmYWJyaWMuU2hhZG93KHRoaXMuc2hhZG93KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlY2ltYXRlIHBvaW50cyBhcnJheSB3aXRoIHRoZSBkZWNpbWF0ZSB2YWx1ZVxuICAgICAqL1xuICAgIGRlY2ltYXRlUG9pbnRzOiBmdW5jdGlvbihwb2ludHMsIGRpc3RhbmNlKSB7XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA8PSAyKSB7XG4gICAgICAgIHJldHVybiBwb2ludHM7XG4gICAgICB9XG4gICAgICB2YXIgem9vbSA9IHRoaXMuY2FudmFzLmdldFpvb20oKSwgYWRqdXN0ZWREaXN0YW5jZSA9IE1hdGgucG93KGRpc3RhbmNlIC8gem9vbSwgMiksXG4gICAgICAgICAgaSwgbCA9IHBvaW50cy5sZW5ndGggLSAxLCBsYXN0UG9pbnQgPSBwb2ludHNbMF0sIG5ld1BvaW50cyA9IFtsYXN0UG9pbnRdLFxuICAgICAgICAgIGNEaXN0YW5jZTtcbiAgICAgIGZvciAoaSA9IDE7IGkgPCBsIC0gMTsgaSsrKSB7XG4gICAgICAgIGNEaXN0YW5jZSA9IE1hdGgucG93KGxhc3RQb2ludC54IC0gcG9pbnRzW2ldLngsIDIpICsgTWF0aC5wb3cobGFzdFBvaW50LnkgLSBwb2ludHNbaV0ueSwgMik7XG4gICAgICAgIGlmIChjRGlzdGFuY2UgPj0gYWRqdXN0ZWREaXN0YW5jZSkge1xuICAgICAgICAgIGxhc3RQb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICBuZXdQb2ludHMucHVzaChsYXN0UG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEFkZCB0aGUgbGFzdCBwb2ludCBmcm9tIHRoZSBvcmlnaW5hbCBsaW5lIHRvIHRoZSBlbmQgb2YgdGhlIGFycmF5LlxuICAgICAgICogVGhpcyBlbnN1cmVzIGRlY2ltYXRlIGRvZXNuJ3QgZGVsZXRlIHRoZSBsYXN0IHBvaW50IG9uIHRoZSBsaW5lLCBhbmQgZW5zdXJlcyB0aGUgbGluZSBpcyA+IDEgcG9pbnQuXG4gICAgICAgKi9cbiAgICAgIG5ld1BvaW50cy5wdXNoKHBvaW50c1tsXSk7XG4gICAgICByZXR1cm4gbmV3UG9pbnRzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBPbiBtb3VzZXVwIGFmdGVyIGRyYXdpbmcgdGhlIHBhdGggb24gY29udGV4dFRvcCBjYW52YXNcbiAgICAgKiB3ZSB1c2UgdGhlIHBvaW50cyBjYXB0dXJlZCB0byBjcmVhdGUgYW4gbmV3IGZhYnJpYyBwYXRoIG9iamVjdFxuICAgICAqIGFuZCBhZGQgaXQgdG8gdGhlIGZhYnJpYyBjYW52YXMuXG4gICAgICovXG4gICAgX2ZpbmFsaXplQW5kQWRkUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3R4ID0gdGhpcy5jYW52YXMuY29udGV4dFRvcDtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIGlmICh0aGlzLmRlY2ltYXRlKSB7XG4gICAgICAgIHRoaXMuX3BvaW50cyA9IHRoaXMuZGVjaW1hdGVQb2ludHModGhpcy5fcG9pbnRzLCB0aGlzLmRlY2ltYXRlKTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXRoRGF0YSA9IHRoaXMuY29udmVydFBvaW50c1RvU1ZHUGF0aCh0aGlzLl9wb2ludHMpO1xuICAgICAgaWYgKHRoaXMuX2lzRW1wdHlTVkdQYXRoKHBhdGhEYXRhKSkge1xuICAgICAgICAvLyBkbyBub3QgY3JlYXRlIDAgd2lkdGgvaGVpZ2h0IHBhdGhzLCBhcyB0aGV5IGFyZVxuICAgICAgICAvLyByZW5kZXJlZCBpbmNvbnNpc3RlbnRseSBhY3Jvc3MgYnJvd3NlcnNcbiAgICAgICAgLy8gRmlyZWZveCA0LCBmb3IgZXhhbXBsZSwgcmVuZGVycyBhIGRvdCxcbiAgICAgICAgLy8gd2hlcmVhcyBDaHJvbWUgMTAgcmVuZGVycyBub3RoaW5nXG4gICAgICAgIHRoaXMuY2FudmFzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGF0aCA9IHRoaXMuY3JlYXRlUGF0aChwYXRoRGF0YSk7XG4gICAgICB0aGlzLmNhbnZhcy5jbGVhckNvbnRleHQodGhpcy5jYW52YXMuY29udGV4dFRvcCk7XG4gICAgICB0aGlzLmNhbnZhcy5maXJlKCdiZWZvcmU6cGF0aDpjcmVhdGVkJywgeyBwYXRoOiBwYXRoIH0pO1xuICAgICAgdGhpcy5jYW52YXMuYWRkKHBhdGgpO1xuICAgICAgdGhpcy5jYW52YXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgcGF0aC5zZXRDb29yZHMoKTtcbiAgICAgIHRoaXMuX3Jlc2V0U2hhZG93KCk7XG5cblxuICAgICAgLy8gZmlyZSBldmVudCAncGF0aCcgY3JlYXRlZFxuICAgICAgdGhpcy5jYW52YXMuZmlyZSgncGF0aDpjcmVhdGVkJywgeyBwYXRoOiBwYXRoIH0pO1xuICAgIH1cbiAgfSk7XG59KSgpO1xuXG5cbi8qKlxuICogQ2lyY2xlQnJ1c2ggY2xhc3NcbiAqIEBjbGFzcyBmYWJyaWMuQ2lyY2xlQnJ1c2hcbiAqL1xuZmFicmljLkNpcmNsZUJydXNoID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLkJhc2VCcnVzaCwgLyoqIEBsZW5kcyBmYWJyaWMuQ2lyY2xlQnJ1c2gucHJvdG90eXBlICovIHtcblxuICAvKipcbiAgICogV2lkdGggb2YgYSBicnVzaFxuICAgKiBAdHlwZSBOdW1iZXJcbiAgICogQGRlZmF1bHRcbiAgICovXG4gIHdpZHRoOiAxMCxcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtmYWJyaWMuQ2FudmFzfSBjYW52YXNcbiAgICogQHJldHVybiB7ZmFicmljLkNpcmNsZUJydXNofSBJbnN0YW5jZSBvZiBhIGNpcmNsZSBicnVzaFxuICAgKi9cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgdGhpcy5wb2ludHMgPSBbXTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlZCBpbnNpZGUgb24gbW91c2UgZG93biBhbmQgbW91c2UgbW92ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlclxuICAgKi9cbiAgZHJhd0RvdDogZnVuY3Rpb24ocG9pbnRlcikge1xuICAgIHZhciBwb2ludCA9IHRoaXMuYWRkUG9pbnQocG9pbnRlciksXG4gICAgICAgIGN0eCA9IHRoaXMuY2FudmFzLmNvbnRleHRUb3A7XG4gICAgdGhpcy5fc2F2ZUFuZFRyYW5zZm9ybShjdHgpO1xuICAgIHRoaXMuZG90KGN0eCwgcG9pbnQpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH0sXG5cbiAgZG90OiBmdW5jdGlvbihjdHgsIHBvaW50KSB7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHBvaW50LmZpbGw7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmMocG9pbnQueCwgcG9pbnQueSwgcG9pbnQucmFkaXVzLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguZmlsbCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIG9uIG1vdXNlIGRvd25cbiAgICovXG4gIG9uTW91c2VEb3duOiBmdW5jdGlvbihwb2ludGVyKSB7XG4gICAgdGhpcy5wb2ludHMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmNhbnZhcy5jbGVhckNvbnRleHQodGhpcy5jYW52YXMuY29udGV4dFRvcCk7XG4gICAgdGhpcy5fc2V0U2hhZG93KCk7XG4gICAgdGhpcy5kcmF3RG90KHBvaW50ZXIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIGZ1bGwgc3RhdGUgb2YgdGhlIGJydXNoXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3R4ICA9IHRoaXMuY2FudmFzLmNvbnRleHRUb3AsIGksIGxlbixcbiAgICAgICAgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgdGhpcy5fc2F2ZUFuZFRyYW5zZm9ybShjdHgpO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdGhpcy5kb3QoY3R4LCBwb2ludHNbaV0pO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIG9uIG1vdXNlIG1vdmVcbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXJcbiAgICovXG4gIG9uTW91c2VNb3ZlOiBmdW5jdGlvbihwb2ludGVyKSB7XG4gICAgaWYgKHRoaXMubGltaXRlZFRvQ2FudmFzU2l6ZSA9PT0gdHJ1ZSAmJiB0aGlzLl9pc091dFNpZGVDYW52YXMocG9pbnRlcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVlZHNGdWxsUmVuZGVyKCkpIHtcbiAgICAgIHRoaXMuY2FudmFzLmNsZWFyQ29udGV4dCh0aGlzLmNhbnZhcy5jb250ZXh0VG9wKTtcbiAgICAgIHRoaXMuYWRkUG9pbnQocG9pbnRlcik7XG4gICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmRyYXdEb3QocG9pbnRlcik7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIG9uIG1vdXNlIHVwXG4gICAqL1xuICBvbk1vdXNlVXA6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvcmlnaW5hbFJlbmRlck9uQWRkUmVtb3ZlID0gdGhpcy5jYW52YXMucmVuZGVyT25BZGRSZW1vdmUsIGksIGxlbjtcbiAgICB0aGlzLmNhbnZhcy5yZW5kZXJPbkFkZFJlbW92ZSA9IGZhbHNlO1xuXG4gICAgdmFyIGNpcmNsZXMgPSBbXTtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IHRoaXMucG9pbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgcG9pbnQgPSB0aGlzLnBvaW50c1tpXSxcbiAgICAgICAgICBjaXJjbGUgPSBuZXcgZmFicmljLkNpcmNsZSh7XG4gICAgICAgICAgICByYWRpdXM6IHBvaW50LnJhZGl1cyxcbiAgICAgICAgICAgIGxlZnQ6IHBvaW50LngsXG4gICAgICAgICAgICB0b3A6IHBvaW50LnksXG4gICAgICAgICAgICBvcmlnaW5YOiAnY2VudGVyJyxcbiAgICAgICAgICAgIG9yaWdpblk6ICdjZW50ZXInLFxuICAgICAgICAgICAgZmlsbDogcG9pbnQuZmlsbFxuICAgICAgICAgIH0pO1xuXG4gICAgICB0aGlzLnNoYWRvdyAmJiAoY2lyY2xlLnNoYWRvdyA9IG5ldyBmYWJyaWMuU2hhZG93KHRoaXMuc2hhZG93KSk7XG5cbiAgICAgIGNpcmNsZXMucHVzaChjaXJjbGUpO1xuICAgIH1cbiAgICB2YXIgZ3JvdXAgPSBuZXcgZmFicmljLkdyb3VwKGNpcmNsZXMpO1xuICAgIGdyb3VwLmNhbnZhcyA9IHRoaXMuY2FudmFzO1xuXG4gICAgdGhpcy5jYW52YXMuZmlyZSgnYmVmb3JlOnBhdGg6Y3JlYXRlZCcsIHsgcGF0aDogZ3JvdXAgfSk7XG4gICAgdGhpcy5jYW52YXMuYWRkKGdyb3VwKTtcbiAgICB0aGlzLmNhbnZhcy5maXJlKCdwYXRoOmNyZWF0ZWQnLCB7IHBhdGg6IGdyb3VwIH0pO1xuXG4gICAgdGhpcy5jYW52YXMuY2xlYXJDb250ZXh0KHRoaXMuY2FudmFzLmNvbnRleHRUb3ApO1xuICAgIHRoaXMuX3Jlc2V0U2hhZG93KCk7XG4gICAgdGhpcy5jYW52YXMucmVuZGVyT25BZGRSZW1vdmUgPSBvcmlnaW5hbFJlbmRlck9uQWRkUmVtb3ZlO1xuICAgIHRoaXMuY2FudmFzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXJcbiAgICogQHJldHVybiB7ZmFicmljLlBvaW50fSBKdXN0IGFkZGVkIHBvaW50ZXIgcG9pbnRcbiAgICovXG4gIGFkZFBvaW50OiBmdW5jdGlvbihwb2ludGVyKSB7XG4gICAgdmFyIHBvaW50ZXJQb2ludCA9IG5ldyBmYWJyaWMuUG9pbnQocG9pbnRlci54LCBwb2ludGVyLnkpLFxuXG4gICAgICAgIGNpcmNsZVJhZGl1cyA9IGZhYnJpYy51dGlsLmdldFJhbmRvbUludChcbiAgICAgICAgICBNYXRoLm1heCgwLCB0aGlzLndpZHRoIC0gMjApLCB0aGlzLndpZHRoICsgMjApIC8gMixcblxuICAgICAgICBjaXJjbGVDb2xvciA9IG5ldyBmYWJyaWMuQ29sb3IodGhpcy5jb2xvcilcbiAgICAgICAgICAuc2V0QWxwaGEoZmFicmljLnV0aWwuZ2V0UmFuZG9tSW50KDAsIDEwMCkgLyAxMDApXG4gICAgICAgICAgLnRvUmdiYSgpO1xuXG4gICAgcG9pbnRlclBvaW50LnJhZGl1cyA9IGNpcmNsZVJhZGl1cztcbiAgICBwb2ludGVyUG9pbnQuZmlsbCA9IGNpcmNsZUNvbG9yO1xuXG4gICAgdGhpcy5wb2ludHMucHVzaChwb2ludGVyUG9pbnQpO1xuXG4gICAgcmV0dXJuIHBvaW50ZXJQb2ludDtcbiAgfVxufSk7XG5cblxuLyoqXG4gKiBTcHJheUJydXNoIGNsYXNzXG4gKiBAY2xhc3MgZmFicmljLlNwcmF5QnJ1c2hcbiAqL1xuZmFicmljLlNwcmF5QnJ1c2ggPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyggZmFicmljLkJhc2VCcnVzaCwgLyoqIEBsZW5kcyBmYWJyaWMuU3ByYXlCcnVzaC5wcm90b3R5cGUgKi8ge1xuXG4gIC8qKlxuICAgKiBXaWR0aCBvZiBhIHNwcmF5XG4gICAqIEB0eXBlIE51bWJlclxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgd2lkdGg6ICAgICAgICAgICAgICAxMCxcblxuICAvKipcbiAgICogRGVuc2l0eSBvZiBhIHNwcmF5IChudW1iZXIgb2YgZG90cyBwZXIgY2h1bmspXG4gICAqIEB0eXBlIE51bWJlclxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgZGVuc2l0eTogICAgICAgICAgICAyMCxcblxuICAvKipcbiAgICogV2lkdGggb2Ygc3ByYXkgZG90c1xuICAgKiBAdHlwZSBOdW1iZXJcbiAgICogQGRlZmF1bHRcbiAgICovXG4gIGRvdFdpZHRoOiAgICAgICAgICAgMSxcblxuICAvKipcbiAgICogV2lkdGggdmFyaWFuY2Ugb2Ygc3ByYXkgZG90c1xuICAgKiBAdHlwZSBOdW1iZXJcbiAgICogQGRlZmF1bHRcbiAgICovXG4gIGRvdFdpZHRoVmFyaWFuY2U6ICAgMSxcblxuICAvKipcbiAgICogV2hldGhlciBvcGFjaXR5IG9mIGEgZG90IHNob3VsZCBiZSByYW5kb21cbiAgICogQHR5cGUgQm9vbGVhblxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgcmFuZG9tT3BhY2l0eTogICAgICAgIGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG92ZXJsYXBwaW5nIGRvdHMgKHJlY3RhbmdsZXMpIHNob3VsZCBiZSByZW1vdmVkIChmb3IgcGVyZm9ybWFuY2UgcmVhc29ucylcbiAgICogQHR5cGUgQm9vbGVhblxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgb3B0aW1pemVPdmVybGFwcGluZzogIHRydWUsXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7ZmFicmljLkNhbnZhc30gY2FudmFzXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5TcHJheUJydXNofSBJbnN0YW5jZSBvZiBhIHNwcmF5IGJydXNoXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbihjYW52YXMpIHtcbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICB0aGlzLnNwcmF5Q2h1bmtzID0gW107XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZWQgb24gbW91c2UgZG93blxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlclxuICAgKi9cbiAgb25Nb3VzZURvd246IGZ1bmN0aW9uKHBvaW50ZXIpIHtcbiAgICB0aGlzLnNwcmF5Q2h1bmtzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5jYW52YXMuY2xlYXJDb250ZXh0KHRoaXMuY2FudmFzLmNvbnRleHRUb3ApO1xuICAgIHRoaXMuX3NldFNoYWRvdygpO1xuXG4gICAgdGhpcy5hZGRTcHJheUNodW5rKHBvaW50ZXIpO1xuICAgIHRoaXMucmVuZGVyKHRoaXMuc3ByYXlDaHVua1BvaW50cyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZWQgb24gbW91c2UgbW92ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlclxuICAgKi9cbiAgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uKHBvaW50ZXIpIHtcbiAgICBpZiAodGhpcy5saW1pdGVkVG9DYW52YXNTaXplID09PSB0cnVlICYmIHRoaXMuX2lzT3V0U2lkZUNhbnZhcyhwb2ludGVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmFkZFNwcmF5Q2h1bmsocG9pbnRlcik7XG4gICAgdGhpcy5yZW5kZXIodGhpcy5zcHJheUNodW5rUG9pbnRzKTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlZCBvbiBtb3VzZSB1cFxuICAgKi9cbiAgb25Nb3VzZVVwOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb3JpZ2luYWxSZW5kZXJPbkFkZFJlbW92ZSA9IHRoaXMuY2FudmFzLnJlbmRlck9uQWRkUmVtb3ZlO1xuICAgIHRoaXMuY2FudmFzLnJlbmRlck9uQWRkUmVtb3ZlID0gZmFsc2U7XG5cbiAgICB2YXIgcmVjdHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5zcHJheUNodW5rcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIHZhciBzcHJheUNodW5rID0gdGhpcy5zcHJheUNodW5rc1tpXTtcblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGpsZW4gPSBzcHJheUNodW5rLmxlbmd0aDsgaiA8IGpsZW47IGorKykge1xuXG4gICAgICAgIHZhciByZWN0ID0gbmV3IGZhYnJpYy5SZWN0KHtcbiAgICAgICAgICB3aWR0aDogc3ByYXlDaHVua1tqXS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IHNwcmF5Q2h1bmtbal0ud2lkdGgsXG4gICAgICAgICAgbGVmdDogc3ByYXlDaHVua1tqXS54ICsgMSxcbiAgICAgICAgICB0b3A6IHNwcmF5Q2h1bmtbal0ueSArIDEsXG4gICAgICAgICAgb3JpZ2luWDogJ2NlbnRlcicsXG4gICAgICAgICAgb3JpZ2luWTogJ2NlbnRlcicsXG4gICAgICAgICAgZmlsbDogdGhpcy5jb2xvclxuICAgICAgICB9KTtcbiAgICAgICAgcmVjdHMucHVzaChyZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpbWl6ZU92ZXJsYXBwaW5nKSB7XG4gICAgICByZWN0cyA9IHRoaXMuX2dldE9wdGltaXplZFJlY3RzKHJlY3RzKTtcbiAgICB9XG5cbiAgICB2YXIgZ3JvdXAgPSBuZXcgZmFicmljLkdyb3VwKHJlY3RzKTtcbiAgICB0aGlzLnNoYWRvdyAmJiBncm91cC5zZXQoJ3NoYWRvdycsIG5ldyBmYWJyaWMuU2hhZG93KHRoaXMuc2hhZG93KSk7XG4gICAgdGhpcy5jYW52YXMuZmlyZSgnYmVmb3JlOnBhdGg6Y3JlYXRlZCcsIHsgcGF0aDogZ3JvdXAgfSk7XG4gICAgdGhpcy5jYW52YXMuYWRkKGdyb3VwKTtcbiAgICB0aGlzLmNhbnZhcy5maXJlKCdwYXRoOmNyZWF0ZWQnLCB7IHBhdGg6IGdyb3VwIH0pO1xuXG4gICAgdGhpcy5jYW52YXMuY2xlYXJDb250ZXh0KHRoaXMuY2FudmFzLmNvbnRleHRUb3ApO1xuICAgIHRoaXMuX3Jlc2V0U2hhZG93KCk7XG4gICAgdGhpcy5jYW52YXMucmVuZGVyT25BZGRSZW1vdmUgPSBvcmlnaW5hbFJlbmRlck9uQWRkUmVtb3ZlO1xuICAgIHRoaXMuY2FudmFzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gcmVjdHNcbiAgICovXG4gIF9nZXRPcHRpbWl6ZWRSZWN0czogZnVuY3Rpb24ocmVjdHMpIHtcblxuICAgIC8vIGF2b2lkIGNyZWF0aW5nIGR1cGxpY2F0ZSByZWN0cyBhdCB0aGUgc2FtZSBjb29yZGluYXRlc1xuICAgIHZhciB1bmlxdWVSZWN0cyA9IHsgfSwga2V5LCBpLCBsZW47XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0gcmVjdHNbaV0ubGVmdCArICcnICsgcmVjdHNbaV0udG9wO1xuICAgICAgaWYgKCF1bmlxdWVSZWN0c1trZXldKSB7XG4gICAgICAgIHVuaXF1ZVJlY3RzW2tleV0gPSByZWN0c1tpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHVuaXF1ZVJlY3RzQXJyYXkgPSBbXTtcbiAgICBmb3IgKGtleSBpbiB1bmlxdWVSZWN0cykge1xuICAgICAgdW5pcXVlUmVjdHNBcnJheS5wdXNoKHVuaXF1ZVJlY3RzW2tleV0pO1xuICAgIH1cblxuICAgIHJldHVybiB1bmlxdWVSZWN0c0FycmF5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgbmV3IGNodW5rIG9mIHNwcmF5IGJydXNoXG4gICAqL1xuICByZW5kZXI6IGZ1bmN0aW9uKHNwcmF5Q2h1bmspIHtcbiAgICB2YXIgY3R4ID0gdGhpcy5jYW52YXMuY29udGV4dFRvcCwgaSwgbGVuO1xuICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9yO1xuXG4gICAgdGhpcy5fc2F2ZUFuZFRyYW5zZm9ybShjdHgpO1xuXG4gICAgZm9yIChpID0gMCwgbGVuID0gc3ByYXlDaHVuay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIHBvaW50ID0gc3ByYXlDaHVua1tpXTtcbiAgICAgIGlmICh0eXBlb2YgcG9pbnQub3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gcG9pbnQub3BhY2l0eTtcbiAgICAgIH1cbiAgICAgIGN0eC5maWxsUmVjdChwb2ludC54LCBwb2ludC55LCBwb2ludC53aWR0aCwgcG9pbnQud2lkdGgpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYWxsIHNwcmF5IGNodW5rc1xuICAgKi9cbiAgX3JlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGN0eCA9IHRoaXMuY2FudmFzLmNvbnRleHRUb3AsIGksIGlsZW47XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7XG5cbiAgICB0aGlzLl9zYXZlQW5kVHJhbnNmb3JtKGN0eCk7XG5cbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGhpcy5zcHJheUNodW5rcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIHRoaXMucmVuZGVyKHRoaXMuc3ByYXlDaHVua3NbaV0pO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlclxuICAgKi9cbiAgYWRkU3ByYXlDaHVuazogZnVuY3Rpb24ocG9pbnRlcikge1xuICAgIHRoaXMuc3ByYXlDaHVua1BvaW50cyA9IFtdO1xuXG4gICAgdmFyIHgsIHksIHdpZHRoLCByYWRpdXMgPSB0aGlzLndpZHRoIC8gMiwgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRlbnNpdHk7IGkrKykge1xuXG4gICAgICB4ID0gZmFicmljLnV0aWwuZ2V0UmFuZG9tSW50KHBvaW50ZXIueCAtIHJhZGl1cywgcG9pbnRlci54ICsgcmFkaXVzKTtcbiAgICAgIHkgPSBmYWJyaWMudXRpbC5nZXRSYW5kb21JbnQocG9pbnRlci55IC0gcmFkaXVzLCBwb2ludGVyLnkgKyByYWRpdXMpO1xuXG4gICAgICBpZiAodGhpcy5kb3RXaWR0aFZhcmlhbmNlKSB7XG4gICAgICAgIHdpZHRoID0gZmFicmljLnV0aWwuZ2V0UmFuZG9tSW50KFxuICAgICAgICAgIC8vIGJvdHRvbSBjbGFtcCB3aWR0aCB0byAxXG4gICAgICAgICAgTWF0aC5tYXgoMSwgdGhpcy5kb3RXaWR0aCAtIHRoaXMuZG90V2lkdGhWYXJpYW5jZSksXG4gICAgICAgICAgdGhpcy5kb3RXaWR0aCArIHRoaXMuZG90V2lkdGhWYXJpYW5jZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgd2lkdGggPSB0aGlzLmRvdFdpZHRoO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9pbnQgPSBuZXcgZmFicmljLlBvaW50KHgsIHkpO1xuICAgICAgcG9pbnQud2lkdGggPSB3aWR0aDtcblxuICAgICAgaWYgKHRoaXMucmFuZG9tT3BhY2l0eSkge1xuICAgICAgICBwb2ludC5vcGFjaXR5ID0gZmFicmljLnV0aWwuZ2V0UmFuZG9tSW50KDAsIDEwMCkgLyAxMDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3ByYXlDaHVua1BvaW50cy5wdXNoKHBvaW50KTtcbiAgICB9XG5cbiAgICB0aGlzLnNwcmF5Q2h1bmtzLnB1c2godGhpcy5zcHJheUNodW5rUG9pbnRzKTtcbiAgfVxufSk7XG5cblxuLyoqXG4gKiBQYXR0ZXJuQnJ1c2ggY2xhc3NcbiAqIEBjbGFzcyBmYWJyaWMuUGF0dGVybkJydXNoXG4gKiBAZXh0ZW5kcyBmYWJyaWMuQmFzZUJydXNoXG4gKi9cbmZhYnJpYy5QYXR0ZXJuQnJ1c2ggPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuUGVuY2lsQnJ1c2gsIC8qKiBAbGVuZHMgZmFicmljLlBhdHRlcm5CcnVzaC5wcm90b3R5cGUgKi8ge1xuXG4gIGdldFBhdHRlcm5TcmM6IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGRvdFdpZHRoID0gMjAsXG4gICAgICAgIGRvdERpc3RhbmNlID0gNSxcbiAgICAgICAgcGF0dGVybkNhbnZhcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKSxcbiAgICAgICAgcGF0dGVybkN0eCA9IHBhdHRlcm5DYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIHBhdHRlcm5DYW52YXMud2lkdGggPSBwYXR0ZXJuQ2FudmFzLmhlaWdodCA9IGRvdFdpZHRoICsgZG90RGlzdGFuY2U7XG5cbiAgICBwYXR0ZXJuQ3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7XG4gICAgcGF0dGVybkN0eC5iZWdpblBhdGgoKTtcbiAgICBwYXR0ZXJuQ3R4LmFyYyhkb3RXaWR0aCAvIDIsIGRvdFdpZHRoIC8gMiwgZG90V2lkdGggLyAyLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpO1xuICAgIHBhdHRlcm5DdHguY2xvc2VQYXRoKCk7XG4gICAgcGF0dGVybkN0eC5maWxsKCk7XG5cbiAgICByZXR1cm4gcGF0dGVybkNhbnZhcztcbiAgfSxcblxuICBnZXRQYXR0ZXJuU3JjRnVuY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5nZXRQYXR0ZXJuU3JjKS5yZXBsYWNlKCd0aGlzLmNvbG9yJywgJ1wiJyArIHRoaXMuY29sb3IgKyAnXCInKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBcInBhdHRlcm5cIiBpbnN0YW5jZSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4XG4gICAqL1xuICBnZXRQYXR0ZXJuOiBmdW5jdGlvbihjdHgpIHtcbiAgICByZXR1cm4gY3R4LmNyZWF0ZVBhdHRlcm4odGhpcy5zb3VyY2UgfHwgdGhpcy5nZXRQYXR0ZXJuU3JjKCksICdyZXBlYXQnKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBicnVzaCBzdHlsZXNcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICAgKi9cbiAgX3NldEJydXNoU3R5bGVzOiBmdW5jdGlvbihjdHgpIHtcbiAgICB0aGlzLmNhbGxTdXBlcignX3NldEJydXNoU3R5bGVzJywgY3R4KTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmdldFBhdHRlcm4oY3R4KTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBwYXRoXG4gICAqL1xuICBjcmVhdGVQYXRoOiBmdW5jdGlvbihwYXRoRGF0YSkge1xuICAgIHZhciBwYXRoID0gdGhpcy5jYWxsU3VwZXIoJ2NyZWF0ZVBhdGgnLCBwYXRoRGF0YSksXG4gICAgICAgIHRvcExlZnQgPSBwYXRoLl9nZXRMZWZ0VG9wQ29vcmRzKCkuc2NhbGFyQWRkKHBhdGguc3Ryb2tlV2lkdGggLyAyKTtcblxuICAgIHBhdGguc3Ryb2tlID0gbmV3IGZhYnJpYy5QYXR0ZXJuKHtcbiAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2UgfHwgdGhpcy5nZXRQYXR0ZXJuU3JjRnVuY3Rpb24oKSxcbiAgICAgIG9mZnNldFg6IC10b3BMZWZ0LngsXG4gICAgICBvZmZzZXRZOiAtdG9wTGVmdC55XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbn0pO1xuXG5cbihmdW5jdGlvbigpIHtcblxuICB2YXIgZ2V0UG9pbnRlciA9IGZhYnJpYy51dGlsLmdldFBvaW50ZXIsXG4gICAgICBkZWdyZWVzVG9SYWRpYW5zID0gZmFicmljLnV0aWwuZGVncmVlc1RvUmFkaWFucyxcbiAgICAgIGlzVG91Y2hFdmVudCA9IGZhYnJpYy51dGlsLmlzVG91Y2hFdmVudDtcblxuICAvKipcbiAgICogQ2FudmFzIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuQ2FudmFzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5TdGF0aWNDYW52YXNcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTEjY2FudmFzfVxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuQ2FudmFzI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqXG4gICAqIEBmaXJlcyBvYmplY3Q6bW9kaWZpZWQgYXQgdGhlIGVuZCBvZiBhIHRyYW5zZm9ybSBvciBhbnkgY2hhbmdlIHdoZW4gc3RhdGVmdWxsIGlzIHRydWVcbiAgICogQGZpcmVzIG9iamVjdDpyb3RhdGluZyB3aGlsZSBhbiBvYmplY3QgaXMgYmVpbmcgcm90YXRlZCBmcm9tIHRoZSBjb250cm9sXG4gICAqIEBmaXJlcyBvYmplY3Q6c2NhbGluZyB3aGlsZSBhbiBvYmplY3QgaXMgYmVpbmcgc2NhbGVkIGJ5IGNvbnRyb2xzXG4gICAqIEBmaXJlcyBvYmplY3Q6bW92aW5nIHdoaWxlIGFuIG9iamVjdCBpcyBiZWluZyBkcmFnZ2VkXG4gICAqIEBmaXJlcyBvYmplY3Q6c2tld2luZyB3aGlsZSBhbiBvYmplY3QgaXMgYmVpbmcgc2tld2VkIGZyb20gdGhlIGNvbnRyb2xzXG4gICAqXG4gICAqIEBmaXJlcyBiZWZvcmU6dHJhbnNmb3JtIGJlZm9yZSBhIHRyYW5zZm9ybSBpcyBpcyBzdGFydGVkXG4gICAqIEBmaXJlcyBiZWZvcmU6c2VsZWN0aW9uOmNsZWFyZWRcbiAgICogQGZpcmVzIHNlbGVjdGlvbjpjbGVhcmVkXG4gICAqIEBmaXJlcyBzZWxlY3Rpb246dXBkYXRlZFxuICAgKiBAZmlyZXMgc2VsZWN0aW9uOmNyZWF0ZWRcbiAgICpcbiAgICogQGZpcmVzIHBhdGg6Y3JlYXRlZCBhZnRlciBhIGRyYXdpbmcgb3BlcmF0aW9uIGVuZHMgYW5kIHRoZSBwYXRoIGlzIGFkZGVkXG4gICAqIEBmaXJlcyBtb3VzZTpkb3duXG4gICAqIEBmaXJlcyBtb3VzZTptb3ZlXG4gICAqIEBmaXJlcyBtb3VzZTp1cFxuICAgKiBAZmlyZXMgbW91c2U6ZG93bjpiZWZvcmUgIG9uIG1vdXNlIGRvd24sIGJlZm9yZSB0aGUgaW5uZXIgZmFicmljIGxvZ2ljIHJ1bnNcbiAgICogQGZpcmVzIG1vdXNlOm1vdmU6YmVmb3JlIG9uIG1vdXNlIG1vdmUsIGJlZm9yZSB0aGUgaW5uZXIgZmFicmljIGxvZ2ljIHJ1bnNcbiAgICogQGZpcmVzIG1vdXNlOnVwOmJlZm9yZSBvbiBtb3VzZSB1cCwgYmVmb3JlIHRoZSBpbm5lciBmYWJyaWMgbG9naWMgcnVuc1xuICAgKiBAZmlyZXMgbW91c2U6b3ZlclxuICAgKiBAZmlyZXMgbW91c2U6b3V0XG4gICAqIEBmaXJlcyBtb3VzZTpkYmxjbGljayB3aGVuZXZlciBhIG5hdGl2ZSBkYmwgY2xpY2sgZXZlbnQgZmlyZXMgb24gdGhlIGNhbnZhcy5cbiAgICpcbiAgICogQGZpcmVzIGRyYWdvdmVyXG4gICAqIEBmaXJlcyBkcmFnZW50ZXJcbiAgICogQGZpcmVzIGRyYWdsZWF2ZVxuICAgKiBAZmlyZXMgZHJvcDpiZWZvcmUgYmVmb3JlIGRyb3AgZXZlbnQuIHNhbWUgbmF0aXZlIGV2ZW50LiBUaGlzIGlzIGFkZGVkIHRvIGhhbmRsZSBlZGdlIGNhc2VzXG4gICAqIEBmaXJlcyBkcm9wXG4gICAqIEBmaXJlcyBhZnRlcjpyZW5kZXIgYXQgdGhlIGVuZCBvZiB0aGUgcmVuZGVyIHByb2Nlc3MsIHJlY2VpdmVzIHRoZSBjb250ZXh0IGluIHRoZSBjYWxsYmFja1xuICAgKiBAZmlyZXMgYmVmb3JlOnJlbmRlciBhdCBzdGFydCB0aGUgcmVuZGVyIHByb2Nlc3MsIHJlY2VpdmVzIHRoZSBjb250ZXh0IGluIHRoZSBjYWxsYmFja1xuICAgKlxuICAgKi9cbiAgZmFicmljLkNhbnZhcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5TdGF0aWNDYW52YXMsIC8qKiBAbGVuZHMgZmFicmljLkNhbnZhcy5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50IHwgU3RyaW5nfSBlbCAmbHQ7Y2FudmFzPiBlbGVtZW50IHRvIGluaXRpYWxpemUgaW5zdGFuY2Ugb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7IH0pO1xuICAgICAgdGhpcy5yZW5kZXJBbmRSZXNldEJvdW5kID0gdGhpcy5yZW5kZXJBbmRSZXNldC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsQm91bmQgPSB0aGlzLnJlcXVlc3RSZW5kZXJBbGwuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX2luaXRTdGF0aWMoZWwsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5faW5pdEludGVyYWN0aXZlKCk7XG4gICAgICB0aGlzLl9jcmVhdGVDYWNoZUNhbnZhcygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIG9iamVjdHMgY2FuIGJlIHRyYW5zZm9ybWVkIGJ5IG9uZSBzaWRlICh1bnByb3BvcnRpb25hbGx5KVxuICAgICAqIHdoZW4gZHJhZ2dlZCBvbiB0aGUgY29ybmVycyB0aGF0IG5vcm1hbGx5IHdvdWxkIG5vdCBkbyB0aGF0LlxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqIEBzaW5jZSBmYWJyaWMgNC4wIC8vIGNoYW5nZWQgbmFtZSBhbmQgZGVmYXVsdCB2YWx1ZVxuICAgICAqL1xuICAgIHVuaWZvcm1TY2FsaW5nOiAgICAgIHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hpY2gga2V5IHN3aXRjaGVzIHVuaWZvcm0gc2NhbGluZy5cbiAgICAgKiB2YWx1ZXM6ICdhbHRLZXknLCAnc2hpZnRLZXknLCAnY3RybEtleScuXG4gICAgICogSWYgYG51bGxgIG9yICdub25lJyBvciBhbnkgb3RoZXIgc3RyaW5nIHRoYXQgaXMgbm90IGEgbW9kaWZpZXIga2V5XG4gICAgICogZmVhdHVyZSBpcyBkaXNhYmxlZC5cbiAgICAgKiB0b3RhbGx5IHdyb25nIG5hbWVkLiB0aGlzIHNvdW5kcyBsaWtlIGB1bmlmb3JtIHNjYWxpbmdgXG4gICAgICogaWYgQ2FudmFzLnVuaWZvcm1TY2FsaW5nIGlzIHRydWUsIHByZXNzaW5nIHRoaXMgd2lsbCBzZXQgaXQgdG8gZmFsc2VcbiAgICAgKiBhbmQgdmljZXZlcnNhLlxuICAgICAqIEBzaW5jZSAxLjYuMlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdW5pU2NhbGVLZXk6ICAgICAgICAgICAnc2hpZnRLZXknLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCBvYmplY3RzIHVzZSBjZW50ZXIgcG9pbnQgYXMgdGhlIG9yaWdpbiBvZiBzY2FsZSB0cmFuc2Zvcm1hdGlvbi5cbiAgICAgKiA8Yj5CYWNrd2FyZHMgaW5jb21wYXRpYmlsaXR5IG5vdGU6PC9iPiBUaGlzIHByb3BlcnR5IHJlcGxhY2VzIFwiY2VudGVyVHJhbnNmb3JtXCIgKEJvb2xlYW4pLlxuICAgICAqIEBzaW5jZSAxLjMuNFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGNlbnRlcmVkU2NhbGluZzogICAgICAgIGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCBvYmplY3RzIHVzZSBjZW50ZXIgcG9pbnQgYXMgdGhlIG9yaWdpbiBvZiByb3RhdGUgdHJhbnNmb3JtYXRpb24uXG4gICAgICogPGI+QmFja3dhcmRzIGluY29tcGF0aWJpbGl0eSBub3RlOjwvYj4gVGhpcyBwcm9wZXJ0eSByZXBsYWNlcyBcImNlbnRlclRyYW5zZm9ybVwiIChCb29sZWFuKS5cbiAgICAgKiBAc2luY2UgMS4zLjRcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjZW50ZXJlZFJvdGF0aW9uOiAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGljaCBrZXkgZW5hYmxlIGNlbnRlcmVkIFRyYW5zZm9ybVxuICAgICAqIHZhbHVlczogJ2FsdEtleScsICdzaGlmdEtleScsICdjdHJsS2V5Jy5cbiAgICAgKiBJZiBgbnVsbGAgb3IgJ25vbmUnIG9yIGFueSBvdGhlciBzdHJpbmcgdGhhdCBpcyBub3QgYSBtb2RpZmllciBrZXlcbiAgICAgKiBmZWF0dXJlIGlzIGRpc2FibGVkIGZlYXR1cmUgZGlzYWJsZWQuXG4gICAgICogQHNpbmNlIDEuNi4yXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjZW50ZXJlZEtleTogICAgICAgICAgICdhbHRLZXknLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoaWNoIGtleSBlbmFibGUgYWx0ZXJuYXRlIGFjdGlvbiBvbiBjb3JuZXJcbiAgICAgKiB2YWx1ZXM6ICdhbHRLZXknLCAnc2hpZnRLZXknLCAnY3RybEtleScuXG4gICAgICogSWYgYG51bGxgIG9yICdub25lJyBvciBhbnkgb3RoZXIgc3RyaW5nIHRoYXQgaXMgbm90IGEgbW9kaWZpZXIga2V5XG4gICAgICogZmVhdHVyZSBpcyBkaXNhYmxlZCBmZWF0dXJlIGRpc2FibGVkLlxuICAgICAqIEBzaW5jZSAxLjYuMlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgYWx0QWN0aW9uS2V5OiAgICAgICAgICAgJ3NoaWZ0S2V5JyxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IGNhbnZhcyBpcyBpbnRlcmFjdGl2ZS4gVGhpcyBwcm9wZXJ0eSBzaG91bGQgbm90IGJlIGNoYW5nZWQuXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgaW50ZXJhY3RpdmU6ICAgICAgICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIGdyb3VwIHNlbGVjdGlvbiBzaG91bGQgYmUgZW5hYmxlZFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNlbGVjdGlvbjogICAgICAgICAgICAgIHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hpY2gga2V5IG9yIGtleXMgZW5hYmxlIG11bHRpcGxlIGNsaWNrIHNlbGVjdGlvblxuICAgICAqIFBhc3MgdmFsdWUgYXMgYSBzdHJpbmcgb3IgYXJyYXkgb2Ygc3RyaW5nc1xuICAgICAqIHZhbHVlczogJ2FsdEtleScsICdzaGlmdEtleScsICdjdHJsS2V5Jy5cbiAgICAgKiBJZiBgbnVsbGAgb3IgZW1wdHkgb3IgY29udGFpbmluZyBhbnkgb3RoZXIgc3RyaW5nIHRoYXQgaXMgbm90IGEgbW9kaWZpZXIga2V5XG4gICAgICogZmVhdHVyZSBpcyBkaXNhYmxlZC5cbiAgICAgKiBAc2luY2UgMS42LjJcbiAgICAgKiBAdHlwZSBTdHJpbmd8QXJyYXlcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNlbGVjdGlvbktleTogICAgICAgICAgICdzaGlmdEtleScsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hpY2gga2V5IGVuYWJsZSBhbHRlcm5hdGl2ZSBzZWxlY3Rpb25cbiAgICAgKiBpbiBjYXNlIG9mIHRhcmdldCBvdmVybGFwcGluZyB3aXRoIGFjdGl2ZSBvYmplY3RcbiAgICAgKiB2YWx1ZXM6ICdhbHRLZXknLCAnc2hpZnRLZXknLCAnY3RybEtleScuXG4gICAgICogRm9yIGEgc2VyaWVzIG9mIHJlYXNvbiB0aGF0IGNvbWUgZnJvbSB0aGUgZ2VuZXJhbCBleHBlY3RhdGlvbnMgb24gaG93XG4gICAgICogdGhpbmdzIHNob3VsZCB3b3JrLCB0aGlzIGZlYXR1cmUgd29ya3Mgb25seSBmb3IgcHJlc2VydmVPYmplY3RTdGFja2luZyB0cnVlLlxuICAgICAqIElmIGBudWxsYCBvciAnbm9uZScgb3IgYW55IG90aGVyIHN0cmluZyB0aGF0IGlzIG5vdCBhIG1vZGlmaWVyIGtleVxuICAgICAqIGZlYXR1cmUgaXMgZGlzYWJsZWQuXG4gICAgICogQHNpbmNlIDEuNi41XG4gICAgICogQHR5cGUgbnVsbHxTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGFsdFNlbGVjdGlvbktleTogICAgICAgICAgIG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBDb2xvciBvZiBzZWxlY3Rpb25cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNlbGVjdGlvbkNvbG9yOiAgICAgICAgICdyZ2JhKDEwMCwgMTAwLCAyNTUsIDAuMyknLCAvLyBibHVlXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGRhc2ggYXJyYXkgcGF0dGVyblxuICAgICAqIElmIG5vdCBlbXB0eSB0aGUgc2VsZWN0aW9uIGJvcmRlciBpcyBkYXNoZWRcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqL1xuICAgIHNlbGVjdGlvbkRhc2hBcnJheTogICAgIFtdLFxuXG4gICAgLyoqXG4gICAgICogQ29sb3Igb2YgdGhlIGJvcmRlciBvZiBzZWxlY3Rpb24gKHVzdWFsbHkgc2xpZ2h0bHkgZGFya2VyIHRoYW4gY29sb3Igb2Ygc2VsZWN0aW9uIGl0c2VsZilcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNlbGVjdGlvbkJvcmRlckNvbG9yOiAgICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuXG4gICAgLyoqXG4gICAgICogV2lkdGggb2YgYSBsaW5lIHVzZWQgaW4gb2JqZWN0L2dyb3VwIHNlbGVjdGlvblxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2VsZWN0aW9uTGluZVdpZHRoOiAgICAgMSxcblxuICAgIC8qKlxuICAgICAqIFNlbGVjdCBvbmx5IHNoYXBlcyB0aGF0IGFyZSBmdWxseSBjb250YWluZWQgaW4gdGhlIGRyYWdnZWQgc2VsZWN0aW9uIHJlY3RhbmdsZS5cbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzZWxlY3Rpb25GdWxseUNvbnRhaW5lZDogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGN1cnNvciB2YWx1ZSB1c2VkIHdoZW4gaG92ZXJpbmcgb3ZlciBhbiBvYmplY3Qgb24gY2FudmFzXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBob3ZlckN1cnNvcjogICAgICAgICAgICAnbW92ZScsXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGN1cnNvciB2YWx1ZSB1c2VkIHdoZW4gbW92aW5nIGFuIG9iamVjdCBvbiBjYW52YXNcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG1vdmVDdXJzb3I6ICAgICAgICAgICAgICdtb3ZlJyxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgY3Vyc29yIHZhbHVlIHVzZWQgZm9yIHRoZSBlbnRpcmUgY2FudmFzXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBkZWZhdWx0Q3Vyc29yOiAgICAgICAgICAnZGVmYXVsdCcsXG5cbiAgICAvKipcbiAgICAgKiBDdXJzb3IgdmFsdWUgdXNlZCBkdXJpbmcgZnJlZSBkcmF3aW5nXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBmcmVlRHJhd2luZ0N1cnNvcjogICAgICAnY3Jvc3NoYWlyJyxcblxuICAgIC8qKlxuICAgICAqIEN1cnNvciB2YWx1ZSB1c2VkIGZvciBkaXNhYmxlZCBlbGVtZW50cyAoIGNvcm5lcnMgd2l0aCBkaXNhYmxlZCBhY3Rpb24gKVxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbm90QWxsb3dlZEN1cnNvcjogICAgICAgICAnbm90LWFsbG93ZWQnLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBlbGVtZW50IGNsYXNzIHRoYXQncyBnaXZlbiB0byB3cmFwcGVyIChkaXYpIGVsZW1lbnQgb2YgY2FudmFzXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjb250YWluZXJDbGFzczogICAgICAgICAnY2FudmFzLWNvbnRhaW5lcicsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIG9iamVjdCBkZXRlY3Rpb24gaGFwcGVucyBvbiBwZXItcGl4ZWwgYmFzaXMgcmF0aGVyIHRoYW4gb24gcGVyLWJvdW5kaW5nLWJveFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHBlclBpeGVsVGFyZ2V0RmluZDogICAgIGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIHBpeGVscyBhcm91bmQgdGFyZ2V0IHBpeGVsIHRvIHRvbGVyYXRlIChjb25zaWRlciBhY3RpdmUpIGR1cmluZyBvYmplY3QgZGV0ZWN0aW9uXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0YXJnZXRGaW5kVG9sZXJhbmNlOiAgICAwLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCB0YXJnZXQgZGV0ZWN0aW9uIGlzIHNraXBwZWQuIFRhcmdldCBkZXRlY3Rpb24gd2lsbCByZXR1cm4gYWx3YXlzIHVuZGVmaW5lZC5cbiAgICAgKiBjbGljayBzZWxlY3Rpb24gd29uJ3Qgd29yayBhbnltb3JlLCBldmVudHMgd2lsbCBmaXJlIHdpdGggbm8gdGFyZ2V0cy5cbiAgICAgKiBpZiBzb21ldGhpbmcgaXMgc2VsZWN0ZWQgYmVmb3JlIHNldHRpbmcgaXQgdG8gdHJ1ZSwgaXQgd2lsbCBiZSBkZXNlbGVjdGVkIGF0IHRoZSBmaXJzdCBjbGljay5cbiAgICAgKiBhcmVhIHNlbGVjdGlvbiB3aWxsIHN0aWxsIHdvcmsuIGNoZWNrIHRoZSBgc2VsZWN0aW9uYCBwcm9wZXJ0eSB0b28uXG4gICAgICogaWYgeW91IGRlYWN0aXZhdGUgYm90aCwgeW91IHNob3VsZCBsb29rIGludG8gc3RhdGljQ2FudmFzLlxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNraXBUYXJnZXRGaW5kOiAgICAgICAgIGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCBtb3VzZSBldmVudHMgb24gY2FudmFzIChtb3VzZWRvd24vbW91c2Vtb3ZlL21vdXNldXApIHJlc3VsdCBpbiBmcmVlIGRyYXdpbmcuXG4gICAgICogQWZ0ZXIgbW91c2Vkb3duLCBtb3VzZW1vdmUgY3JlYXRlcyBhIHNoYXBlLFxuICAgICAqIGFuZCB0aGVuIG1vdXNldXAgZmluYWxpemVzIGl0IGFuZCBhZGRzIGFuIGluc3RhbmNlIG9mIGBmYWJyaWMuUGF0aGAgb250byBjYW52YXMuXG4gICAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTQjZnJlZV9kcmF3aW5nfVxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGlzRHJhd2luZ01vZGU6ICAgICAgICAgIGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgb2JqZWN0cyBzaG91bGQgcmVtYWluIGluIGN1cnJlbnQgc3RhY2sgcG9zaXRpb24gd2hlbiBzZWxlY3RlZC5cbiAgICAgKiBXaGVuIGZhbHNlIG9iamVjdHMgYXJlIGJyb3VnaHQgdG8gdG9wIGFuZCByZW5kZXJlZCBhcyBwYXJ0IG9mIHRoZSBzZWxlY3Rpb24gZ3JvdXBcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBwcmVzZXJ2ZU9iamVjdFN0YWNraW5nOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGUgYW5nbGUgdGhhdCBhbiBvYmplY3Qgd2lsbCBsb2NrIHRvIHdoaWxlIHJvdGF0aW5nLlxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBzaW5jZSAxLjYuN1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc25hcEFuZ2xlOiAwLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBzbmFwQW5nbGUgdGhlIHJvdGF0aW9uIHdpbGwgbG9jayB0byB0aGUgc25hcEFuZ2xlLlxuICAgICAqIFdoZW4gYG51bGxgLCB0aGUgc25hcFRocmVzaG9sZCB3aWxsIGRlZmF1bHQgdG8gdGhlIHNuYXBBbmdsZS5cbiAgICAgKiBAdHlwZSBudWxsfE51bWJlclxuICAgICAqIEBzaW5jZSAxLjYuN1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc25hcFRocmVzaG9sZDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgcmlnaHQgY2xpY2sgb24gY2FudmFzIGNhbiBvdXRwdXQgdGhlIGNvbnRleHQgbWVudSBvciBub3RcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQHNpbmNlIDEuNi41XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdG9wQ29udGV4dE1lbnU6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBjYW52YXMgY2FuIGZpcmUgcmlnaHQgY2xpY2sgZXZlbnRzXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBzaW5jZSAxLjYuNVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZmlyZVJpZ2h0Q2xpY2s6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBjYW52YXMgY2FuIGZpcmUgbWlkZGxlIGNsaWNrIGV2ZW50c1xuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAc2luY2UgMS43LjhcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGZpcmVNaWRkbGVDbGljazogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBLZWVwIHRyYWNrIG9mIHRoZSBzdWJUYXJnZXRzIGZvciBNb3VzZSBFdmVudHNcbiAgICAgKiBAdHlwZSBmYWJyaWMuT2JqZWN0W11cbiAgICAgKi9cbiAgICB0YXJnZXRzOiBbXSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIG9wdGlvbiBpcyBlbmFibGVkLCBQb2ludGVyRXZlbnQgaXMgdXNlZCBpbnN0ZWFkIG9mIE1vdXNlRXZlbnQuXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZW5hYmxlUG9pbnRlckV2ZW50czogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBLZWVwIHRyYWNrIG9mIHRoZSBob3ZlcmVkIHRhcmdldFxuICAgICAqIEB0eXBlIGZhYnJpYy5PYmplY3RcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9ob3ZlcmVkVGFyZ2V0OiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogaG9sZCB0aGUgbGlzdCBvZiBuZXN0ZWQgdGFyZ2V0cyBob3ZlcmVkXG4gICAgICogQHR5cGUgZmFicmljLk9iamVjdFtdXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaG92ZXJlZFRhcmdldHM6IFtdLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaW5pdEludGVyYWN0aXZlOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRUcmFuc2Zvcm0gPSBudWxsO1xuICAgICAgdGhpcy5fZ3JvdXBTZWxlY3RvciA9IG51bGw7XG4gICAgICB0aGlzLl9pbml0V3JhcHBlckVsZW1lbnQoKTtcbiAgICAgIHRoaXMuX2NyZWF0ZVVwcGVyQ2FudmFzKCk7XG4gICAgICB0aGlzLl9pbml0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgICAgdGhpcy5faW5pdFJldGluYVNjYWxpbmcoKTtcblxuICAgICAgdGhpcy5mcmVlRHJhd2luZ0JydXNoID0gZmFicmljLlBlbmNpbEJydXNoICYmIG5ldyBmYWJyaWMuUGVuY2lsQnJ1c2godGhpcyk7XG5cbiAgICAgIHRoaXMuY2FsY09mZnNldCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGVzIG9iamVjdHMgaW4gdHdvIGdyb3Vwcywgb25lIHRvIHJlbmRlciBpbW1lZGlhdGVseVxuICAgICAqIGFuZCBvbmUgdG8gcmVuZGVyIGFzIGFjdGl2ZUdyb3VwLlxuICAgICAqIEByZXR1cm4ge0FycmF5fSBvYmplY3RzIHRvIHJlbmRlciBpbW1lZGlhdGVseSBhbmQgcHVzaGVzIHRoZSBvdGhlciBpbiB0aGUgYWN0aXZlR3JvdXAuXG4gICAgICovXG4gICAgX2Nob29zZU9iamVjdHNUb1JlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYWN0aXZlT2JqZWN0cyA9IHRoaXMuZ2V0QWN0aXZlT2JqZWN0cygpLFxuICAgICAgICAgIG9iamVjdCwgb2Jqc1RvUmVuZGVyLCBhY3RpdmVHcm91cE9iamVjdHM7XG5cbiAgICAgIGlmIChhY3RpdmVPYmplY3RzLmxlbmd0aCA+IDAgJiYgIXRoaXMucHJlc2VydmVPYmplY3RTdGFja2luZykge1xuICAgICAgICBvYmpzVG9SZW5kZXIgPSBbXTtcbiAgICAgICAgYWN0aXZlR3JvdXBPYmplY3RzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSB0aGlzLl9vYmplY3RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgb2JqZWN0ID0gdGhpcy5fb2JqZWN0c1tpXTtcbiAgICAgICAgICBpZiAoYWN0aXZlT2JqZWN0cy5pbmRleE9mKG9iamVjdCkgPT09IC0xICkge1xuICAgICAgICAgICAgb2Jqc1RvUmVuZGVyLnB1c2gob2JqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhY3RpdmVHcm91cE9iamVjdHMucHVzaChvYmplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aXZlT2JqZWN0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdGhpcy5fYWN0aXZlT2JqZWN0Ll9vYmplY3RzID0gYWN0aXZlR3JvdXBPYmplY3RzO1xuICAgICAgICB9XG4gICAgICAgIG9ianNUb1JlbmRlci5wdXNoLmFwcGx5KG9ianNUb1JlbmRlciwgYWN0aXZlR3JvdXBPYmplY3RzKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBvYmpzVG9SZW5kZXIgPSB0aGlzLl9vYmplY3RzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ianNUb1JlbmRlcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBib3RoIHRoZSB0b3AgY2FudmFzIGFuZCB0aGUgc2Vjb25kYXJ5IGNvbnRhaW5lciBjYW52YXMuXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gaW5zdGFuY2VcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgcmVuZGVyQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0VG9wRGlydHkgJiYgIXRoaXMuX2dyb3VwU2VsZWN0b3IgJiYgIXRoaXMuaXNEcmF3aW5nTW9kZSkge1xuICAgICAgICB0aGlzLmNsZWFyQ29udGV4dCh0aGlzLmNvbnRleHRUb3ApO1xuICAgICAgICB0aGlzLmNvbnRleHRUb3BEaXJ0eSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaGFzTG9zdENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJUb3BMYXllcih0aGlzLmNvbnRleHRUb3ApO1xuICAgICAgICB0aGlzLmhhc0xvc3RDb250ZXh0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgY2FudmFzVG9EcmF3T24gPSB0aGlzLmNvbnRleHRDb250YWluZXI7XG4gICAgICB0aGlzLnJlbmRlckNhbnZhcyhjYW52YXNUb0RyYXdPbiwgdGhpcy5fY2hvb3NlT2JqZWN0c1RvUmVuZGVyKCkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIHJlbmRlclRvcExheWVyOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBpZiAodGhpcy5pc0RyYXdpbmdNb2RlICYmIHRoaXMuX2lzQ3VycmVudGx5RHJhd2luZykge1xuICAgICAgICB0aGlzLmZyZWVEcmF3aW5nQnJ1c2ggJiYgdGhpcy5mcmVlRHJhd2luZ0JydXNoLl9yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0VG9wRGlydHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gd2UgcmVuZGVyIHRoZSB0b3AgY29udGV4dCAtIGxhc3Qgb2JqZWN0XG4gICAgICBpZiAodGhpcy5zZWxlY3Rpb24gJiYgdGhpcy5fZ3JvdXBTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLl9kcmF3U2VsZWN0aW9uKGN0eCk7XG4gICAgICAgIHRoaXMuY29udGV4dFRvcERpcnR5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byByZW5kZXIgb25seSB0aGUgdG9wIGNhbnZhcy5cbiAgICAgKiBBbHNvIHVzZWQgdG8gcmVuZGVyIHRoZSBncm91cCBzZWxlY3Rpb24gYm94LlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgcmVuZGVyVG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3R4ID0gdGhpcy5jb250ZXh0VG9wO1xuICAgICAgdGhpcy5jbGVhckNvbnRleHQoY3R4KTtcbiAgICAgIHRoaXMucmVuZGVyVG9wTGF5ZXIoY3R4KTtcbiAgICAgIHRoaXMuZmlyZSgnYWZ0ZXI6cmVuZGVyJyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbm9ybWFsaXplUG9pbnRlcjogZnVuY3Rpb24gKG9iamVjdCwgcG9pbnRlcikge1xuICAgICAgdmFyIG0gPSBvYmplY3QuY2FsY1RyYW5zZm9ybU1hdHJpeCgpLFxuICAgICAgICAgIGludmVydGVkTSA9IGZhYnJpYy51dGlsLmludmVydFRyYW5zZm9ybShtKSxcbiAgICAgICAgICB2cHRQb2ludGVyID0gdGhpcy5yZXN0b3JlUG9pbnRlclZwdChwb2ludGVyKTtcbiAgICAgIHJldHVybiBmYWJyaWMudXRpbC50cmFuc2Zvcm1Qb2ludCh2cHRQb2ludGVyLCBpbnZlcnRlZE0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgb2JqZWN0IGlzIHRyYW5zcGFyZW50IGF0IGEgY2VydGFpbiBsb2NhdGlvblxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gdGFyZ2V0IE9iamVjdCB0byBjaGVja1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IExlZnQgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5IFRvcCBjb29yZGluYXRlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1RhcmdldFRyYW5zcGFyZW50OiBmdW5jdGlvbiAodGFyZ2V0LCB4LCB5KSB7XG4gICAgICAvLyBpbiBjYXNlIHRoZSB0YXJnZXQgaXMgdGhlIGFjdGl2ZU9iamVjdCwgd2UgY2Fubm90IGV4ZWN1dGUgdGhpcyBvcHRpbWl6YXRpb25cbiAgICAgIC8vIGJlY2F1c2Ugd2UgbmVlZCB0byBkcmF3IGNvbnRyb2xzIHRvby5cbiAgICAgIGlmICh0YXJnZXQuc2hvdWxkQ2FjaGUoKSAmJiB0YXJnZXQuX2NhY2hlQ2FudmFzICYmIHRhcmdldCAhPT0gdGhpcy5fYWN0aXZlT2JqZWN0KSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkUG9pbnRlciA9IHRoaXMuX25vcm1hbGl6ZVBvaW50ZXIodGFyZ2V0LCB7eDogeCwgeTogeX0pLFxuICAgICAgICAgICAgdGFyZ2V0UmVsYXRpdmVYID0gTWF0aC5tYXgodGFyZ2V0LmNhY2hlVHJhbnNsYXRpb25YICsgKG5vcm1hbGl6ZWRQb2ludGVyLnggKiB0YXJnZXQuem9vbVgpLCAwKSxcbiAgICAgICAgICAgIHRhcmdldFJlbGF0aXZlWSA9IE1hdGgubWF4KHRhcmdldC5jYWNoZVRyYW5zbGF0aW9uWSArIChub3JtYWxpemVkUG9pbnRlci55ICogdGFyZ2V0Lnpvb21ZKSwgMCk7XG5cbiAgICAgICAgdmFyIGlzVHJhbnNwYXJlbnQgPSBmYWJyaWMudXRpbC5pc1RyYW5zcGFyZW50KFxuICAgICAgICAgIHRhcmdldC5fY2FjaGVDb250ZXh0LCBNYXRoLnJvdW5kKHRhcmdldFJlbGF0aXZlWCksIE1hdGgucm91bmQodGFyZ2V0UmVsYXRpdmVZKSwgdGhpcy50YXJnZXRGaW5kVG9sZXJhbmNlKTtcblxuICAgICAgICByZXR1cm4gaXNUcmFuc3BhcmVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dENhY2hlLFxuICAgICAgICAgIG9yaWdpbmFsQ29sb3IgPSB0YXJnZXQuc2VsZWN0aW9uQmFja2dyb3VuZENvbG9yLCB2ID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybTtcblxuICAgICAgdGFyZ2V0LnNlbGVjdGlvbkJhY2tncm91bmRDb2xvciA9ICcnO1xuXG4gICAgICB0aGlzLmNsZWFyQ29udGV4dChjdHgpO1xuXG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnRyYW5zZm9ybSh2WzBdLCB2WzFdLCB2WzJdLCB2WzNdLCB2WzRdLCB2WzVdKTtcbiAgICAgIHRhcmdldC5yZW5kZXIoY3R4KTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG5cbiAgICAgIHRhcmdldC5zZWxlY3Rpb25CYWNrZ3JvdW5kQ29sb3IgPSBvcmlnaW5hbENvbG9yO1xuXG4gICAgICB2YXIgaXNUcmFuc3BhcmVudCA9IGZhYnJpYy51dGlsLmlzVHJhbnNwYXJlbnQoXG4gICAgICAgIGN0eCwgeCwgeSwgdGhpcy50YXJnZXRGaW5kVG9sZXJhbmNlKTtcblxuICAgICAgcmV0dXJuIGlzVHJhbnNwYXJlbnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHRha2VzIGFuIGV2ZW50IGFuZCBkZXRlcm1pbmVzIGlmIHNlbGVjdGlvbiBrZXkgaGFzIGJlZW4gcHJlc3NlZFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICAgKi9cbiAgICBfaXNTZWxlY3Rpb25LZXlQcmVzc2VkOiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgc2VsZWN0aW9uS2V5UHJlc3NlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnNlbGVjdGlvbktleSkpIHtcbiAgICAgICAgc2VsZWN0aW9uS2V5UHJlc3NlZCA9ICEhdGhpcy5zZWxlY3Rpb25LZXkuZmluZChmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGVba2V5XSA9PT0gdHJ1ZTsgfSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VsZWN0aW9uS2V5UHJlc3NlZCA9IGVbdGhpcy5zZWxlY3Rpb25LZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZWN0aW9uS2V5UHJlc3NlZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gdGFyZ2V0XG4gICAgICovXG4gICAgX3Nob3VsZENsZWFyU2VsZWN0aW9uOiBmdW5jdGlvbiAoZSwgdGFyZ2V0KSB7XG4gICAgICB2YXIgYWN0aXZlT2JqZWN0cyA9IHRoaXMuZ2V0QWN0aXZlT2JqZWN0cygpLFxuICAgICAgICAgIGFjdGl2ZU9iamVjdCA9IHRoaXMuX2FjdGl2ZU9iamVjdDtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgIXRhcmdldFxuICAgICAgICB8fFxuICAgICAgICAodGFyZ2V0ICYmXG4gICAgICAgICAgYWN0aXZlT2JqZWN0ICYmXG4gICAgICAgICAgYWN0aXZlT2JqZWN0cy5sZW5ndGggPiAxICYmXG4gICAgICAgICAgYWN0aXZlT2JqZWN0cy5pbmRleE9mKHRhcmdldCkgPT09IC0xICYmXG4gICAgICAgICAgYWN0aXZlT2JqZWN0ICE9PSB0YXJnZXQgJiZcbiAgICAgICAgICAhdGhpcy5faXNTZWxlY3Rpb25LZXlQcmVzc2VkKGUpKVxuICAgICAgICB8fFxuICAgICAgICAodGFyZ2V0ICYmICF0YXJnZXQuZXZlbnRlZClcbiAgICAgICAgfHxcbiAgICAgICAgKHRhcmdldCAmJlxuICAgICAgICAgICF0YXJnZXQuc2VsZWN0YWJsZSAmJlxuICAgICAgICAgIGFjdGl2ZU9iamVjdCAmJlxuICAgICAgICAgIGFjdGl2ZU9iamVjdCAhPT0gdGFyZ2V0KVxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2VudGVyZWRTY2FsaW5nIGZyb20gb2JqZWN0IGNhbid0IG92ZXJyaWRlIGNlbnRlcmVkU2NhbGluZyBmcm9tIGNhbnZhcy5cbiAgICAgKiB0aGlzIHNob3VsZCBiZSBmaXhlZCwgc2luY2Ugb2JqZWN0IHNldHRpbmcgc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIGNhbnZhcy5cbiAgICAgKiBhbHNvIHRoaXMgc2hvdWxkIGJlIHNvbWV0aGluZyB0aGF0IHdpbGwgYmUgbWlncmF0ZWQgaW4gdGhlIGNvbnRyb2wgcHJvcGVydGllcy5cbiAgICAgKiBhcyBhYmlsaXR5IHRvIGRlZmluZSB0aGUgb3JpZ2luIG9mIHRoZSB0cmFuc2Zvcm1hdGlvbiB0aGF0IHRoZSBjb250cm9sIHByb3ZpZGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IHRhcmdldFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFsdEtleVxuICAgICAqL1xuICAgIF9zaG91bGRDZW50ZXJUcmFuc2Zvcm06IGZ1bmN0aW9uICh0YXJnZXQsIGFjdGlvbiwgYWx0S2V5KSB7XG4gICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjZW50ZXJUcmFuc2Zvcm07XG5cbiAgICAgIGlmIChhY3Rpb24gPT09ICdzY2FsZScgfHwgYWN0aW9uID09PSAnc2NhbGVYJyB8fCBhY3Rpb24gPT09ICdzY2FsZVknIHx8IGFjdGlvbiA9PT0gJ3Jlc2l6aW5nJykge1xuICAgICAgICBjZW50ZXJUcmFuc2Zvcm0gPSB0aGlzLmNlbnRlcmVkU2NhbGluZyB8fCB0YXJnZXQuY2VudGVyZWRTY2FsaW5nO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYWN0aW9uID09PSAncm90YXRlJykge1xuICAgICAgICBjZW50ZXJUcmFuc2Zvcm0gPSB0aGlzLmNlbnRlcmVkUm90YXRpb24gfHwgdGFyZ2V0LmNlbnRlcmVkUm90YXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjZW50ZXJUcmFuc2Zvcm0gPyAhYWx0S2V5IDogYWx0S2V5O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBzaG91bGQgZGlzYXBwZWFyIGJlZm9yZSByZWxlYXNlIDQuMFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldE9yaWdpbkZyb21Db3JuZXI6IGZ1bmN0aW9uKHRhcmdldCwgY29ybmVyKSB7XG4gICAgICB2YXIgb3JpZ2luID0ge1xuICAgICAgICB4OiB0YXJnZXQub3JpZ2luWCxcbiAgICAgICAgeTogdGFyZ2V0Lm9yaWdpbllcbiAgICAgIH07XG5cbiAgICAgIGlmIChjb3JuZXIgPT09ICdtbCcgfHwgY29ybmVyID09PSAndGwnIHx8IGNvcm5lciA9PT0gJ2JsJykge1xuICAgICAgICBvcmlnaW4ueCA9ICdyaWdodCc7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjb3JuZXIgPT09ICdtcicgfHwgY29ybmVyID09PSAndHInIHx8IGNvcm5lciA9PT0gJ2JyJykge1xuICAgICAgICBvcmlnaW4ueCA9ICdsZWZ0JztcbiAgICAgIH1cblxuICAgICAgaWYgKGNvcm5lciA9PT0gJ3RsJyB8fCBjb3JuZXIgPT09ICdtdCcgfHwgY29ybmVyID09PSAndHInKSB7XG4gICAgICAgIG9yaWdpbi55ID0gJ2JvdHRvbSc7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjb3JuZXIgPT09ICdibCcgfHwgY29ybmVyID09PSAnbWInIHx8IGNvcm5lciA9PT0gJ2JyJykge1xuICAgICAgICBvcmlnaW4ueSA9ICd0b3AnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdpbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFscmVhZHlTZWxlY3RlZCB0cnVlIGlmIHRhcmdldCBpcyBhbHJlYWR5IHNlbGVjdGVkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvcm5lciBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGNvcm5lciBtbCwgbXIsIHRsIC4uLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBbdGFyZ2V0XSBpbnNlcnRlZCBiYWNrIHRvIGhlbHAgb3ZlcnJpZGluZy4gVW51c2VkXG4gICAgICovXG4gICAgX2dldEFjdGlvbkZyb21Db3JuZXI6IGZ1bmN0aW9uKGFscmVhZHlTZWxlY3RlZCwgY29ybmVyLCBlLCB0YXJnZXQpIHtcbiAgICAgIGlmICghY29ybmVyIHx8ICFhbHJlYWR5U2VsZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuICdkcmFnJztcbiAgICAgIH1cbiAgICAgIHZhciBjb250cm9sID0gdGFyZ2V0LmNvbnRyb2xzW2Nvcm5lcl07XG4gICAgICByZXR1cm4gY29udHJvbC5nZXRBY3Rpb25OYW1lKGUsIGNvbnRyb2wsIHRhcmdldCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IHRhcmdldFxuICAgICAqL1xuICAgIF9zZXR1cEN1cnJlbnRUcmFuc2Zvcm06IGZ1bmN0aW9uIChlLCB0YXJnZXQsIGFscmVhZHlTZWxlY3RlZCkge1xuICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9pbnRlciA9IHRoaXMuZ2V0UG9pbnRlcihlKSwgY29ybmVyID0gdGFyZ2V0Ll9fY29ybmVyLFxuICAgICAgICAgIGNvbnRyb2wgPSB0YXJnZXQuY29udHJvbHNbY29ybmVyXSxcbiAgICAgICAgICBhY3Rpb25IYW5kbGVyID0gKGFscmVhZHlTZWxlY3RlZCAmJiBjb3JuZXIpID9cbiAgICAgICAgICAgIGNvbnRyb2wuZ2V0QWN0aW9uSGFuZGxlcihlLCB0YXJnZXQsIGNvbnRyb2wpIDogZmFicmljLmNvbnRyb2xzVXRpbHMuZHJhZ0hhbmRsZXIsXG4gICAgICAgICAgYWN0aW9uID0gdGhpcy5fZ2V0QWN0aW9uRnJvbUNvcm5lcihhbHJlYWR5U2VsZWN0ZWQsIGNvcm5lciwgZSwgdGFyZ2V0KSxcbiAgICAgICAgICBvcmlnaW4gPSB0aGlzLl9nZXRPcmlnaW5Gcm9tQ29ybmVyKHRhcmdldCwgY29ybmVyKSxcbiAgICAgICAgICBhbHRLZXkgPSBlW3RoaXMuY2VudGVyZWRLZXldLFxuICAgICAgICAgIHRyYW5zZm9ybSA9IHtcbiAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBhY3Rpb25IYW5kbGVyOiBhY3Rpb25IYW5kbGVyLFxuICAgICAgICAgICAgY29ybmVyOiBjb3JuZXIsXG4gICAgICAgICAgICBzY2FsZVg6IHRhcmdldC5zY2FsZVgsXG4gICAgICAgICAgICBzY2FsZVk6IHRhcmdldC5zY2FsZVksXG4gICAgICAgICAgICBza2V3WDogdGFyZ2V0LnNrZXdYLFxuICAgICAgICAgICAgc2tld1k6IHRhcmdldC5za2V3WSxcbiAgICAgICAgICAgIC8vIHVzZWQgYnkgdHJhbnNhdGlvblxuICAgICAgICAgICAgb2Zmc2V0WDogcG9pbnRlci54IC0gdGFyZ2V0LmxlZnQsXG4gICAgICAgICAgICBvZmZzZXRZOiBwb2ludGVyLnkgLSB0YXJnZXQudG9wLFxuICAgICAgICAgICAgb3JpZ2luWDogb3JpZ2luLngsXG4gICAgICAgICAgICBvcmlnaW5ZOiBvcmlnaW4ueSxcbiAgICAgICAgICAgIGV4OiBwb2ludGVyLngsXG4gICAgICAgICAgICBleTogcG9pbnRlci55LFxuICAgICAgICAgICAgbGFzdFg6IHBvaW50ZXIueCxcbiAgICAgICAgICAgIGxhc3RZOiBwb2ludGVyLnksXG4gICAgICAgICAgICAvLyB1bnN1cmUgdGhleSBhcmUgdXNlZnVsIGFueW1vcmUuXG4gICAgICAgICAgICAvLyBsZWZ0OiB0YXJnZXQubGVmdCxcbiAgICAgICAgICAgIC8vIHRvcDogdGFyZ2V0LnRvcCxcbiAgICAgICAgICAgIHRoZXRhOiBkZWdyZWVzVG9SYWRpYW5zKHRhcmdldC5hbmdsZSksXG4gICAgICAgICAgICAvLyBlbmQgb2YgdW5zdXJlXG4gICAgICAgICAgICB3aWR0aDogdGFyZ2V0LndpZHRoICogdGFyZ2V0LnNjYWxlWCxcbiAgICAgICAgICAgIHNoaWZ0S2V5OiBlLnNoaWZ0S2V5LFxuICAgICAgICAgICAgYWx0S2V5OiBhbHRLZXksXG4gICAgICAgICAgICBvcmlnaW5hbDogZmFicmljLnV0aWwuc2F2ZU9iamVjdFRyYW5zZm9ybSh0YXJnZXQpLFxuICAgICAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLl9zaG91bGRDZW50ZXJUcmFuc2Zvcm0odGFyZ2V0LCBhY3Rpb24sIGFsdEtleSkpIHtcbiAgICAgICAgdHJhbnNmb3JtLm9yaWdpblggPSAnY2VudGVyJztcbiAgICAgICAgdHJhbnNmb3JtLm9yaWdpblkgPSAnY2VudGVyJztcbiAgICAgIH1cbiAgICAgIHRyYW5zZm9ybS5vcmlnaW5hbC5vcmlnaW5YID0gb3JpZ2luLng7XG4gICAgICB0cmFuc2Zvcm0ub3JpZ2luYWwub3JpZ2luWSA9IG9yaWdpbi55O1xuICAgICAgdGhpcy5fY3VycmVudFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIHRoaXMuX2JlZm9yZVRyYW5zZm9ybShlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJzb3IgdHlwZSBvZiB0aGUgY2FudmFzIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgQ3Vyc29yIHR5cGUgb2YgdGhlIGNhbnZhcyBlbGVtZW50LlxuICAgICAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy11aS8jY3Vyc29yXG4gICAgICovXG4gICAgc2V0Q3Vyc29yOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHRoaXMudXBwZXJDYW52YXNFbC5zdHlsZS5jdXJzb3IgPSB2YWx1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IHRvIGRyYXcgdGhlIHNlbGVjdGlvbiBvblxuICAgICAqL1xuICAgIF9kcmF3U2VsZWN0aW9uOiBmdW5jdGlvbiAoY3R4KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLl9ncm91cFNlbGVjdG9yLFxuICAgICAgICAgIHZpZXdwb3J0U3RhcnQgPSBuZXcgZmFicmljLlBvaW50KHNlbGVjdG9yLmV4LCBzZWxlY3Rvci5leSksXG4gICAgICAgICAgc3RhcnQgPSBmYWJyaWMudXRpbC50cmFuc2Zvcm1Qb2ludCh2aWV3cG9ydFN0YXJ0LCB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtKSxcbiAgICAgICAgICB2aWV3cG9ydEV4dGVudCA9IG5ldyBmYWJyaWMuUG9pbnQoc2VsZWN0b3IuZXggKyBzZWxlY3Rvci5sZWZ0LCBzZWxlY3Rvci5leSArIHNlbGVjdG9yLnRvcCksXG4gICAgICAgICAgZXh0ZW50ID0gZmFicmljLnV0aWwudHJhbnNmb3JtUG9pbnQodmlld3BvcnRFeHRlbnQsIHRoaXMudmlld3BvcnRUcmFuc2Zvcm0pLFxuICAgICAgICAgIG1pblggPSBNYXRoLm1pbihzdGFydC54LCBleHRlbnQueCksXG4gICAgICAgICAgbWluWSA9IE1hdGgubWluKHN0YXJ0LnksIGV4dGVudC55KSxcbiAgICAgICAgICBtYXhYID0gTWF0aC5tYXgoc3RhcnQueCwgZXh0ZW50LngpLFxuICAgICAgICAgIG1heFkgPSBNYXRoLm1heChzdGFydC55LCBleHRlbnQueSksXG4gICAgICAgICAgc3Ryb2tlT2Zmc2V0ID0gdGhpcy5zZWxlY3Rpb25MaW5lV2lkdGggLyAyO1xuXG4gICAgICBpZiAodGhpcy5zZWxlY3Rpb25Db2xvcikge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5zZWxlY3Rpb25Db2xvcjtcbiAgICAgICAgY3R4LmZpbGxSZWN0KG1pblgsIG1pblksIG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5zZWxlY3Rpb25MaW5lV2lkdGggfHwgIXRoaXMuc2VsZWN0aW9uQm9yZGVyQ29sb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3R4LmxpbmVXaWR0aCA9IHRoaXMuc2VsZWN0aW9uTGluZVdpZHRoO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5zZWxlY3Rpb25Cb3JkZXJDb2xvcjtcblxuICAgICAgbWluWCArPSBzdHJva2VPZmZzZXQ7XG4gICAgICBtaW5ZICs9IHN0cm9rZU9mZnNldDtcbiAgICAgIG1heFggLT0gc3Ryb2tlT2Zmc2V0O1xuICAgICAgbWF4WSAtPSBzdHJva2VPZmZzZXQ7XG4gICAgICAvLyBzZWxlY3Rpb24gYm9yZGVyXG4gICAgICBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5fc2V0TGluZURhc2guY2FsbCh0aGlzLCBjdHgsIHRoaXMuc2VsZWN0aW9uRGFzaEFycmF5KTtcbiAgICAgIGN0eC5zdHJva2VSZWN0KG1pblgsIG1pblksIG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGRldGVybWluZXMgd2hhdCBvYmplY3Qgd2UgYXJlIGNsaWNraW5nIG9uXG4gICAgICogdGhlIHNraXBHcm91cCBwYXJhbWV0ZXIgaXMgZm9yIGludGVybmFsIHVzZSwgaXMgbmVlZGVkIGZvciBzaGlmdCtjbGljayBhY3Rpb25cbiAgICAgKiAxMS8wOS8yMDE4IFRPRE86IHdvdWxkIGJlIGNvb2wgaWYgZmluZFRhcmdldCBjb3VsZCBkaXNjZXJuIGJldHdlZW4gYmVpbmcgYSBmdWxsIHRhcmdldFxuICAgICAqIG9yIHRoZSBvdXRzaWRlIHBhcnQgb2YgdGhlIGNvcm5lci5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIG1vdXNlIGV2ZW50XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBza2lwR3JvdXAgd2hlbiB0cnVlLCBhY3RpdmVHcm91cCBpcyBza2lwcGVkIGFuZCBvbmx5IG9iamVjdHMgYXJlIHRyYXZlcnNlZCB0aHJvdWdoXG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhlIHRhcmdldCBmb3VuZFxuICAgICAqL1xuICAgIGZpbmRUYXJnZXQ6IGZ1bmN0aW9uIChlLCBza2lwR3JvdXApIHtcbiAgICAgIGlmICh0aGlzLnNraXBUYXJnZXRGaW5kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGlnbm9yZVpvb20gPSB0cnVlLFxuICAgICAgICAgIHBvaW50ZXIgPSB0aGlzLmdldFBvaW50ZXIoZSwgaWdub3JlWm9vbSksXG4gICAgICAgICAgYWN0aXZlT2JqZWN0ID0gdGhpcy5fYWN0aXZlT2JqZWN0LFxuICAgICAgICAgIGFPYmplY3RzID0gdGhpcy5nZXRBY3RpdmVPYmplY3RzKCksXG4gICAgICAgICAgYWN0aXZlVGFyZ2V0LCBhY3RpdmVUYXJnZXRTdWJzLFxuICAgICAgICAgIGlzVG91Y2ggPSBpc1RvdWNoRXZlbnQoZSksXG4gICAgICAgICAgc2hvdWxkTG9va0ZvckFjdGl2ZSA9IChhT2JqZWN0cy5sZW5ndGggPiAxICYmICFza2lwR3JvdXApIHx8IGFPYmplY3RzLmxlbmd0aCA9PT0gMTtcblxuICAgICAgLy8gZmlyc3QgY2hlY2sgY3VycmVudCBncm91cCAoaWYgb25lIGV4aXN0cylcbiAgICAgIC8vIGFjdGl2ZSBncm91cCBkb2VzIG5vdCBjaGVjayBzdWIgdGFyZ2V0cyBsaWtlIG5vcm1hbCBncm91cHMuXG4gICAgICAvLyBpZiBhY3RpdmUgZ3JvdXAganVzdCBleGl0cy5cbiAgICAgIHRoaXMudGFyZ2V0cyA9IFtdO1xuXG4gICAgICAvLyBpZiB3ZSBoaXQgdGhlIGNvcm5lciBvZiBhbiBhY3RpdmVPYmplY3QsIGxldCdzIHJldHVybiB0aGF0LlxuICAgICAgaWYgKHNob3VsZExvb2tGb3JBY3RpdmUgJiYgYWN0aXZlT2JqZWN0Ll9maW5kVGFyZ2V0Q29ybmVyKHBvaW50ZXIsIGlzVG91Y2gpKSB7XG4gICAgICAgIHJldHVybiBhY3RpdmVPYmplY3Q7XG4gICAgICB9XG4gICAgICBpZiAoYU9iamVjdHMubGVuZ3RoID4gMSAmJiAhc2tpcEdyb3VwICYmIGFjdGl2ZU9iamVjdCA9PT0gdGhpcy5fc2VhcmNoUG9zc2libGVUYXJnZXRzKFthY3RpdmVPYmplY3RdLCBwb2ludGVyKSkge1xuICAgICAgICByZXR1cm4gYWN0aXZlT2JqZWN0O1xuICAgICAgfVxuICAgICAgaWYgKGFPYmplY3RzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICBhY3RpdmVPYmplY3QgPT09IHRoaXMuX3NlYXJjaFBvc3NpYmxlVGFyZ2V0cyhbYWN0aXZlT2JqZWN0XSwgcG9pbnRlcikpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByZXNlcnZlT2JqZWN0U3RhY2tpbmcpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aXZlT2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjdGl2ZVRhcmdldCA9IGFjdGl2ZU9iamVjdDtcbiAgICAgICAgICBhY3RpdmVUYXJnZXRTdWJzID0gdGhpcy50YXJnZXRzO1xuICAgICAgICAgIHRoaXMudGFyZ2V0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fc2VhcmNoUG9zc2libGVUYXJnZXRzKHRoaXMuX29iamVjdHMsIHBvaW50ZXIpO1xuICAgICAgaWYgKGVbdGhpcy5hbHRTZWxlY3Rpb25LZXldICYmIHRhcmdldCAmJiBhY3RpdmVUYXJnZXQgJiYgdGFyZ2V0ICE9PSBhY3RpdmVUYXJnZXQpIHtcbiAgICAgICAgdGFyZ2V0ID0gYWN0aXZlVGFyZ2V0O1xuICAgICAgICB0aGlzLnRhcmdldHMgPSBhY3RpdmVUYXJnZXRTdWJzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHBvaW50IGlzIGluc2lkZSB0aGUgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcG9pbnRlcl0geCx5IG9iamVjdCBvZiBwb2ludCBjb29yZGluYXRlcyB3ZSB3YW50IHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqIE9iamVjdCB0byB0ZXN0IGFnYWluc3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2dsb2JhbFBvaW50ZXJdIHgseSBvYmplY3Qgb2YgcG9pbnQgY29vcmRpbmF0ZXMgcmVsYXRpdmUgdG8gY2FudmFzIHVzZWQgdG8gc2VhcmNoIHBlciBwaXhlbCB0YXJnZXQuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBwb2ludCBpcyBjb250YWluZWQgd2l0aGluIGFuIGFyZWEgb2YgZ2l2ZW4gb2JqZWN0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2hlY2tUYXJnZXQ6IGZ1bmN0aW9uKHBvaW50ZXIsIG9iaiwgZ2xvYmFsUG9pbnRlcikge1xuICAgICAgaWYgKG9iaiAmJlxuICAgICAgICAgIG9iai52aXNpYmxlICYmXG4gICAgICAgICAgb2JqLmV2ZW50ZWQgJiZcbiAgICAgICAgICAvLyBodHRwOi8vd3d3Lmdlb2cudWJjLmNhL2NvdXJzZXMva2xpbmsvZ2lzLm5vdGVzL25jZ2lhL3UzMi5odG1sXG4gICAgICAgICAgLy8gaHR0cDovL2lkYXYudWNkYXZpcy5lZHUvfm9rcmV5bG9zL1RBc2hpcC9TcHJpbmcyMDAwL1BvaW50SW5Qb2x5Z29uLmh0bWxcbiAgICAgICAgICBvYmouY29udGFpbnNQb2ludChwb2ludGVyKVxuICAgICAgKSB7XG4gICAgICAgIGlmICgodGhpcy5wZXJQaXhlbFRhcmdldEZpbmQgfHwgb2JqLnBlclBpeGVsVGFyZ2V0RmluZCkgJiYgIW9iai5pc0VkaXRpbmcpIHtcbiAgICAgICAgICB2YXIgaXNUcmFuc3BhcmVudCA9IHRoaXMuaXNUYXJnZXRUcmFuc3BhcmVudChvYmosIGdsb2JhbFBvaW50ZXIueCwgZ2xvYmFsUG9pbnRlci55KTtcbiAgICAgICAgICBpZiAoIWlzVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VkIHRvIHNlYXJjaCBpbnNpZGUgb2JqZWN0cyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBwb2ludGVyIGluIGJvdW5kaW5nIGJveCBvciB0aGF0IGNvbnRhaW5zIHBvaW50ZXJPbkNhbnZhcyB3aGVuIHBhaW50ZWRcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbb2JqZWN0c10gb2JqZWN0cyBhcnJheSB0byBsb29rIGludG9cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3BvaW50ZXJdIHgseSBvYmplY3Qgb2YgcG9pbnQgY29vcmRpbmF0ZXMgd2Ugd2FudCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgdGhhdCBjb250YWlucyBwb2ludGVyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2VhcmNoUG9zc2libGVUYXJnZXRzOiBmdW5jdGlvbihvYmplY3RzLCBwb2ludGVyKSB7XG4gICAgICAvLyBDYWNoZSBhbGwgdGFyZ2V0cyB3aGVyZSB0aGVpciBib3VuZGluZyBib3ggY29udGFpbnMgcG9pbnQuXG4gICAgICB2YXIgdGFyZ2V0LCBpID0gb2JqZWN0cy5sZW5ndGgsIHN1YlRhcmdldDtcbiAgICAgIC8vIERvIG5vdCBjaGVjayBmb3IgY3VycmVudGx5IGdyb3VwZWQgb2JqZWN0cywgc2luY2Ugd2UgY2hlY2sgdGhlIHBhcmVudCBncm91cCBpdHNlbGYuXG4gICAgICAvLyB1bnRpbCB3ZSBjYWxsIHRoaXMgZnVuY3Rpb24gc3BlY2lmaWNhbGx5IHRvIHNlYXJjaCBpbnNpZGUgdGhlIGFjdGl2ZUdyb3VwXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHZhciBvYmpUb0NoZWNrID0gb2JqZWN0c1tpXTtcbiAgICAgICAgdmFyIHBvaW50ZXJUb1VzZSA9IG9ialRvQ2hlY2suZ3JvdXAgP1xuICAgICAgICAgIHRoaXMuX25vcm1hbGl6ZVBvaW50ZXIob2JqVG9DaGVjay5ncm91cCwgcG9pbnRlcikgOiBwb2ludGVyO1xuICAgICAgICBpZiAodGhpcy5fY2hlY2tUYXJnZXQocG9pbnRlclRvVXNlLCBvYmpUb0NoZWNrLCBwb2ludGVyKSkge1xuICAgICAgICAgIHRhcmdldCA9IG9iamVjdHNbaV07XG4gICAgICAgICAgaWYgKHRhcmdldC5zdWJUYXJnZXRDaGVjayAmJiB0YXJnZXQgaW5zdGFuY2VvZiBmYWJyaWMuR3JvdXApIHtcbiAgICAgICAgICAgIHN1YlRhcmdldCA9IHRoaXMuX3NlYXJjaFBvc3NpYmxlVGFyZ2V0cyh0YXJnZXQuX29iamVjdHMsIHBvaW50ZXIpO1xuICAgICAgICAgICAgc3ViVGFyZ2V0ICYmIHRoaXMudGFyZ2V0cy5wdXNoKHN1YlRhcmdldCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHBvaW50ZXIgY29vcmRpbmF0ZXMgd2l0aG91dCB0aGUgZWZmZWN0IG9mIHRoZSB2aWV3cG9ydFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyIHdpdGggXCJ4XCIgYW5kIFwieVwiIG51bWJlciB2YWx1ZXNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCB3aXRoIFwieFwiIGFuZCBcInlcIiBudW1iZXIgdmFsdWVzXG4gICAgICovXG4gICAgcmVzdG9yZVBvaW50ZXJWcHQ6IGZ1bmN0aW9uKHBvaW50ZXIpIHtcbiAgICAgIHJldHVybiBmYWJyaWMudXRpbC50cmFuc2Zvcm1Qb2ludChcbiAgICAgICAgcG9pbnRlcixcbiAgICAgICAgZmFicmljLnV0aWwuaW52ZXJ0VHJhbnNmb3JtKHRoaXMudmlld3BvcnRUcmFuc2Zvcm0pXG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHBvaW50ZXIgY29vcmRpbmF0ZXMgcmVsYXRpdmUgdG8gY2FudmFzLlxuICAgICAqIENhbiByZXR1cm4gY29vcmRpbmF0ZXMgd2l0aCBvciB3aXRob3V0IHZpZXdwb3J0VHJhbnNmb3JtLlxuICAgICAqIGlnbm9yZVpvb20gZmFsc2UgZ2l2ZXMgYmFjayBjb29yZGluYXRlcyB0aGF0IHJlcHJlc2VudFxuICAgICAqIHRoZSBwb2ludCBjbGlja2VkIG9uIGNhbnZhcyBlbGVtZW50LlxuICAgICAqIGlnbm9yZVpvb20gdHJ1ZSBnaXZlcyBiYWNrIGNvb3JkaW5hdGVzIGFmdGVyIGJlaW5nIHByb2Nlc3NlZFxuICAgICAqIGJ5IHRoZSB2aWV3cG9ydFRyYW5zZm9ybSAoIHNvcnQgb2YgY29vcmRpbmF0ZXMgb2Ygd2hhdCBpcyBkaXNwbGF5ZWRcbiAgICAgKiBvbiB0aGUgY2FudmFzIHdoZXJlIHlvdSBhcmUgY2xpY2tpbmcuXG4gICAgICogaWdub3JlWm9vbSB0cnVlID0gSFRNTEVsZW1lbnQgY29vcmRpbmF0ZXMgcmVsYXRpdmUgdG8gdG9wLGxlZnRcbiAgICAgKiBpZ25vcmVab29tIGZhbHNlLCBkZWZhdWx0ID0gZmFicmljIHNwYWNlIGNvb3JkaW5hdGVzLCB0aGUgc2FtZSB1c2VkIGZvciBzaGFwZSBwb3NpdGlvblxuICAgICAqIFRvIGludGVyYWN0IHdpdGggeW91ciBzaGFwZXMgdG9wIGFuZCBsZWZ0IHlvdSB3YW50IHRvIHVzZSBpZ25vcmVab29tIHRydWVcbiAgICAgKiBtb3N0IG9mIHRoZSB0aW1lLCB3aGlsZSBpZ25vcmVab29tIGZhbHNlIHdpbGwgZ2l2ZSB5b3UgY29vcmRpbmF0ZXNcbiAgICAgKiBjb21wYXRpYmxlIHdpdGggdGhlIG9iamVjdC5vQ29vcmRzIHN5c3RlbS5cbiAgICAgKiBvZiB0aGUgdGltZS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpZ25vcmVab29tXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3Qgd2l0aCBcInhcIiBhbmQgXCJ5XCIgbnVtYmVyIHZhbHVlc1xuICAgICAqL1xuICAgIGdldFBvaW50ZXI6IGZ1bmN0aW9uIChlLCBpZ25vcmVab29tKSB7XG4gICAgICAvLyByZXR1cm4gY2FjaGVkIHZhbHVlcyBpZiB3ZSBhcmUgaW4gdGhlIGV2ZW50IHByb2Nlc3NpbmcgY2hhaW5cbiAgICAgIGlmICh0aGlzLl9hYnNvbHV0ZVBvaW50ZXIgJiYgIWlnbm9yZVpvb20pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Fic29sdXRlUG9pbnRlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9wb2ludGVyICYmIGlnbm9yZVpvb20pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50ZXI7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb2ludGVyID0gZ2V0UG9pbnRlcihlKSxcbiAgICAgICAgICB1cHBlckNhbnZhc0VsID0gdGhpcy51cHBlckNhbnZhc0VsLFxuICAgICAgICAgIGJvdW5kcyA9IHVwcGVyQ2FudmFzRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgYm91bmRzV2lkdGggPSBib3VuZHMud2lkdGggfHwgMCxcbiAgICAgICAgICBib3VuZHNIZWlnaHQgPSBib3VuZHMuaGVpZ2h0IHx8IDAsXG4gICAgICAgICAgY3NzU2NhbGU7XG5cbiAgICAgIGlmICghYm91bmRzV2lkdGggfHwgIWJvdW5kc0hlaWdodCApIHtcbiAgICAgICAgaWYgKCd0b3AnIGluIGJvdW5kcyAmJiAnYm90dG9tJyBpbiBib3VuZHMpIHtcbiAgICAgICAgICBib3VuZHNIZWlnaHQgPSBNYXRoLmFicyggYm91bmRzLnRvcCAtIGJvdW5kcy5ib3R0b20gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ3JpZ2h0JyBpbiBib3VuZHMgJiYgJ2xlZnQnIGluIGJvdW5kcykge1xuICAgICAgICAgIGJvdW5kc1dpZHRoID0gTWF0aC5hYnMoIGJvdW5kcy5yaWdodCAtIGJvdW5kcy5sZWZ0ICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWxjT2Zmc2V0KCk7XG4gICAgICBwb2ludGVyLnggPSBwb2ludGVyLnggLSB0aGlzLl9vZmZzZXQubGVmdDtcbiAgICAgIHBvaW50ZXIueSA9IHBvaW50ZXIueSAtIHRoaXMuX29mZnNldC50b3A7XG4gICAgICBpZiAoIWlnbm9yZVpvb20pIHtcbiAgICAgICAgcG9pbnRlciA9IHRoaXMucmVzdG9yZVBvaW50ZXJWcHQocG9pbnRlcik7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXRpbmFTY2FsaW5nID0gdGhpcy5nZXRSZXRpbmFTY2FsaW5nKCk7XG4gICAgICBpZiAocmV0aW5hU2NhbGluZyAhPT0gMSkge1xuICAgICAgICBwb2ludGVyLnggLz0gcmV0aW5hU2NhbGluZztcbiAgICAgICAgcG9pbnRlci55IC89IHJldGluYVNjYWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChib3VuZHNXaWR0aCA9PT0gMCB8fCBib3VuZHNIZWlnaHQgPT09IDApIHtcbiAgICAgICAgLy8gSWYgYm91bmRzIGFyZSBub3QgYXZhaWxhYmxlIChpLmUuIG5vdCB2aXNpYmxlKSwgZG8gbm90IGFwcGx5IHNjYWxlLlxuICAgICAgICBjc3NTY2FsZSA9IHsgd2lkdGg6IDEsIGhlaWdodDogMSB9O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNzc1NjYWxlID0ge1xuICAgICAgICAgIHdpZHRoOiB1cHBlckNhbnZhc0VsLndpZHRoIC8gYm91bmRzV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiB1cHBlckNhbnZhc0VsLmhlaWdodCAvIGJvdW5kc0hlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiBwb2ludGVyLnggKiBjc3NTY2FsZS53aWR0aCxcbiAgICAgICAgeTogcG9pbnRlci55ICogY3NzU2NhbGUuaGVpZ2h0XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0aHJvd3Mge0NBTlZBU19JTklUX0VSUk9SfSBJZiBjYW52YXMgY2FuIG5vdCBiZSBpbml0aWFsaXplZFxuICAgICAqL1xuICAgIF9jcmVhdGVVcHBlckNhbnZhczogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGxvd2VyQ2FudmFzQ2xhc3MgPSB0aGlzLmxvd2VyQ2FudmFzRWwuY2xhc3NOYW1lLnJlcGxhY2UoL1xccypsb3dlci1jYW52YXNcXHMqLywgJycpLFxuICAgICAgICAgIGxvd2VyQ2FudmFzRWwgPSB0aGlzLmxvd2VyQ2FudmFzRWwsIHVwcGVyQ2FudmFzRWwgPSB0aGlzLnVwcGVyQ2FudmFzRWw7XG5cbiAgICAgIC8vIHRoZXJlIGlzIG5vIG5lZWQgdG8gY3JlYXRlIGEgbmV3IHVwcGVyQ2FudmFzIGVsZW1lbnQgaWYgd2UgaGF2ZSBhbHJlYWR5IG9uZS5cbiAgICAgIGlmICh1cHBlckNhbnZhc0VsKSB7XG4gICAgICAgIHVwcGVyQ2FudmFzRWwuY2xhc3NOYW1lID0gJyc7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdXBwZXJDYW52YXNFbCA9IHRoaXMuX2NyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgICAgdGhpcy51cHBlckNhbnZhc0VsID0gdXBwZXJDYW52YXNFbDtcbiAgICAgIH1cbiAgICAgIGZhYnJpYy51dGlsLmFkZENsYXNzKHVwcGVyQ2FudmFzRWwsICd1cHBlci1jYW52YXMgJyArIGxvd2VyQ2FudmFzQ2xhc3MpO1xuXG4gICAgICB0aGlzLndyYXBwZXJFbC5hcHBlbmRDaGlsZCh1cHBlckNhbnZhc0VsKTtcblxuICAgICAgdGhpcy5fY29weUNhbnZhc1N0eWxlKGxvd2VyQ2FudmFzRWwsIHVwcGVyQ2FudmFzRWwpO1xuICAgICAgdGhpcy5fYXBwbHlDYW52YXNTdHlsZSh1cHBlckNhbnZhc0VsKTtcbiAgICAgIHRoaXMuY29udGV4dFRvcCA9IHVwcGVyQ2FudmFzRWwuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb250ZXh0IG9mIHRvcCBjYW52YXMgd2hlcmUgaW50ZXJhY3Rpb25zIGFyZSBkcmF3blxuICAgICAqIEByZXR1cm5zIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9XG4gICAgICovXG4gICAgZ2V0VG9wQ29udGV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFRvcDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY3JlYXRlQ2FjaGVDYW52YXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2FjaGVDYW52YXNFbCA9IHRoaXMuX2NyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgIHRoaXMuY2FjaGVDYW52YXNFbC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy53aWR0aCk7XG4gICAgICB0aGlzLmNhY2hlQ2FudmFzRWwuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmhlaWdodCk7XG4gICAgICB0aGlzLmNvbnRleHRDYWNoZSA9IHRoaXMuY2FjaGVDYW52YXNFbC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0V3JhcHBlckVsZW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMud3JhcHBlckVsID0gZmFicmljLnV0aWwud3JhcEVsZW1lbnQodGhpcy5sb3dlckNhbnZhc0VsLCAnZGl2Jywge1xuICAgICAgICAnY2xhc3MnOiB0aGlzLmNvbnRhaW5lckNsYXNzXG4gICAgICB9KTtcbiAgICAgIGZhYnJpYy51dGlsLnNldFN0eWxlKHRoaXMud3JhcHBlckVsLCB7XG4gICAgICAgIHdpZHRoOiB0aGlzLndpZHRoICsgJ3B4JyxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCArICdweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9KTtcbiAgICAgIGZhYnJpYy51dGlsLm1ha2VFbGVtZW50VW5zZWxlY3RhYmxlKHRoaXMud3JhcHBlckVsKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IGNhbnZhcyBlbGVtZW50IHRvIGFwcGx5IHN0eWxlcyBvblxuICAgICAqL1xuICAgIF9hcHBseUNhbnZhc1N0eWxlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgdmFyIHdpZHRoID0gdGhpcy53aWR0aCB8fCBlbGVtZW50LndpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IHRoaXMuaGVpZ2h0IHx8IGVsZW1lbnQuaGVpZ2h0O1xuXG4gICAgICBmYWJyaWMudXRpbC5zZXRTdHlsZShlbGVtZW50LCB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB3aWR0aDogd2lkdGggKyAncHgnLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCArICdweCcsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgJ3RvdWNoLWFjdGlvbic6IHRoaXMuYWxsb3dUb3VjaFNjcm9sbGluZyA/ICdtYW5pcHVsYXRpb24nIDogJ25vbmUnLFxuICAgICAgICAnLW1zLXRvdWNoLWFjdGlvbic6IHRoaXMuYWxsb3dUb3VjaFNjcm9sbGluZyA/ICdtYW5pcHVsYXRpb24nIDogJ25vbmUnXG4gICAgICB9KTtcbiAgICAgIGVsZW1lbnQud2lkdGggPSB3aWR0aDtcbiAgICAgIGVsZW1lbnQuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgZmFicmljLnV0aWwubWFrZUVsZW1lbnRVbnNlbGVjdGFibGUoZWxlbWVudCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvcHkgdGhlIGVudGlyZSBpbmxpbmUgc3R5bGUgZnJvbSBvbmUgZWxlbWVudCAoZnJvbUVsKSB0byBhbm90aGVyICh0b0VsKVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBmcm9tRWwgRWxlbWVudCBzdHlsZSBpcyBjb3BpZWQgZnJvbVxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdG9FbCBFbGVtZW50IGNvcGllZCBzdHlsZSBpcyBhcHBsaWVkIHRvXG4gICAgICovXG4gICAgX2NvcHlDYW52YXNTdHlsZTogZnVuY3Rpb24gKGZyb21FbCwgdG9FbCkge1xuICAgICAgdG9FbC5zdHlsZS5jc3NUZXh0ID0gZnJvbUVsLnN0eWxlLmNzc1RleHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29udGV4dCBvZiBjYW52YXMgd2hlcmUgb2JqZWN0IHNlbGVjdGlvbiBpcyBkcmF3blxuICAgICAqIEByZXR1cm4ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH1cbiAgICAgKi9cbiAgICBnZXRTZWxlY3Rpb25Db250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHRUb3A7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgJmx0O2NhbnZhcz4gZWxlbWVudCBvbiB3aGljaCBvYmplY3Qgc2VsZWN0aW9uIGlzIGRyYXduXG4gICAgICogQHJldHVybiB7SFRNTENhbnZhc0VsZW1lbnR9XG4gICAgICovXG4gICAgZ2V0U2VsZWN0aW9uRWxlbWVudDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMudXBwZXJDYW52YXNFbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjdXJyZW50bHkgYWN0aXZlIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IGFjdGl2ZSBvYmplY3RcbiAgICAgKi9cbiAgICBnZXRBY3RpdmVPYmplY3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVPYmplY3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgd2l0aCB0aGUgY3VycmVudCBzZWxlY3RlZCBvYmplY3RzXG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gYWN0aXZlIG9iamVjdFxuICAgICAqL1xuICAgIGdldEFjdGl2ZU9iamVjdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhY3RpdmUgPSB0aGlzLl9hY3RpdmVPYmplY3Q7XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIGlmIChhY3RpdmUudHlwZSA9PT0gJ2FjdGl2ZVNlbGVjdGlvbicgJiYgYWN0aXZlLl9vYmplY3RzKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGl2ZS5fb2JqZWN0cy5zbGljZSgwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW2FjdGl2ZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iaiBPYmplY3QgdGhhdCB3YXMgcmVtb3ZlZFxuICAgICAqL1xuICAgIF9vbk9iamVjdFJlbW92ZWQ6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgLy8gcmVtb3ZpbmcgYWN0aXZlIG9iamVjdCBzaG91bGQgZmlyZSBcInNlbGVjdGlvbjpjbGVhcmVkXCIgZXZlbnRzXG4gICAgICBpZiAob2JqID09PSB0aGlzLl9hY3RpdmVPYmplY3QpIHtcbiAgICAgICAgdGhpcy5maXJlKCdiZWZvcmU6c2VsZWN0aW9uOmNsZWFyZWQnLCB7IHRhcmdldDogb2JqIH0pO1xuICAgICAgICB0aGlzLl9kaXNjYXJkQWN0aXZlT2JqZWN0KCk7XG4gICAgICAgIHRoaXMuZmlyZSgnc2VsZWN0aW9uOmNsZWFyZWQnLCB7IHRhcmdldDogb2JqIH0pO1xuICAgICAgICBvYmouZmlyZSgnZGVzZWxlY3RlZCcpO1xuICAgICAgfVxuICAgICAgaWYgKG9iaiA9PT0gdGhpcy5faG92ZXJlZFRhcmdldCl7XG4gICAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9ob3ZlcmVkVGFyZ2V0cyA9IFtdO1xuICAgICAgfVxuICAgICAgdGhpcy5jYWxsU3VwZXIoJ19vbk9iamVjdFJlbW92ZWQnLCBvYmopO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIENvbXBhcmVzIHRoZSBvbGQgYWN0aXZlT2JqZWN0IHdpdGggdGhlIGN1cnJlbnQgb25lIGFuZCBmaXJlcyBjb3JyZWN0IGV2ZW50c1xuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqIG9sZCBhY3RpdmVPYmplY3RcbiAgICAgKi9cbiAgICBfZmlyZVNlbGVjdGlvbkV2ZW50czogZnVuY3Rpb24ob2xkT2JqZWN0cywgZSkge1xuICAgICAgdmFyIHNvbWV0aGluZ0NoYW5nZWQgPSBmYWxzZSwgb2JqZWN0cyA9IHRoaXMuZ2V0QWN0aXZlT2JqZWN0cygpLFxuICAgICAgICAgIGFkZGVkID0gW10sIHJlbW92ZWQgPSBbXTtcbiAgICAgIG9sZE9iamVjdHMuZm9yRWFjaChmdW5jdGlvbihvbGRPYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdHMuaW5kZXhPZihvbGRPYmplY3QpID09PSAtMSkge1xuICAgICAgICAgIHNvbWV0aGluZ0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgIG9sZE9iamVjdC5maXJlKCdkZXNlbGVjdGVkJywge1xuICAgICAgICAgICAgZTogZSxcbiAgICAgICAgICAgIHRhcmdldDogb2xkT2JqZWN0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKG9sZE9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgb2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2xkT2JqZWN0cy5pbmRleE9mKG9iamVjdCkgPT09IC0xKSB7XG4gICAgICAgICAgc29tZXRoaW5nQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgb2JqZWN0LmZpcmUoJ3NlbGVjdGVkJywge1xuICAgICAgICAgICAgZTogZSxcbiAgICAgICAgICAgIHRhcmdldDogb2JqZWN0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYWRkZWQucHVzaChvYmplY3QpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChvbGRPYmplY3RzLmxlbmd0aCA+IDAgJiYgb2JqZWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNvbWV0aGluZ0NoYW5nZWQgJiYgdGhpcy5maXJlKCdzZWxlY3Rpb246dXBkYXRlZCcsIHtcbiAgICAgICAgICBlOiBlLFxuICAgICAgICAgIHNlbGVjdGVkOiBhZGRlZCxcbiAgICAgICAgICBkZXNlbGVjdGVkOiByZW1vdmVkLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG9iamVjdHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmZpcmUoJ3NlbGVjdGlvbjpjcmVhdGVkJywge1xuICAgICAgICAgIGU6IGUsXG4gICAgICAgICAgc2VsZWN0ZWQ6IGFkZGVkLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG9sZE9iamVjdHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmZpcmUoJ3NlbGVjdGlvbjpjbGVhcmVkJywge1xuICAgICAgICAgIGU6IGUsXG4gICAgICAgICAgZGVzZWxlY3RlZDogcmVtb3ZlZCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgZ2l2ZW4gb2JqZWN0IGFzIHRoZSBvbmx5IGFjdGl2ZSBvYmplY3Qgb24gY2FudmFzXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIHNldCBhcyBhbiBhY3RpdmUgb25lXG4gICAgICogQHBhcmFtIHtFdmVudH0gW2VdIEV2ZW50IChwYXNzZWQgYWxvbmcgd2hlbiBmaXJpbmcgXCJvYmplY3Q6c2VsZWN0ZWRcIilcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldEFjdGl2ZU9iamVjdDogZnVuY3Rpb24gKG9iamVjdCwgZSkge1xuICAgICAgdmFyIGN1cnJlbnRBY3RpdmVzID0gdGhpcy5nZXRBY3RpdmVPYmplY3RzKCk7XG4gICAgICB0aGlzLl9zZXRBY3RpdmVPYmplY3Qob2JqZWN0LCBlKTtcbiAgICAgIHRoaXMuX2ZpcmVTZWxlY3Rpb25FdmVudHMoY3VycmVudEFjdGl2ZXMsIGUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBwcml2YXRlIG1ldGhvZCBmb3Igbm93LlxuICAgICAqIFRoaXMgaXMgc3VwcG9zZWQgdG8gYmUgZXF1aXZhbGVudCB0byBzZXRBY3RpdmVPYmplY3QgYnV0IHdpdGhvdXQgZmlyaW5nXG4gICAgICogYW55IGV2ZW50LiBUaGVyZSBpcyBjb21taXRtZW50IHRvIGhhdmUgdGhpcyBzdGF5IHRoaXMgd2F5LlxuICAgICAqIFRoaXMgaXMgdGhlIGZ1bmN0aW9uYWwgcGFydCBvZiBzZXRBY3RpdmVPYmplY3QuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IHRvIHNldCBhcyBhY3RpdmVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbZV0gRXZlbnQgKHBhc3NlZCBhbG9uZyB3aGVuIGZpcmluZyBcIm9iamVjdDpzZWxlY3RlZFwiKVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhlIHNlbGVjdGlvbiBoYXBwZW5lZFxuICAgICAqL1xuICAgIF9zZXRBY3RpdmVPYmplY3Q6IGZ1bmN0aW9uKG9iamVjdCwgZSkge1xuICAgICAgaWYgKHRoaXMuX2FjdGl2ZU9iamVjdCA9PT0gb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5fZGlzY2FyZEFjdGl2ZU9iamVjdChlLCBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChvYmplY3Qub25TZWxlY3QoeyBlOiBlIH0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FjdGl2ZU9iamVjdCA9IG9iamVjdDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGEgcHJpdmF0ZSBtZXRob2QgZm9yIG5vdy5cbiAgICAgKiBUaGlzIGlzIHN1cHBvc2VkIHRvIGJlIGVxdWl2YWxlbnQgdG8gZGlzY2FyZEFjdGl2ZU9iamVjdCBidXQgd2l0aG91dCBmaXJpbmdcbiAgICAgKiBhbnkgZXZlbnRzLiBUaGVyZSBpcyBjb21taXRtZW50IHRvIGhhdmUgdGhpcyBzdGF5IHRoaXMgd2F5LlxuICAgICAqIFRoaXMgaXMgdGhlIGZ1bmN0aW9uYWwgcGFydCBvZiBkaXNjYXJkQWN0aXZlT2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtlXSBFdmVudCAocGFzc2VkIGFsb25nIHdoZW4gZmlyaW5nIFwib2JqZWN0OmRlc2VsZWN0ZWRcIilcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IHRvIHNldCBhcyBhY3RpdmVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoZSBzZWxlY3Rpb24gaGFwcGVuZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9kaXNjYXJkQWN0aXZlT2JqZWN0OiBmdW5jdGlvbihlLCBvYmplY3QpIHtcbiAgICAgIHZhciBvYmogPSB0aGlzLl9hY3RpdmVPYmplY3Q7XG4gICAgICBpZiAob2JqKSB7XG4gICAgICAgIC8vIG9uRGVzZWxlY3QgcmV0dXJuIFRSVUUgdG8gY2FuY2VsIHNlbGVjdGlvbjtcbiAgICAgICAgaWYgKG9iai5vbkRlc2VsZWN0KHsgZTogZSwgb2JqZWN0OiBvYmplY3QgfSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYWN0aXZlT2JqZWN0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEaXNjYXJkcyBjdXJyZW50bHkgYWN0aXZlIG9iamVjdCBhbmQgZmlyZSBldmVudHMuIElmIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgZmFicmljXG4gICAgICogYXMgYSBjb25zZXF1ZW5jZSBvZiBhIG1vdXNlIGV2ZW50LCB0aGUgZXZlbnQgaXMgcGFzc2VkIGFzIGEgcGFyYW1ldGVyIGFuZFxuICAgICAqIHNlbnQgdG8gdGhlIGZpcmUgZnVuY3Rpb24gZm9yIHRoZSBjdXN0b20gZXZlbnRzLiBXaGVuIHVzZWQgYXMgYSBtZXRob2QgdGhlXG4gICAgICogZSBwYXJhbSBkb2VzIG5vdCBoYXZlIGFueSBhcHBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2V2ZW50fSBlXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBkaXNjYXJkQWN0aXZlT2JqZWN0OiBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGN1cnJlbnRBY3RpdmVzID0gdGhpcy5nZXRBY3RpdmVPYmplY3RzKCksIGFjdGl2ZU9iamVjdCA9IHRoaXMuZ2V0QWN0aXZlT2JqZWN0KCk7XG4gICAgICBpZiAoY3VycmVudEFjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZmlyZSgnYmVmb3JlOnNlbGVjdGlvbjpjbGVhcmVkJywgeyB0YXJnZXQ6IGFjdGl2ZU9iamVjdCwgZTogZSB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2Rpc2NhcmRBY3RpdmVPYmplY3QoZSk7XG4gICAgICB0aGlzLl9maXJlU2VsZWN0aW9uRXZlbnRzKGN1cnJlbnRBY3RpdmVzLCBlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYSBjYW52YXMgZWxlbWVudCBhbmQgcmVtb3ZlcyBhbGwgZXZlbnQgbGlzdGVuZXJzXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IHRoaXMud3JhcHBlckVsO1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIHdyYXBwZXIucmVtb3ZlQ2hpbGQodGhpcy51cHBlckNhbnZhc0VsKTtcbiAgICAgIHdyYXBwZXIucmVtb3ZlQ2hpbGQodGhpcy5sb3dlckNhbnZhc0VsKTtcbiAgICAgIHRoaXMuY29udGV4dENhY2hlID0gbnVsbDtcbiAgICAgIHRoaXMuY29udGV4dFRvcCA9IG51bGw7XG4gICAgICBbJ3VwcGVyQ2FudmFzRWwnLCAnY2FjaGVDYW52YXNFbCddLmZvckVhY2goKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgZmFicmljLnV0aWwuY2xlYW5VcEpzZG9tTm9kZSh0aGlzW2VsZW1lbnRdKTtcbiAgICAgICAgdGhpc1tlbGVtZW50XSA9IHVuZGVmaW5lZDtcbiAgICAgIH0pLmJpbmQodGhpcykpO1xuICAgICAgaWYgKHdyYXBwZXIucGFyZW50Tm9kZSkge1xuICAgICAgICB3cmFwcGVyLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHRoaXMubG93ZXJDYW52YXNFbCwgdGhpcy53cmFwcGVyRWwpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIHRoaXMud3JhcHBlckVsO1xuICAgICAgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgY29udGV4dHMgKGJhY2tncm91bmQsIG1haW4sIHRvcCkgb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyB0aGlzLmRpc2NhcmRBY3RpdmVHcm91cCgpO1xuICAgICAgdGhpcy5kaXNjYXJkQWN0aXZlT2JqZWN0KCk7XG4gICAgICB0aGlzLmNsZWFyQ29udGV4dCh0aGlzLmNvbnRleHRUb3ApO1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbFN1cGVyKCdjbGVhcicpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBvYmplY3RzJyBjb250cm9scyAoYm9yZGVycy9jb250cm9scylcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIGNvbnRyb2xzIG9uXG4gICAgICovXG4gICAgZHJhd0NvbnRyb2xzOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIHZhciBhY3RpdmVPYmplY3QgPSB0aGlzLl9hY3RpdmVPYmplY3Q7XG5cbiAgICAgIGlmIChhY3RpdmVPYmplY3QpIHtcbiAgICAgICAgYWN0aXZlT2JqZWN0Ll9yZW5kZXJDb250cm9scyhjdHgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF90b09iamVjdDogZnVuY3Rpb24oaW5zdGFuY2UsIG1ldGhvZE5hbWUsIHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIC8vSWYgdGhlIG9iamVjdCBpcyBwYXJ0IG9mIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBncm91cCwgaXQgc2hvdWxkXG4gICAgICAvL2JlIHRyYW5zZm9ybWVkIGFwcHJvcHJpYXRlbHlcbiAgICAgIC8vaS5lLiBpdCBzaG91bGQgYmUgc2VyaWFsaXNlZCBhcyBpdCB3b3VsZCBhcHBlYXIgaWYgdGhlIHNlbGVjdGlvbiBncm91cFxuICAgICAgLy93ZXJlIHRvIGJlIGRlc3Ryb3llZC5cbiAgICAgIHZhciBvcmlnaW5hbFByb3BlcnRpZXMgPSB0aGlzLl9yZWFsaXplR3JvdXBUcmFuc2Zvcm1Pbk9iamVjdChpbnN0YW5jZSksXG4gICAgICAgICAgb2JqZWN0ID0gdGhpcy5jYWxsU3VwZXIoJ190b09iamVjdCcsIGluc3RhbmNlLCBtZXRob2ROYW1lLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICAgIC8vVW5kbyB0aGUgZGFtYWdlIHdlIGRpZCBieSBjaGFuZ2luZyBhbGwgb2YgaXRzIHByb3BlcnRpZXNcbiAgICAgIHRoaXMuX3Vud2luZEdyb3VwVHJhbnNmb3JtT25PYmplY3QoaW5zdGFuY2UsIG9yaWdpbmFsUHJvcGVydGllcyk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZWFsaXNlcyBhbiBvYmplY3QncyBncm91cCB0cmFuc2Zvcm1hdGlvbiBvbiBpdFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBbaW5zdGFuY2VdIHRoZSBvYmplY3QgdG8gdHJhbnNmb3JtIChnZXRzIG11dGF0ZWQpXG4gICAgICogQHJldHVybnMgdGhlIG9yaWdpbmFsIHZhbHVlcyBvZiBpbnN0YW5jZSB3aGljaCB3ZXJlIGNoYW5nZWRcbiAgICAgKi9cbiAgICBfcmVhbGl6ZUdyb3VwVHJhbnNmb3JtT25PYmplY3Q6IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgICBpZiAoaW5zdGFuY2UuZ3JvdXAgJiYgaW5zdGFuY2UuZ3JvdXAudHlwZSA9PT0gJ2FjdGl2ZVNlbGVjdGlvbicgJiYgdGhpcy5fYWN0aXZlT2JqZWN0ID09PSBpbnN0YW5jZS5ncm91cCkge1xuICAgICAgICB2YXIgbGF5b3V0UHJvcHMgPSBbJ2FuZ2xlJywgJ2ZsaXBYJywgJ2ZsaXBZJywgJ2xlZnQnLCAnc2NhbGVYJywgJ3NjYWxlWScsICdza2V3WCcsICdza2V3WScsICd0b3AnXTtcbiAgICAgICAgLy9Db3B5IGFsbCB0aGUgcG9zaXRpb25hbGx5IHJlbGV2YW50IHByb3BlcnRpZXMgYWNyb3NzIG5vd1xuICAgICAgICB2YXIgb3JpZ2luYWxWYWx1ZXMgPSB7fTtcbiAgICAgICAgbGF5b3V0UHJvcHMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgICAgb3JpZ2luYWxWYWx1ZXNbcHJvcF0gPSBpbnN0YW5jZVtwcm9wXTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZhYnJpYy51dGlsLmFkZFRyYW5zZm9ybVRvT2JqZWN0KGluc3RhbmNlLCB0aGlzLl9hY3RpdmVPYmplY3QuY2FsY093bk1hdHJpeCgpKTtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsVmFsdWVzO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXN0b3JlcyB0aGUgY2hhbmdlZCBwcm9wZXJ0aWVzIG9mIGluc3RhbmNlXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IFtpbnN0YW5jZV0gdGhlIG9iamVjdCB0byB1bi10cmFuc2Zvcm0gKGdldHMgbXV0YXRlZClcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29yaWdpbmFsVmFsdWVzXSB0aGUgb3JpZ2luYWwgdmFsdWVzIG9mIGluc3RhbmNlLCBhcyByZXR1cm5lZCBieSBfcmVhbGl6ZUdyb3VwVHJhbnNmb3JtT25PYmplY3RcbiAgICAgKi9cbiAgICBfdW53aW5kR3JvdXBUcmFuc2Zvcm1Pbk9iamVjdDogZnVuY3Rpb24oaW5zdGFuY2UsIG9yaWdpbmFsVmFsdWVzKSB7XG4gICAgICBpZiAob3JpZ2luYWxWYWx1ZXMpIHtcbiAgICAgICAgaW5zdGFuY2Uuc2V0KG9yaWdpbmFsVmFsdWVzKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0U1ZHT2JqZWN0OiBmdW5jdGlvbihtYXJrdXAsIGluc3RhbmNlLCByZXZpdmVyKSB7XG4gICAgICAvL0lmIHRoZSBvYmplY3QgaXMgaW4gYSBzZWxlY3Rpb24gZ3JvdXAsIHNpbXVsYXRlIHdoYXQgd291bGQgaGFwcGVuIHRvIHRoYXRcbiAgICAgIC8vb2JqZWN0IHdoZW4gdGhlIGdyb3VwIGlzIGRlc2VsZWN0ZWRcbiAgICAgIHZhciBvcmlnaW5hbFByb3BlcnRpZXMgPSB0aGlzLl9yZWFsaXplR3JvdXBUcmFuc2Zvcm1Pbk9iamVjdChpbnN0YW5jZSk7XG4gICAgICB0aGlzLmNhbGxTdXBlcignX3NldFNWR09iamVjdCcsIG1hcmt1cCwgaW5zdGFuY2UsIHJldml2ZXIpO1xuICAgICAgdGhpcy5fdW53aW5kR3JvdXBUcmFuc2Zvcm1Pbk9iamVjdChpbnN0YW5jZSwgb3JpZ2luYWxQcm9wZXJ0aWVzKTtcbiAgICB9LFxuXG4gICAgc2V0Vmlld3BvcnRUcmFuc2Zvcm06IGZ1bmN0aW9uICh2cHQpIHtcbiAgICAgIGlmICh0aGlzLnJlbmRlck9uQWRkUmVtb3ZlICYmIHRoaXMuX2FjdGl2ZU9iamVjdCAmJiB0aGlzLl9hY3RpdmVPYmplY3QuaXNFZGl0aW5nKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZU9iamVjdC5jbGVhckNvbnRleHRUb3AoKTtcbiAgICAgIH1cbiAgICAgIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLnNldFZpZXdwb3J0VHJhbnNmb3JtLmNhbGwodGhpcywgdnB0KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGNvcHlpbmcgc3RhdGljIHByb3BlcnRpZXMgbWFudWFsbHkgdG8gd29yayBhcm91bmQgT3BlcmEncyBidWcsXG4gIC8vIHdoZXJlIFwicHJvdG90eXBlXCIgcHJvcGVydHkgaXMgZW51bWVyYWJsZSBhbmQgb3ZlcnJpZGVzIGV4aXN0aW5nIHByb3RvdHlwZVxuICBmb3IgKHZhciBwcm9wIGluIGZhYnJpYy5TdGF0aWNDYW52YXMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgIGZhYnJpYy5DYW52YXNbcHJvcF0gPSBmYWJyaWMuU3RhdGljQ2FudmFzW3Byb3BdO1xuICAgIH1cbiAgfVxufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGFkZExpc3RlbmVyID0gZmFicmljLnV0aWwuYWRkTGlzdGVuZXIsXG4gICAgICByZW1vdmVMaXN0ZW5lciA9IGZhYnJpYy51dGlsLnJlbW92ZUxpc3RlbmVyLFxuICAgICAgUklHSFRfQ0xJQ0sgPSAzLCBNSURETEVfQ0xJQ0sgPSAyLCBMRUZUX0NMSUNLID0gMSxcbiAgICAgIGFkZEV2ZW50T3B0aW9ucyA9IHsgcGFzc2l2ZTogZmFsc2UgfTtcblxuICBmdW5jdGlvbiBjaGVja0NsaWNrKGUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGUuYnV0dG9uICYmIChlLmJ1dHRvbiA9PT0gdmFsdWUgLSAxKTtcbiAgfVxuXG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLkNhbnZhcy5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLkNhbnZhcy5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogQ29udGFpbnMgdGhlIGlkIG9mIHRoZSB0b3VjaCBldmVudCB0aGF0IG93bnMgdGhlIGZhYnJpYyB0cmFuc2Zvcm1cbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG1haW5Ub3VjaElkOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogQWRkcyBtb3VzZSBsaXN0ZW5lcnMgdG8gY2FudmFzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaW5pdEV2ZW50TGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBpbiBjYXNlIHdlIGluaXRpYWxpemVkIHRoZSBjbGFzcyB0d2ljZS4gVGhpcyBzaG91bGQgbm90IGhhcHBlbiBub3JtYWxseVxuICAgICAgLy8gYnV0IGluIHNvbWUga2luZCBvZiBhcHBsaWNhdGlvbnMgd2hlcmUgdGhlIGNhbnZhcyBlbGVtZW50IG1heSBiZSBjaGFuZ2VkXG4gICAgICAvLyB0aGlzIGlzIGEgd29ya2Fyb3VuZCB0byBoYXZpbmcgZG91YmxlIGxpc3RlbmVycy5cbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLl9iaW5kRXZlbnRzKCk7XG4gICAgICB0aGlzLmFkZE9yUmVtb3ZlKGFkZExpc3RlbmVyLCAnYWRkJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiBhbiBldmVudCBwcmVmaXggcG9pbnRlciBvciBtb3VzZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRFdmVudFByZWZpeDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW5hYmxlUG9pbnRlckV2ZW50cyA/ICdwb2ludGVyJyA6ICdtb3VzZSc7XG4gICAgfSxcblxuICAgIGFkZE9yUmVtb3ZlOiBmdW5jdGlvbihmdW5jdG9yLCBldmVudGpzRnVuY3Rvcikge1xuICAgICAgdmFyIGNhbnZhc0VsZW1lbnQgPSB0aGlzLnVwcGVyQ2FudmFzRWwsXG4gICAgICAgICAgZXZlbnRUeXBlUHJlZml4ID0gdGhpcy5fZ2V0RXZlbnRQcmVmaXgoKTtcbiAgICAgIGZ1bmN0b3IoZmFicmljLndpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX29uUmVzaXplKTtcbiAgICAgIGZ1bmN0b3IoY2FudmFzRWxlbWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ2Rvd24nLCB0aGlzLl9vbk1vdXNlRG93bik7XG4gICAgICBmdW5jdG9yKGNhbnZhc0VsZW1lbnQsIGV2ZW50VHlwZVByZWZpeCArICdtb3ZlJywgdGhpcy5fb25Nb3VzZU1vdmUsIGFkZEV2ZW50T3B0aW9ucyk7XG4gICAgICBmdW5jdG9yKGNhbnZhc0VsZW1lbnQsIGV2ZW50VHlwZVByZWZpeCArICdvdXQnLCB0aGlzLl9vbk1vdXNlT3V0KTtcbiAgICAgIGZ1bmN0b3IoY2FudmFzRWxlbWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ2VudGVyJywgdGhpcy5fb25Nb3VzZUVudGVyKTtcbiAgICAgIGZ1bmN0b3IoY2FudmFzRWxlbWVudCwgJ3doZWVsJywgdGhpcy5fb25Nb3VzZVdoZWVsKTtcbiAgICAgIGZ1bmN0b3IoY2FudmFzRWxlbWVudCwgJ2NvbnRleHRtZW51JywgdGhpcy5fb25Db250ZXh0TWVudSk7XG4gICAgICBmdW5jdG9yKGNhbnZhc0VsZW1lbnQsICdkYmxjbGljaycsIHRoaXMuX29uRG91YmxlQ2xpY2spO1xuICAgICAgZnVuY3RvcihjYW52YXNFbGVtZW50LCAnZHJhZ292ZXInLCB0aGlzLl9vbkRyYWdPdmVyKTtcbiAgICAgIGZ1bmN0b3IoY2FudmFzRWxlbWVudCwgJ2RyYWdlbnRlcicsIHRoaXMuX29uRHJhZ0VudGVyKTtcbiAgICAgIGZ1bmN0b3IoY2FudmFzRWxlbWVudCwgJ2RyYWdsZWF2ZScsIHRoaXMuX29uRHJhZ0xlYXZlKTtcbiAgICAgIGZ1bmN0b3IoY2FudmFzRWxlbWVudCwgJ2Ryb3AnLCB0aGlzLl9vbkRyb3ApO1xuICAgICAgaWYgKCF0aGlzLmVuYWJsZVBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgZnVuY3RvcihjYW52YXNFbGVtZW50LCAndG91Y2hzdGFydCcsIHRoaXMuX29uVG91Y2hTdGFydCwgYWRkRXZlbnRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZXZlbnRqcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZXZlbnRqc0Z1bmN0b3IgaW4gZXZlbnRqcykge1xuICAgICAgICBldmVudGpzW2V2ZW50anNGdW5jdG9yXShjYW52YXNFbGVtZW50LCAnZ2VzdHVyZScsIHRoaXMuX29uR2VzdHVyZSk7XG4gICAgICAgIGV2ZW50anNbZXZlbnRqc0Z1bmN0b3JdKGNhbnZhc0VsZW1lbnQsICdkcmFnJywgdGhpcy5fb25EcmFnKTtcbiAgICAgICAgZXZlbnRqc1tldmVudGpzRnVuY3Rvcl0oY2FudmFzRWxlbWVudCwgJ29yaWVudGF0aW9uJywgdGhpcy5fb25PcmllbnRhdGlvbkNoYW5nZSk7XG4gICAgICAgIGV2ZW50anNbZXZlbnRqc0Z1bmN0b3JdKGNhbnZhc0VsZW1lbnQsICdzaGFrZScsIHRoaXMuX29uU2hha2UpO1xuICAgICAgICBldmVudGpzW2V2ZW50anNGdW5jdG9yXShjYW52YXNFbGVtZW50LCAnbG9uZ3ByZXNzJywgdGhpcy5fb25Mb25nUHJlc3MpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBldmVudCBsaXN0ZW5lcnNcbiAgICAgKi9cbiAgICByZW1vdmVMaXN0ZW5lcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5hZGRPclJlbW92ZShyZW1vdmVMaXN0ZW5lciwgJ3JlbW92ZScpO1xuICAgICAgLy8gaWYgeW91IGRpc3Bvc2Ugb24gYSBtb3VzZURvd24sIGJlZm9yZSBtb3VzZSB1cCwgeW91IG5lZWQgdG8gY2xlYW4gZG9jdW1lbnQgdG8uLi5cbiAgICAgIHZhciBldmVudFR5cGVQcmVmaXggPSB0aGlzLl9nZXRFdmVudFByZWZpeCgpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoZmFicmljLmRvY3VtZW50LCBldmVudFR5cGVQcmVmaXggKyAndXAnLCB0aGlzLl9vbk1vdXNlVXApO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoZmFicmljLmRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9vblRvdWNoRW5kLCBhZGRFdmVudE9wdGlvbnMpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoZmFicmljLmRvY3VtZW50LCBldmVudFR5cGVQcmVmaXggKyAnbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlLCBhZGRFdmVudE9wdGlvbnMpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoZmFicmljLmRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Nb3VzZU1vdmUsIGFkZEV2ZW50T3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2JpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuZXZlbnRzQm91bmQpIHtcbiAgICAgICAgLy8gZm9yIGFueSByZWFzb24gd2UgcGFzcyBoZXJlIHR3aWNlIHdlIGRvIG5vdCB3YW50IHRvIGJpbmQgZXZlbnRzIHR3aWNlLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9vbk1vdXNlRG93biA9IHRoaXMuX29uTW91c2VEb3duLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9vblRvdWNoU3RhcnQgPSB0aGlzLl9vblRvdWNoU3RhcnQuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX29uTW91c2VNb3ZlID0gdGhpcy5fb25Nb3VzZU1vdmUuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX29uTW91c2VVcCA9IHRoaXMuX29uTW91c2VVcC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25Ub3VjaEVuZCA9IHRoaXMuX29uVG91Y2hFbmQuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX29uUmVzaXplID0gdGhpcy5fb25SZXNpemUuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX29uR2VzdHVyZSA9IHRoaXMuX29uR2VzdHVyZS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25EcmFnID0gdGhpcy5fb25EcmFnLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9vblNoYWtlID0gdGhpcy5fb25TaGFrZS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25Mb25nUHJlc3MgPSB0aGlzLl9vbkxvbmdQcmVzcy5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25PcmllbnRhdGlvbkNoYW5nZSA9IHRoaXMuX29uT3JpZW50YXRpb25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX29uTW91c2VXaGVlbCA9IHRoaXMuX29uTW91c2VXaGVlbC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25Nb3VzZU91dCA9IHRoaXMuX29uTW91c2VPdXQuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX29uTW91c2VFbnRlciA9IHRoaXMuX29uTW91c2VFbnRlci5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25Db250ZXh0TWVudSA9IHRoaXMuX29uQ29udGV4dE1lbnUuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX29uRG91YmxlQ2xpY2sgPSB0aGlzLl9vbkRvdWJsZUNsaWNrLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9vbkRyYWdPdmVyID0gdGhpcy5fb25EcmFnT3Zlci5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25EcmFnRW50ZXIgPSB0aGlzLl9zaW1wbGVFdmVudEhhbmRsZXIuYmluZCh0aGlzLCAnZHJhZ2VudGVyJyk7XG4gICAgICB0aGlzLl9vbkRyYWdMZWF2ZSA9IHRoaXMuX3NpbXBsZUV2ZW50SGFuZGxlci5iaW5kKHRoaXMsICdkcmFnbGVhdmUnKTtcbiAgICAgIHRoaXMuX29uRHJvcCA9IHRoaXMuX29uRHJvcC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5ldmVudHNCb3VuZCA9IHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gW2VdIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBFdmVudC5qcyBnZXN0dXJlXG4gICAgICogQHBhcmFtIHtFdmVudH0gW3NlbGZdIElubmVyIEV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIF9vbkdlc3R1cmU6IGZ1bmN0aW9uKGUsIHNlbGYpIHtcbiAgICAgIHRoaXMuX19vblRyYW5zZm9ybUdlc3R1cmUgJiYgdGhpcy5fX29uVHJhbnNmb3JtR2VzdHVyZShlLCBzZWxmKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbZV0gRXZlbnQgb2JqZWN0IGZpcmVkIG9uIEV2ZW50LmpzIGRyYWdcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbc2VsZl0gSW5uZXIgRXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgX29uRHJhZzogZnVuY3Rpb24oZSwgc2VsZikge1xuICAgICAgdGhpcy5fX29uRHJhZyAmJiB0aGlzLl9fb25EcmFnKGUsIHNlbGYpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtlXSBFdmVudCBvYmplY3QgZmlyZWQgb24gd2hlZWwgZXZlbnRcbiAgICAgKi9cbiAgICBfb25Nb3VzZVdoZWVsOiBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLl9fb25Nb3VzZVdoZWVsKGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlZG93blxuICAgICAqL1xuICAgIF9vbk1vdXNlT3V0OiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5faG92ZXJlZFRhcmdldDtcbiAgICAgIHRoaXMuZmlyZSgnbW91c2U6b3V0JywgeyB0YXJnZXQ6IHRhcmdldCwgZTogZSB9KTtcbiAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXQgPSBudWxsO1xuICAgICAgdGFyZ2V0ICYmIHRhcmdldC5maXJlKCdtb3VzZW91dCcsIHsgZTogZSB9KTtcblxuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXRzLmZvckVhY2goZnVuY3Rpb24oX3RhcmdldCl7XG4gICAgICAgIF90aGlzLmZpcmUoJ21vdXNlOm91dCcsIHsgdGFyZ2V0OiB0YXJnZXQsIGU6IGUgfSk7XG4gICAgICAgIF90YXJnZXQgJiYgdGFyZ2V0LmZpcmUoJ21vdXNlb3V0JywgeyBlOiBlIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9ob3ZlcmVkVGFyZ2V0cyA9IFtdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlZW50ZXJcbiAgICAgKi9cbiAgICBfb25Nb3VzZUVudGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAvLyBUaGlzIGZpbmQgdGFyZ2V0IGFuZCBjb25zZXF1ZW50ICdtb3VzZTpvdmVyJyBpcyB1c2VkIHRvXG4gICAgICAvLyBjbGVhciBvbGQgaW5zdGFuY2VzIG9uIGhvdmVyZWQgdGFyZ2V0LlxuICAgICAgLy8gY2FsbGluZyBmaW5kVGFyZ2V0IGhhcyB0aGUgc2lkZSBlZmZlY3Qgb2Yga2lsbGluZyB0YXJnZXQuX19jb3JuZXIuXG4gICAgICAvLyBhcyBhIHNob3J0IHRlcm0gZml4IHdlIGFyZSBub3QgZmlyaW5nIHRoaXMgaWYgd2UgYXJlIGN1cnJlbnRseSB0cmFuc2Zvcm1pbmcuXG4gICAgICAvLyBhcyBhIGxvbmcgdGVybSBmaXggd2UgbmVlZCB0byBzZXBhcmF0ZSB0aGUgYWN0aW9uIG9mIGZpbmRpbmcgYSB0YXJnZXQgd2l0aCB0aGVcbiAgICAgIC8vIHNpZGUgZWZmZWN0cyB3ZSBhZGRlZCB0byBpdC5cbiAgICAgIGlmICghdGhpcy5fY3VycmVudFRyYW5zZm9ybSAmJiAhdGhpcy5maW5kVGFyZ2V0KGUpKSB7XG4gICAgICAgIHRoaXMuZmlyZSgnbW91c2U6b3ZlcicsIHsgdGFyZ2V0OiBudWxsLCBlOiBlIH0pO1xuICAgICAgICB0aGlzLl9ob3ZlcmVkVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5faG92ZXJlZFRhcmdldHMgPSBbXTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbZV0gRXZlbnQgb2JqZWN0IGZpcmVkIG9uIEV2ZW50LmpzIG9yaWVudGF0aW9uIGNoYW5nZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtzZWxmXSBJbm5lciBFdmVudCBvYmplY3RcbiAgICAgKi9cbiAgICBfb25PcmllbnRhdGlvbkNoYW5nZTogZnVuY3Rpb24oZSwgc2VsZikge1xuICAgICAgdGhpcy5fX29uT3JpZW50YXRpb25DaGFuZ2UgJiYgdGhpcy5fX29uT3JpZW50YXRpb25DaGFuZ2UoZSwgc2VsZik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gW2VdIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBFdmVudC5qcyBzaGFrZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtzZWxmXSBJbm5lciBFdmVudCBvYmplY3RcbiAgICAgKi9cbiAgICBfb25TaGFrZTogZnVuY3Rpb24oZSwgc2VsZikge1xuICAgICAgdGhpcy5fX29uU2hha2UgJiYgdGhpcy5fX29uU2hha2UoZSwgc2VsZik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gW2VdIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBFdmVudC5qcyBzaGFrZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtzZWxmXSBJbm5lciBFdmVudCBvYmplY3RcbiAgICAgKi9cbiAgICBfb25Mb25nUHJlc3M6IGZ1bmN0aW9uKGUsIHNlbGYpIHtcbiAgICAgIHRoaXMuX19vbkxvbmdQcmVzcyAmJiB0aGlzLl9fb25Mb25nUHJlc3MoZSwgc2VsZik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHByZXZlbnQgZGVmYXVsdCB0byBhbGxvdyBkcm9wIGV2ZW50IHRvIGJlIGZpcmVkXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbZV0gRXZlbnQgb2JqZWN0IGZpcmVkIG9uIEV2ZW50LmpzIHNoYWtlXG4gICAgICovXG4gICAgX29uRHJhZ092ZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl9zaW1wbGVFdmVudEhhbmRsZXIoJ2RyYWdvdmVyJywgZSk7XG4gICAgICB0aGlzLl9maXJlRW50ZXJMZWF2ZUV2ZW50cyh0YXJnZXQsIGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBgZHJvcDpiZWZvcmVgIGlzIGEgYW4gZXZlbnQgdGhhdCBhbGxvdyB5b3UgdG8gc2NoZWR1bGUgbG9naWNcbiAgICAgKiBiZWZvcmUgdGhlIGBkcm9wYCBldmVudC4gUHJlZmVyIGBkcm9wYCBldmVudCBhbHdheXMsIGJ1dCBpZiB5b3UgbmVlZFxuICAgICAqIHRvIHJ1biBzb21lIGRyb3AtZGlzYWJsaW5nIGxvZ2ljIG9uIGFuIGV2ZW50LCBzaW5jZSB0aGVyZSBpcyBubyB3YXlcbiAgICAgKiB0byBoYW5kbGUgZXZlbnQgaGFuZGxlcnMgb3JkZXJpbmcsIHVzZSBgZHJvcDpiZWZvcmVgXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIF9vbkRyb3A6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB0aGlzLl9zaW1wbGVFdmVudEhhbmRsZXIoJ2Ryb3A6YmVmb3JlJywgZSk7XG4gICAgICByZXR1cm4gdGhpcy5fc2ltcGxlRXZlbnRIYW5kbGVyKCdkcm9wJywgZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3QgZmlyZWQgb24gbW91c2Vkb3duXG4gICAgICovXG4gICAgX29uQ29udGV4dE1lbnU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAodGhpcy5zdG9wQ29udGV4dE1lbnUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlZG93blxuICAgICAqL1xuICAgIF9vbkRvdWJsZUNsaWNrOiBmdW5jdGlvbiAoZSkge1xuICAgICAgdGhpcy5fY2FjaGVUcmFuc2Zvcm1FdmVudERhdGEoZSk7XG4gICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAnZGJsY2xpY2snKTtcbiAgICAgIHRoaXMuX3Jlc2V0VHJhbnNmb3JtRXZlbnREYXRhKGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSB0aGUgaWQgb2YgYW4gZXZlbnQuXG4gICAgICogcmV0dXJucyBlaXRoZXIgdGhlIHBvaW50ZXJJZCBvciB0aGUgaWRlbnRpZmllciBvciAwIGZvciB0aGUgbW91c2UgZXZlbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2dCBFdmVudCBvYmplY3RcbiAgICAgKi9cbiAgICBnZXRQb2ludGVySWQ6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgdmFyIGNoYW5nZWRUb3VjaGVzID0gZXZ0LmNoYW5nZWRUb3VjaGVzO1xuXG4gICAgICBpZiAoY2hhbmdlZFRvdWNoZXMpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZWRUb3VjaGVzWzBdICYmIGNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmVuYWJsZVBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgcmV0dXJuIGV2dC5wb2ludGVySWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAtMTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhbiBldmVudCBoYXMgdGhlIGlkIG9mIHRoZSBldmVudCB0aGF0IGlzIGNvbnNpZGVyZWQgbWFpblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtldnR9IGV2ZW50IEV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIF9pc01haW5FdmVudDogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICBpZiAoZXZ0LmlzUHJpbWFyeSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChldnQuaXNQcmltYXJ5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZXZ0LnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgZXZ0LnRvdWNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGV2dC5jaGFuZ2VkVG91Y2hlcykge1xuICAgICAgICByZXR1cm4gZXZ0LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXIgPT09IHRoaXMubWFpblRvdWNoSWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBtb3VzZWRvd25cbiAgICAgKi9cbiAgICBfb25Ub3VjaFN0YXJ0OiBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAodGhpcy5tYWluVG91Y2hJZCA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLm1haW5Ub3VjaElkID0gdGhpcy5nZXRQb2ludGVySWQoZSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9fb25Nb3VzZURvd24oZSk7XG4gICAgICB0aGlzLl9yZXNldFRyYW5zZm9ybUV2ZW50RGF0YSgpO1xuICAgICAgdmFyIGNhbnZhc0VsZW1lbnQgPSB0aGlzLnVwcGVyQ2FudmFzRWwsXG4gICAgICAgICAgZXZlbnRUeXBlUHJlZml4ID0gdGhpcy5fZ2V0RXZlbnRQcmVmaXgoKTtcbiAgICAgIGFkZExpc3RlbmVyKGZhYnJpYy5kb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fb25Ub3VjaEVuZCwgYWRkRXZlbnRPcHRpb25zKTtcbiAgICAgIGFkZExpc3RlbmVyKGZhYnJpYy5kb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX29uTW91c2VNb3ZlLCBhZGRFdmVudE9wdGlvbnMpO1xuICAgICAgLy8gVW5iaW5kIG1vdXNlZG93biB0byBwcmV2ZW50IGRvdWJsZSB0cmlnZ2VycyBmcm9tIHRvdWNoIGRldmljZXNcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGNhbnZhc0VsZW1lbnQsIGV2ZW50VHlwZVByZWZpeCArICdkb3duJywgdGhpcy5fb25Nb3VzZURvd24pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlZG93blxuICAgICAqL1xuICAgIF9vbk1vdXNlRG93bjogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHRoaXMuX19vbk1vdXNlRG93bihlKTtcbiAgICAgIHRoaXMuX3Jlc2V0VHJhbnNmb3JtRXZlbnREYXRhKCk7XG4gICAgICB2YXIgY2FudmFzRWxlbWVudCA9IHRoaXMudXBwZXJDYW52YXNFbCxcbiAgICAgICAgICBldmVudFR5cGVQcmVmaXggPSB0aGlzLl9nZXRFdmVudFByZWZpeCgpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoY2FudmFzRWxlbWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ21vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZSwgYWRkRXZlbnRPcHRpb25zKTtcbiAgICAgIGFkZExpc3RlbmVyKGZhYnJpYy5kb2N1bWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ3VwJywgdGhpcy5fb25Nb3VzZVVwKTtcbiAgICAgIGFkZExpc3RlbmVyKGZhYnJpYy5kb2N1bWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ21vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZSwgYWRkRXZlbnRPcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBtb3VzZWRvd25cbiAgICAgKi9cbiAgICBfb25Ub3VjaEVuZDogZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIGlmIHRoZXJlIGFyZSBzdGlsbCB0b3VjaGVzIHN0b3AgaGVyZVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9fb25Nb3VzZVVwKGUpO1xuICAgICAgdGhpcy5fcmVzZXRUcmFuc2Zvcm1FdmVudERhdGEoKTtcbiAgICAgIHRoaXMubWFpblRvdWNoSWQgPSBudWxsO1xuICAgICAgdmFyIGV2ZW50VHlwZVByZWZpeCA9IHRoaXMuX2dldEV2ZW50UHJlZml4KCk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihmYWJyaWMuZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX29uVG91Y2hFbmQsIGFkZEV2ZW50T3B0aW9ucyk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihmYWJyaWMuZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZSwgYWRkRXZlbnRPcHRpb25zKTtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAodGhpcy5fd2lsbEFkZE1vdXNlRG93bikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fd2lsbEFkZE1vdXNlRG93bik7XG4gICAgICB9XG4gICAgICB0aGlzLl93aWxsQWRkTW91c2VEb3duID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gV2FpdCA0MDBtcyBiZWZvcmUgcmViaW5kaW5nIG1vdXNlZG93biB0byBwcmV2ZW50IGRvdWJsZSB0cmlnZ2Vyc1xuICAgICAgICAvLyBmcm9tIHRvdWNoIGRldmljZXNcbiAgICAgICAgYWRkTGlzdGVuZXIoX3RoaXMudXBwZXJDYW52YXNFbCwgZXZlbnRUeXBlUHJlZml4ICsgJ2Rvd24nLCBfdGhpcy5fb25Nb3VzZURvd24pO1xuICAgICAgICBfdGhpcy5fd2lsbEFkZE1vdXNlRG93biA9IDA7XG4gICAgICB9LCA0MDApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNldXBcbiAgICAgKi9cbiAgICBfb25Nb3VzZVVwOiBmdW5jdGlvbiAoZSkge1xuICAgICAgdGhpcy5fX29uTW91c2VVcChlKTtcbiAgICAgIHRoaXMuX3Jlc2V0VHJhbnNmb3JtRXZlbnREYXRhKCk7XG4gICAgICB2YXIgY2FudmFzRWxlbWVudCA9IHRoaXMudXBwZXJDYW52YXNFbCxcbiAgICAgICAgICBldmVudFR5cGVQcmVmaXggPSB0aGlzLl9nZXRFdmVudFByZWZpeCgpO1xuICAgICAgaWYgKHRoaXMuX2lzTWFpbkV2ZW50KGUpKSB7XG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKGZhYnJpYy5kb2N1bWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ3VwJywgdGhpcy5fb25Nb3VzZVVwKTtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIoZmFicmljLmRvY3VtZW50LCBldmVudFR5cGVQcmVmaXggKyAnbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlLCBhZGRFdmVudE9wdGlvbnMpO1xuICAgICAgICBhZGRMaXN0ZW5lcihjYW52YXNFbGVtZW50LCBldmVudFR5cGVQcmVmaXggKyAnbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlLCBhZGRFdmVudE9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlbW92ZVxuICAgICAqL1xuICAgIF9vbk1vdXNlTW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICF0aGlzLmFsbG93VG91Y2hTY3JvbGxpbmcgJiYgZS5wcmV2ZW50RGVmYXVsdCAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLl9fb25Nb3VzZU1vdmUoZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX29uUmVzaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbGNPZmZzZXQoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVjaWRlcyB3aGV0aGVyIHRoZSBjYW52YXMgc2hvdWxkIGJlIHJlZHJhd24gaW4gbW91c2V1cCBhbmQgbW91c2Vkb3duIGV2ZW50cy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAgICAgKi9cbiAgICBfc2hvdWxkUmVuZGVyOiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgIHZhciBhY3RpdmVPYmplY3QgPSB0aGlzLl9hY3RpdmVPYmplY3Q7XG5cbiAgICAgIGlmIChcbiAgICAgICAgISFhY3RpdmVPYmplY3QgIT09ICEhdGFyZ2V0IHx8XG4gICAgICAgIChhY3RpdmVPYmplY3QgJiYgdGFyZ2V0ICYmIChhY3RpdmVPYmplY3QgIT09IHRhcmdldCkpXG4gICAgICApIHtcbiAgICAgICAgLy8gdGhpcyBjb3ZlcnM6IHN3aXRjaCBvZiB0YXJnZXQsIGZyb20gdGFyZ2V0IHRvIG5vIHRhcmdldCwgc2VsZWN0aW9uIG9mIHRhcmdldFxuICAgICAgICAvLyBtdWx0aVNlbGVjdGlvbiB3aXRoIGtleSBhbmQgbW91c2VcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChhY3RpdmVPYmplY3QgJiYgYWN0aXZlT2JqZWN0LmlzRWRpdGluZykge1xuICAgICAgICAvLyBpZiB3ZSBtb3VzZSB1cC9kb3duIG92ZXIgYSBlZGl0aW5nIHRleHRib3ggYSBjdXJzb3IgY2hhbmdlLFxuICAgICAgICAvLyB0aGVyZSBpcyBubyBuZWVkIHRvIHJlIHJlbmRlclxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGRlZmluZXMgdGhlIGFjdGlvbnMgd2hlbiBtb3VzZSBpcyByZWxlYXNlZCBvbiBjYW52YXMuXG4gICAgICogVGhlIG1ldGhvZCByZXNldHMgdGhlIGN1cnJlbnRUcmFuc2Zvcm0gcGFyYW1ldGVycywgc3RvcmUgdGhlIGltYWdlIGNvcm5lclxuICAgICAqIHBvc2l0aW9uIGluIHRoZSBpbWFnZSBvYmplY3QgYW5kIHJlbmRlciB0aGUgY2FudmFzIG9uIHRvcC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNldXBcbiAgICAgKi9cbiAgICBfX29uTW91c2VVcDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciB0YXJnZXQsIHRyYW5zZm9ybSA9IHRoaXMuX2N1cnJlbnRUcmFuc2Zvcm0sXG4gICAgICAgICAgZ3JvdXBTZWxlY3RvciA9IHRoaXMuX2dyb3VwU2VsZWN0b3IsIHNob3VsZFJlbmRlciA9IGZhbHNlLFxuICAgICAgICAgIGlzQ2xpY2sgPSAoIWdyb3VwU2VsZWN0b3IgfHwgKGdyb3VwU2VsZWN0b3IubGVmdCA9PT0gMCAmJiBncm91cFNlbGVjdG9yLnRvcCA9PT0gMCkpO1xuICAgICAgdGhpcy5fY2FjaGVUcmFuc2Zvcm1FdmVudERhdGEoZSk7XG4gICAgICB0YXJnZXQgPSB0aGlzLl90YXJnZXQ7XG4gICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAndXA6YmVmb3JlJyk7XG4gICAgICAvLyBpZiByaWdodC9taWRkbGUgY2xpY2sganVzdCBmaXJlIGV2ZW50cyBhbmQgcmV0dXJuXG4gICAgICAvLyB0YXJnZXQgdW5kZWZpbmVkIHdpbGwgbWFrZSB0aGUgX2hhbmRsZUV2ZW50IHNlYXJjaCB0aGUgdGFyZ2V0XG4gICAgICBpZiAoY2hlY2tDbGljayhlLCBSSUdIVF9DTElDSykpIHtcbiAgICAgICAgaWYgKHRoaXMuZmlyZVJpZ2h0Q2xpY2spIHtcbiAgICAgICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAndXAnLCBSSUdIVF9DTElDSywgaXNDbGljayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hlY2tDbGljayhlLCBNSURETEVfQ0xJQ0spKSB7XG4gICAgICAgIGlmICh0aGlzLmZpcmVNaWRkbGVDbGljaykge1xuICAgICAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICd1cCcsIE1JRERMRV9DTElDSywgaXNDbGljayk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzZXRUcmFuc2Zvcm1FdmVudERhdGEoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0RyYXdpbmdNb2RlICYmIHRoaXMuX2lzQ3VycmVudGx5RHJhd2luZykge1xuICAgICAgICB0aGlzLl9vbk1vdXNlVXBJbkRyYXdpbmdNb2RlKGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faXNNYWluRXZlbnQoZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICB0aGlzLl9maW5hbGl6ZUN1cnJlbnRUcmFuc2Zvcm0oZSk7XG4gICAgICAgIHNob3VsZFJlbmRlciA9IHRyYW5zZm9ybS5hY3Rpb25QZXJmb3JtZWQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzQ2xpY2spIHtcbiAgICAgICAgdmFyIHRhcmdldFdhc0FjdGl2ZSA9IHRhcmdldCA9PT0gdGhpcy5fYWN0aXZlT2JqZWN0O1xuICAgICAgICB0aGlzLl9tYXliZUdyb3VwT2JqZWN0cyhlKTtcbiAgICAgICAgaWYgKCFzaG91bGRSZW5kZXIpIHtcbiAgICAgICAgICBzaG91bGRSZW5kZXIgPSAoXG4gICAgICAgICAgICB0aGlzLl9zaG91bGRSZW5kZXIodGFyZ2V0KSB8fFxuICAgICAgICAgICAgKCF0YXJnZXRXYXNBY3RpdmUgJiYgdGFyZ2V0ID09PSB0aGlzLl9hY3RpdmVPYmplY3QpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGNvcm5lciwgcG9pbnRlcjtcbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgY29ybmVyID0gdGFyZ2V0Ll9maW5kVGFyZ2V0Q29ybmVyKFxuICAgICAgICAgIHRoaXMuZ2V0UG9pbnRlcihlLCB0cnVlKSxcbiAgICAgICAgICBmYWJyaWMudXRpbC5pc1RvdWNoRXZlbnQoZSlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRhcmdldC5zZWxlY3RhYmxlICYmIHRhcmdldCAhPT0gdGhpcy5fYWN0aXZlT2JqZWN0ICYmIHRhcmdldC5hY3RpdmVPbiA9PT0gJ3VwJykge1xuICAgICAgICAgIHRoaXMuc2V0QWN0aXZlT2JqZWN0KHRhcmdldCwgZSk7XG4gICAgICAgICAgc2hvdWxkUmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgY29udHJvbCA9IHRhcmdldC5jb250cm9sc1tjb3JuZXJdLFxuICAgICAgICAgICAgICBtb3VzZVVwSGFuZGxlciA9IGNvbnRyb2wgJiYgY29udHJvbC5nZXRNb3VzZVVwSGFuZGxlcihlLCB0YXJnZXQsIGNvbnRyb2wpO1xuICAgICAgICAgIGlmIChtb3VzZVVwSGFuZGxlcikge1xuICAgICAgICAgICAgcG9pbnRlciA9IHRoaXMuZ2V0UG9pbnRlcihlKTtcbiAgICAgICAgICAgIG1vdXNlVXBIYW5kbGVyKGUsIHRyYW5zZm9ybSwgcG9pbnRlci54LCBwb2ludGVyLnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHdlIGFyZSBlbmRpbmcgdXAgYSB0cmFuc2Zvcm0gb24gYSBkaWZmZXJlbnQgY29udHJvbCBvciBhIG5ldyBvYmplY3RcbiAgICAgIC8vIGZpcmUgdGhlIG9yaWdpbmFsIG1vdXNlIHVwIGZyb20gdGhlIGNvcm5lciB0aGF0IHN0YXJ0ZWQgdGhlIHRyYW5zZm9ybVxuICAgICAgaWYgKHRyYW5zZm9ybSAmJiAodHJhbnNmb3JtLnRhcmdldCAhPT0gdGFyZ2V0IHx8IHRyYW5zZm9ybS5jb3JuZXIgIT09IGNvcm5lcikpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsQ29udHJvbCA9IHRyYW5zZm9ybS50YXJnZXQgJiYgdHJhbnNmb3JtLnRhcmdldC5jb250cm9sc1t0cmFuc2Zvcm0uY29ybmVyXSxcbiAgICAgICAgICAgIG9yaWdpbmFsTW91c2VVcEhhbmRsZXIgPSBvcmlnaW5hbENvbnRyb2wgJiYgb3JpZ2luYWxDb250cm9sLmdldE1vdXNlVXBIYW5kbGVyKGUsIHRhcmdldCwgY29udHJvbCk7XG4gICAgICAgIHBvaW50ZXIgPSBwb2ludGVyIHx8IHRoaXMuZ2V0UG9pbnRlcihlKTtcbiAgICAgICAgb3JpZ2luYWxNb3VzZVVwSGFuZGxlciAmJiBvcmlnaW5hbE1vdXNlVXBIYW5kbGVyKGUsIHRyYW5zZm9ybSwgcG9pbnRlci54LCBwb2ludGVyLnkpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2V0Q3Vyc29yRnJvbUV2ZW50KGUsIHRhcmdldCk7XG4gICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAndXAnLCBMRUZUX0NMSUNLLCBpc0NsaWNrKTtcbiAgICAgIHRoaXMuX2dyb3VwU2VsZWN0b3IgPSBudWxsO1xuICAgICAgdGhpcy5fY3VycmVudFRyYW5zZm9ybSA9IG51bGw7XG4gICAgICAvLyByZXNldCB0aGUgdGFyZ2V0IGluZm9ybWF0aW9uIGFib3V0IHdoaWNoIGNvcm5lciBpcyBzZWxlY3RlZFxuICAgICAgdGFyZ2V0ICYmICh0YXJnZXQuX19jb3JuZXIgPSAwKTtcbiAgICAgIGlmIChzaG91bGRSZW5kZXIpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghaXNDbGljaykge1xuICAgICAgICB0aGlzLnJlbmRlclRvcCgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEhhbmRsZSBldmVudCBmaXJpbmcgZm9yIHRhcmdldCBhbmQgc3VidGFyZ2V0c1xuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgZXZlbnQgZnJvbSBtb3VzZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFR5cGUgZXZlbnQgdG8gZmlyZSAodXAsIGRvd24gb3IgbW92ZSlcbiAgICAgKiBAcmV0dXJuIHtGYWJyaWMuT2JqZWN0fSB0YXJnZXQgcmV0dXJuIHRoZSB0aGUgdGFyZ2V0IGZvdW5kLCBmb3IgaW50ZXJuYWwgcmVhc29ucy5cbiAgICAgKi9cbiAgICBfc2ltcGxlRXZlbnRIYW5kbGVyOiBmdW5jdGlvbihldmVudFR5cGUsIGUpIHtcbiAgICAgIHZhciB0YXJnZXQgPSB0aGlzLmZpbmRUYXJnZXQoZSksXG4gICAgICAgICAgdGFyZ2V0cyA9IHRoaXMudGFyZ2V0cyxcbiAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgZTogZSxcbiAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgc3ViVGFyZ2V0czogdGFyZ2V0cyxcbiAgICAgICAgICB9O1xuICAgICAgdGhpcy5maXJlKGV2ZW50VHlwZSwgb3B0aW9ucyk7XG4gICAgICB0YXJnZXQgJiYgdGFyZ2V0LmZpcmUoZXZlbnRUeXBlLCBvcHRpb25zKTtcbiAgICAgIGlmICghdGFyZ2V0cykge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRhcmdldHNbaV0uZmlyZShldmVudFR5cGUsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBIYW5kbGUgZXZlbnQgZmlyaW5nIGZvciB0YXJnZXQgYW5kIHN1YnRhcmdldHNcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIGV2ZW50IGZyb20gbW91c2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRUeXBlIGV2ZW50IHRvIGZpcmUgKHVwLCBkb3duIG9yIG1vdmUpXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSB0YXJnZXRPYmogcmVjZWl2aW5nIGV2ZW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtidXR0b25dIGJ1dHRvbiB1c2VkIGluIHRoZSBldmVudCAxID0gbGVmdCwgMiA9IG1pZGRsZSwgMyA9IHJpZ2h0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc0NsaWNrIGZvciBsZWZ0IGJ1dHRvbiBvbmx5LCBpbmRpY2F0ZXMgdGhhdCB0aGUgbW91c2UgdXAgaGFwcGVuZWQgd2l0aG91dCBtb3ZlLlxuICAgICAqL1xuICAgIF9oYW5kbGVFdmVudDogZnVuY3Rpb24oZSwgZXZlbnRUeXBlLCBidXR0b24sIGlzQ2xpY2spIHtcbiAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXQsXG4gICAgICAgICAgdGFyZ2V0cyA9IHRoaXMudGFyZ2V0cyB8fCBbXSxcbiAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgZTogZSxcbiAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgc3ViVGFyZ2V0czogdGFyZ2V0cyxcbiAgICAgICAgICAgIGJ1dHRvbjogYnV0dG9uIHx8IExFRlRfQ0xJQ0ssXG4gICAgICAgICAgICBpc0NsaWNrOiBpc0NsaWNrIHx8IGZhbHNlLFxuICAgICAgICAgICAgcG9pbnRlcjogdGhpcy5fcG9pbnRlcixcbiAgICAgICAgICAgIGFic29sdXRlUG9pbnRlcjogdGhpcy5fYWJzb2x1dGVQb2ludGVyLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0aGlzLl9jdXJyZW50VHJhbnNmb3JtXG4gICAgICAgICAgfTtcbiAgICAgIGlmIChldmVudFR5cGUgPT09ICd1cCcpIHtcbiAgICAgICAgb3B0aW9ucy5jdXJyZW50VGFyZ2V0ID0gdGhpcy5maW5kVGFyZ2V0KGUpO1xuICAgICAgICBvcHRpb25zLmN1cnJlbnRTdWJUYXJnZXRzID0gdGhpcy50YXJnZXRzO1xuICAgICAgfVxuICAgICAgdGhpcy5maXJlKCdtb3VzZTonICsgZXZlbnRUeXBlLCBvcHRpb25zKTtcbiAgICAgIHRhcmdldCAmJiB0YXJnZXQuZmlyZSgnbW91c2UnICsgZXZlbnRUeXBlLCBvcHRpb25zKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0YXJnZXRzW2ldLmZpcmUoJ21vdXNlJyArIGV2ZW50VHlwZSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBzZW5kIHRoZSBtb3VzZSBldmVudCB0aGF0IGdlbmVyYXRlIHRoZSBmaW5hbGl6ZSBkb3duLCBzbyBpdCBjYW4gYmUgdXNlZCBpbiB0aGUgZXZlbnRcbiAgICAgKi9cbiAgICBfZmluYWxpemVDdXJyZW50VHJhbnNmb3JtOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLl9jdXJyZW50VHJhbnNmb3JtLFxuICAgICAgICAgIHRhcmdldCA9IHRyYW5zZm9ybS50YXJnZXQsXG4gICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGU6IGUsXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICAgICAgYWN0aW9uOiB0cmFuc2Zvcm0uYWN0aW9uLFxuICAgICAgICAgIH07XG5cbiAgICAgIGlmICh0YXJnZXQuX3NjYWxpbmcpIHtcbiAgICAgICAgdGFyZ2V0Ll9zY2FsaW5nID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldC5zZXRDb29yZHMoKTtcblxuICAgICAgaWYgKHRyYW5zZm9ybS5hY3Rpb25QZXJmb3JtZWQgfHwgKHRoaXMuc3RhdGVmdWwgJiYgdGFyZ2V0Lmhhc1N0YXRlQ2hhbmdlZCgpKSkge1xuICAgICAgICB0aGlzLl9maXJlKCdtb2RpZmllZCcsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlZG93blxuICAgICAqL1xuICAgIF9vbk1vdXNlRG93bkluRHJhd2luZ01vZGU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHRoaXMuX2lzQ3VycmVudGx5RHJhd2luZyA9IHRydWU7XG4gICAgICBpZiAodGhpcy5nZXRBY3RpdmVPYmplY3QoKSkge1xuICAgICAgICB0aGlzLmRpc2NhcmRBY3RpdmVPYmplY3QoZSkucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgfVxuICAgICAgdmFyIHBvaW50ZXIgPSB0aGlzLmdldFBvaW50ZXIoZSk7XG4gICAgICB0aGlzLmZyZWVEcmF3aW5nQnJ1c2gub25Nb3VzZURvd24ocG9pbnRlciwgeyBlOiBlLCBwb2ludGVyOiBwb2ludGVyIH0pO1xuICAgICAgdGhpcy5faGFuZGxlRXZlbnQoZSwgJ2Rvd24nKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBtb3VzZW1vdmVcbiAgICAgKi9cbiAgICBfb25Nb3VzZU1vdmVJbkRyYXdpbmdNb2RlOiBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAodGhpcy5faXNDdXJyZW50bHlEcmF3aW5nKSB7XG4gICAgICAgIHZhciBwb2ludGVyID0gdGhpcy5nZXRQb2ludGVyKGUpO1xuICAgICAgICB0aGlzLmZyZWVEcmF3aW5nQnJ1c2gub25Nb3VzZU1vdmUocG9pbnRlciwgeyBlOiBlLCBwb2ludGVyOiBwb2ludGVyIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRDdXJzb3IodGhpcy5mcmVlRHJhd2luZ0N1cnNvcik7XG4gICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAnbW92ZScpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNldXBcbiAgICAgKi9cbiAgICBfb25Nb3VzZVVwSW5EcmF3aW5nTW9kZTogZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBvaW50ZXIgPSB0aGlzLmdldFBvaW50ZXIoZSk7XG4gICAgICB0aGlzLl9pc0N1cnJlbnRseURyYXdpbmcgPSB0aGlzLmZyZWVEcmF3aW5nQnJ1c2gub25Nb3VzZVVwKHsgZTogZSwgcG9pbnRlcjogcG9pbnRlciB9KTtcbiAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICd1cCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdGhhdCBkZWZpbmVzIHRoZSBhY3Rpb25zIHdoZW4gbW91c2UgaXMgY2xpY2tlZCBvbiBjYW52YXMuXG4gICAgICogVGhlIG1ldGhvZCBpbml0cyB0aGUgY3VycmVudFRyYW5zZm9ybSBwYXJhbWV0ZXJzIGFuZCByZW5kZXJzIGFsbCB0aGVcbiAgICAgKiBjYW52YXMgc28gdGhlIGN1cnJlbnQgaW1hZ2UgY2FuIGJlIHBsYWNlZCBvbiB0aGUgdG9wIGNhbnZhcyBhbmQgdGhlIHJlc3RcbiAgICAgKiBpbiBvbiB0aGUgY29udGFpbmVyIG9uZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlZG93blxuICAgICAqL1xuICAgIF9fb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7XG4gICAgICB0aGlzLl9jYWNoZVRyYW5zZm9ybUV2ZW50RGF0YShlKTtcbiAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICdkb3duOmJlZm9yZScpO1xuICAgICAgdmFyIHRhcmdldCA9IHRoaXMuX3RhcmdldDtcbiAgICAgIC8vIGlmIHJpZ2h0IGNsaWNrIGp1c3QgZmlyZSBldmVudHNcbiAgICAgIGlmIChjaGVja0NsaWNrKGUsIFJJR0hUX0NMSUNLKSkge1xuICAgICAgICBpZiAodGhpcy5maXJlUmlnaHRDbGljaykge1xuICAgICAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICdkb3duJywgUklHSFRfQ0xJQ0spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoZWNrQ2xpY2soZSwgTUlERExFX0NMSUNLKSkge1xuICAgICAgICBpZiAodGhpcy5maXJlTWlkZGxlQ2xpY2spIHtcbiAgICAgICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAnZG93bicsIE1JRERMRV9DTElDSyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0RyYXdpbmdNb2RlKSB7XG4gICAgICAgIHRoaXMuX29uTW91c2VEb3duSW5EcmF3aW5nTW9kZShlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lzTWFpbkV2ZW50KGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gaWdub3JlIGlmIHNvbWUgb2JqZWN0IGlzIGJlaW5nIHRyYW5zZm9ybWVkIGF0IHRoaXMgbW9tZW50XG4gICAgICBpZiAodGhpcy5fY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwb2ludGVyID0gdGhpcy5fcG9pbnRlcjtcbiAgICAgIC8vIHNhdmUgcG9pbnRlciBmb3IgY2hlY2sgaW4gX19vbk1vdXNlVXAgZXZlbnRcbiAgICAgIHRoaXMuX3ByZXZpb3VzUG9pbnRlciA9IHBvaW50ZXI7XG4gICAgICB2YXIgc2hvdWxkUmVuZGVyID0gdGhpcy5fc2hvdWxkUmVuZGVyKHRhcmdldCksXG4gICAgICAgICAgc2hvdWxkR3JvdXAgPSB0aGlzLl9zaG91bGRHcm91cChlLCB0YXJnZXQpO1xuICAgICAgaWYgKHRoaXMuX3Nob3VsZENsZWFyU2VsZWN0aW9uKGUsIHRhcmdldCkpIHtcbiAgICAgICAgdGhpcy5kaXNjYXJkQWN0aXZlT2JqZWN0KGUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc2hvdWxkR3JvdXApIHtcbiAgICAgICAgdGhpcy5faGFuZGxlR3JvdXBpbmcoZSwgdGFyZ2V0KTtcbiAgICAgICAgdGFyZ2V0ID0gdGhpcy5fYWN0aXZlT2JqZWN0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zZWxlY3Rpb24gJiYgKCF0YXJnZXQgfHxcbiAgICAgICAgKCF0YXJnZXQuc2VsZWN0YWJsZSAmJiAhdGFyZ2V0LmlzRWRpdGluZyAmJiB0YXJnZXQgIT09IHRoaXMuX2FjdGl2ZU9iamVjdCkpKSB7XG4gICAgICAgIHRoaXMuX2dyb3VwU2VsZWN0b3IgPSB7XG4gICAgICAgICAgZXg6IHRoaXMuX2Fic29sdXRlUG9pbnRlci54LFxuICAgICAgICAgIGV5OiB0aGlzLl9hYnNvbHV0ZVBvaW50ZXIueSxcbiAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgbGVmdDogMFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBhbHJlYWR5U2VsZWN0ZWQgPSB0YXJnZXQgPT09IHRoaXMuX2FjdGl2ZU9iamVjdDtcbiAgICAgICAgaWYgKHRhcmdldC5zZWxlY3RhYmxlICYmIHRhcmdldC5hY3RpdmVPbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgdGhpcy5zZXRBY3RpdmVPYmplY3QodGFyZ2V0LCBlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ybmVyID0gdGFyZ2V0Ll9maW5kVGFyZ2V0Q29ybmVyKFxuICAgICAgICAgIHRoaXMuZ2V0UG9pbnRlcihlLCB0cnVlKSxcbiAgICAgICAgICBmYWJyaWMudXRpbC5pc1RvdWNoRXZlbnQoZSlcbiAgICAgICAgKTtcbiAgICAgICAgdGFyZ2V0Ll9fY29ybmVyID0gY29ybmVyO1xuICAgICAgICBpZiAodGFyZ2V0ID09PSB0aGlzLl9hY3RpdmVPYmplY3QgJiYgKGNvcm5lciB8fCAhc2hvdWxkR3JvdXApKSB7XG4gICAgICAgICAgdGhpcy5fc2V0dXBDdXJyZW50VHJhbnNmb3JtKGUsIHRhcmdldCwgYWxyZWFkeVNlbGVjdGVkKTtcbiAgICAgICAgICB2YXIgY29udHJvbCA9IHRhcmdldC5jb250cm9sc1tjb3JuZXJdLFxuICAgICAgICAgICAgICBwb2ludGVyID0gdGhpcy5nZXRQb2ludGVyKGUpLFxuICAgICAgICAgICAgICBtb3VzZURvd25IYW5kbGVyID0gY29udHJvbCAmJiBjb250cm9sLmdldE1vdXNlRG93bkhhbmRsZXIoZSwgdGFyZ2V0LCBjb250cm9sKTtcbiAgICAgICAgICBpZiAobW91c2VEb3duSGFuZGxlcikge1xuICAgICAgICAgICAgbW91c2VEb3duSGFuZGxlcihlLCB0aGlzLl9jdXJyZW50VHJhbnNmb3JtLCBwb2ludGVyLngsIHBvaW50ZXIueSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAnZG93bicpO1xuICAgICAgLy8gd2UgbXVzdCByZW5kZXJBbGwgc28gdGhhdCB3ZSB1cGRhdGUgdGhlIHZpc3VhbHNcbiAgICAgIChzaG91bGRSZW5kZXIgfHwgc2hvdWxkR3JvdXApICYmIHRoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXNldCBjYWNoZSBmb3JtIGNvbW1vbiBpbmZvcm1hdGlvbiBuZWVkZWQgZHVyaW5nIGV2ZW50IHByb2Nlc3NpbmdcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZXNldFRyYW5zZm9ybUV2ZW50RGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xuICAgICAgdGhpcy5fcG9pbnRlciA9IG51bGw7XG4gICAgICB0aGlzLl9hYnNvbHV0ZVBvaW50ZXIgPSBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWNoZSBjb21tb24gaW5mb3JtYXRpb24gbmVlZGVkIGR1cmluZyBldmVudCBwcm9jZXNzaW5nXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBldmVudFxuICAgICAqL1xuICAgIF9jYWNoZVRyYW5zZm9ybUV2ZW50RGF0YTogZnVuY3Rpb24oZSkge1xuICAgICAgLy8gcmVzZXQgaW4gb3JkZXIgdG8gYXZvaWQgc3RhbGUgY2FjaGluZ1xuICAgICAgdGhpcy5fcmVzZXRUcmFuc2Zvcm1FdmVudERhdGEoKTtcbiAgICAgIHRoaXMuX3BvaW50ZXIgPSB0aGlzLmdldFBvaW50ZXIoZSwgdHJ1ZSk7XG4gICAgICB0aGlzLl9hYnNvbHV0ZVBvaW50ZXIgPSB0aGlzLnJlc3RvcmVQb2ludGVyVnB0KHRoaXMuX3BvaW50ZXIpO1xuICAgICAgdGhpcy5fdGFyZ2V0ID0gdGhpcy5fY3VycmVudFRyYW5zZm9ybSA/IHRoaXMuX2N1cnJlbnRUcmFuc2Zvcm0udGFyZ2V0IDogdGhpcy5maW5kVGFyZ2V0KGUpIHx8IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2JlZm9yZVRyYW5zZm9ybTogZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHQgPSB0aGlzLl9jdXJyZW50VHJhbnNmb3JtO1xuICAgICAgdGhpcy5zdGF0ZWZ1bCAmJiB0LnRhcmdldC5zYXZlU3RhdGUoKTtcbiAgICAgIHRoaXMuZmlyZSgnYmVmb3JlOnRyYW5zZm9ybScsIHtcbiAgICAgICAgZTogZSxcbiAgICAgICAgdHJhbnNmb3JtOiB0LFxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGRlZmluZXMgdGhlIGFjdGlvbnMgd2hlbiBtb3VzZSBpcyBob3ZlcmluZyB0aGUgY2FudmFzLlxuICAgICAqIFRoZSBjdXJyZW50VHJhbnNmb3JtIHBhcmFtZXRlciB3aWxsIGRlZmluZSB3aGV0aGVyIHRoZSB1c2VyIGlzIHJvdGF0aW5nL3NjYWxpbmcvdHJhbnNsYXRpbmdcbiAgICAgKiBhbiBpbWFnZSBvciBuZWl0aGVyIG9mIHRoZW0gKG9ubHkgaG92ZXJpbmcpLiBBIGdyb3VwIHNlbGVjdGlvbiBpcyBhbHNvIHBvc3NpYmxlIGFuZCB3b3VsZCBjYW5jZWxcbiAgICAgKiBhbGwgYW55IG90aGVyIHR5cGUgb2YgYWN0aW9uLlxuICAgICAqIEluIGNhc2Ugb2YgYW4gaW1hZ2UgdHJhbnNmb3JtYXRpb24gb25seSB0aGUgdG9wIGNhbnZhcyB3aWxsIGJlIHJlbmRlcmVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3QgZmlyZWQgb24gbW91c2Vtb3ZlXG4gICAgICovXG4gICAgX19vbk1vdXNlTW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICdtb3ZlOmJlZm9yZScpO1xuICAgICAgdGhpcy5fY2FjaGVUcmFuc2Zvcm1FdmVudERhdGEoZSk7XG4gICAgICB2YXIgdGFyZ2V0LCBwb2ludGVyO1xuXG4gICAgICBpZiAodGhpcy5pc0RyYXdpbmdNb2RlKSB7XG4gICAgICAgIHRoaXMuX29uTW91c2VNb3ZlSW5EcmF3aW5nTW9kZShlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lzTWFpbkV2ZW50KGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGdyb3VwU2VsZWN0b3IgPSB0aGlzLl9ncm91cFNlbGVjdG9yO1xuXG4gICAgICAvLyBXZSBpbml0aWFsbHkgY2xpY2tlZCBpbiBhbiBlbXB0eSBhcmVhLCBzbyB3ZSBkcmF3IGEgYm94IGZvciBtdWx0aXBsZSBzZWxlY3Rpb25cbiAgICAgIGlmIChncm91cFNlbGVjdG9yKSB7XG4gICAgICAgIHBvaW50ZXIgPSB0aGlzLl9hYnNvbHV0ZVBvaW50ZXI7XG5cbiAgICAgICAgZ3JvdXBTZWxlY3Rvci5sZWZ0ID0gcG9pbnRlci54IC0gZ3JvdXBTZWxlY3Rvci5leDtcbiAgICAgICAgZ3JvdXBTZWxlY3Rvci50b3AgPSBwb2ludGVyLnkgLSBncm91cFNlbGVjdG9yLmV5O1xuXG4gICAgICAgIHRoaXMucmVuZGVyVG9wKCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghdGhpcy5fY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICB0YXJnZXQgPSB0aGlzLmZpbmRUYXJnZXQoZSkgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5fc2V0Q3Vyc29yRnJvbUV2ZW50KGUsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX2ZpcmVPdmVyT3V0RXZlbnRzKHRhcmdldCwgZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtT2JqZWN0KGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5faGFuZGxlRXZlbnQoZSwgJ21vdmUnKTtcbiAgICAgIHRoaXMuX3Jlc2V0VHJhbnNmb3JtRXZlbnREYXRhKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1hbmFnZSB0aGUgbW91c2VvdXQsIG1vdXNlb3ZlciBldmVudHMgZm9yIHRoZSBmYWJyaWMgb2JqZWN0IG9uIHRoZSBjYW52YXNcbiAgICAgKiBAcGFyYW0ge0ZhYnJpYy5PYmplY3R9IHRhcmdldCB0aGUgdGFyZ2V0IHdoZXJlIHRoZSB0YXJnZXQgZnJvbSB0aGUgbW91c2Vtb3ZlIGV2ZW50XG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3QgZmlyZWQgb24gbW91c2Vtb3ZlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZmlyZU92ZXJPdXRFdmVudHM6IGZ1bmN0aW9uKHRhcmdldCwgZSkge1xuICAgICAgdmFyIF9ob3ZlcmVkVGFyZ2V0ID0gdGhpcy5faG92ZXJlZFRhcmdldCxcbiAgICAgICAgICBfaG92ZXJlZFRhcmdldHMgPSB0aGlzLl9ob3ZlcmVkVGFyZ2V0cywgdGFyZ2V0cyA9IHRoaXMudGFyZ2V0cyxcbiAgICAgICAgICBsZW5ndGggPSBNYXRoLm1heChfaG92ZXJlZFRhcmdldHMubGVuZ3RoLCB0YXJnZXRzLmxlbmd0aCk7XG5cbiAgICAgIHRoaXMuZmlyZVN5bnRoZXRpY0luT3V0RXZlbnRzKHRhcmdldCwgZSwge1xuICAgICAgICBvbGRUYXJnZXQ6IF9ob3ZlcmVkVGFyZ2V0LFxuICAgICAgICBldnRPdXQ6ICdtb3VzZW91dCcsXG4gICAgICAgIGNhbnZhc0V2dE91dDogJ21vdXNlOm91dCcsXG4gICAgICAgIGV2dEluOiAnbW91c2VvdmVyJyxcbiAgICAgICAgY2FudmFzRXZ0SW46ICdtb3VzZTpvdmVyJyxcbiAgICAgIH0pO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyl7XG4gICAgICAgIHRoaXMuZmlyZVN5bnRoZXRpY0luT3V0RXZlbnRzKHRhcmdldHNbaV0sIGUsIHtcbiAgICAgICAgICBvbGRUYXJnZXQ6IF9ob3ZlcmVkVGFyZ2V0c1tpXSxcbiAgICAgICAgICBldnRPdXQ6ICdtb3VzZW91dCcsXG4gICAgICAgICAgZXZ0SW46ICdtb3VzZW92ZXInLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICB0aGlzLl9ob3ZlcmVkVGFyZ2V0cyA9IHRoaXMudGFyZ2V0cy5jb25jYXQoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWFuYWdlIHRoZSBkcmFnRW50ZXIsIGRyYWdMZWF2ZSBldmVudHMgZm9yIHRoZSBmYWJyaWMgb2JqZWN0cyBvbiB0aGUgY2FudmFzXG4gICAgICogQHBhcmFtIHtGYWJyaWMuT2JqZWN0fSB0YXJnZXQgdGhlIHRhcmdldCB3aGVyZSB0aGUgdGFyZ2V0IGZyb20gdGhlIG9uRHJhZyBldmVudFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG9uZHJhZ1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2ZpcmVFbnRlckxlYXZlRXZlbnRzOiBmdW5jdGlvbih0YXJnZXQsIGUpIHtcbiAgICAgIHZhciBfZHJhZ2dlZG92ZXJUYXJnZXQgPSB0aGlzLl9kcmFnZ2Vkb3ZlclRhcmdldCxcbiAgICAgICAgICBfaG92ZXJlZFRhcmdldHMgPSB0aGlzLl9ob3ZlcmVkVGFyZ2V0cywgdGFyZ2V0cyA9IHRoaXMudGFyZ2V0cyxcbiAgICAgICAgICBsZW5ndGggPSBNYXRoLm1heChfaG92ZXJlZFRhcmdldHMubGVuZ3RoLCB0YXJnZXRzLmxlbmd0aCk7XG5cbiAgICAgIHRoaXMuZmlyZVN5bnRoZXRpY0luT3V0RXZlbnRzKHRhcmdldCwgZSwge1xuICAgICAgICBvbGRUYXJnZXQ6IF9kcmFnZ2Vkb3ZlclRhcmdldCxcbiAgICAgICAgZXZ0T3V0OiAnZHJhZ2xlYXZlJyxcbiAgICAgICAgZXZ0SW46ICdkcmFnZW50ZXInLFxuICAgICAgfSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZmlyZVN5bnRoZXRpY0luT3V0RXZlbnRzKHRhcmdldHNbaV0sIGUsIHtcbiAgICAgICAgICBvbGRUYXJnZXQ6IF9ob3ZlcmVkVGFyZ2V0c1tpXSxcbiAgICAgICAgICBldnRPdXQ6ICdkcmFnbGVhdmUnLFxuICAgICAgICAgIGV2dEluOiAnZHJhZ2VudGVyJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9kcmFnZ2Vkb3ZlclRhcmdldCA9IHRhcmdldDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWFuYWdlIHRoZSBzeW50aGV0aWMgaW4vb3V0IGV2ZW50cyBmb3IgdGhlIGZhYnJpYyBvYmplY3RzIG9uIHRoZSBjYW52YXNcbiAgICAgKiBAcGFyYW0ge0ZhYnJpYy5PYmplY3R9IHRhcmdldCB0aGUgdGFyZ2V0IHdoZXJlIHRoZSB0YXJnZXQgZnJvbSB0aGUgc3VwcG9ydGVkIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBjb25maWd1cmF0aW9uIGZvciB0aGUgZnVuY3Rpb24gdG8gd29ya1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb25maWcudGFyZ2V0TmFtZSBwcm9wZXJ0eSBvbiB0aGUgY2FudmFzIHdoZXJlIHRoZSBvbGQgdGFyZ2V0IGlzIHN0b3JlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmNhbnZhc0V2dE91dF0gbmFtZSBvZiB0aGUgZXZlbnQgdG8gZmlyZSBhdCBjYW52YXMgbGV2ZWwgZm9yIG91dFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb25maWcuZXZ0T3V0IG5hbWUgb2YgdGhlIGV2ZW50IHRvIGZpcmUgZm9yIG91dFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmNhbnZhc0V2dEluXSBuYW1lIG9mIHRoZSBldmVudCB0byBmaXJlIGF0IGNhbnZhcyBsZXZlbCBmb3IgaW5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29uZmlnLmV2dEluIG5hbWUgb2YgdGhlIGV2ZW50IHRvIGZpcmUgZm9yIGluXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmaXJlU3ludGhldGljSW5PdXRFdmVudHM6IGZ1bmN0aW9uKHRhcmdldCwgZSwgY29uZmlnKSB7XG4gICAgICB2YXIgaW5PcHQsIG91dE9wdCwgb2xkVGFyZ2V0ID0gY29uZmlnLm9sZFRhcmdldCwgb3V0RmlyZXMsIGluRmlyZXMsXG4gICAgICAgICAgdGFyZ2V0Q2hhbmdlZCA9IG9sZFRhcmdldCAhPT0gdGFyZ2V0LCBjYW52YXNFdnRJbiA9IGNvbmZpZy5jYW52YXNFdnRJbiwgY2FudmFzRXZ0T3V0ID0gY29uZmlnLmNhbnZhc0V2dE91dDtcbiAgICAgIGlmICh0YXJnZXRDaGFuZ2VkKSB7XG4gICAgICAgIGluT3B0ID0geyBlOiBlLCB0YXJnZXQ6IHRhcmdldCwgcHJldmlvdXNUYXJnZXQ6IG9sZFRhcmdldCB9O1xuICAgICAgICBvdXRPcHQgPSB7IGU6IGUsIHRhcmdldDogb2xkVGFyZ2V0LCBuZXh0VGFyZ2V0OiB0YXJnZXQgfTtcbiAgICAgIH1cbiAgICAgIGluRmlyZXMgPSB0YXJnZXQgJiYgdGFyZ2V0Q2hhbmdlZDtcbiAgICAgIG91dEZpcmVzID0gb2xkVGFyZ2V0ICYmIHRhcmdldENoYW5nZWQ7XG4gICAgICBpZiAob3V0RmlyZXMpIHtcbiAgICAgICAgY2FudmFzRXZ0T3V0ICYmIHRoaXMuZmlyZShjYW52YXNFdnRPdXQsIG91dE9wdCk7XG4gICAgICAgIG9sZFRhcmdldC5maXJlKGNvbmZpZy5ldnRPdXQsIG91dE9wdCk7XG4gICAgICB9XG4gICAgICBpZiAoaW5GaXJlcykge1xuICAgICAgICBjYW52YXNFdnRJbiAmJiB0aGlzLmZpcmUoY2FudmFzRXZ0SW4sIGluT3B0KTtcbiAgICAgICAgdGFyZ2V0LmZpcmUoY29uZmlnLmV2dEluLCBpbk9wdCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGRlZmluZXMgYWN0aW9ucyB3aGVuIGFuIEV2ZW50IE1vdXNlIFdoZWVsXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3QgZmlyZWQgb24gbW91c2V1cFxuICAgICAqL1xuICAgIF9fb25Nb3VzZVdoZWVsOiBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLl9jYWNoZVRyYW5zZm9ybUV2ZW50RGF0YShlKTtcbiAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICd3aGVlbCcpO1xuICAgICAgdGhpcy5fcmVzZXRUcmFuc2Zvcm1FdmVudERhdGEoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IGZpcmVkIG9uIG1vdXNlbW92ZVxuICAgICAqL1xuICAgIF90cmFuc2Zvcm1PYmplY3Q6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwb2ludGVyID0gdGhpcy5nZXRQb2ludGVyKGUpLFxuICAgICAgICAgIHRyYW5zZm9ybSA9IHRoaXMuX2N1cnJlbnRUcmFuc2Zvcm07XG5cbiAgICAgIHRyYW5zZm9ybS5yZXNldCA9IGZhbHNlO1xuICAgICAgdHJhbnNmb3JtLnNoaWZ0S2V5ID0gZS5zaGlmdEtleTtcbiAgICAgIHRyYW5zZm9ybS5hbHRLZXkgPSBlW3RoaXMuY2VudGVyZWRLZXldO1xuXG4gICAgICB0aGlzLl9wZXJmb3JtVHJhbnNmb3JtQWN0aW9uKGUsIHRyYW5zZm9ybSwgcG9pbnRlcik7XG4gICAgICB0cmFuc2Zvcm0uYWN0aW9uUGVyZm9ybWVkICYmIHRoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9wZXJmb3JtVHJhbnNmb3JtQWN0aW9uOiBmdW5jdGlvbihlLCB0cmFuc2Zvcm0sIHBvaW50ZXIpIHtcbiAgICAgIHZhciB4ID0gcG9pbnRlci54LFxuICAgICAgICAgIHkgPSBwb2ludGVyLnksXG4gICAgICAgICAgYWN0aW9uID0gdHJhbnNmb3JtLmFjdGlvbixcbiAgICAgICAgICBhY3Rpb25QZXJmb3JtZWQgPSBmYWxzZSxcbiAgICAgICAgICBhY3Rpb25IYW5kbGVyID0gdHJhbnNmb3JtLmFjdGlvbkhhbmRsZXI7XG4gICAgICAgICAgLy8gdGhpcyBvYmplY3QgY291bGQgYmUgY3JlYXRlZCBmcm9tIHRoZSBmdW5jdGlvbiBpbiB0aGUgY29udHJvbCBoYW5kbGVyc1xuXG5cbiAgICAgIGlmIChhY3Rpb25IYW5kbGVyKSB7XG4gICAgICAgIGFjdGlvblBlcmZvcm1lZCA9IGFjdGlvbkhhbmRsZXIoZSwgdHJhbnNmb3JtLCB4LCB5KTtcbiAgICAgIH1cbiAgICAgIGlmIChhY3Rpb24gPT09ICdkcmFnJyAmJiBhY3Rpb25QZXJmb3JtZWQpIHtcbiAgICAgICAgdHJhbnNmb3JtLnRhcmdldC5pc01vdmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuc2V0Q3Vyc29yKHRyYW5zZm9ybS50YXJnZXQubW92ZUN1cnNvciB8fCB0aGlzLm1vdmVDdXJzb3IpO1xuICAgICAgfVxuICAgICAgdHJhbnNmb3JtLmFjdGlvblBlcmZvcm1lZCA9IHRyYW5zZm9ybS5hY3Rpb25QZXJmb3JtZWQgfHwgYWN0aW9uUGVyZm9ybWVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9maXJlOiBmYWJyaWMuY29udHJvbHNVdGlscy5maXJlRXZlbnQsXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJzb3IgZGVwZW5kaW5nIG9uIHdoZXJlIHRoZSBjYW52YXMgaXMgYmVpbmcgaG92ZXJlZC5cbiAgICAgKiBOb3RlOiB2ZXJ5IGJ1Z2d5IGluIE9wZXJhXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IE9iamVjdCB0aGF0IHRoZSBtb3VzZSBpcyBob3ZlcmluZywgaWYgc28uXG4gICAgICovXG4gICAgX3NldEN1cnNvckZyb21FdmVudDogZnVuY3Rpb24gKGUsIHRhcmdldCkge1xuICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5zZXRDdXJzb3IodGhpcy5kZWZhdWx0Q3Vyc29yKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGhvdmVyQ3Vyc29yID0gdGFyZ2V0LmhvdmVyQ3Vyc29yIHx8IHRoaXMuaG92ZXJDdXJzb3IsXG4gICAgICAgICAgYWN0aXZlU2VsZWN0aW9uID0gdGhpcy5fYWN0aXZlT2JqZWN0ICYmIHRoaXMuX2FjdGl2ZU9iamVjdC50eXBlID09PSAnYWN0aXZlU2VsZWN0aW9uJyA/XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVPYmplY3QgOiBudWxsLFxuICAgICAgICAgIC8vIG9ubHkgc2hvdyBwcm9wZXIgY29ybmVyIHdoZW4gZ3JvdXAgc2VsZWN0aW9uIGlzIG5vdCBhY3RpdmVcbiAgICAgICAgICBjb3JuZXIgPSAoIWFjdGl2ZVNlbGVjdGlvbiB8fCAhYWN0aXZlU2VsZWN0aW9uLmNvbnRhaW5zKHRhcmdldCkpXG4gICAgICAgICAgLy8gaGVyZSB3ZSBjYWxsIGZpbmRUYXJnZXRDb3JuZXIgYWx3YXlzIHdpdGggdW5kZWZpbmVkIGZvciB0aGUgdG91Y2ggcGFyYW1ldGVyLlxuICAgICAgICAgIC8vIHdlIGFzc3VtZSB0aGF0IGlmIHlvdSBhcmUgdXNpbmcgYSBjdXJzb3IgeW91IGRvIG5vdCBuZWVkIHRvIGludGVyYWN0IHdpdGhcbiAgICAgICAgICAvLyB0aGUgYmlnZ2VyIHRvdWNoIGFyZWEuXG4gICAgICAgICAgICAgICAgICAgICYmIHRhcmdldC5fZmluZFRhcmdldENvcm5lcih0aGlzLmdldFBvaW50ZXIoZSwgdHJ1ZSkpO1xuXG4gICAgICBpZiAoIWNvcm5lcikge1xuICAgICAgICBpZiAodGFyZ2V0LnN1YlRhcmdldENoZWNrKXtcbiAgICAgICAgICAvLyBob3ZlckN1cnNvciBzaG91bGQgY29tZSBmcm9tIHRvcC1tb3N0IHN1YlRhcmdldCxcbiAgICAgICAgICAvLyBzbyB3ZSB3YWxrIHRoZSBhcnJheSBiYWNrd2FyZHNcbiAgICAgICAgICB0aGlzLnRhcmdldHMuY29uY2F0KCkucmV2ZXJzZSgpLm1hcChmdW5jdGlvbihfdGFyZ2V0KXtcbiAgICAgICAgICAgIGhvdmVyQ3Vyc29yID0gX3RhcmdldC5ob3ZlckN1cnNvciB8fCBob3ZlckN1cnNvcjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldEN1cnNvcihob3ZlckN1cnNvcik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRDdXJzb3IodGhpcy5nZXRDb3JuZXJDdXJzb3IoY29ybmVyLCB0YXJnZXQsIGUpKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRDb3JuZXJDdXJzb3I6IGZ1bmN0aW9uKGNvcm5lciwgdGFyZ2V0LCBlKSB7XG4gICAgICB2YXIgY29udHJvbCA9IHRhcmdldC5jb250cm9sc1tjb3JuZXJdO1xuICAgICAgcmV0dXJuIGNvbnRyb2wuY3Vyc29yU3R5bGVIYW5kbGVyKGUsIGNvbnRyb2wsIHRhcmdldCk7XG4gICAgfVxuICB9KTtcbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIHZhciBtaW4gPSBNYXRoLm1pbixcbiAgICAgIG1heCA9IE1hdGgubWF4O1xuXG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLkNhbnZhcy5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLkNhbnZhcy5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gdGFyZ2V0XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBfc2hvdWxkR3JvdXA6IGZ1bmN0aW9uKGUsIHRhcmdldCkge1xuICAgICAgdmFyIGFjdGl2ZU9iamVjdCA9IHRoaXMuX2FjdGl2ZU9iamVjdDtcbiAgICAgIHJldHVybiBhY3RpdmVPYmplY3QgJiYgdGhpcy5faXNTZWxlY3Rpb25LZXlQcmVzc2VkKGUpICYmIHRhcmdldCAmJiB0YXJnZXQuc2VsZWN0YWJsZSAmJiB0aGlzLnNlbGVjdGlvbiAmJlxuICAgICAgICAgICAgKGFjdGl2ZU9iamVjdCAhPT0gdGFyZ2V0IHx8IGFjdGl2ZU9iamVjdC50eXBlID09PSAnYWN0aXZlU2VsZWN0aW9uJykgJiYgIXRhcmdldC5vblNlbGVjdCh7IGU6IGUgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IHRhcmdldFxuICAgICAqL1xuICAgIF9oYW5kbGVHcm91cGluZzogZnVuY3Rpb24gKGUsIHRhcmdldCkge1xuICAgICAgdmFyIGFjdGl2ZU9iamVjdCA9IHRoaXMuX2FjdGl2ZU9iamVjdDtcbiAgICAgIC8vIGF2b2lkIG11bHRpIHNlbGVjdCB3aGVuIHNoaWZ0IGNsaWNrIG9uIGEgY29ybmVyXG4gICAgICBpZiAoYWN0aXZlT2JqZWN0Ll9fY29ybmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0YXJnZXQgPT09IGFjdGl2ZU9iamVjdCkge1xuICAgICAgICAvLyBpZiBpdCdzIGEgZ3JvdXAsIGZpbmQgdGFyZ2V0IGFnYWluLCB1c2luZyBhY3RpdmVHcm91cCBvYmplY3RzXG4gICAgICAgIHRhcmdldCA9IHRoaXMuZmluZFRhcmdldChlLCB0cnVlKTtcbiAgICAgICAgLy8gaWYgZXZlbiBvYmplY3QgaXMgbm90IGZvdW5kIG9yIHdlIGFyZSBvbiBhY3RpdmVPYmplY3RDb3JuZXIsIGJhaWwgb3V0XG4gICAgICAgIGlmICghdGFyZ2V0IHx8ICF0YXJnZXQuc2VsZWN0YWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFjdGl2ZU9iamVjdCAmJiBhY3RpdmVPYmplY3QudHlwZSA9PT0gJ2FjdGl2ZVNlbGVjdGlvbicpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlQWN0aXZlU2VsZWN0aW9uKHRhcmdldCwgZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlQWN0aXZlU2VsZWN0aW9uKHRhcmdldCwgZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VwZGF0ZUFjdGl2ZVNlbGVjdGlvbjogZnVuY3Rpb24odGFyZ2V0LCBlKSB7XG4gICAgICB2YXIgYWN0aXZlU2VsZWN0aW9uID0gdGhpcy5fYWN0aXZlT2JqZWN0LFxuICAgICAgICAgIGN1cnJlbnRBY3RpdmVPYmplY3RzID0gYWN0aXZlU2VsZWN0aW9uLl9vYmplY3RzLnNsaWNlKDApO1xuICAgICAgaWYgKGFjdGl2ZVNlbGVjdGlvbi5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgICAgIGFjdGl2ZVNlbGVjdGlvbi5yZW1vdmVXaXRoVXBkYXRlKHRhcmdldCk7XG4gICAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXRzID0gdGhpcy50YXJnZXRzLmNvbmNhdCgpO1xuICAgICAgICBpZiAoYWN0aXZlU2VsZWN0aW9uLnNpemUoKSA9PT0gMSkge1xuICAgICAgICAgIC8vIGFjdGl2YXRlIGxhc3QgcmVtYWluaW5nIG9iamVjdFxuICAgICAgICAgIHRoaXMuX3NldEFjdGl2ZU9iamVjdChhY3RpdmVTZWxlY3Rpb24uaXRlbSgwKSwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBhY3RpdmVTZWxlY3Rpb24uYWRkV2l0aFVwZGF0ZSh0YXJnZXQpO1xuICAgICAgICB0aGlzLl9ob3ZlcmVkVGFyZ2V0ID0gYWN0aXZlU2VsZWN0aW9uO1xuICAgICAgICB0aGlzLl9ob3ZlcmVkVGFyZ2V0cyA9IHRoaXMudGFyZ2V0cy5jb25jYXQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2ZpcmVTZWxlY3Rpb25FdmVudHMoY3VycmVudEFjdGl2ZU9iamVjdHMsIGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGVBY3RpdmVTZWxlY3Rpb246IGZ1bmN0aW9uKHRhcmdldCwgZSkge1xuICAgICAgdmFyIGN1cnJlbnRBY3RpdmVzID0gdGhpcy5nZXRBY3RpdmVPYmplY3RzKCksIGdyb3VwID0gdGhpcy5fY3JlYXRlR3JvdXAodGFyZ2V0KTtcbiAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXQgPSBncm91cDtcbiAgICAgIC8vIElTU1VFIDQxMTU6IHNob3VsZCB3ZSBjb25zaWRlciBzdWJUYXJnZXRzIGhlcmU/XG4gICAgICAvLyB0aGlzLl9ob3ZlcmVkVGFyZ2V0cyA9IFtdO1xuICAgICAgLy8gdGhpcy5faG92ZXJlZFRhcmdldHMgPSB0aGlzLnRhcmdldHMuY29uY2F0KCk7XG4gICAgICB0aGlzLl9zZXRBY3RpdmVPYmplY3QoZ3JvdXAsIGUpO1xuICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkV2ZW50cyhjdXJyZW50QWN0aXZlcywgZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICAgICAqL1xuICAgIF9jcmVhdGVHcm91cDogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICB2YXIgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG4gICAgICAgICAgaXNBY3RpdmVMb3dlciA9IG9iamVjdHMuaW5kZXhPZih0aGlzLl9hY3RpdmVPYmplY3QpIDwgb2JqZWN0cy5pbmRleE9mKHRhcmdldCksXG4gICAgICAgICAgZ3JvdXBPYmplY3RzID0gaXNBY3RpdmVMb3dlclxuICAgICAgICAgICAgPyBbdGhpcy5fYWN0aXZlT2JqZWN0LCB0YXJnZXRdXG4gICAgICAgICAgICA6IFt0YXJnZXQsIHRoaXMuX2FjdGl2ZU9iamVjdF07XG4gICAgICB0aGlzLl9hY3RpdmVPYmplY3QuaXNFZGl0aW5nICYmIHRoaXMuX2FjdGl2ZU9iamVjdC5leGl0RWRpdGluZygpO1xuICAgICAgcmV0dXJuIG5ldyBmYWJyaWMuQWN0aXZlU2VsZWN0aW9uKGdyb3VwT2JqZWN0cywge1xuICAgICAgICBjYW52YXM6IHRoaXNcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgbW91c2UgZXZlbnRcbiAgICAgKi9cbiAgICBfZ3JvdXBTZWxlY3RlZE9iamVjdHM6IGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgIHZhciBncm91cCA9IHRoaXMuX2NvbGxlY3RPYmplY3RzKGUpLFxuICAgICAgICAgIGFHcm91cDtcblxuICAgICAgLy8gZG8gbm90IGNyZWF0ZSBncm91cCBmb3IgMSBlbGVtZW50IG9ubHlcbiAgICAgIGlmIChncm91cC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5zZXRBY3RpdmVPYmplY3QoZ3JvdXBbMF0sIGUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZ3JvdXAubGVuZ3RoID4gMSkge1xuICAgICAgICBhR3JvdXAgPSBuZXcgZmFicmljLkFjdGl2ZVNlbGVjdGlvbihncm91cC5yZXZlcnNlKCksIHtcbiAgICAgICAgICBjYW52YXM6IHRoaXNcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlT2JqZWN0KGFHcm91cCwgZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2NvbGxlY3RPYmplY3RzOiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgZ3JvdXAgPSBbXSxcbiAgICAgICAgICBjdXJyZW50T2JqZWN0LFxuICAgICAgICAgIHgxID0gdGhpcy5fZ3JvdXBTZWxlY3Rvci5leCxcbiAgICAgICAgICB5MSA9IHRoaXMuX2dyb3VwU2VsZWN0b3IuZXksXG4gICAgICAgICAgeDIgPSB4MSArIHRoaXMuX2dyb3VwU2VsZWN0b3IubGVmdCxcbiAgICAgICAgICB5MiA9IHkxICsgdGhpcy5fZ3JvdXBTZWxlY3Rvci50b3AsXG4gICAgICAgICAgc2VsZWN0aW9uWDFZMSA9IG5ldyBmYWJyaWMuUG9pbnQobWluKHgxLCB4MiksIG1pbih5MSwgeTIpKSxcbiAgICAgICAgICBzZWxlY3Rpb25YMlkyID0gbmV3IGZhYnJpYy5Qb2ludChtYXgoeDEsIHgyKSwgbWF4KHkxLCB5MikpLFxuICAgICAgICAgIGFsbG93SW50ZXJzZWN0ID0gIXRoaXMuc2VsZWN0aW9uRnVsbHlDb250YWluZWQsXG4gICAgICAgICAgaXNDbGljayA9IHgxID09PSB4MiAmJiB5MSA9PT0geTI7XG4gICAgICAvLyB3ZSBpdGVyYXRlIHJldmVyc2Ugb3JkZXIgdG8gY29sbGVjdCB0b3AgZmlyc3QgaW4gY2FzZSBvZiBjbGljay5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9vYmplY3RzLmxlbmd0aDsgaS0tOyApIHtcbiAgICAgICAgY3VycmVudE9iamVjdCA9IHRoaXMuX29iamVjdHNbaV07XG5cbiAgICAgICAgaWYgKCFjdXJyZW50T2JqZWN0IHx8ICFjdXJyZW50T2JqZWN0LnNlbGVjdGFibGUgfHwgIWN1cnJlbnRPYmplY3QudmlzaWJsZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChhbGxvd0ludGVyc2VjdCAmJiBjdXJyZW50T2JqZWN0LmludGVyc2VjdHNXaXRoUmVjdChzZWxlY3Rpb25YMVkxLCBzZWxlY3Rpb25YMlkyLCB0cnVlKSkgfHxcbiAgICAgICAgICAgIGN1cnJlbnRPYmplY3QuaXNDb250YWluZWRXaXRoaW5SZWN0KHNlbGVjdGlvblgxWTEsIHNlbGVjdGlvblgyWTIsIHRydWUpIHx8XG4gICAgICAgICAgICAoYWxsb3dJbnRlcnNlY3QgJiYgY3VycmVudE9iamVjdC5jb250YWluc1BvaW50KHNlbGVjdGlvblgxWTEsIG51bGwsIHRydWUpKSB8fFxuICAgICAgICAgICAgKGFsbG93SW50ZXJzZWN0ICYmIGN1cnJlbnRPYmplY3QuY29udGFpbnNQb2ludChzZWxlY3Rpb25YMlkyLCBudWxsLCB0cnVlKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgZ3JvdXAucHVzaChjdXJyZW50T2JqZWN0KTtcbiAgICAgICAgICAvLyBvbmx5IGFkZCBvbmUgb2JqZWN0IGlmIGl0J3MgYSBjbGlja1xuICAgICAgICAgIGlmIChpc0NsaWNrKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGdyb3VwLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZ3JvdXAgPSBncm91cC5maWx0ZXIoZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuICFvYmplY3Qub25TZWxlY3QoeyBlOiBlIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9tYXliZUdyb3VwT2JqZWN0czogZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uICYmIHRoaXMuX2dyb3VwU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5fZ3JvdXBTZWxlY3RlZE9iamVjdHMoZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldEN1cnNvcih0aGlzLmRlZmF1bHRDdXJzb3IpO1xuICAgICAgLy8gY2xlYXIgc2VsZWN0aW9uIGFuZCBjdXJyZW50IHRyYW5zZm9ybWF0aW9uXG4gICAgICB0aGlzLl9ncm91cFNlbGVjdG9yID0gbnVsbDtcbiAgICB9XG4gIH0pO1xuXG59KSgpO1xuXG5cbihmdW5jdGlvbiAoKSB7XG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRXhwb3J0cyBjYW52YXMgZWxlbWVudCB0byBhIGRhdGF1cmwgaW1hZ2UuIE5vdGUgdGhhdCB3aGVuIG11bHRpcGxpZXIgaXMgdXNlZCwgY3JvcHBpbmcgaXMgc2NhbGVkIGFwcHJvcHJpYXRlbHlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmZvcm1hdD1wbmddIFRoZSBmb3JtYXQgb2YgdGhlIG91dHB1dCBpbWFnZS4gRWl0aGVyIFwianBlZ1wiIG9yIFwicG5nXCJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucXVhbGl0eT0xXSBRdWFsaXR5IGxldmVsICgwLi4xKS4gT25seSB1c2VkIGZvciBqcGVnLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tdWx0aXBsaWVyPTFdIE11bHRpcGxpZXIgdG8gc2NhbGUgYnksIHRvIGhhdmUgY29uc2lzdGVudFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5sZWZ0XSBDcm9wcGluZyBsZWZ0IG9mZnNldC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnRvcF0gQ3JvcHBpbmcgdG9wIG9mZnNldC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLndpZHRoXSBDcm9wcGluZyB3aWR0aC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmhlaWdodF0gQ3JvcHBpbmcgaGVpZ2h0LiBJbnRyb2R1Y2VkIGluIHYxLjIuMTRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmVuYWJsZVJldGluYVNjYWxpbmddIEVuYWJsZSByZXRpbmEgc2NhbGluZyBmb3IgY2xvbmUgaW1hZ2UuIEludHJvZHVjZSBpbiAyLjAuMFxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gUmV0dXJucyBhIGRhdGE6IFVSTCBjb250YWluaW5nIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdCBpbiB0aGUgZm9ybWF0IHNwZWNpZmllZCBieSBvcHRpb25zLmZvcm1hdFxuICAgICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvZmFicmljanMvTmZaVmIvfGpzRmlkZGxlIGRlbW99XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+R2VuZXJhdGUganBlZyBkYXRhVVJMIHdpdGggbG93ZXIgcXVhbGl0eTwvY2FwdGlvbj5cbiAgICAgKiB2YXIgZGF0YVVSTCA9IGNhbnZhcy50b0RhdGFVUkwoe1xuICAgICAqICAgZm9ybWF0OiAnanBlZycsXG4gICAgICogICBxdWFsaXR5OiAwLjhcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5HZW5lcmF0ZSBjcm9wcGVkIHBuZyBkYXRhVVJMIChjbGlwcGluZyBvZiBjYW52YXMpPC9jYXB0aW9uPlxuICAgICAqIHZhciBkYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTCh7XG4gICAgICogICBmb3JtYXQ6ICdwbmcnLFxuICAgICAqICAgbGVmdDogMTAwLFxuICAgICAqICAgdG9wOiAxMDAsXG4gICAgICogICB3aWR0aDogMjAwLFxuICAgICAqICAgaGVpZ2h0OiAyMDBcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5HZW5lcmF0ZSBkb3VibGUgc2NhbGVkIHBuZyBkYXRhVVJMPC9jYXB0aW9uPlxuICAgICAqIHZhciBkYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTCh7XG4gICAgICogICBmb3JtYXQ6ICdwbmcnLFxuICAgICAqICAgbXVsdGlwbGllcjogMlxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHRvRGF0YVVSTDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7IH0pO1xuXG4gICAgICB2YXIgZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQgfHwgJ3BuZycsXG4gICAgICAgICAgcXVhbGl0eSA9IG9wdGlvbnMucXVhbGl0eSB8fCAxLFxuICAgICAgICAgIG11bHRpcGxpZXIgPSAob3B0aW9ucy5tdWx0aXBsaWVyIHx8IDEpICogKG9wdGlvbnMuZW5hYmxlUmV0aW5hU2NhbGluZyA/IHRoaXMuZ2V0UmV0aW5hU2NhbGluZygpIDogMSksXG4gICAgICAgICAgY2FudmFzRWwgPSB0aGlzLnRvQ2FudmFzRWxlbWVudChtdWx0aXBsaWVyLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBmYWJyaWMudXRpbC50b0RhdGFVUkwoY2FudmFzRWwsIGZvcm1hdCwgcXVhbGl0eSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBIVE1MQ2FudmFzIGVsZW1lbnQgcGFpbnRlZCB3aXRoIHRoZSBjdXJyZW50IGNhbnZhcyBjb250ZW50LlxuICAgICAqIE5vIG5lZWQgdG8gcmVzaXplIHRoZSBhY3R1YWwgb25lIG9yIHJlcGFpbnQgaXQuXG4gICAgICogV2lsbCB0cmFuc2ZlciBvYmplY3Qgb3duZXJzaGlwIHRvIGEgbmV3IGNhbnZhcywgcGFpbnQgaXQsIGFuZCBzZXQgZXZlcnl0aGluZyBiYWNrLlxuICAgICAqIFRoaXMgaXMgYW4gaW50ZXJtZWRpYXJ5IHN0ZXAgdXNlZCB0byBnZXQgdG8gYSBkYXRhVXJsIGJ1dCBhbHNvIGl0IGlzIHVzZWZ1bCB0b1xuICAgICAqIGNyZWF0ZSBxdWljayBpbWFnZSBjb3BpZXMgb2YgYSBjYW52YXMgd2l0aG91dCBwYXNzaW5nIGZvciB0aGUgZGF0YVVybCBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW211bHRpcGxpZXJdIGEgem9vbSBmYWN0b3IuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjcm9wcGluZ10gQ3JvcHBpbmcgaW5mb3JtYXRpb25zXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjcm9wcGluZy5sZWZ0XSBDcm9wcGluZyBsZWZ0IG9mZnNldC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2Nyb3BwaW5nLnRvcF0gQ3JvcHBpbmcgdG9wIG9mZnNldC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2Nyb3BwaW5nLndpZHRoXSBDcm9wcGluZyB3aWR0aC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2Nyb3BwaW5nLmhlaWdodF0gQ3JvcHBpbmcgaGVpZ2h0LlxuICAgICAqL1xuICAgIHRvQ2FudmFzRWxlbWVudDogZnVuY3Rpb24obXVsdGlwbGllciwgY3JvcHBpbmcpIHtcbiAgICAgIG11bHRpcGxpZXIgPSBtdWx0aXBsaWVyIHx8IDE7XG4gICAgICBjcm9wcGluZyA9IGNyb3BwaW5nIHx8IHsgfTtcbiAgICAgIHZhciBzY2FsZWRXaWR0aCA9IChjcm9wcGluZy53aWR0aCB8fCB0aGlzLndpZHRoKSAqIG11bHRpcGxpZXIsXG4gICAgICAgICAgc2NhbGVkSGVpZ2h0ID0gKGNyb3BwaW5nLmhlaWdodCB8fCB0aGlzLmhlaWdodCkgKiBtdWx0aXBsaWVyLFxuICAgICAgICAgIHpvb20gPSB0aGlzLmdldFpvb20oKSxcbiAgICAgICAgICBvcmlnaW5hbFdpZHRoID0gdGhpcy53aWR0aCxcbiAgICAgICAgICBvcmlnaW5hbEhlaWdodCA9IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgIG5ld1pvb20gPSB6b29tICogbXVsdGlwbGllcixcbiAgICAgICAgICB2cCA9IHRoaXMudmlld3BvcnRUcmFuc2Zvcm0sXG4gICAgICAgICAgdHJhbnNsYXRlWCA9ICh2cFs0XSAtIChjcm9wcGluZy5sZWZ0IHx8IDApKSAqIG11bHRpcGxpZXIsXG4gICAgICAgICAgdHJhbnNsYXRlWSA9ICh2cFs1XSAtIChjcm9wcGluZy50b3AgfHwgMCkpICogbXVsdGlwbGllcixcbiAgICAgICAgICBvcmlnaW5hbEludGVyYWN0aXZlID0gdGhpcy5pbnRlcmFjdGl2ZSxcbiAgICAgICAgICBuZXdWcCA9IFtuZXdab29tLCAwLCAwLCBuZXdab29tLCB0cmFuc2xhdGVYLCB0cmFuc2xhdGVZXSxcbiAgICAgICAgICBvcmlnaW5hbFJldGluYSA9IHRoaXMuZW5hYmxlUmV0aW5hU2NhbGluZyxcbiAgICAgICAgICBjYW52YXNFbCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKSxcbiAgICAgICAgICBvcmlnaW5hbENvbnRleHRUb3AgPSB0aGlzLmNvbnRleHRUb3A7XG4gICAgICBjYW52YXNFbC53aWR0aCA9IHNjYWxlZFdpZHRoO1xuICAgICAgY2FudmFzRWwuaGVpZ2h0ID0gc2NhbGVkSGVpZ2h0O1xuICAgICAgdGhpcy5jb250ZXh0VG9wID0gbnVsbDtcbiAgICAgIHRoaXMuZW5hYmxlUmV0aW5hU2NhbGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5pbnRlcmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy52aWV3cG9ydFRyYW5zZm9ybSA9IG5ld1ZwO1xuICAgICAgdGhpcy53aWR0aCA9IHNjYWxlZFdpZHRoO1xuICAgICAgdGhpcy5oZWlnaHQgPSBzY2FsZWRIZWlnaHQ7XG4gICAgICB0aGlzLmNhbGNWaWV3cG9ydEJvdW5kYXJpZXMoKTtcbiAgICAgIHRoaXMucmVuZGVyQ2FudmFzKGNhbnZhc0VsLmdldENvbnRleHQoJzJkJyksIHRoaXMuX29iamVjdHMpO1xuICAgICAgdGhpcy52aWV3cG9ydFRyYW5zZm9ybSA9IHZwO1xuICAgICAgdGhpcy53aWR0aCA9IG9yaWdpbmFsV2lkdGg7XG4gICAgICB0aGlzLmhlaWdodCA9IG9yaWdpbmFsSGVpZ2h0O1xuICAgICAgdGhpcy5jYWxjVmlld3BvcnRCb3VuZGFyaWVzKCk7XG4gICAgICB0aGlzLmludGVyYWN0aXZlID0gb3JpZ2luYWxJbnRlcmFjdGl2ZTtcbiAgICAgIHRoaXMuZW5hYmxlUmV0aW5hU2NhbGluZyA9IG9yaWdpbmFsUmV0aW5hO1xuICAgICAgdGhpcy5jb250ZXh0VG9wID0gb3JpZ2luYWxDb250ZXh0VG9wO1xuICAgICAgcmV0dXJuIGNhbnZhc0VsO1xuICAgIH0sXG4gIH0pO1xuXG59KSgpO1xuXG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUgKi8ge1xuICAvKipcbiAgICogUG9wdWxhdGVzIGNhbnZhcyB3aXRoIGRhdGEgZnJvbSB0aGUgc3BlY2lmaWVkIEpTT04uXG4gICAqIEpTT04gZm9ybWF0IG11c3QgY29uZm9ybSB0byB0aGUgb25lIG9mIHtAbGluayBmYWJyaWMuQ2FudmFzI3RvSlNPTn1cbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBqc29uIEpTT04gc3RyaW5nIG9yIG9iamVjdFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjaywgaW52b2tlZCB3aGVuIGpzb24gaXMgcGFyc2VkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBjb3JyZXNwb25kaW5nIG9iamVjdHMgKGUuZzoge0BsaW5rIGZhYnJpYy5JbWFnZX0pXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBpbml0aWFsaXplZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2YgSlNPTiBlbGVtZW50cywgY2FsbGVkIGFmdGVyIGVhY2ggZmFicmljIG9iamVjdCBjcmVhdGVkLlxuICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEB0dXRvcmlhbCB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9mYWJyaWMtaW50cm8tcGFydC0zI2Rlc2VyaWFsaXphdGlvbn1cbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2pzZmlkZGxlLm5ldC9mYWJyaWNqcy9mbWdYdC98anNGaWRkbGUgZGVtb31cbiAgICogQGV4YW1wbGUgPGNhcHRpb24+bG9hZEZyb21KU09OPC9jYXB0aW9uPlxuICAgKiBjYW52YXMubG9hZEZyb21KU09OKGpzb24sIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpKTtcbiAgICogQGV4YW1wbGUgPGNhcHRpb24+bG9hZEZyb21KU09OIHdpdGggcmV2aXZlcjwvY2FwdGlvbj5cbiAgICogY2FudmFzLmxvYWRGcm9tSlNPTihqc29uLCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSwgZnVuY3Rpb24obywgb2JqZWN0KSB7XG4gICAqICAgLy8gYG9gID0ganNvbiBvYmplY3RcbiAgICogICAvLyBgb2JqZWN0YCA9IGZhYnJpYy5PYmplY3QgaW5zdGFuY2VcbiAgICogICAvLyAuLi4gZG8gc29tZSBzdHVmZiAuLi5cbiAgICogfSk7XG4gICAqL1xuICBsb2FkRnJvbUpTT046IGZ1bmN0aW9uIChqc29uLCBjYWxsYmFjaywgcmV2aXZlcikge1xuICAgIGlmICghanNvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHNlcmlhbGl6ZSBpZiBpdCB3YXNuJ3QgYWxyZWFkeVxuICAgIHZhciBzZXJpYWxpemVkID0gKHR5cGVvZiBqc29uID09PSAnc3RyaW5nJylcbiAgICAgID8gSlNPTi5wYXJzZShqc29uKVxuICAgICAgOiBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUoanNvbik7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBjbGlwUGF0aCA9IHNlcmlhbGl6ZWQuY2xpcFBhdGgsXG4gICAgICAgIHJlbmRlck9uQWRkUmVtb3ZlID0gdGhpcy5yZW5kZXJPbkFkZFJlbW92ZTtcblxuICAgIHRoaXMucmVuZGVyT25BZGRSZW1vdmUgPSBmYWxzZTtcblxuICAgIGRlbGV0ZSBzZXJpYWxpemVkLmNsaXBQYXRoO1xuXG4gICAgdGhpcy5fZW5saXZlbk9iamVjdHMoc2VyaWFsaXplZC5vYmplY3RzLCBmdW5jdGlvbiAoZW5saXZlbmVkT2JqZWN0cykge1xuICAgICAgX3RoaXMuY2xlYXIoKTtcbiAgICAgIF90aGlzLl9zZXRCZ092ZXJsYXkoc2VyaWFsaXplZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2xpcFBhdGgpIHtcbiAgICAgICAgICBfdGhpcy5fZW5saXZlbk9iamVjdHMoW2NsaXBQYXRoXSwgZnVuY3Rpb24gKGVubGl2ZW5lZENhbnZhc0NsaXApIHtcbiAgICAgICAgICAgIF90aGlzLmNsaXBQYXRoID0gZW5saXZlbmVkQ2FudmFzQ2xpcFswXTtcbiAgICAgICAgICAgIF90aGlzLl9fc2V0dXBDYW52YXMuY2FsbChfdGhpcywgc2VyaWFsaXplZCwgZW5saXZlbmVkT2JqZWN0cywgcmVuZGVyT25BZGRSZW1vdmUsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fX3NldHVwQ2FudmFzLmNhbGwoX3RoaXMsIHNlcmlhbGl6ZWQsIGVubGl2ZW5lZE9iamVjdHMsIHJlbmRlck9uQWRkUmVtb3ZlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIHJldml2ZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2VyaWFsaXplZCBPYmplY3Qgd2l0aCBiYWNrZ3JvdW5kIGFuZCBvdmVybGF5IGluZm9ybWF0aW9uXG4gICAqIEBwYXJhbSB7QXJyYXl9IHJlc3RvcmVkIGNhbnZhcyBvYmplY3RzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhY2hlZCByZW5kZXJPbkFkZFJlbW92ZSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBJbnZva2VkIGFmdGVyIGFsbCBiYWNrZ3JvdW5kIGFuZCBvdmVybGF5IGltYWdlcy9wYXR0ZXJucyBsb2FkZWRcbiAgICovXG4gIF9fc2V0dXBDYW52YXM6IGZ1bmN0aW9uKHNlcmlhbGl6ZWQsIGVubGl2ZW5lZE9iamVjdHMsIHJlbmRlck9uQWRkUmVtb3ZlLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgZW5saXZlbmVkT2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKG9iaiwgaW5kZXgpIHtcbiAgICAgIC8vIHdlIHNwbGljZSB0aGUgYXJyYXkganVzdCBpbiBjYXNlIHNvbWUgY3VzdG9tIGNsYXNzZXMgcmVzdG9yZWQgZnJvbSBKU09OXG4gICAgICAvLyB3aWxsIGFkZCBtb3JlIG9iamVjdCB0byBjYW52YXMgYXQgY2FudmFzIGluaXQuXG4gICAgICBfdGhpcy5pbnNlcnRBdChvYmosIGluZGV4KTtcbiAgICB9KTtcbiAgICB0aGlzLnJlbmRlck9uQWRkUmVtb3ZlID0gcmVuZGVyT25BZGRSZW1vdmU7XG4gICAgLy8gcmVtb3ZlIHBhcnRzIGkgY2Fubm90IHNldCBhcyBvcHRpb25zXG4gICAgZGVsZXRlIHNlcmlhbGl6ZWQub2JqZWN0cztcbiAgICBkZWxldGUgc2VyaWFsaXplZC5iYWNrZ3JvdW5kSW1hZ2U7XG4gICAgZGVsZXRlIHNlcmlhbGl6ZWQub3ZlcmxheUltYWdlO1xuICAgIGRlbGV0ZSBzZXJpYWxpemVkLmJhY2tncm91bmQ7XG4gICAgZGVsZXRlIHNlcmlhbGl6ZWQub3ZlcmxheTtcbiAgICAvLyB0aGlzLl9pbml0T3B0aW9ucyBkb2VzIHRvbyBtYW55IHRoaW5ncyB0byBqdXN0XG4gICAgLy8gY2FsbCBpdC4gTm9ybWFsbHkgbG9hZGluZyBhbiBPYmplY3QgZnJvbSBKU09OXG4gICAgLy8gY3JlYXRlIHRoZSBPYmplY3QgaW5zdGFuY2UuIEhlcmUgdGhlIENhbnZhcyBpc1xuICAgIC8vIGFscmVhZHkgYW4gaW5zdGFuY2UgYW5kIHdlIGFyZSBqdXN0IGxvYWRpbmcgdGhpbmdzIG92ZXIgaXRcbiAgICB0aGlzLl9zZXRPcHRpb25zKHNlcmlhbGl6ZWQpO1xuICAgIHRoaXMucmVuZGVyQWxsKCk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNlcmlhbGl6ZWQgT2JqZWN0IHdpdGggYmFja2dyb3VuZCBhbmQgb3ZlcmxheSBpbmZvcm1hdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBJbnZva2VkIGFmdGVyIGFsbCBiYWNrZ3JvdW5kIGFuZCBvdmVybGF5IGltYWdlcy9wYXR0ZXJucyBsb2FkZWRcbiAgICovXG4gIF9zZXRCZ092ZXJsYXk6IGZ1bmN0aW9uKHNlcmlhbGl6ZWQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGxvYWRlZCA9IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZmFsc2UsXG4gICAgICBvdmVybGF5Q29sb3I6IGZhbHNlLFxuICAgICAgYmFja2dyb3VuZEltYWdlOiBmYWxzZSxcbiAgICAgIG92ZXJsYXlJbWFnZTogZmFsc2VcbiAgICB9O1xuXG4gICAgaWYgKCFzZXJpYWxpemVkLmJhY2tncm91bmRJbWFnZSAmJiAhc2VyaWFsaXplZC5vdmVybGF5SW1hZ2UgJiYgIXNlcmlhbGl6ZWQuYmFja2dyb3VuZCAmJiAhc2VyaWFsaXplZC5vdmVybGF5KSB7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjYklmTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGxvYWRlZC5iYWNrZ3JvdW5kSW1hZ2UgJiYgbG9hZGVkLm92ZXJsYXlJbWFnZSAmJiBsb2FkZWQuYmFja2dyb3VuZENvbG9yICYmIGxvYWRlZC5vdmVybGF5Q29sb3IpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5fX3NldEJnT3ZlcmxheSgnYmFja2dyb3VuZEltYWdlJywgc2VyaWFsaXplZC5iYWNrZ3JvdW5kSW1hZ2UsIGxvYWRlZCwgY2JJZkxvYWRlZCk7XG4gICAgdGhpcy5fX3NldEJnT3ZlcmxheSgnb3ZlcmxheUltYWdlJywgc2VyaWFsaXplZC5vdmVybGF5SW1hZ2UsIGxvYWRlZCwgY2JJZkxvYWRlZCk7XG4gICAgdGhpcy5fX3NldEJnT3ZlcmxheSgnYmFja2dyb3VuZENvbG9yJywgc2VyaWFsaXplZC5iYWNrZ3JvdW5kLCBsb2FkZWQsIGNiSWZMb2FkZWQpO1xuICAgIHRoaXMuX19zZXRCZ092ZXJsYXkoJ292ZXJsYXlDb2xvcicsIHNlcmlhbGl6ZWQub3ZlcmxheSwgbG9hZGVkLCBjYklmTG9hZGVkKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRvIHNldCAoYmFja2dyb3VuZEltYWdlLCBvdmVybGF5SW1hZ2UsIGJhY2tncm91bmRDb2xvciwgb3ZlcmxheUNvbG9yKVxuICAgKiBAcGFyYW0geyhPYmplY3R8U3RyaW5nKX0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBsb2FkZWQgU2V0IGxvYWRlZCBwcm9wZXJ0eSB0byB0cnVlIGlmIHByb3BlcnR5IGlzIHNldFxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gaW52b2tlIGFmdGVyIHByb3BlcnR5IGlzIHNldFxuICAgKi9cbiAgX19zZXRCZ092ZXJsYXk6IGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSwgbG9hZGVkLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBsb2FkZWRbcHJvcGVydHldID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb3BlcnR5ID09PSAnYmFja2dyb3VuZEltYWdlJyB8fCBwcm9wZXJ0eSA9PT0gJ292ZXJsYXlJbWFnZScpIHtcbiAgICAgIGZhYnJpYy51dGlsLmVubGl2ZW5PYmplY3RzKFt2YWx1ZV0sIGZ1bmN0aW9uKGVubGl2ZWRPYmplY3Qpe1xuICAgICAgICBfdGhpc1twcm9wZXJ0eV0gPSBlbmxpdmVkT2JqZWN0WzBdO1xuICAgICAgICBsb2FkZWRbcHJvcGVydHldID0gdHJ1ZTtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXNbJ3NldCcgKyBmYWJyaWMudXRpbC5zdHJpbmcuY2FwaXRhbGl6ZShwcm9wZXJ0eSwgdHJ1ZSldKHZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgbG9hZGVkW3Byb3BlcnR5XSA9IHRydWU7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IG9iamVjdHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdXG4gICAqL1xuICBfZW5saXZlbk9iamVjdHM6IGZ1bmN0aW9uIChvYmplY3RzLCBjYWxsYmFjaywgcmV2aXZlcikge1xuICAgIGlmICghb2JqZWN0cyB8fCBvYmplY3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soW10pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZhYnJpYy51dGlsLmVubGl2ZW5PYmplY3RzKG9iamVjdHMsIGZ1bmN0aW9uKGVubGl2ZW5lZE9iamVjdHMpIHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGVubGl2ZW5lZE9iamVjdHMpO1xuICAgIH0sIG51bGwsIHJldml2ZXIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBfdG9EYXRhVVJMOiBmdW5jdGlvbiAoZm9ybWF0LCBjYWxsYmFjaykge1xuICAgIHRoaXMuY2xvbmUoZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICBjYWxsYmFjayhjbG9uZS50b0RhdGFVUkwoZm9ybWF0KSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG11bHRpcGxpZXJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIF90b0RhdGFVUkxXaXRoTXVsdGlwbGllcjogZnVuY3Rpb24gKGZvcm1hdCwgbXVsdGlwbGllciwgY2FsbGJhY2spIHtcbiAgICB0aGlzLmNsb25lKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgY2FsbGJhY2soY2xvbmUudG9EYXRhVVJMV2l0aE11bHRpcGxpZXIoZm9ybWF0LCBtdWx0aXBsaWVyKSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENsb25lcyBjYW52YXMgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjYWxsYmFja10gUmVjZWl2ZXMgY2xvbmVkIGluc3RhbmNlIGFzIGEgZmlyc3QgYXJndW1lbnRcbiAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNdIEFycmF5IG9mIHByb3BlcnRpZXMgdG8gaW5jbHVkZSBpbiB0aGUgY2xvbmVkIGNhbnZhcyBhbmQgY2hpbGRyZW5cbiAgICovXG4gIGNsb25lOiBmdW5jdGlvbiAoY2FsbGJhY2ssIHByb3BlcnRpZXMpIHtcbiAgICB2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKHByb3BlcnRpZXMpKTtcbiAgICB0aGlzLmNsb25lV2l0aG91dERhdGEoZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgIGNsb25lLmxvYWRGcm9tSlNPTihkYXRhLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soY2xvbmUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENsb25lcyBjYW52YXMgaW5zdGFuY2Ugd2l0aG91dCBjbG9uaW5nIGV4aXN0aW5nIGRhdGEuXG4gICAqIFRoaXMgZXNzZW50aWFsbHkgY29waWVzIGNhbnZhcyBkaW1lbnNpb25zLCBjbGlwcGluZyBwcm9wZXJ0aWVzLCBldGMuXG4gICAqIGJ1dCBsZWF2ZXMgZGF0YSBlbXB0eSAoc28gdGhhdCB5b3UgY2FuIHBvcHVsYXRlIGl0IHdpdGggeW91ciBvd24pXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY2FsbGJhY2tdIFJlY2VpdmVzIGNsb25lZCBpbnN0YW5jZSBhcyBhIGZpcnN0IGFyZ3VtZW50XG4gICAqL1xuICBjbG9uZVdpdGhvdXREYXRhOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBlbCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcblxuICAgIGVsLndpZHRoID0gdGhpcy53aWR0aDtcbiAgICBlbC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuICAgIHZhciBjbG9uZSA9IG5ldyBmYWJyaWMuQ2FudmFzKGVsKTtcbiAgICBpZiAodGhpcy5iYWNrZ3JvdW5kSW1hZ2UpIHtcbiAgICAgIGNsb25lLnNldEJhY2tncm91bmRJbWFnZSh0aGlzLmJhY2tncm91bmRJbWFnZS5zcmMsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjbG9uZS5yZW5kZXJBbGwoKTtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soY2xvbmUpO1xuICAgICAgfSk7XG4gICAgICBjbG9uZS5iYWNrZ3JvdW5kSW1hZ2VPcGFjaXR5ID0gdGhpcy5iYWNrZ3JvdW5kSW1hZ2VPcGFjaXR5O1xuICAgICAgY2xvbmUuYmFja2dyb3VuZEltYWdlU3RyZXRjaCA9IHRoaXMuYmFja2dyb3VuZEltYWdlU3RyZXRjaDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhjbG9uZSk7XG4gICAgfVxuICB9XG59KTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGV4dGVuZCA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQsXG4gICAgICBjbG9uZSA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZSxcbiAgICAgIHRvRml4ZWQgPSBmYWJyaWMudXRpbC50b0ZpeGVkLFxuICAgICAgY2FwaXRhbGl6ZSA9IGZhYnJpYy51dGlsLnN0cmluZy5jYXBpdGFsaXplLFxuICAgICAgZGVncmVlc1RvUmFkaWFucyA9IGZhYnJpYy51dGlsLmRlZ3JlZXNUb1JhZGlhbnMsXG4gICAgICBvYmplY3RDYWNoaW5nID0gIWZhYnJpYy5pc0xpa2VseU5vZGUsXG4gICAgICBBTElBU0lOR19MSU1JVCA9IDI7XG5cbiAgaWYgKGZhYnJpYy5PYmplY3QpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUm9vdCBvYmplY3QgY2xhc3MgZnJvbSB3aGljaCBhbGwgMmQgc2hhcGUgY2xhc3NlcyBpbmhlcml0IGZyb21cbiAgICogQGNsYXNzIGZhYnJpYy5PYmplY3RcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTEjb2JqZWN0c31cbiAgICogQHNlZSB7QGxpbmsgZmFicmljLk9iamVjdCNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKlxuICAgKiBAZmlyZXMgYWRkZWRcbiAgICogQGZpcmVzIHJlbW92ZWRcbiAgICpcbiAgICogQGZpcmVzIHNlbGVjdGVkXG4gICAqIEBmaXJlcyBkZXNlbGVjdGVkXG4gICAqIEBmaXJlcyBtb2RpZmllZFxuICAgKiBAZmlyZXMgbW9kaWZpZWRcbiAgICogQGZpcmVzIG1vdmVkXG4gICAqIEBmaXJlcyBzY2FsZWRcbiAgICogQGZpcmVzIHJvdGF0ZWRcbiAgICogQGZpcmVzIHNrZXdlZFxuICAgKlxuICAgKiBAZmlyZXMgcm90YXRpbmdcbiAgICogQGZpcmVzIHNjYWxpbmdcbiAgICogQGZpcmVzIG1vdmluZ1xuICAgKiBAZmlyZXMgc2tld2luZ1xuICAgKlxuICAgKiBAZmlyZXMgbW91c2Vkb3duXG4gICAqIEBmaXJlcyBtb3VzZXVwXG4gICAqIEBmaXJlcyBtb3VzZW92ZXJcbiAgICogQGZpcmVzIG1vdXNlb3V0XG4gICAqIEBmaXJlcyBtb3VzZXdoZWVsXG4gICAqIEBmaXJlcyBtb3VzZWRibGNsaWNrXG4gICAqXG4gICAqIEBmaXJlcyBkcmFnb3ZlclxuICAgKiBAZmlyZXMgZHJhZ2VudGVyXG4gICAqIEBmaXJlcyBkcmFnbGVhdmVcbiAgICogQGZpcmVzIGRyb3BcbiAgICovXG4gIGZhYnJpYy5PYmplY3QgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuQ29tbW9uTWV0aG9kcywgLyoqIEBsZW5kcyBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdCAocmVjdCwgY2lyY2xlLCBwYXRoLCBldGMuKS5cbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyBtZWFudCB0byBiZSByZWFkLW9ubHkgYW5kIG5vdCBtZWFudCB0byBiZSBtb2RpZmllZC5cbiAgICAgKiBJZiB5b3UgbW9kaWZ5LCBjZXJ0YWluIHBhcnRzIG9mIEZhYnJpYyAoc3VjaCBhcyBKU09OIGxvYWRpbmcpIHdvbid0IHdvcmsgY29ycmVjdGx5LlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogICAgICAgICAgICAgICAgICAgICAnb2JqZWN0JyxcblxuICAgIC8qKlxuICAgICAqIEhvcml6b250YWwgb3JpZ2luIG9mIHRyYW5zZm9ybWF0aW9uIG9mIGFuIG9iamVjdCAob25lIG9mIFwibGVmdFwiLCBcInJpZ2h0XCIsIFwiY2VudGVyXCIpXG4gICAgICogU2VlIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvMW93MDJnZWEvMjQ0LyBvbiBob3cgb3JpZ2luWC9vcmlnaW5ZIGFmZmVjdCBvYmplY3RzIGluIGdyb3Vwc1xuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgb3JpZ2luWDogICAgICAgICAgICAgICAgICAnbGVmdCcsXG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbCBvcmlnaW4gb2YgdHJhbnNmb3JtYXRpb24gb2YgYW4gb2JqZWN0IChvbmUgb2YgXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJjZW50ZXJcIilcbiAgICAgKiBTZWUgaHR0cDovL2pzZmlkZGxlLm5ldC8xb3cwMmdlYS8yNDQvIG9uIGhvdyBvcmlnaW5YL29yaWdpblkgYWZmZWN0IG9iamVjdHMgaW4gZ3JvdXBzXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBvcmlnaW5ZOiAgICAgICAgICAgICAgICAgICd0b3AnLFxuXG4gICAgLyoqXG4gICAgICogVG9wIHBvc2l0aW9uIG9mIGFuIG9iamVjdC4gTm90ZSB0aGF0IGJ5IGRlZmF1bHQgaXQncyByZWxhdGl2ZSB0byBvYmplY3QgdG9wLiBZb3UgY2FuIGNoYW5nZSB0aGlzIGJ5IHNldHRpbmcgb3JpZ2luWT17dG9wL2NlbnRlci9ib3R0b219XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0b3A6ICAgICAgICAgICAgICAgICAgICAgIDAsXG5cbiAgICAvKipcbiAgICAgKiBMZWZ0IHBvc2l0aW9uIG9mIGFuIG9iamVjdC4gTm90ZSB0aGF0IGJ5IGRlZmF1bHQgaXQncyByZWxhdGl2ZSB0byBvYmplY3QgbGVmdC4gWW91IGNhbiBjaGFuZ2UgdGhpcyBieSBzZXR0aW5nIG9yaWdpblg9e2xlZnQvY2VudGVyL3JpZ2h0fVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbGVmdDogICAgICAgICAgICAgICAgICAgICAwLFxuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IHdpZHRoXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB3aWR0aDogICAgICAgICAgICAgICAgICAgIDAsXG5cbiAgICAvKipcbiAgICAgKiBPYmplY3QgaGVpZ2h0XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBoZWlnaHQ6ICAgICAgICAgICAgICAgICAgIDAsXG5cbiAgICAvKipcbiAgICAgKiBPYmplY3Qgc2NhbGUgZmFjdG9yIChob3Jpem9udGFsKVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2NhbGVYOiAgICAgICAgICAgICAgICAgICAxLFxuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IHNjYWxlIGZhY3RvciAodmVydGljYWwpXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzY2FsZVk6ICAgICAgICAgICAgICAgICAgIDEsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIGFuIG9iamVjdCBpcyByZW5kZXJlZCBhcyBmbGlwcGVkIGhvcml6b250YWxseVxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGZsaXBYOiAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIGFuIG9iamVjdCBpcyByZW5kZXJlZCBhcyBmbGlwcGVkIHZlcnRpY2FsbHlcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBmbGlwWTogICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogT3BhY2l0eSBvZiBhbiBvYmplY3RcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG9wYWNpdHk6ICAgICAgICAgICAgICAgICAgMSxcblxuICAgIC8qKlxuICAgICAqIEFuZ2xlIG9mIHJvdGF0aW9uIG9mIGFuIG9iamVjdCAoaW4gZGVncmVlcylcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGFuZ2xlOiAgICAgICAgICAgICAgICAgICAgMCxcblxuICAgIC8qKlxuICAgICAqIEFuZ2xlIG9mIHNrZXcgb24geCBheGVzIG9mIGFuIG9iamVjdCAoaW4gZGVncmVlcylcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNrZXdYOiAgICAgICAgICAgICAgICAgICAgMCxcblxuICAgIC8qKlxuICAgICAqIEFuZ2xlIG9mIHNrZXcgb24geSBheGVzIG9mIGFuIG9iamVjdCAoaW4gZGVncmVlcylcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNrZXdZOiAgICAgICAgICAgICAgICAgICAgMCxcblxuICAgIC8qKlxuICAgICAqIFNpemUgb2Ygb2JqZWN0J3MgY29udHJvbGxpbmcgY29ybmVycyAoaW4gcGl4ZWxzKVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY29ybmVyU2l6ZTogICAgICAgICAgICAgICAxMyxcblxuICAgIC8qKlxuICAgICAqIFNpemUgb2Ygb2JqZWN0J3MgY29udHJvbGxpbmcgY29ybmVycyB3aGVuIHRvdWNoIGludGVyYWN0aW9uIGlzIGRldGVjdGVkXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0b3VjaENvcm5lclNpemU6ICAgICAgICAgICAgICAgMjQsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIG9iamVjdCdzIGNvbnRyb2xsaW5nIGNvcm5lcnMgYXJlIHJlbmRlcmVkIGFzIHRyYW5zcGFyZW50IGluc2lkZSAoaS5lLiBzdHJva2UgaW5zdGVhZCBvZiBmaWxsKVxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRyYW5zcGFyZW50Q29ybmVyczogICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgY3Vyc29yIHZhbHVlIHVzZWQgd2hlbiBob3ZlcmluZyBvdmVyIHRoaXMgb2JqZWN0IG9uIGNhbnZhc1xuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgaG92ZXJDdXJzb3I6ICAgICAgICAgICAgICBudWxsLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBjdXJzb3IgdmFsdWUgdXNlZCB3aGVuIG1vdmluZyB0aGlzIG9iamVjdCBvbiBjYW52YXNcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG1vdmVDdXJzb3I6ICAgICAgICAgICAgICAgbnVsbCxcblxuICAgIC8qKlxuICAgICAqIFBhZGRpbmcgYmV0d2VlbiBvYmplY3QgYW5kIGl0cyBjb250cm9sbGluZyBib3JkZXJzIChpbiBwaXhlbHMpXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBwYWRkaW5nOiAgICAgICAgICAgICAgICAgIDAsXG5cbiAgICAvKipcbiAgICAgKiBDb2xvciBvZiBjb250cm9sbGluZyBib3JkZXJzIG9mIGFuIG9iamVjdCAod2hlbiBpdCdzIGFjdGl2ZSlcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGJvcmRlckNvbG9yOiAgICAgICAgICAgICAgJ3JnYigxNzgsMjA0LDI1NSknLFxuXG4gICAgLyoqXG4gICAgICogQXJyYXkgc3BlY2lmeWluZyBkYXNoIHBhdHRlcm4gb2YgYW4gb2JqZWN0J3MgYm9yZGVycyAoaGFzQm9yZGVyIG11c3QgYmUgdHJ1ZSlcbiAgICAgKiBAc2luY2UgMS42LjJcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqL1xuICAgIGJvcmRlckRhc2hBcnJheTogICAgICAgICAgbnVsbCxcblxuICAgIC8qKlxuICAgICAqIENvbG9yIG9mIGNvbnRyb2xsaW5nIGNvcm5lcnMgb2YgYW4gb2JqZWN0ICh3aGVuIGl0J3MgYWN0aXZlKVxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY29ybmVyQ29sb3I6ICAgICAgICAgICAgICAncmdiKDE3OCwyMDQsMjU1KScsXG5cbiAgICAvKipcbiAgICAgKiBDb2xvciBvZiBjb250cm9sbGluZyBjb3JuZXJzIG9mIGFuIG9iamVjdCAod2hlbiBpdCdzIGFjdGl2ZSBhbmQgdHJhbnNwYXJlbnRDb3JuZXJzIGZhbHNlKVxuICAgICAqIEBzaW5jZSAxLjYuMlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY29ybmVyU3Ryb2tlQ29sb3I6ICAgICAgICBudWxsLFxuXG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBzdHlsZSBvZiBjb250cm9sLCAncmVjdCcgb3IgJ2NpcmNsZSdcbiAgICAgKiBAc2luY2UgMS42LjJcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKi9cbiAgICBjb3JuZXJTdHlsZTogICAgICAgICAgJ3JlY3QnLFxuXG4gICAgLyoqXG4gICAgICogQXJyYXkgc3BlY2lmeWluZyBkYXNoIHBhdHRlcm4gb2YgYW4gb2JqZWN0J3MgY29udHJvbCAoaGFzQm9yZGVyIG11c3QgYmUgdHJ1ZSlcbiAgICAgKiBAc2luY2UgMS42LjJcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqL1xuICAgIGNvcm5lckRhc2hBcnJheTogICAgICAgICAgbnVsbCxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhpcyBvYmplY3Qgd2lsbCB1c2UgY2VudGVyIHBvaW50IGFzIHRoZSBvcmlnaW4gb2YgdHJhbnNmb3JtYXRpb25cbiAgICAgKiB3aGVuIGJlaW5nIHNjYWxlZCB2aWEgdGhlIGNvbnRyb2xzLlxuICAgICAqIDxiPkJhY2t3YXJkcyBpbmNvbXBhdGliaWxpdHkgbm90ZTo8L2I+IFRoaXMgcHJvcGVydHkgcmVwbGFjZXMgXCJjZW50ZXJUcmFuc2Zvcm1cIiAoQm9vbGVhbikuXG4gICAgICogQHNpbmNlIDEuMy40XG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY2VudGVyZWRTY2FsaW5nOiAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhpcyBvYmplY3Qgd2lsbCB1c2UgY2VudGVyIHBvaW50IGFzIHRoZSBvcmlnaW4gb2YgdHJhbnNmb3JtYXRpb25cbiAgICAgKiB3aGVuIGJlaW5nIHJvdGF0ZWQgdmlhIHRoZSBjb250cm9scy5cbiAgICAgKiA8Yj5CYWNrd2FyZHMgaW5jb21wYXRpYmlsaXR5IG5vdGU6PC9iPiBUaGlzIHByb3BlcnR5IHJlcGxhY2VzIFwiY2VudGVyVHJhbnNmb3JtXCIgKEJvb2xlYW4pLlxuICAgICAqIEBzaW5jZSAxLjMuNFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGNlbnRlcmVkUm90YXRpb246ICAgICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIENvbG9yIG9mIG9iamVjdCdzIGZpbGxcbiAgICAgKiB0YWtlcyBjc3MgY29sb3JzIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtY29sb3ItMy9cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGZpbGw6ICAgICAgICAgICAgICAgICAgICAgJ3JnYigwLDAsMCknLFxuXG4gICAgLyoqXG4gICAgICogRmlsbCBydWxlIHVzZWQgdG8gZmlsbCBhbiBvYmplY3RcbiAgICAgKiBhY2NlcHRlZCB2YWx1ZXMgYXJlIG5vbnplcm8sIGV2ZW5vZGRcbiAgICAgKiA8Yj5CYWNrd2FyZHMgaW5jb21wYXRpYmlsaXR5IG5vdGU6PC9iPiBUaGlzIHByb3BlcnR5IHdhcyB1c2VkIGZvciBzZXR0aW5nIGdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiB1bnRpbCB2MS40LjEyICh1c2UgYGZhYnJpYy5PYmplY3QjZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uYCBpbnN0ZWFkKVxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZmlsbFJ1bGU6ICAgICAgICAgICAgICAgICAnbm9uemVybycsXG5cbiAgICAvKipcbiAgICAgKiBDb21wb3NpdGUgcnVsZSB1c2VkIGZvciBjYW52YXMgZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb246ICdzb3VyY2Utb3ZlcicsXG5cbiAgICAvKipcbiAgICAgKiBCYWNrZ3JvdW5kIGNvbG9yIG9mIGFuIG9iamVjdC5cbiAgICAgKiB0YWtlcyBjc3MgY29sb3JzIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtY29sb3ItMy9cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGJhY2tncm91bmRDb2xvcjogICAgICAgICAgJycsXG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3Rpb24gQmFja2dyb3VuZCBjb2xvciBvZiBhbiBvYmplY3QuIGNvbG9yZWQgbGF5ZXIgYmVoaW5kIHRoZSBvYmplY3Qgd2hlbiBpdCBpcyBhY3RpdmUuXG4gICAgICogZG9lcyBub3QgbWl4IGdvb2Qgd2l0aCBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gbWV0aG9kcy5cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNlbGVjdGlvbkJhY2tncm91bmRDb2xvcjogICAgICAgICAgJycsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGRlZmluZWQsIGFuIG9iamVjdCBpcyByZW5kZXJlZCB2aWEgc3Ryb2tlIGFuZCB0aGlzIHByb3BlcnR5IHNwZWNpZmllcyBpdHMgY29sb3JcbiAgICAgKiB0YWtlcyBjc3MgY29sb3JzIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtY29sb3ItMy9cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHN0cm9rZTogICAgICAgICAgICAgICAgICAgbnVsbCxcblxuICAgIC8qKlxuICAgICAqIFdpZHRoIG9mIGEgc3Ryb2tlIHVzZWQgdG8gcmVuZGVyIHRoaXMgb2JqZWN0XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdHJva2VXaWR0aDogICAgICAgICAgICAgIDEsXG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBzcGVjaWZ5aW5nIGRhc2ggcGF0dGVybiBvZiBhbiBvYmplY3QncyBzdHJva2UgKHN0cm9rZSBtdXN0IGJlIGRlZmluZWQpXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKi9cbiAgICBzdHJva2VEYXNoQXJyYXk6ICAgICAgICAgIG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBMaW5lIG9mZnNldCBvZiBhbiBvYmplY3QncyBzdHJva2VcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHN0cm9rZURhc2hPZmZzZXQ6IDAsXG5cbiAgICAvKipcbiAgICAgKiBMaW5lIGVuZGluZ3Mgc3R5bGUgb2YgYW4gb2JqZWN0J3Mgc3Ryb2tlIChvbmUgb2YgXCJidXR0XCIsIFwicm91bmRcIiwgXCJzcXVhcmVcIilcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHN0cm9rZUxpbmVDYXA6ICAgICAgICAgICAgJ2J1dHQnLFxuXG4gICAgLyoqXG4gICAgICogQ29ybmVyIHN0eWxlIG9mIGFuIG9iamVjdCdzIHN0cm9rZSAob25lIG9mIFwiYmV2ZWxcIiwgXCJyb3VuZFwiLCBcIm1pdGVyXCIpXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdHJva2VMaW5lSm9pbjogICAgICAgICAgICdtaXRlcicsXG5cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIG1pdGVyIGxlbmd0aCAodXNlZCBmb3Igc3Ryb2tlTGluZUpvaW4gPSBcIm1pdGVyXCIpIG9mIGFuIG9iamVjdCdzIHN0cm9rZVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc3Ryb2tlTWl0ZXJMaW1pdDogICAgICAgICA0LFxuXG4gICAgLyoqXG4gICAgICogU2hhZG93IG9iamVjdCByZXByZXNlbnRpbmcgc2hhZG93IG9mIHRoaXMgc2hhcGVcbiAgICAgKiBAdHlwZSBmYWJyaWMuU2hhZG93XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzaGFkb3c6ICAgICAgICAgICAgICAgICAgIG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBPcGFjaXR5IG9mIG9iamVjdCdzIGNvbnRyb2xsaW5nIGJvcmRlcnMgd2hlbiBvYmplY3QgaXMgYWN0aXZlIGFuZCBtb3ZpbmdcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGJvcmRlck9wYWNpdHlXaGVuTW92aW5nOiAgMC40LFxuXG4gICAgLyoqXG4gICAgICogU2NhbGUgZmFjdG9yIG9mIG9iamVjdCdzIGNvbnRyb2xsaW5nIGJvcmRlcnNcbiAgICAgKiBiaWdnZXIgbnVtYmVyIHdpbGwgbWFrZSBhIHRoaWNrZXIgYm9yZGVyXG4gICAgICogYm9yZGVyIGlzIDEsIHNvIHRoaXMgaXMgYmFzaWNhbGx5IGEgYm9yZGVyIHRoaWNrbmVzc1xuICAgICAqIHNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byBjaGFuZ2UgdGhlIGJvcmRlciBpdHNlbGYuXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBib3JkZXJTY2FsZUZhY3RvcjogICAgICAgIDEsXG5cbiAgICAvKipcbiAgICAgKiBNaW5pbXVtIGFsbG93ZWQgc2NhbGUgdmFsdWUgb2YgYW4gb2JqZWN0XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBtaW5TY2FsZUxpbWl0OiAgICAgICAgICAgIDAsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHNldCB0byBgZmFsc2VgLCBhbiBvYmplY3QgY2FuIG5vdCBiZSBzZWxlY3RlZCBmb3IgbW9kaWZpY2F0aW9uICh1c2luZyBlaXRoZXIgcG9pbnQtY2xpY2stYmFzZWQgb3IgZ3JvdXAtYmFzZWQgc2VsZWN0aW9uKS5cbiAgICAgKiBCdXQgZXZlbnRzIHN0aWxsIGZpcmUgb24gaXQuXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2VsZWN0YWJsZTogICAgICAgICAgICAgICB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiBzZXQgdG8gYGZhbHNlYCwgYW4gb2JqZWN0IGNhbiBub3QgYmUgYSB0YXJnZXQgb2YgZXZlbnRzLiBBbGwgZXZlbnRzIHByb3BhZ2F0ZSB0aHJvdWdoIGl0LiBJbnRyb2R1Y2VkIGluIHYxLjMuNFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGV2ZW50ZWQ6ICAgICAgICAgICAgICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gc2V0IHRvIGBmYWxzZWAsIGFuIG9iamVjdCBpcyBub3QgcmVuZGVyZWQgb24gY2FudmFzXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdmlzaWJsZTogICAgICAgICAgICAgICAgICB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiBzZXQgdG8gYGZhbHNlYCwgb2JqZWN0J3MgY29udHJvbHMgYXJlIG5vdCBkaXNwbGF5ZWQgYW5kIGNhbiBub3QgYmUgdXNlZCB0byBtYW5pcHVsYXRlIG9iamVjdFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGhhc0NvbnRyb2xzOiAgICAgICAgICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gc2V0IHRvIGBmYWxzZWAsIG9iamVjdCdzIGNvbnRyb2xsaW5nIGJvcmRlcnMgYXJlIG5vdCByZW5kZXJlZFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGhhc0JvcmRlcnM6ICAgICAgICAgICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgb2JqZWN0cyBhcmUgXCJmb3VuZFwiIG9uIGNhbnZhcyBvbiBwZXItcGl4ZWwgYmFzaXMgcmF0aGVyIHRoYW4gYWNjb3JkaW5nIHRvIGJvdW5kaW5nIGJveFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHBlclBpeGVsVGFyZ2V0RmluZDogICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGBmYWxzZWAsIGRlZmF1bHQgb2JqZWN0J3MgdmFsdWVzIGFyZSBub3QgaW5jbHVkZWQgaW4gaXRzIHNlcmlhbGl6YXRpb25cbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBpbmNsdWRlRGVmYXVsdFZhbHVlczogICAgIHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IGhvcml6b250YWwgbW92ZW1lbnQgaXMgbG9ja2VkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbG9ja01vdmVtZW50WDogICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBvYmplY3QgdmVydGljYWwgbW92ZW1lbnQgaXMgbG9ja2VkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbG9ja01vdmVtZW50WTogICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBvYmplY3Qgcm90YXRpb24gaXMgbG9ja2VkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbG9ja1JvdGF0aW9uOiAgICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBvYmplY3QgaG9yaXpvbnRhbCBzY2FsaW5nIGlzIGxvY2tlZFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGxvY2tTY2FsaW5nWDogICAgICAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IHZlcnRpY2FsIHNjYWxpbmcgaXMgbG9ja2VkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbG9ja1NjYWxpbmdZOiAgICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBvYmplY3QgaG9yaXpvbnRhbCBza2V3aW5nIGlzIGxvY2tlZFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGxvY2tTa2V3aW5nWDogICAgICAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IHZlcnRpY2FsIHNrZXdpbmcgaXMgbG9ja2VkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbG9ja1NrZXdpbmdZOiAgICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBvYmplY3QgY2Fubm90IGJlIGZsaXBwZWQgYnkgc2NhbGluZyBpbnRvIG5lZ2F0aXZlIHZhbHVlc1xuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGxvY2tTY2FsaW5nRmxpcDogICAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IGlzIG5vdCBleHBvcnRlZCBpbiBPQkpFQ1QvSlNPTlxuICAgICAqIEBzaW5jZSAxLjYuM1xuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGV4Y2x1ZGVGcm9tRXhwb3J0OiAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IGlzIGNhY2hlZCBvbiBhbiBhZGRpdGlvbmFsIGNhbnZhcy5cbiAgICAgKiBXaGVuIGBmYWxzZWAsIG9iamVjdCBpcyBub3QgY2FjaGVkIHVubGVzcyBuZWNlc3NhcnkgKCBjbGlwUGF0aCApXG4gICAgICogZGVmYXVsdCB0byB0cnVlXG4gICAgICogQHNpbmNlIDEuNy4wXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBvYmplY3RDYWNoaW5nOiAgICAgICAgICAgIG9iamVjdENhY2hpbmcsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IHByb3BlcnRpZXMgYXJlIGNoZWNrZWQgZm9yIGNhY2hlIGludmFsaWRhdGlvbi4gSW4gc29tZSBwYXJ0aWN1bGFyXG4gICAgICogc2l0dWF0aW9uIHlvdSBtYXkgd2FudCB0aGlzIHRvIGJlIGRpc2FibGVkICggc3ByYXkgYnJ1c2gsIHZlcnkgYmlnLCBncm91cHMpXG4gICAgICogb3IgaWYgeW91ciBhcHBsaWNhdGlvbiBkb2VzIG5vdCBhbGxvdyB5b3UgdG8gbW9kaWZ5IHByb3BlcnRpZXMgZm9yIGdyb3VwcyBjaGlsZCB5b3Ugd2FudFxuICAgICAqIHRvIGRpc2FibGUgaXQgZm9yIGdyb3Vwcy5cbiAgICAgKiBkZWZhdWx0IHRvIGZhbHNlXG4gICAgICogc2luY2UgMS43LjBcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBzdGF0ZWZ1bGxDYWNoZTogICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBjYWNoZSBkb2VzIG5vdCBnZXQgdXBkYXRlZCBkdXJpbmcgc2NhbGluZy4gVGhlIHBpY3R1cmUgd2lsbCBnZXQgYmxvY2t5IGlmIHNjYWxlZFxuICAgICAqIHRvbyBtdWNoIGFuZCB3aWxsIGJlIHJlZHJhd24gd2l0aCBjb3JyZWN0IGRldGFpbHMgYXQgdGhlIGVuZCBvZiBzY2FsaW5nLlxuICAgICAqIHRoaXMgc2V0dGluZyBpcyBwZXJmb3JtYW5jZSBhbmQgYXBwbGljYXRpb24gZGVwZW5kYW50LlxuICAgICAqIGRlZmF1bHQgdG8gdHJ1ZVxuICAgICAqIHNpbmNlIDEuNy4wXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBub1NjYWxlQ2FjaGU6ICAgICAgICAgICAgICB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiBgZmFsc2VgLCB0aGUgc3Rva2Ugd2lkdGggd2lsbCBzY2FsZSB3aXRoIHRoZSBvYmplY3QuXG4gICAgICogV2hlbiBgdHJ1ZWAsIHRoZSBzdHJva2Ugd2lsbCBhbHdheXMgbWF0Y2ggdGhlIGV4YWN0IHBpeGVsIHNpemUgZW50ZXJlZCBmb3Igc3Ryb2tlIHdpZHRoLlxuICAgICAqIHRoaXMgUHJvcGVydHkgZG9lcyBub3Qgd29yayBvbiBUZXh0IGNsYXNzZXMgb3IgZHJhd2luZyBjYWxsIHRoYXQgdXNlcyBzdHJva2VUZXh0LGZpbGxUZXh0IG1ldGhvZHNcbiAgICAgKiBkZWZhdWx0IHRvIGZhbHNlXG4gICAgICogQHNpbmNlIDIuNi4wXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgc3Ryb2tlVW5pZm9ybTogICAgICAgICAgICAgIGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiBzZXQgdG8gYHRydWVgLCBvYmplY3QncyBjYWNoZSB3aWxsIGJlIHJlcmVuZGVyZWQgbmV4dCByZW5kZXIgY2FsbC5cbiAgICAgKiBzaW5jZSAxLjcuMFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgZGlydHk6ICAgICAgICAgICAgICAgIHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBrZWVwcyB0aGUgdmFsdWUgb2YgdGhlIGxhc3QgaG92ZXJlZCBjb3JuZXIgZHVyaW5nIG1vdXNlIG1vdmUuXG4gICAgICogMCBpcyBubyBjb3JuZXIsIG9yICdtdCcsICdtbCcsICdtdHInIGV0Yy4uXG4gICAgICogSXQgc2hvdWxkIGJlIHByaXZhdGUsIGJ1dCB0aGVyZSBpcyBubyBoYXJtIGluIHVzaW5nIGl0IGFzXG4gICAgICogYSByZWFkLW9ubHkgcHJvcGVydHkuXG4gICAgICogQHR5cGUgbnVtYmVyfHN0cmluZ3xhbnlcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgX19jb3JuZXI6IDAsXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBmaWxsIG9yIHRoZSBzdHJva2UgaXMgZHJhd24gZmlyc3QgKG9uZSBvZiBcImZpbGxcIiBvciBcInN0cm9rZVwiKVxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcGFpbnRGaXJzdDogICAgICAgICAgICdmaWxsJyxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gJ2Rvd24nLCBvYmplY3QgaXMgc2V0IHRvIGFjdGl2ZSBvbiBtb3VzZWRvd24vdG91Y2hzdGFydFxuICAgICAqIFdoZW4gJ3VwJywgb2JqZWN0IGlzIHNldCB0byBhY3RpdmUgb24gbW91c2V1cC90b3VjaGVuZFxuICAgICAqIEV4cGVyaW1lbnRhbC4gTGV0J3Mgc2VlIGlmIHRoaXMgYnJlYWtzIGFueXRoaW5nIGJlZm9yZSBzdXBwb3J0aW5nIG9mZmljaWFsbHlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIHNpbmNlIDQuNC4wXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHQgJ2Rvd24nXG4gICAgICovXG4gICAgYWN0aXZlT246ICAgICAgICAgICAnZG93bicsXG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIHByb3BlcnRpZXMgdG8gY29uc2lkZXIgd2hlbiBjaGVja2luZyBpZiBzdGF0ZVxuICAgICAqIG9mIGFuIG9iamVjdCBpcyBjaGFuZ2VkIChmYWJyaWMuT2JqZWN0I2hhc1N0YXRlQ2hhbmdlZClcbiAgICAgKiBhcyB3ZWxsIGFzIGZvciBoaXN0b3J5ICh1bmRvL3JlZG8pIHB1cnBvc2VzXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKi9cbiAgICBzdGF0ZVByb3BlcnRpZXM6IChcbiAgICAgICd0b3AgbGVmdCB3aWR0aCBoZWlnaHQgc2NhbGVYIHNjYWxlWSBmbGlwWCBmbGlwWSBvcmlnaW5YIG9yaWdpblkgdHJhbnNmb3JtTWF0cml4ICcgK1xuICAgICAgJ3N0cm9rZSBzdHJva2VXaWR0aCBzdHJva2VEYXNoQXJyYXkgc3Ryb2tlTGluZUNhcCBzdHJva2VEYXNoT2Zmc2V0IHN0cm9rZUxpbmVKb2luIHN0cm9rZU1pdGVyTGltaXQgJyArXG4gICAgICAnYW5nbGUgb3BhY2l0eSBmaWxsIGdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiBzaGFkb3cgdmlzaWJsZSBiYWNrZ3JvdW5kQ29sb3IgJyArXG4gICAgICAnc2tld1ggc2tld1kgZmlsbFJ1bGUgcGFpbnRGaXJzdCBjbGlwUGF0aCBzdHJva2VVbmlmb3JtJ1xuICAgICkuc3BsaXQoJyAnKSxcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgcHJvcGVydGllcyB0byBjb25zaWRlciB3aGVuIGNoZWNraW5nIGlmIGNhY2hlIG5lZWRzIHJlZnJlc2hcbiAgICAgKiBUaG9zZSBwcm9wZXJ0aWVzIGFyZSBjaGVja2VkIGJ5IHN0YXRlZnVsbENhY2hlIE9OICggb3IgbGF6eSBtb2RlIGlmIHdlIHdhbnQgKSBvciBmcm9tIHNpbmdsZVxuICAgICAqIGNhbGxzIHRvIE9iamVjdC5zZXQoa2V5LCB2YWx1ZSkuIElmIHRoZSBrZXkgaXMgaW4gdGhpcyBsaXN0LCB0aGUgb2JqZWN0IGlzIG1hcmtlZCBhcyBkaXJ0eVxuICAgICAqIGFuZCByZWZyZXNoZWQgYXQgdGhlIG5leHQgcmVuZGVyXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKi9cbiAgICBjYWNoZVByb3BlcnRpZXM6IChcbiAgICAgICdmaWxsIHN0cm9rZSBzdHJva2VXaWR0aCBzdHJva2VEYXNoQXJyYXkgd2lkdGggaGVpZ2h0IHBhaW50Rmlyc3Qgc3Ryb2tlVW5pZm9ybScgK1xuICAgICAgJyBzdHJva2VMaW5lQ2FwIHN0cm9rZURhc2hPZmZzZXQgc3Ryb2tlTGluZUpvaW4gc3Ryb2tlTWl0ZXJMaW1pdCBiYWNrZ3JvdW5kQ29sb3IgY2xpcFBhdGgnXG4gICAgKS5zcGxpdCgnICcpLFxuXG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBwcm9wZXJ0aWVzIHRvIGNvbnNpZGVyIGZvciBhbmltYXRpbmcgY29sb3JzLlxuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICovXG4gICAgY29sb3JQcm9wZXJ0aWVzOiAoXG4gICAgICAnZmlsbCBzdHJva2UgYmFja2dyb3VuZENvbG9yJ1xuICAgICkuc3BsaXQoJyAnKSxcblxuICAgIC8qKlxuICAgICAqIGEgZmFicmljT2JqZWN0IHRoYXQsIHdpdGhvdXQgc3Ryb2tlIGRlZmluZSBhIGNsaXBwaW5nIGFyZWEgd2l0aCB0aGVpciBzaGFwZS4gZmlsbGVkIGluIGJsYWNrXG4gICAgICogdGhlIGNsaXBQYXRoIG9iamVjdCBnZXRzIHVzZWQgd2hlbiB0aGUgb2JqZWN0IGhhcyByZW5kZXJlZCwgYW5kIHRoZSBjb250ZXh0IGlzIHBsYWNlZCBpbiB0aGUgY2VudGVyXG4gICAgICogb2YgdGhlIG9iamVjdCBjYWNoZUNhbnZhcy5cbiAgICAgKiBJZiB5b3Ugd2FudCAwLDAgb2YgYSBjbGlwUGF0aCB0byBhbGlnbiB3aXRoIGFuIG9iamVjdCBjZW50ZXIsIHVzZSBjbGlwUGF0aC5vcmlnaW5YL1kgdG8gJ2NlbnRlcidcbiAgICAgKiBAdHlwZSBmYWJyaWMuT2JqZWN0XG4gICAgICovXG4gICAgY2xpcFBhdGg6IHVuZGVmaW5lZCxcblxuICAgIC8qKlxuICAgICAqIE1lYW5pbmdmdWwgT05MWSB3aGVuIHRoZSBvYmplY3QgaXMgdXNlZCBhcyBjbGlwUGF0aC5cbiAgICAgKiBpZiB0cnVlLCB0aGUgY2xpcFBhdGggd2lsbCBtYWtlIHRoZSBvYmplY3QgY2xpcCB0byB0aGUgb3V0c2lkZSBvZiB0aGUgY2xpcFBhdGhcbiAgICAgKiBzaW5jZSAyLjQuMFxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGludmVydGVkOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIE1lYW5pbmdmdWwgT05MWSB3aGVuIHRoZSBvYmplY3QgaXMgdXNlZCBhcyBjbGlwUGF0aC5cbiAgICAgKiBpZiB0cnVlLCB0aGUgY2xpcFBhdGggd2lsbCBoYXZlIGl0cyB0b3AgYW5kIGxlZnQgcmVsYXRpdmUgdG8gY2FudmFzLCBhbmQgd2lsbFxuICAgICAqIG5vdCBiZSBpbmZsdWVuY2VkIGJ5IHRoZSBvYmplY3QgdHJhbnNmb3JtLiBUaGlzIHdpbGwgbWFrZSB0aGUgY2xpcFBhdGggcmVsYXRpdmVcbiAgICAgKiB0byB0aGUgY2FudmFzLCBidXQgY2xpcHBpbmcganVzdCBhIHBhcnRpY3VsYXIgb2JqZWN0LlxuICAgICAqIFdBUk5JTkcgdGhpcyBpcyBiZXRhLCB0aGlzIGZlYXR1cmUgbWF5IGNoYW5nZSBvciBiZSByZW5hbWVkLlxuICAgICAqIHNpbmNlIDIuNC4wXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgYWJzb2x1dGVQb3NpdGlvbmVkOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgdGhlIGNhbnZhcyB1c2VkIHRvIGtlZXAgdGhlIGNhY2hlZCBjb3B5IG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGVDYWNoZUNhbnZhczogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jYWNoZVByb3BlcnRpZXMgPSB7fTtcbiAgICAgIHRoaXMuX2NhY2hlQ2FudmFzID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgdGhpcy5fY2FjaGVDb250ZXh0ID0gdGhpcy5fY2FjaGVDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIHRoaXMuX3VwZGF0ZUNhY2hlQ2FudmFzKCk7XG4gICAgICAvLyBpZiBjYW52YXMgZ2V0cyBjcmVhdGVkLCBpcyBlbXB0eSwgc28gZGlydHkuXG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTGltaXQgdGhlIGNhY2hlIGRpbWVuc2lvbnMgc28gdGhhdCBYICogWSBkbyBub3QgY3Jvc3MgZmFicmljLnBlcmZMaW1pdFNpemVUb3RhbFxuICAgICAqIGFuZCBlYWNoIHNpZGUgZG8gbm90IGNyb3NzIGZhYnJpYy5jYWNoZVNpZGVMaW1pdFxuICAgICAqIHRob3NlIG51bWJlcnMgYXJlIGNvbmZpZ3VyYWJsZSBzbyB0aGF0IHlvdSBjYW4gZ2V0IGFzIG11Y2ggZGV0YWlsIGFzIHlvdSB3YW50XG4gICAgICogbWFraW5nIGJhcmdhaW4gd2l0aCBwZXJmb3JtYW5jZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRpbXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGltcy53aWR0aCB3aWR0aCBvZiBjYW52YXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGltcy5oZWlnaHQgaGVpZ2h0IG9mIGNhbnZhc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkaW1zLnpvb21YIHpvb21YIHpvb20gdmFsdWUgdG8gdW5zY2FsZSB0aGUgY2FudmFzIGJlZm9yZSBkcmF3aW5nIGNhY2hlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRpbXMuem9vbVkgem9vbVkgem9vbSB2YWx1ZSB0byB1bnNjYWxlIHRoZSBjYW52YXMgYmVmb3JlIGRyYXdpbmcgY2FjaGVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9LndpZHRoIHdpZHRoIG9mIGNhbnZhc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0uaGVpZ2h0IGhlaWdodCBvZiBjYW52YXNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9Lnpvb21YIHpvb21YIHpvb20gdmFsdWUgdG8gdW5zY2FsZSB0aGUgY2FudmFzIGJlZm9yZSBkcmF3aW5nIGNhY2hlXG4gICAgICogQHJldHVybiB7T2JqZWN0fS56b29tWSB6b29tWSB6b29tIHZhbHVlIHRvIHVuc2NhbGUgdGhlIGNhbnZhcyBiZWZvcmUgZHJhd2luZyBjYWNoZVxuICAgICAqL1xuICAgIF9saW1pdENhY2hlU2l6ZTogZnVuY3Rpb24oZGltcykge1xuICAgICAgdmFyIHBlcmZMaW1pdFNpemVUb3RhbCA9IGZhYnJpYy5wZXJmTGltaXRTaXplVG90YWwsXG4gICAgICAgICAgd2lkdGggPSBkaW1zLndpZHRoLCBoZWlnaHQgPSBkaW1zLmhlaWdodCxcbiAgICAgICAgICBtYXggPSBmYWJyaWMubWF4Q2FjaGVTaWRlTGltaXQsIG1pbiA9IGZhYnJpYy5taW5DYWNoZVNpZGVMaW1pdDtcbiAgICAgIGlmICh3aWR0aCA8PSBtYXggJiYgaGVpZ2h0IDw9IG1heCAmJiB3aWR0aCAqIGhlaWdodCA8PSBwZXJmTGltaXRTaXplVG90YWwpIHtcbiAgICAgICAgaWYgKHdpZHRoIDwgbWluKSB7XG4gICAgICAgICAgZGltcy53aWR0aCA9IG1pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVpZ2h0IDwgbWluKSB7XG4gICAgICAgICAgZGltcy5oZWlnaHQgPSBtaW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpbXM7XG4gICAgICB9XG4gICAgICB2YXIgYXIgPSB3aWR0aCAvIGhlaWdodCwgbGltaXRlZERpbXMgPSBmYWJyaWMudXRpbC5saW1pdERpbXNCeUFyZWEoYXIsIHBlcmZMaW1pdFNpemVUb3RhbCksXG4gICAgICAgICAgY2FwVmFsdWUgPSBmYWJyaWMudXRpbC5jYXBWYWx1ZSxcbiAgICAgICAgICB4ID0gY2FwVmFsdWUobWluLCBsaW1pdGVkRGltcy54LCBtYXgpLFxuICAgICAgICAgIHkgPSBjYXBWYWx1ZShtaW4sIGxpbWl0ZWREaW1zLnksIG1heCk7XG4gICAgICBpZiAod2lkdGggPiB4KSB7XG4gICAgICAgIGRpbXMuem9vbVggLz0gd2lkdGggLyB4O1xuICAgICAgICBkaW1zLndpZHRoID0geDtcbiAgICAgICAgZGltcy5jYXBwZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGhlaWdodCA+IHkpIHtcbiAgICAgICAgZGltcy56b29tWSAvPSBoZWlnaHQgLyB5O1xuICAgICAgICBkaW1zLmhlaWdodCA9IHk7XG4gICAgICAgIGRpbXMuY2FwcGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkaW1zO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGRpbWVuc2lvbiBhbmQgdGhlIHpvb20gbGV2ZWwgbmVlZGVkIHRvIGNyZWF0ZSBhIGNhY2hlIGNhbnZhc1xuICAgICAqIGJpZyBlbm91Z2ggdG8gaG9zdCB0aGUgb2JqZWN0IHRvIGJlIGNhY2hlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0ueCB3aWR0aCBvZiBvYmplY3QgdG8gYmUgY2FjaGVkXG4gICAgICogQHJldHVybiB7T2JqZWN0fS55IGhlaWdodCBvZiBvYmplY3QgdG8gYmUgY2FjaGVkXG4gICAgICogQHJldHVybiB7T2JqZWN0fS53aWR0aCB3aWR0aCBvZiBjYW52YXNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9LmhlaWdodCBoZWlnaHQgb2YgY2FudmFzXG4gICAgICogQHJldHVybiB7T2JqZWN0fS56b29tWCB6b29tWCB6b29tIHZhbHVlIHRvIHVuc2NhbGUgdGhlIGNhbnZhcyBiZWZvcmUgZHJhd2luZyBjYWNoZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0uem9vbVkgem9vbVkgem9vbSB2YWx1ZSB0byB1bnNjYWxlIHRoZSBjYW52YXMgYmVmb3JlIGRyYXdpbmcgY2FjaGVcbiAgICAgKi9cbiAgICBfZ2V0Q2FjaGVDYW52YXNEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvYmplY3RTY2FsZSA9IHRoaXMuZ2V0VG90YWxPYmplY3RTY2FsaW5nKCksXG4gICAgICAgICAgLy8gY2FjdWxhdGUgZGltZW5zaW9ucyB3aXRob3V0IHNrZXdpbmdcbiAgICAgICAgICBkaW0gPSB0aGlzLl9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoMCwgMCksXG4gICAgICAgICAgbmVlZGVkWCA9IGRpbS54ICogb2JqZWN0U2NhbGUuc2NhbGVYIC8gdGhpcy5zY2FsZVgsXG4gICAgICAgICAgbmVlZGVkWSA9IGRpbS55ICogb2JqZWN0U2NhbGUuc2NhbGVZIC8gdGhpcy5zY2FsZVk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAvLyBmb3Igc3VyZSB0aGlzIEFMSUFTSU5HX0xJTUlUIGlzIHNsaWdodGx5IGNyZWF0aW5nIHByb2JsZW1cbiAgICAgICAgLy8gaW4gc2l0dWF0aW9uIGluIHdoaWNoIHRoZSBjYWNoZSBjYW52YXMgZ2V0cyBhbiB1cHBlciBsaW1pdFxuICAgICAgICAvLyBhbHNvIG9iamVjdFNjYWxlIGNvbnRhaW5zIGFscmVhZHkgc2NhbGVYIGFuZCBzY2FsZVlcbiAgICAgICAgd2lkdGg6IG5lZWRlZFggKyBBTElBU0lOR19MSU1JVCxcbiAgICAgICAgaGVpZ2h0OiBuZWVkZWRZICsgQUxJQVNJTkdfTElNSVQsXG4gICAgICAgIHpvb21YOiBvYmplY3RTY2FsZS5zY2FsZVgsXG4gICAgICAgIHpvb21ZOiBvYmplY3RTY2FsZS5zY2FsZVksXG4gICAgICAgIHg6IG5lZWRlZFgsXG4gICAgICAgIHk6IG5lZWRlZFlcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBjYW52YXMgZm9yIGNhY2hlXG4gICAgICogcmV0dXJucyB0cnVlIG9yIGZhbHNlIGlmIGNhbnZhcyBuZWVkZWQgcmVzaXplLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgY2FudmFzIGhhcyBiZWVuIHJlc2l6ZWRcbiAgICAgKi9cbiAgICBfdXBkYXRlQ2FjaGVDYW52YXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRhcmdldENhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgaWYgKHRoaXMubm9TY2FsZUNhY2hlICYmIHRhcmdldENhbnZhcyAmJiB0YXJnZXRDYW52YXMuX2N1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRhcmdldENhbnZhcy5fY3VycmVudFRyYW5zZm9ybS50YXJnZXQsXG4gICAgICAgICAgICBhY3Rpb24gPSB0YXJnZXRDYW52YXMuX2N1cnJlbnRUcmFuc2Zvcm0uYWN0aW9uO1xuICAgICAgICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIGFjdGlvbi5zbGljZSAmJiBhY3Rpb24uc2xpY2UoMCwgNSkgPT09ICdzY2FsZScpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjYW52YXMgPSB0aGlzLl9jYWNoZUNhbnZhcyxcbiAgICAgICAgICBkaW1zID0gdGhpcy5fbGltaXRDYWNoZVNpemUodGhpcy5fZ2V0Q2FjaGVDYW52YXNEaW1lbnNpb25zKCkpLFxuICAgICAgICAgIG1pbkNhY2hlU2l6ZSA9IGZhYnJpYy5taW5DYWNoZVNpZGVMaW1pdCxcbiAgICAgICAgICB3aWR0aCA9IGRpbXMud2lkdGgsIGhlaWdodCA9IGRpbXMuaGVpZ2h0LCBkcmF3aW5nV2lkdGgsIGRyYXdpbmdIZWlnaHQsXG4gICAgICAgICAgem9vbVggPSBkaW1zLnpvb21YLCB6b29tWSA9IGRpbXMuem9vbVksXG4gICAgICAgICAgZGltZW5zaW9uc0NoYW5nZWQgPSB3aWR0aCAhPT0gdGhpcy5jYWNoZVdpZHRoIHx8IGhlaWdodCAhPT0gdGhpcy5jYWNoZUhlaWdodCxcbiAgICAgICAgICB6b29tQ2hhbmdlZCA9IHRoaXMuem9vbVggIT09IHpvb21YIHx8IHRoaXMuem9vbVkgIT09IHpvb21ZLFxuICAgICAgICAgIHNob3VsZFJlZHJhdyA9IGRpbWVuc2lvbnNDaGFuZ2VkIHx8IHpvb21DaGFuZ2VkLFxuICAgICAgICAgIGFkZGl0aW9uYWxXaWR0aCA9IDAsIGFkZGl0aW9uYWxIZWlnaHQgPSAwLCBzaG91bGRSZXNpemVDYW52YXMgPSBmYWxzZTtcbiAgICAgIGlmIChkaW1lbnNpb25zQ2hhbmdlZCkge1xuICAgICAgICB2YXIgY2FudmFzV2lkdGggPSB0aGlzLl9jYWNoZUNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgIGNhbnZhc0hlaWdodCA9IHRoaXMuX2NhY2hlQ2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgIHNpemVHcm93aW5nID0gd2lkdGggPiBjYW52YXNXaWR0aCB8fCBoZWlnaHQgPiBjYW52YXNIZWlnaHQsXG4gICAgICAgICAgICBzaXplU2hyaW5raW5nID0gKHdpZHRoIDwgY2FudmFzV2lkdGggKiAwLjkgfHwgaGVpZ2h0IDwgY2FudmFzSGVpZ2h0ICogMC45KSAmJlxuICAgICAgICAgICAgICBjYW52YXNXaWR0aCA+IG1pbkNhY2hlU2l6ZSAmJiBjYW52YXNIZWlnaHQgPiBtaW5DYWNoZVNpemU7XG4gICAgICAgIHNob3VsZFJlc2l6ZUNhbnZhcyA9IHNpemVHcm93aW5nIHx8IHNpemVTaHJpbmtpbmc7XG4gICAgICAgIGlmIChzaXplR3Jvd2luZyAmJiAhZGltcy5jYXBwZWQgJiYgKHdpZHRoID4gbWluQ2FjaGVTaXplIHx8IGhlaWdodCA+IG1pbkNhY2hlU2l6ZSkpIHtcbiAgICAgICAgICBhZGRpdGlvbmFsV2lkdGggPSB3aWR0aCAqIDAuMTtcbiAgICAgICAgICBhZGRpdGlvbmFsSGVpZ2h0ID0gaGVpZ2h0ICogMC4xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGZhYnJpYy5UZXh0ICYmIHRoaXMucGF0aCkge1xuICAgICAgICBzaG91bGRSZWRyYXcgPSB0cnVlO1xuICAgICAgICBzaG91bGRSZXNpemVDYW52YXMgPSB0cnVlO1xuICAgICAgICBhZGRpdGlvbmFsV2lkdGggKz0gdGhpcy5nZXRIZWlnaHRPZkxpbmUoMCkgKiB0aGlzLnpvb21YO1xuICAgICAgICBhZGRpdGlvbmFsSGVpZ2h0ICs9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKDApICogdGhpcy56b29tWTtcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRSZWRyYXcpIHtcbiAgICAgICAgaWYgKHNob3VsZFJlc2l6ZUNhbnZhcykge1xuICAgICAgICAgIGNhbnZhcy53aWR0aCA9IE1hdGguY2VpbCh3aWR0aCArIGFkZGl0aW9uYWxXaWR0aCk7XG4gICAgICAgICAgY2FudmFzLmhlaWdodCA9IE1hdGguY2VpbChoZWlnaHQgKyBhZGRpdGlvbmFsSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9jYWNoZUNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICAgIHRoaXMuX2NhY2hlQ29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBkcmF3aW5nV2lkdGggPSBkaW1zLnggLyAyO1xuICAgICAgICBkcmF3aW5nSGVpZ2h0ID0gZGltcy55IC8gMjtcbiAgICAgICAgdGhpcy5jYWNoZVRyYW5zbGF0aW9uWCA9IE1hdGgucm91bmQoY2FudmFzLndpZHRoIC8gMiAtIGRyYXdpbmdXaWR0aCkgKyBkcmF3aW5nV2lkdGg7XG4gICAgICAgIHRoaXMuY2FjaGVUcmFuc2xhdGlvblkgPSBNYXRoLnJvdW5kKGNhbnZhcy5oZWlnaHQgLyAyIC0gZHJhd2luZ0hlaWdodCkgKyBkcmF3aW5nSGVpZ2h0O1xuICAgICAgICB0aGlzLmNhY2hlV2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5jYWNoZUhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5fY2FjaGVDb250ZXh0LnRyYW5zbGF0ZSh0aGlzLmNhY2hlVHJhbnNsYXRpb25YLCB0aGlzLmNhY2hlVHJhbnNsYXRpb25ZKTtcbiAgICAgICAgdGhpcy5fY2FjaGVDb250ZXh0LnNjYWxlKHpvb21YLCB6b29tWSk7XG4gICAgICAgIHRoaXMuem9vbVggPSB6b29tWDtcbiAgICAgICAgdGhpcy56b29tWSA9IHpvb21ZO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBvYmplY3QncyBwcm9wZXJ0aWVzIGZyb20gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKi9cbiAgICBzZXRPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB0aGlzLl9zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgdGhpcy5faW5pdEdyYWRpZW50KG9wdGlvbnMuZmlsbCwgJ2ZpbGwnKTtcbiAgICAgIHRoaXMuX2luaXRHcmFkaWVudChvcHRpb25zLnN0cm9rZSwgJ3N0cm9rZScpO1xuICAgICAgdGhpcy5faW5pdFBhdHRlcm4ob3B0aW9ucy5maWxsLCAnZmlsbCcpO1xuICAgICAgdGhpcy5faW5pdFBhdHRlcm4ob3B0aW9ucy5zdHJva2UsICdzdHJva2UnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBjb250ZXh0IHdoZW4gcmVuZGVyaW5nIGFuIG9iamVjdFxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dFxuICAgICAqL1xuICAgIHRyYW5zZm9ybTogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB2YXIgbmVlZEZ1bGxUcmFuc2Zvcm0gPSAodGhpcy5ncm91cCAmJiAhdGhpcy5ncm91cC5fdHJhbnNmb3JtRG9uZSkgfHxcbiAgICAgICAgICh0aGlzLmdyb3VwICYmIHRoaXMuY2FudmFzICYmIGN0eCA9PT0gdGhpcy5jYW52YXMuY29udGV4dFRvcCk7XG4gICAgICB2YXIgbSA9IHRoaXMuY2FsY1RyYW5zZm9ybU1hdHJpeCghbmVlZEZ1bGxUcmFuc2Zvcm0pO1xuICAgICAgY3R4LnRyYW5zZm9ybShtWzBdLCBtWzFdLCBtWzJdLCBtWzNdLCBtWzRdLCBtWzVdKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24ocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgdmFyIE5VTV9GUkFDVElPTl9ESUdJVFMgPSBmYWJyaWMuT2JqZWN0Lk5VTV9GUkFDVElPTl9ESUdJVFMsXG5cbiAgICAgICAgICBvYmplY3QgPSB7XG4gICAgICAgICAgICB0eXBlOiAgICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSxcbiAgICAgICAgICAgIHZlcnNpb246ICAgICAgICAgICAgICAgICAgZmFicmljLnZlcnNpb24sXG4gICAgICAgICAgICBvcmlnaW5YOiAgICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luWCxcbiAgICAgICAgICAgIG9yaWdpblk6ICAgICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5ZLFxuICAgICAgICAgICAgbGVmdDogICAgICAgICAgICAgICAgICAgICB0b0ZpeGVkKHRoaXMubGVmdCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgICB0b3A6ICAgICAgICAgICAgICAgICAgICAgIHRvRml4ZWQodGhpcy50b3AsIE5VTV9GUkFDVElPTl9ESUdJVFMpLFxuICAgICAgICAgICAgd2lkdGg6ICAgICAgICAgICAgICAgICAgICB0b0ZpeGVkKHRoaXMud2lkdGgsIE5VTV9GUkFDVElPTl9ESUdJVFMpLFxuICAgICAgICAgICAgaGVpZ2h0OiAgICAgICAgICAgICAgICAgICB0b0ZpeGVkKHRoaXMuaGVpZ2h0LCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAgIGZpbGw6ICAgICAgICAgICAgICAgICAgICAgKHRoaXMuZmlsbCAmJiB0aGlzLmZpbGwudG9PYmplY3QpID8gdGhpcy5maWxsLnRvT2JqZWN0KCkgOiB0aGlzLmZpbGwsXG4gICAgICAgICAgICBzdHJva2U6ICAgICAgICAgICAgICAgICAgICh0aGlzLnN0cm9rZSAmJiB0aGlzLnN0cm9rZS50b09iamVjdCkgPyB0aGlzLnN0cm9rZS50b09iamVjdCgpIDogdGhpcy5zdHJva2UsXG4gICAgICAgICAgICBzdHJva2VXaWR0aDogICAgICAgICAgICAgIHRvRml4ZWQodGhpcy5zdHJva2VXaWR0aCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6ICAgICAgICAgIHRoaXMuc3Ryb2tlRGFzaEFycmF5ID8gdGhpcy5zdHJva2VEYXNoQXJyYXkuY29uY2F0KCkgOiB0aGlzLnN0cm9rZURhc2hBcnJheSxcbiAgICAgICAgICAgIHN0cm9rZUxpbmVDYXA6ICAgICAgICAgICAgdGhpcy5zdHJva2VMaW5lQ2FwLFxuICAgICAgICAgICAgc3Ryb2tlRGFzaE9mZnNldDogICAgICAgICB0aGlzLnN0cm9rZURhc2hPZmZzZXQsXG4gICAgICAgICAgICBzdHJva2VMaW5lSm9pbjogICAgICAgICAgIHRoaXMuc3Ryb2tlTGluZUpvaW4sXG4gICAgICAgICAgICBzdHJva2VVbmlmb3JtOiAgICAgICAgICAgIHRoaXMuc3Ryb2tlVW5pZm9ybSxcbiAgICAgICAgICAgIHN0cm9rZU1pdGVyTGltaXQ6ICAgICAgICAgdG9GaXhlZCh0aGlzLnN0cm9rZU1pdGVyTGltaXQsIE5VTV9GUkFDVElPTl9ESUdJVFMpLFxuICAgICAgICAgICAgc2NhbGVYOiAgICAgICAgICAgICAgICAgICB0b0ZpeGVkKHRoaXMuc2NhbGVYLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAgIHNjYWxlWTogICAgICAgICAgICAgICAgICAgdG9GaXhlZCh0aGlzLnNjYWxlWSwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgICBhbmdsZTogICAgICAgICAgICAgICAgICAgIHRvRml4ZWQodGhpcy5hbmdsZSwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgICBmbGlwWDogICAgICAgICAgICAgICAgICAgIHRoaXMuZmxpcFgsXG4gICAgICAgICAgICBmbGlwWTogICAgICAgICAgICAgICAgICAgIHRoaXMuZmxpcFksXG4gICAgICAgICAgICBvcGFjaXR5OiAgICAgICAgICAgICAgICAgIHRvRml4ZWQodGhpcy5vcGFjaXR5LCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAgIHNoYWRvdzogICAgICAgICAgICAgICAgICAgKHRoaXMuc2hhZG93ICYmIHRoaXMuc2hhZG93LnRvT2JqZWN0KSA/IHRoaXMuc2hhZG93LnRvT2JqZWN0KCkgOiB0aGlzLnNoYWRvdyxcbiAgICAgICAgICAgIHZpc2libGU6ICAgICAgICAgICAgICAgICAgdGhpcy52aXNpYmxlLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAgICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIGZpbGxSdWxlOiAgICAgICAgICAgICAgICAgdGhpcy5maWxsUnVsZSxcbiAgICAgICAgICAgIHBhaW50Rmlyc3Q6ICAgICAgICAgICAgICAgdGhpcy5wYWludEZpcnN0LFxuICAgICAgICAgICAgZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uOiB0aGlzLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbixcbiAgICAgICAgICAgIHNrZXdYOiAgICAgICAgICAgICAgICAgICAgdG9GaXhlZCh0aGlzLnNrZXdYLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAgIHNrZXdZOiAgICAgICAgICAgICAgICAgICAgdG9GaXhlZCh0aGlzLnNrZXdZLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5jbGlwUGF0aCAmJiAhdGhpcy5jbGlwUGF0aC5leGNsdWRlRnJvbUV4cG9ydCkge1xuICAgICAgICBvYmplY3QuY2xpcFBhdGggPSB0aGlzLmNsaXBQYXRoLnRvT2JqZWN0KHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgICBvYmplY3QuY2xpcFBhdGguaW52ZXJ0ZWQgPSB0aGlzLmNsaXBQYXRoLmludmVydGVkO1xuICAgICAgICBvYmplY3QuY2xpcFBhdGguYWJzb2x1dGVQb3NpdGlvbmVkID0gdGhpcy5jbGlwUGF0aC5hYnNvbHV0ZVBvc2l0aW9uZWQ7XG4gICAgICB9XG5cbiAgICAgIGZhYnJpYy51dGlsLnBvcHVsYXRlV2l0aFByb3BlcnRpZXModGhpcywgb2JqZWN0LCBwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICAgIGlmICghdGhpcy5pbmNsdWRlRGVmYXVsdFZhbHVlcykge1xuICAgICAgICBvYmplY3QgPSB0aGlzLl9yZW1vdmVEZWZhdWx0VmFsdWVzKG9iamVjdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgKGRhdGFsZXNzKSBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b0RhdGFsZXNzT2JqZWN0OiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICAvLyB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHN1YmNsYXNzZXNcbiAgICAgIHJldHVybiB0aGlzLnRvT2JqZWN0KHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICAgKi9cbiAgICBfcmVtb3ZlRGVmYXVsdFZhbHVlczogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcHJvdG90eXBlID0gZmFicmljLnV0aWwuZ2V0S2xhc3Mob2JqZWN0LnR5cGUpLnByb3RvdHlwZSxcbiAgICAgICAgICBzdGF0ZVByb3BlcnRpZXMgPSBwcm90b3R5cGUuc3RhdGVQcm9wZXJ0aWVzO1xuICAgICAgc3RhdGVQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICBpZiAocHJvcCA9PT0gJ2xlZnQnIHx8IHByb3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RbcHJvcF0gPT09IHByb3RvdHlwZVtwcm9wXSkge1xuICAgICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gYmFzaWNhbGx5IGEgY2hlY2sgZm9yIFtdID09PSBbXVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3RbcHJvcF0pICYmIEFycmF5LmlzQXJyYXkocHJvdG90eXBlW3Byb3BdKVxuICAgICAgICAgICYmIG9iamVjdFtwcm9wXS5sZW5ndGggPT09IDAgJiYgcHJvdG90eXBlW3Byb3BdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnIzxmYWJyaWMuJyArIGNhcGl0YWxpemUodGhpcy50eXBlKSArICc+JztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBvYmplY3Qgc2NhbGUgZmFjdG9yIGNvdW50aW5nIGFsc28gdGhlIGdyb3VwIHNjYWxpbmdcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCB3aXRoIHNjYWxlWCBhbmQgc2NhbGVZIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBnZXRPYmplY3RTY2FsaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIHRoZSBvYmplY3QgaXMgYSB0b3AgbGV2ZWwgb25lLCBvbiB0aGUgY2FudmFzLCB3ZSBnbyBmb3Igc2ltcGxlIGFyaXRtZXRpY1xuICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBjb21wbGV4IG1ldGhvZCB3aXRoIGFuZ2xlcyB3aWxsIHJldHVybiBhcHByb3hpbWF0aW9ucyBhbmQgZGVjaW1hbHNcbiAgICAgIC8vIGFuZCB3aWxsIGxpa2VseSBraWxsIHRoZSBjYWNoZSB3aGVuIG5vdCBuZWVkZWRcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWJyaWNqcy9mYWJyaWMuanMvaXNzdWVzLzcxNTdcbiAgICAgIGlmICghdGhpcy5ncm91cCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNjYWxlWDogdGhpcy5zY2FsZVgsXG4gICAgICAgICAgc2NhbGVZOiB0aGlzLnNjYWxlWSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHdlIGFyZSBpbnNpZGUgYSBncm91cCB0b3RhbCB6b29tIGNhbGN1bGF0aW9uIGlzIGNvbXBsZXgsIHdlIGRlZmVyIHRvIGdlbmVyaWMgbWF0cmljZXNcbiAgICAgIHZhciBvcHRpb25zID0gZmFicmljLnV0aWwucXJEZWNvbXBvc2UodGhpcy5jYWxjVHJhbnNmb3JtTWF0cml4KCkpO1xuICAgICAgcmV0dXJuIHsgc2NhbGVYOiBNYXRoLmFicyhvcHRpb25zLnNjYWxlWCksIHNjYWxlWTogTWF0aC5hYnMob3B0aW9ucy5zY2FsZVkpIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgb2JqZWN0IHNjYWxlIGZhY3RvciBjb3VudGluZyBhbHNvIHRoZSBncm91cCBzY2FsaW5nLCB6b29tIGFuZCByZXRpbmFcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCB3aXRoIHNjYWxlWCBhbmQgc2NhbGVZIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBnZXRUb3RhbE9iamVjdFNjYWxpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjYWxlID0gdGhpcy5nZXRPYmplY3RTY2FsaW5nKCksIHNjYWxlWCA9IHNjYWxlLnNjYWxlWCwgc2NhbGVZID0gc2NhbGUuc2NhbGVZO1xuICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgIHZhciB6b29tID0gdGhpcy5jYW52YXMuZ2V0Wm9vbSgpO1xuICAgICAgICB2YXIgcmV0aW5hID0gdGhpcy5jYW52YXMuZ2V0UmV0aW5hU2NhbGluZygpO1xuICAgICAgICBzY2FsZVggKj0gem9vbSAqIHJldGluYTtcbiAgICAgICAgc2NhbGVZICo9IHpvb20gKiByZXRpbmE7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBzY2FsZVg6IHNjYWxlWCwgc2NhbGVZOiBzY2FsZVkgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBvYmplY3Qgb3BhY2l0eSBjb3VudGluZyBhbHNvIHRoZSBncm91cCBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXRPYmplY3RPcGFjaXR5OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuICAgICAgaWYgKHRoaXMuZ3JvdXApIHtcbiAgICAgICAgb3BhY2l0eSAqPSB0aGlzLmdyb3VwLmdldE9iamVjdE9wYWNpdHkoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcGFjaXR5O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIF9zZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzaG91bGRDb25zdHJhaW5WYWx1ZSA9IChrZXkgPT09ICdzY2FsZVgnIHx8IGtleSA9PT0gJ3NjYWxlWScpLFxuICAgICAgICAgIGlzQ2hhbmdlZCA9IHRoaXNba2V5XSAhPT0gdmFsdWUsIGdyb3VwTmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgaWYgKHNob3VsZENvbnN0cmFpblZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5fY29uc3RyYWluU2NhbGUodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NjYWxlWCcgJiYgdmFsdWUgPCAwKSB7XG4gICAgICAgIHRoaXMuZmxpcFggPSAhdGhpcy5mbGlwWDtcbiAgICAgICAgdmFsdWUgKj0gLTE7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChrZXkgPT09ICdzY2FsZVknICYmIHZhbHVlIDwgMCkge1xuICAgICAgICB0aGlzLmZsaXBZID0gIXRoaXMuZmxpcFk7XG4gICAgICAgIHZhbHVlICo9IC0xO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoa2V5ID09PSAnc2hhZG93JyAmJiB2YWx1ZSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgZmFicmljLlNoYWRvdykpIHtcbiAgICAgICAgdmFsdWUgPSBuZXcgZmFicmljLlNoYWRvdyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChrZXkgPT09ICdkaXJ0eScgJiYgdGhpcy5ncm91cCkge1xuICAgICAgICB0aGlzLmdyb3VwLnNldCgnZGlydHknLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuXG4gICAgICBpZiAoaXNDaGFuZ2VkKSB7XG4gICAgICAgIGdyb3VwTmVlZHNVcGRhdGUgPSB0aGlzLmdyb3VwICYmIHRoaXMuZ3JvdXAuaXNPbkFDYWNoZSgpO1xuICAgICAgICBpZiAodGhpcy5jYWNoZVByb3BlcnRpZXMuaW5kZXhPZihrZXkpID4gLTEpIHtcbiAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICBncm91cE5lZWRzVXBkYXRlICYmIHRoaXMuZ3JvdXAuc2V0KCdkaXJ0eScsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGdyb3VwTmVlZHNVcGRhdGUgJiYgdGhpcy5zdGF0ZVByb3BlcnRpZXMuaW5kZXhPZihrZXkpID4gLTEpIHtcbiAgICAgICAgICB0aGlzLmdyb3VwLnNldCgnZGlydHknLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgY2FsbGJhY2sgZnVuY3Rpb24gaXMgY2FsbGVkIGJ5IHRoZSBwYXJlbnQgZ3JvdXAgb2YgYW4gb2JqZWN0IGV2ZXJ5XG4gICAgICogdGltZSBhIG5vbi1kZWxlZ2F0ZWQgcHJvcGVydHkgY2hhbmdlcyBvbiB0aGUgZ3JvdXAuIEl0IGlzIHBhc3NlZCB0aGUga2V5XG4gICAgICogYW5kIHZhbHVlIGFzIHBhcmFtZXRlcnMuIE5vdCBhZGRpbmcgaW4gdGhpcyBmdW5jdGlvbidzIHNpZ25hdHVyZSB0byBhdm9pZFxuICAgICAqIFRyYXZpcyBidWlsZCBlcnJvciBhYm91dCB1bnVzZWQgdmFyaWFibGVzLlxuICAgICAqL1xuICAgIHNldE9uR3JvdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaW1wbGVtZW50ZWQgYnkgc3ViLWNsYXNzZXMsIGFzIG5lZWRlZC5cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHZpZXdwb3J0VHJhbnNmb3JtIGZyb20gT2JqZWN0J3MgY2FudmFzIGlmIHBvc3NpYmxlXG4gICAgICogQG1ldGhvZCBnZXRWaWV3cG9ydFRyYW5zZm9ybVxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZVxuICAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICAqL1xuICAgIGdldFZpZXdwb3J0VHJhbnNmb3JtOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy52aWV3cG9ydFRyYW5zZm9ybSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXMudmlld3BvcnRUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFicmljLmlNYXRyaXguY29uY2F0KCk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogQHByaXZhdGVcbiAgICAgKiByZXR1cm4gaWYgdGhlIG9iamVjdCB3b3VsZCBiZSB2aXNpYmxlIGluIHJlbmRlcmluZ1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNOb3RWaXNpYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wYWNpdHkgPT09IDAgfHxcbiAgICAgICAgKCF0aGlzLndpZHRoICYmICF0aGlzLmhlaWdodCAmJiB0aGlzLnN0cm9rZVdpZHRoID09PSAwKSB8fFxuICAgICAgICAhdGhpcy52aXNpYmxlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIGFuIG9iamVjdCBvbiBhIHNwZWNpZmllZCBjb250ZXh0XG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIHJlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICAvLyBkbyBub3QgcmVuZGVyIGlmIHdpZHRoL2hlaWdodCBhcmUgemVyb3Mgb3Igb2JqZWN0IGlzIG5vdCB2aXNpYmxlXG4gICAgICBpZiAodGhpcy5pc05vdFZpc2libGUoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMuc2tpcE9mZnNjcmVlbiAmJiAhdGhpcy5ncm91cCAmJiAhdGhpcy5pc09uU2NyZWVuKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIHRoaXMuX3NldHVwQ29tcG9zaXRlT3BlcmF0aW9uKGN0eCk7XG4gICAgICB0aGlzLmRyYXdTZWxlY3Rpb25CYWNrZ3JvdW5kKGN0eCk7XG4gICAgICB0aGlzLnRyYW5zZm9ybShjdHgpO1xuICAgICAgdGhpcy5fc2V0T3BhY2l0eShjdHgpO1xuICAgICAgdGhpcy5fc2V0U2hhZG93KGN0eCwgdGhpcyk7XG4gICAgICBpZiAodGhpcy5zaG91bGRDYWNoZSgpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyQ2FjaGUoKTtcbiAgICAgICAgdGhpcy5kcmF3Q2FjaGVPbkNhbnZhcyhjdHgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZUNhY2hlQ2FudmFzKCk7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kcmF3T2JqZWN0KGN0eCk7XG4gICAgICAgIGlmICh0aGlzLm9iamVjdENhY2hpbmcgJiYgdGhpcy5zdGF0ZWZ1bGxDYWNoZSkge1xuICAgICAgICAgIHRoaXMuc2F2ZVN0YXRlKHsgcHJvcGVydHlTZXQ6ICdjYWNoZVByb3BlcnRpZXMnIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH0sXG5cbiAgICByZW5kZXJDYWNoZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBpZiAoIXRoaXMuX2NhY2hlQ2FudmFzIHx8ICF0aGlzLl9jYWNoZUNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlQ2FjaGVDYW52YXMoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzQ2FjaGVEaXJ0eSgpKSB7XG4gICAgICAgIHRoaXMuc3RhdGVmdWxsQ2FjaGUgJiYgdGhpcy5zYXZlU3RhdGUoeyBwcm9wZXJ0eVNldDogJ2NhY2hlUHJvcGVydGllcycgfSk7XG4gICAgICAgIHRoaXMuZHJhd09iamVjdCh0aGlzLl9jYWNoZUNvbnRleHQsIG9wdGlvbnMuZm9yQ2xpcHBpbmcpO1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBjYWNoZUNhbnZhcyBhbmQgaXRzIGRpbWVuc2lvbnMgZnJvbSB0aGUgb2JqZWN0c1xuICAgICAqL1xuICAgIF9yZW1vdmVDYWNoZUNhbnZhczogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jYWNoZUNhbnZhcyA9IG51bGw7XG4gICAgICB0aGlzLl9jYWNoZUNvbnRleHQgPSBudWxsO1xuICAgICAgdGhpcy5jYWNoZVdpZHRoID0gMDtcbiAgICAgIHRoaXMuY2FjaGVIZWlnaHQgPSAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gdHJ1ZSBpZiB0aGUgb2JqZWN0IHdpbGwgZHJhdyBhIHN0cm9rZVxuICAgICAqIERvZXMgbm90IGNvbnNpZGVyIHRleHQgc3R5bGVzLiBUaGlzIGlzIGp1c3QgYSBzaG9ydGN1dCB1c2VkIGF0IHJlbmRlcmluZyB0aW1lXG4gICAgICogV2Ugd2FudCBpdCB0byBiZSBhbiBhcHByb3hpbWF0aW9uIGFuZCBiZSBmYXN0LlxuICAgICAqIHdyb3RlIHRvIGF2b2lkIGV4dHJhIGNhY2hpbmcsIGl0IGhhcyB0byByZXR1cm4gdHJ1ZSB3aGVuIHN0cm9rZSBoYXBwZW5zLFxuICAgICAqIGNhbiBndWVzcyB3aGVuIGl0IHdpbGwgbm90IGhhcHBlbiBhdCAxMDAlIGNoYW5jZSwgZG9lcyBub3QgbWF0dGVyIGlmIGl0IG1pc3Nlc1xuICAgICAqIHNvbWUgdXNlIGNhc2Ugd2hlcmUgdGhlIHN0cm9rZSBpcyBpbnZpc2libGUuXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQHJldHVybnMgQm9vbGVhblxuICAgICAqL1xuICAgIGhhc1N0cm9rZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJva2UgJiYgdGhpcy5zdHJva2UgIT09ICd0cmFuc3BhcmVudCcgJiYgdGhpcy5zdHJva2VXaWR0aCAhPT0gMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIHRydWUgaWYgdGhlIG9iamVjdCB3aWxsIGRyYXcgYSBmaWxsXG4gICAgICogRG9lcyBub3QgY29uc2lkZXIgdGV4dCBzdHlsZXMuIFRoaXMgaXMganVzdCBhIHNob3J0Y3V0IHVzZWQgYXQgcmVuZGVyaW5nIHRpbWVcbiAgICAgKiBXZSB3YW50IGl0IHRvIGJlIGFuIGFwcHJveGltYXRpb24gYW5kIGJlIGZhc3QuXG4gICAgICogd3JvdGUgdG8gYXZvaWQgZXh0cmEgY2FjaGluZywgaXQgaGFzIHRvIHJldHVybiB0cnVlIHdoZW4gZmlsbCBoYXBwZW5zLFxuICAgICAqIGNhbiBndWVzcyB3aGVuIGl0IHdpbGwgbm90IGhhcHBlbiBhdCAxMDAlIGNoYW5jZSwgZG9lcyBub3QgbWF0dGVyIGlmIGl0IG1pc3Nlc1xuICAgICAqIHNvbWUgdXNlIGNhc2Ugd2hlcmUgdGhlIGZpbGwgaXMgaW52aXNpYmxlLlxuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEByZXR1cm5zIEJvb2xlYW5cbiAgICAgKi9cbiAgICBoYXNGaWxsOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbGwgJiYgdGhpcy5maWxsICE9PSAndHJhbnNwYXJlbnQnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHNldCB0byBgdHJ1ZWAsIGZvcmNlIHRoZSBvYmplY3QgdG8gaGF2ZSBpdHMgb3duIGNhY2hlLCBldmVuIGlmIGl0IGlzIGluc2lkZSBhIGdyb3VwXG4gICAgICogaXQgbWF5IGJlIG5lZWRlZCB3aGVuIHlvdXIgb2JqZWN0IGJlaGF2ZSBpbiBhIHBhcnRpY3VsYXIgd2F5IG9uIHRoZSBjYWNoZSBhbmQgYWx3YXlzIG5lZWRzXG4gICAgICogaXRzIG93biBpc29sYXRlZCBjYW52YXMgdG8gcmVuZGVyIGNvcnJlY3RseS5cbiAgICAgKiBDcmVhdGVkIHRvIGJlIG92ZXJyaWRkZW5cbiAgICAgKiBzaW5jZSAxLjcuMTJcbiAgICAgKiBAcmV0dXJucyBCb29sZWFuXG4gICAgICovXG4gICAgbmVlZHNJdHNPd25DYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5wYWludEZpcnN0ID09PSAnc3Ryb2tlJyAmJlxuICAgICAgICB0aGlzLmhhc0ZpbGwoKSAmJiB0aGlzLmhhc1N0cm9rZSgpICYmIHR5cGVvZiB0aGlzLnNoYWRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jbGlwUGF0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVjaWRlIGlmIHRoZSBvYmplY3Qgc2hvdWxkIGNhY2hlIG9yIG5vdC4gQ3JlYXRlIGl0cyBvd24gY2FjaGUgbGV2ZWxcbiAgICAgKiBvYmplY3RDYWNoaW5nIGlzIGEgZ2xvYmFsIGZsYWcsIHdpbnMgb3ZlciBldmVyeXRoaW5nXG4gICAgICogbmVlZHNJdHNPd25DYWNoZSBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSBvYmplY3QgZHJhd2luZyBtZXRob2QgcmVxdWlyZXNcbiAgICAgKiBhIGNhY2hlIHN0ZXAuIE5vbmUgb2YgdGhlIGZhYnJpYyBjbGFzc2VzIHJlcXVpcmVzIGl0LlxuICAgICAqIEdlbmVyYWxseSB5b3UgZG8gbm90IGNhY2hlIG9iamVjdHMgaW4gZ3JvdXBzIGJlY2F1c2UgdGhlIGdyb3VwIG91dHNpZGUgaXMgY2FjaGVkLlxuICAgICAqIFJlYWQgYXM6IGNhY2hlIGlmIGlzIG5lZWRlZCwgb3IgaWYgdGhlIGZlYXR1cmUgaXMgZW5hYmxlZCBidXQgd2UgYXJlIG5vdCBhbHJlYWR5IGNhY2hpbmcuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBzaG91bGRDYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLm93bkNhY2hpbmcgPSB0aGlzLm5lZWRzSXRzT3duQ2FjaGUoKSB8fCAoXG4gICAgICAgIHRoaXMub2JqZWN0Q2FjaGluZyAmJlxuICAgICAgICAoIXRoaXMuZ3JvdXAgfHwgIXRoaXMuZ3JvdXAuaXNPbkFDYWNoZSgpKVxuICAgICAgKTtcbiAgICAgIHJldHVybiB0aGlzLm93bkNhY2hpbmc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoaXMgb2JqZWN0IG9yIGEgY2hpbGQgb2JqZWN0IHdpbGwgY2FzdCBhIHNoYWRvd1xuICAgICAqIHVzZWQgYnkgR3JvdXAuc2hvdWxkQ2FjaGUgdG8ga25vdyBpZiBjaGlsZCBoYXMgYSBzaGFkb3cgcmVjdXJzaXZlbHlcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIHdpbGxEcmF3U2hhZG93OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuc2hhZG93ICYmICh0aGlzLnNoYWRvdy5vZmZzZXRYICE9PSAwIHx8IHRoaXMuc2hhZG93Lm9mZnNldFkgIT09IDApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSBkcmF3aW5nIG9wZXJhdGlvbiBmb3IgYW4gb2JqZWN0IGNsaXBQYXRoXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gY2xpcFBhdGhcbiAgICAgKi9cbiAgICBkcmF3Q2xpcFBhdGhPbkNhY2hlOiBmdW5jdGlvbihjdHgsIGNsaXBQYXRoKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgLy8gREVCVUc6IHVuY29tbWVudCB0aGlzIGxpbmUsIGNvbW1lbnQgdGhlIGZvbGxvd2luZ1xuICAgICAgLy8gY3R4Lmdsb2JhbEFscGhhID0gMC40XG4gICAgICBpZiAoY2xpcFBhdGguaW52ZXJ0ZWQpIHtcbiAgICAgICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdkZXN0aW5hdGlvbi1vdXQnO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24taW4nO1xuICAgICAgfVxuICAgICAgLy9jdHguc2NhbGUoMSAvIDIsIDEgLyAyKTtcbiAgICAgIGlmIChjbGlwUGF0aC5hYnNvbHV0ZVBvc2l0aW9uZWQpIHtcbiAgICAgICAgdmFyIG0gPSBmYWJyaWMudXRpbC5pbnZlcnRUcmFuc2Zvcm0odGhpcy5jYWxjVHJhbnNmb3JtTWF0cml4KCkpO1xuICAgICAgICBjdHgudHJhbnNmb3JtKG1bMF0sIG1bMV0sIG1bMl0sIG1bM10sIG1bNF0sIG1bNV0pO1xuICAgICAgfVxuICAgICAgY2xpcFBhdGgudHJhbnNmb3JtKGN0eCk7XG4gICAgICBjdHguc2NhbGUoMSAvIGNsaXBQYXRoLnpvb21YLCAxIC8gY2xpcFBhdGguem9vbVkpO1xuICAgICAgY3R4LmRyYXdJbWFnZShjbGlwUGF0aC5fY2FjaGVDYW52YXMsIC1jbGlwUGF0aC5jYWNoZVRyYW5zbGF0aW9uWCwgLWNsaXBQYXRoLmNhY2hlVHJhbnNsYXRpb25ZKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIGRyYXdpbmcgb3BlcmF0aW9uIGZvciBhbiBvYmplY3Qgb24gYSBzcGVjaWZpZWQgY29udGV4dFxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBkcmF3T2JqZWN0OiBmdW5jdGlvbihjdHgsIGZvckNsaXBwaW5nKSB7XG4gICAgICB2YXIgb3JpZ2luYWxGaWxsID0gdGhpcy5maWxsLCBvcmlnaW5hbFN0cm9rZSA9IHRoaXMuc3Ryb2tlO1xuICAgICAgaWYgKGZvckNsaXBwaW5nKSB7XG4gICAgICAgIHRoaXMuZmlsbCA9ICdibGFjayc7XG4gICAgICAgIHRoaXMuc3Ryb2tlID0gJyc7XG4gICAgICAgIHRoaXMuX3NldENsaXBwaW5nUHJvcGVydGllcyhjdHgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlbmRlckJhY2tncm91bmQoY3R4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3JlbmRlcihjdHgpO1xuICAgICAgdGhpcy5fZHJhd0NsaXBQYXRoKGN0eCwgdGhpcy5jbGlwUGF0aCk7XG4gICAgICB0aGlzLmZpbGwgPSBvcmlnaW5hbEZpbGw7XG4gICAgICB0aGlzLnN0cm9rZSA9IG9yaWdpbmFsU3Ryb2tlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIGNsaXBQYXRoIHN0YXRlIGFuZCBjYWNoZSBhbmQgZHJhdyBpdCBvbiBpbnN0YW5jZSdzIGNhY2hlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gY2xpcFBhdGhcbiAgICAgKi9cbiAgICBfZHJhd0NsaXBQYXRoOiBmdW5jdGlvbiAoY3R4LCBjbGlwUGF0aCkge1xuICAgICAgaWYgKCFjbGlwUGF0aCkgeyByZXR1cm47IH1cbiAgICAgIC8vIG5lZWRlZCB0byBzZXR1cCBhIGNvdXBsZSBvZiB2YXJpYWJsZXNcbiAgICAgIC8vIHBhdGggY2FudmFzIGdldHMgb3ZlcnJpZGRlbiB3aXRoIHRoaXMgb25lLlxuICAgICAgLy8gVE9ETyBmaW5kIGEgYmV0dGVyIHNvbHV0aW9uP1xuICAgICAgY2xpcFBhdGguY2FudmFzID0gdGhpcy5jYW52YXM7XG4gICAgICBjbGlwUGF0aC5zaG91bGRDYWNoZSgpO1xuICAgICAgY2xpcFBhdGguX3RyYW5zZm9ybURvbmUgPSB0cnVlO1xuICAgICAgY2xpcFBhdGgucmVuZGVyQ2FjaGUoeyBmb3JDbGlwcGluZzogdHJ1ZSB9KTtcbiAgICAgIHRoaXMuZHJhd0NsaXBQYXRoT25DYWNoZShjdHgsIGNsaXBQYXRoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGFpbnQgdGhlIGNhY2hlZCBjb3B5IG9mIHRoZSBvYmplY3Qgb24gdGhlIHRhcmdldCBjb250ZXh0LlxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBkcmF3Q2FjaGVPbkNhbnZhczogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBjdHguc2NhbGUoMSAvIHRoaXMuem9vbVgsIDEgLyB0aGlzLnpvb21ZKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5fY2FjaGVDYW52YXMsIC10aGlzLmNhY2hlVHJhbnNsYXRpb25YLCAtdGhpcy5jYWNoZVRyYW5zbGF0aW9uWSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGNhY2hlIGlzIGRpcnR5XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBza2lwQ2FudmFzIHNraXAgY2FudmFzIGNoZWNrcyBiZWNhdXNlIHRoaXMgb2JqZWN0IGlzIHBhaW50ZWRcbiAgICAgKiBvbiBwYXJlbnQgY2FudmFzLlxuICAgICAqL1xuICAgIGlzQ2FjaGVEaXJ0eTogZnVuY3Rpb24oc2tpcENhbnZhcykge1xuICAgICAgaWYgKHRoaXMuaXNOb3RWaXNpYmxlKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2NhY2hlQ2FudmFzICYmIHRoaXMuX2NhY2hlQ29udGV4dCAmJiAhc2tpcENhbnZhcyAmJiB0aGlzLl91cGRhdGVDYWNoZUNhbnZhcygpKSB7XG4gICAgICAgIC8vIGluIHRoaXMgY2FzZSB0aGUgY29udGV4dCBpcyBhbHJlYWR5IGNsZWFyZWQuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmRpcnR5IHx8XG4gICAgICAgICAgKHRoaXMuY2xpcFBhdGggJiYgdGhpcy5jbGlwUGF0aC5hYnNvbHV0ZVBvc2l0aW9uZWQpIHx8XG4gICAgICAgICAgKHRoaXMuc3RhdGVmdWxsQ2FjaGUgJiYgdGhpcy5oYXNTdGF0ZUNoYW5nZWQoJ2NhY2hlUHJvcGVydGllcycpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAodGhpcy5fY2FjaGVDYW52YXMgJiYgdGhpcy5fY2FjaGVDb250ZXh0ICYmICFza2lwQ2FudmFzKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmNhY2hlV2lkdGggLyB0aGlzLnpvb21YO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuY2FjaGVIZWlnaHQgLyB0aGlzLnpvb21ZO1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVDb250ZXh0LmNsZWFyUmVjdCgtd2lkdGggLyAyLCAtaGVpZ2h0IC8gMiwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGEgYmFja2dyb3VuZCBmb3IgdGhlIG9iamVjdCBiaWcgYXMgaXRzIHVudHJhbnNmb3JtZWQgZGltZW5zaW9uc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXJCYWNrZ3JvdW5kOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICghdGhpcy5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGRpbSA9IHRoaXMuX2dldE5vblRyYW5zZm9ybWVkRGltZW5zaW9ucygpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuYmFja2dyb3VuZENvbG9yO1xuXG4gICAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgIC1kaW0ueCAvIDIsXG4gICAgICAgIC1kaW0ueSAvIDIsXG4gICAgICAgIGRpbS54LFxuICAgICAgICBkaW0ueVxuICAgICAgKTtcbiAgICAgIC8vIGlmIHRoZXJlIGlzIGJhY2tncm91bmQgY29sb3Igbm8gb3RoZXIgc2hhZG93c1xuICAgICAgLy8gc2hvdWxkIGJlIGNhc3RlZFxuICAgICAgdGhpcy5fcmVtb3ZlU2hhZG93KGN0eCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9zZXRPcGFjaXR5OiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICh0aGlzLmdyb3VwICYmICF0aGlzLmdyb3VwLl90cmFuc2Zvcm1Eb25lKSB7XG4gICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuZ2V0T2JqZWN0T3BhY2l0eSgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGN0eC5nbG9iYWxBbHBoYSAqPSB0aGlzLm9wYWNpdHk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9zZXRTdHJva2VTdHlsZXM6IGZ1bmN0aW9uKGN0eCwgZGVjbCkge1xuICAgICAgdmFyIHN0cm9rZSA9IGRlY2wuc3Ryb2tlO1xuICAgICAgaWYgKHN0cm9rZSkge1xuICAgICAgICBjdHgubGluZVdpZHRoID0gZGVjbC5zdHJva2VXaWR0aDtcbiAgICAgICAgY3R4LmxpbmVDYXAgPSBkZWNsLnN0cm9rZUxpbmVDYXA7XG4gICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGRlY2wuc3Ryb2tlRGFzaE9mZnNldDtcbiAgICAgICAgY3R4LmxpbmVKb2luID0gZGVjbC5zdHJva2VMaW5lSm9pbjtcbiAgICAgICAgY3R4Lm1pdGVyTGltaXQgPSBkZWNsLnN0cm9rZU1pdGVyTGltaXQ7XG4gICAgICAgIGlmIChzdHJva2UudG9MaXZlKSB7XG4gICAgICAgICAgaWYgKHN0cm9rZS5ncmFkaWVudFVuaXRzID09PSAncGVyY2VudGFnZScgfHwgc3Ryb2tlLmdyYWRpZW50VHJhbnNmb3JtIHx8IHN0cm9rZS5wYXR0ZXJuVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAvLyBuZWVkIHRvIHRyYW5zZm9ybSBncmFkaWVudCBpbiBhIHBhdHRlcm4uXG4gICAgICAgICAgICAvLyB0aGlzIGlzIGEgc2xvdyBwcm9jZXNzLiBJZiB5b3UgYXJlIGhpdHRpbmcgdGhpcyBjb2RlcGF0aCwgYW5kIHRoZSBvYmplY3RcbiAgICAgICAgICAgIC8vIGlzIG5vdCB1c2luZyBjYWNoaW5nLCB5b3Ugc2hvdWxkIGNvbnNpZGVyIHN3aXRjaGluZyBpdCBvbi5cbiAgICAgICAgICAgIC8vIHdlIG5lZWQgYSBjYW52YXMgYXMgYmlnIGFzIHRoZSBjdXJyZW50IG9iamVjdCBjYWNoaW5nIGNhbnZhcy5cbiAgICAgICAgICAgIHRoaXMuX2FwcGx5UGF0dGVybkZvclRyYW5zZm9ybWVkR3JhZGllbnQoY3R4LCBzdHJva2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlzIGEgc2ltcGxlIGdyYWRpZW50IG9yIHBhdHRlcm5cbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZS50b0xpdmUoY3R4LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5UGF0dGVybkdyYWRpZW50VHJhbnNmb3JtKGN0eCwgc3Ryb2tlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgLy8gaXMgYSBjb2xvclxuICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGRlY2wuc3Ryb2tlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9zZXRGaWxsU3R5bGVzOiBmdW5jdGlvbihjdHgsIGRlY2wpIHtcbiAgICAgIHZhciBmaWxsID0gZGVjbC5maWxsO1xuICAgICAgaWYgKGZpbGwpIHtcbiAgICAgICAgaWYgKGZpbGwudG9MaXZlKSB7XG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGZpbGwudG9MaXZlKGN0eCwgdGhpcyk7XG4gICAgICAgICAgdGhpcy5fYXBwbHlQYXR0ZXJuR3JhZGllbnRUcmFuc2Zvcm0oY3R4LCBkZWNsLmZpbGwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBmaWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9zZXRDbGlwcGluZ1Byb3BlcnRpZXM6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICd0cmFuc3BhcmVudCc7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJyMwMDAwMDAnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIFNldHMgbGluZSBkYXNoXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHNldCB0aGUgZGFzaCBsaW5lIG9uXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGFzaEFycmF5IGFycmF5IHJlcHJlc2VudGluZyBkYXNoZXNcbiAgICAgKi9cbiAgICBfc2V0TGluZURhc2g6IGZ1bmN0aW9uKGN0eCwgZGFzaEFycmF5KSB7XG4gICAgICBpZiAoIWRhc2hBcnJheSB8fCBkYXNoQXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFNwZWMgcmVxdWlyZXMgdGhlIGNvbmNhdGVuYXRpb24gb2YgdHdvIGNvcGllcyB0aGUgZGFzaCBsaXN0IHdoZW4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpcyBvZGRcbiAgICAgIGlmICgxICYgZGFzaEFycmF5Lmxlbmd0aCkge1xuICAgICAgICBkYXNoQXJyYXkucHVzaC5hcHBseShkYXNoQXJyYXksIGRhc2hBcnJheSk7XG4gICAgICB9XG4gICAgICBjdHguc2V0TGluZURhc2goZGFzaEFycmF5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBjb250cm9scyBhbmQgYm9yZGVycyBmb3IgdGhlIG9iamVjdFxuICAgICAqIHRoZSBjb250ZXh0IGhlcmUgaXMgbm90IHRyYW5zZm9ybWVkXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3R5bGVPdmVycmlkZV0gcHJvcGVydGllcyB0byBvdmVycmlkZSB0aGUgb2JqZWN0IHN0eWxlXG4gICAgICovXG4gICAgX3JlbmRlckNvbnRyb2xzOiBmdW5jdGlvbihjdHgsIHN0eWxlT3ZlcnJpZGUpIHtcbiAgICAgIHZhciB2cHQgPSB0aGlzLmdldFZpZXdwb3J0VHJhbnNmb3JtKCksXG4gICAgICAgICAgbWF0cml4ID0gdGhpcy5jYWxjVHJhbnNmb3JtTWF0cml4KCksXG4gICAgICAgICAgb3B0aW9ucywgZHJhd0JvcmRlcnMsIGRyYXdDb250cm9scztcbiAgICAgIHN0eWxlT3ZlcnJpZGUgPSBzdHlsZU92ZXJyaWRlIHx8IHsgfTtcbiAgICAgIGRyYXdCb3JkZXJzID0gdHlwZW9mIHN0eWxlT3ZlcnJpZGUuaGFzQm9yZGVycyAhPT0gJ3VuZGVmaW5lZCcgPyBzdHlsZU92ZXJyaWRlLmhhc0JvcmRlcnMgOiB0aGlzLmhhc0JvcmRlcnM7XG4gICAgICBkcmF3Q29udHJvbHMgPSB0eXBlb2Ygc3R5bGVPdmVycmlkZS5oYXNDb250cm9scyAhPT0gJ3VuZGVmaW5lZCcgPyBzdHlsZU92ZXJyaWRlLmhhc0NvbnRyb2xzIDogdGhpcy5oYXNDb250cm9scztcbiAgICAgIG1hdHJpeCA9IGZhYnJpYy51dGlsLm11bHRpcGx5VHJhbnNmb3JtTWF0cmljZXModnB0LCBtYXRyaXgpO1xuICAgICAgb3B0aW9ucyA9IGZhYnJpYy51dGlsLnFyRGVjb21wb3NlKG1hdHJpeCk7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnRyYW5zbGF0ZShvcHRpb25zLnRyYW5zbGF0ZVgsIG9wdGlvbnMudHJhbnNsYXRlWSk7XG4gICAgICBjdHgubGluZVdpZHRoID0gMSAqIHRoaXMuYm9yZGVyU2NhbGVGYWN0b3I7XG4gICAgICBpZiAoIXRoaXMuZ3JvdXApIHtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gdGhpcy5pc01vdmluZyA/IHRoaXMuYm9yZGVyT3BhY2l0eVdoZW5Nb3ZpbmcgOiAxO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZmxpcFgpIHtcbiAgICAgICAgb3B0aW9ucy5hbmdsZSAtPSAxODA7XG4gICAgICB9XG4gICAgICBjdHgucm90YXRlKGRlZ3JlZXNUb1JhZGlhbnModGhpcy5ncm91cCA/IG9wdGlvbnMuYW5nbGUgOiB0aGlzLmFuZ2xlKSk7XG4gICAgICBpZiAoc3R5bGVPdmVycmlkZS5mb3JBY3RpdmVTZWxlY3Rpb24gfHwgdGhpcy5ncm91cCkge1xuICAgICAgICBkcmF3Qm9yZGVycyAmJiB0aGlzLmRyYXdCb3JkZXJzSW5Hcm91cChjdHgsIG9wdGlvbnMsIHN0eWxlT3ZlcnJpZGUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGRyYXdCb3JkZXJzICYmIHRoaXMuZHJhd0JvcmRlcnMoY3R4LCBzdHlsZU92ZXJyaWRlKTtcbiAgICAgIH1cbiAgICAgIGRyYXdDb250cm9scyAmJiB0aGlzLmRyYXdDb250cm9scyhjdHgsIHN0eWxlT3ZlcnJpZGUpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3NldFNoYWRvdzogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAoIXRoaXMuc2hhZG93KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNoYWRvdyA9IHRoaXMuc2hhZG93LCBjYW52YXMgPSB0aGlzLmNhbnZhcywgc2NhbGluZyxcbiAgICAgICAgICBtdWx0WCA9IChjYW52YXMgJiYgY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtWzBdKSB8fCAxLFxuICAgICAgICAgIG11bHRZID0gKGNhbnZhcyAmJiBjYW52YXMudmlld3BvcnRUcmFuc2Zvcm1bM10pIHx8IDE7XG4gICAgICBpZiAoc2hhZG93Lm5vblNjYWxpbmcpIHtcbiAgICAgICAgc2NhbGluZyA9IHsgc2NhbGVYOiAxLCBzY2FsZVk6IDEgfTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzY2FsaW5nID0gdGhpcy5nZXRPYmplY3RTY2FsaW5nKCk7XG4gICAgICB9XG4gICAgICBpZiAoY2FudmFzICYmIGNhbnZhcy5faXNSZXRpbmFTY2FsaW5nKCkpIHtcbiAgICAgICAgbXVsdFggKj0gZmFicmljLmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIG11bHRZICo9IGZhYnJpYy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgfVxuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gc2hhZG93LmNvbG9yO1xuICAgICAgY3R4LnNoYWRvd0JsdXIgPSBzaGFkb3cuYmx1ciAqIGZhYnJpYy5icm93c2VyU2hhZG93Qmx1ckNvbnN0YW50ICpcbiAgICAgICAgKG11bHRYICsgbXVsdFkpICogKHNjYWxpbmcuc2NhbGVYICsgc2NhbGluZy5zY2FsZVkpIC8gNDtcbiAgICAgIGN0eC5zaGFkb3dPZmZzZXRYID0gc2hhZG93Lm9mZnNldFggKiBtdWx0WCAqIHNjYWxpbmcuc2NhbGVYO1xuICAgICAgY3R4LnNoYWRvd09mZnNldFkgPSBzaGFkb3cub2Zmc2V0WSAqIG11bHRZICogc2NhbGluZy5zY2FsZVk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW1vdmVTaGFkb3c6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgaWYgKCF0aGlzLnNoYWRvdykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGN0eC5zaGFkb3dDb2xvciA9ICcnO1xuICAgICAgY3R4LnNoYWRvd0JsdXIgPSBjdHguc2hhZG93T2Zmc2V0WCA9IGN0eC5zaGFkb3dPZmZzZXRZID0gMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGZpbGxlciBmYWJyaWMuUGF0dGVybiBvciBmYWJyaWMuR3JhZGllbnRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9mZnNldC5vZmZzZXRYIG9mZnNldCBmb3IgdGV4dCByZW5kZXJpbmdcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9mZnNldC5vZmZzZXRZIG9mZnNldCBmb3IgdGV4dCByZW5kZXJpbmdcbiAgICAgKi9cbiAgICBfYXBwbHlQYXR0ZXJuR3JhZGllbnRUcmFuc2Zvcm06IGZ1bmN0aW9uKGN0eCwgZmlsbGVyKSB7XG4gICAgICBpZiAoIWZpbGxlciB8fCAhZmlsbGVyLnRvTGl2ZSkge1xuICAgICAgICByZXR1cm4geyBvZmZzZXRYOiAwLCBvZmZzZXRZOiAwIH07XG4gICAgICB9XG4gICAgICB2YXIgdCA9IGZpbGxlci5ncmFkaWVudFRyYW5zZm9ybSB8fCBmaWxsZXIucGF0dGVyblRyYW5zZm9ybTtcbiAgICAgIHZhciBvZmZzZXRYID0gLXRoaXMud2lkdGggLyAyICsgZmlsbGVyLm9mZnNldFggfHwgMCxcbiAgICAgICAgICBvZmZzZXRZID0gLXRoaXMuaGVpZ2h0IC8gMiArIGZpbGxlci5vZmZzZXRZIHx8IDA7XG5cbiAgICAgIGlmIChmaWxsZXIuZ3JhZGllbnRVbml0cyA9PT0gJ3BlcmNlbnRhZ2UnKSB7XG4gICAgICAgIGN0eC50cmFuc2Zvcm0odGhpcy53aWR0aCwgMCwgMCwgdGhpcy5oZWlnaHQsIG9mZnNldFgsIG9mZnNldFkpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGN0eC50cmFuc2Zvcm0oMSwgMCwgMCwgMSwgb2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgICB9XG4gICAgICBpZiAodCkge1xuICAgICAgICBjdHgudHJhbnNmb3JtKHRbMF0sIHRbMV0sIHRbMl0sIHRbM10sIHRbNF0sIHRbNV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgb2Zmc2V0WDogb2Zmc2V0WCwgb2Zmc2V0WTogb2Zmc2V0WSB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyUGFpbnRJbk9yZGVyOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICh0aGlzLnBhaW50Rmlyc3QgPT09ICdzdHJva2UnKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlclN0cm9rZShjdHgpO1xuICAgICAgICB0aGlzLl9yZW5kZXJGaWxsKGN0eCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyRmlsbChjdHgpO1xuICAgICAgICB0aGlzLl9yZW5kZXJTdHJva2UoY3R4KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBmdW5jdGlvbiB0aGF0IGFjdHVhbGx5IHJlbmRlciBzb21ldGhpbmcgb24gdGhlIGNvbnRleHQuXG4gICAgICogZW1wdHkgaGVyZSB0byBhbGxvdyBPYmVjdHMgdG8gd29yayBvbiB0ZXN0cyB0byBiZW5jaG1hcmsgZmFicmljIGZ1bmN0aW9uYWxpdGVzXG4gICAgICogbm90IHJlbGF0ZWQgdG8gcmVuZGVyaW5nXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXI6IGZ1bmN0aW9uKC8qIGN0eCAqLykge1xuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXJGaWxsOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICghdGhpcy5maWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIHRoaXMuX3NldEZpbGxTdHlsZXMoY3R4LCB0aGlzKTtcbiAgICAgIGlmICh0aGlzLmZpbGxSdWxlID09PSAnZXZlbm9kZCcpIHtcbiAgICAgICAgY3R4LmZpbGwoJ2V2ZW5vZGQnKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlclN0cm9rZTogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAoIXRoaXMuc3Ryb2tlIHx8IHRoaXMuc3Ryb2tlV2lkdGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaGFkb3cgJiYgIXRoaXMuc2hhZG93LmFmZmVjdFN0cm9rZSkge1xuICAgICAgICB0aGlzLl9yZW1vdmVTaGFkb3coY3R4KTtcbiAgICAgIH1cblxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGlmICh0aGlzLnN0cm9rZVVuaWZvcm0gJiYgdGhpcy5ncm91cCkge1xuICAgICAgICB2YXIgc2NhbGluZyA9IHRoaXMuZ2V0T2JqZWN0U2NhbGluZygpO1xuICAgICAgICBjdHguc2NhbGUoMSAvIHNjYWxpbmcuc2NhbGVYLCAxIC8gc2NhbGluZy5zY2FsZVkpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5zdHJva2VVbmlmb3JtKSB7XG4gICAgICAgIGN0eC5zY2FsZSgxIC8gdGhpcy5zY2FsZVgsIDEgLyB0aGlzLnNjYWxlWSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zZXRMaW5lRGFzaChjdHgsIHRoaXMuc3Ryb2tlRGFzaEFycmF5KTtcbiAgICAgIHRoaXMuX3NldFN0cm9rZVN0eWxlcyhjdHgsIHRoaXMpO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiB0cnkgdG8gcGF0Y2ggdGhlIG1pc3NpbmcgZ3JhZGllbnRUcmFuc2Zvcm0gb24gY2FudmFzIGdyYWRpZW50cy5cbiAgICAgKiB0cmFuc2Zvcm1pbmcgYSBjb250ZXh0IHRvIHRyYW5zZm9ybSB0aGUgZ3JhZGllbnQsIGlzIGdvaW5nIHRvIHRyYW5zZm9ybSB0aGUgc3Ryb2tlIHRvby5cbiAgICAgKiB3ZSB3YW50IHRvIHRyYW5zZm9ybSB0aGUgZ3JhZGllbnQgYnV0IG5vdCB0aGUgc3Ryb2tlIG9wZXJhdGlvbiwgc28gd2UgY3JlYXRlXG4gICAgICogYSB0cmFuc2Zvcm1lZCBncmFkaWVudCBvbiBhIHBhdHRlcm4gYW5kIHRoZW4gd2UgdXNlIHRoZSBwYXR0ZXJuIGluc3RlYWQgb2YgdGhlIGdyYWRpZW50LlxuICAgICAqIHRoaXMgbWV0aG9kIGhhcyBkcndhYmFja3M6IGlzIHNsb3csIGlzIGluIGxvdyByZXNvbHV0aW9uLCBuZWVkcyBhIHBhdGNoIGZvciB3aGVuIHRoZSBzaXplXG4gICAgICogaXMgbGltaXRlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5HcmFkaWVudH0gZmlsbGVyIGEgZmFicmljIGdyYWRpZW50IGluc3RhbmNlXG4gICAgICovXG4gICAgX2FwcGx5UGF0dGVybkZvclRyYW5zZm9ybWVkR3JhZGllbnQ6IGZ1bmN0aW9uKGN0eCwgZmlsbGVyKSB7XG4gICAgICB2YXIgZGltcyA9IHRoaXMuX2xpbWl0Q2FjaGVTaXplKHRoaXMuX2dldENhY2hlQ2FudmFzRGltZW5zaW9ucygpKSxcbiAgICAgICAgICBwQ2FudmFzID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpLCBwQ3R4LCByZXRpbmFTY2FsaW5nID0gdGhpcy5jYW52YXMuZ2V0UmV0aW5hU2NhbGluZygpLFxuICAgICAgICAgIHdpZHRoID0gZGltcy54IC8gdGhpcy5zY2FsZVggLyByZXRpbmFTY2FsaW5nLCBoZWlnaHQgPSBkaW1zLnkgLyB0aGlzLnNjYWxlWSAvIHJldGluYVNjYWxpbmc7XG4gICAgICBwQ2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICBwQ2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIHBDdHggPSBwQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBwQ3R4LmJlZ2luUGF0aCgpOyBwQ3R4Lm1vdmVUbygwLCAwKTsgcEN0eC5saW5lVG8od2lkdGgsIDApOyBwQ3R4LmxpbmVUbyh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHBDdHgubGluZVRvKDAsIGhlaWdodCk7IHBDdHguY2xvc2VQYXRoKCk7XG4gICAgICBwQ3R4LnRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgICAgcEN0eC5zY2FsZShcbiAgICAgICAgZGltcy56b29tWCAvIHRoaXMuc2NhbGVYIC8gcmV0aW5hU2NhbGluZyxcbiAgICAgICAgZGltcy56b29tWSAvIHRoaXMuc2NhbGVZIC8gcmV0aW5hU2NhbGluZ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX2FwcGx5UGF0dGVybkdyYWRpZW50VHJhbnNmb3JtKHBDdHgsIGZpbGxlcik7XG4gICAgICBwQ3R4LmZpbGxTdHlsZSA9IGZpbGxlci50b0xpdmUoY3R4KTtcbiAgICAgIHBDdHguZmlsbCgpO1xuICAgICAgY3R4LnRyYW5zbGF0ZSgtdGhpcy53aWR0aCAvIDIgLSB0aGlzLnN0cm9rZVdpZHRoIC8gMiwgLXRoaXMuaGVpZ2h0IC8gMiAtIHRoaXMuc3Ryb2tlV2lkdGggLyAyKTtcbiAgICAgIGN0eC5zY2FsZShcbiAgICAgICAgcmV0aW5hU2NhbGluZyAqIHRoaXMuc2NhbGVYIC8gZGltcy56b29tWCxcbiAgICAgICAgcmV0aW5hU2NhbGluZyAqIHRoaXMuc2NhbGVZIC8gZGltcy56b29tWVxuICAgICAgKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHBDdHguY3JlYXRlUGF0dGVybihwQ2FudmFzLCAnbm8tcmVwZWF0Jyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgYW4gaGVscGVyIGZvciBzdmcgaW1wb3J0LiBpdCByZXR1cm5zIHRoZSBjZW50ZXIgb2YgdGhlIG9iamVjdCBpbiB0aGUgc3ZnXG4gICAgICogdW50cmFuc2Zvcm1lZCBjb29yZGluYXRlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBjZW50ZXIgcG9pbnQgZnJvbSBlbGVtZW50IGNvb3JkaW5hdGVzXG4gICAgICovXG4gICAgX2ZpbmRDZW50ZXJGcm9tRWxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geyB4OiB0aGlzLmxlZnQgKyB0aGlzLndpZHRoIC8gMiwgeTogdGhpcy50b3AgKyB0aGlzLmhlaWdodCAvIDIgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBhbiBoZWxwZXIgZm9yIHN2ZyBpbXBvcnQuIGl0IGRlY29tcG9zZSB0aGUgdHJhbnNmb3JtTWF0cml4XG4gICAgICogYW5kIGFzc2lnbiBwcm9wZXJ0aWVzIHRvIG9iamVjdC5cbiAgICAgKiB1bnRyYW5zZm9ybWVkIGNvb3JkaW5hdGVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgX2Fzc2lnblRyYW5zZm9ybU1hdHJpeFByb3BzOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnRyYW5zZm9ybU1hdHJpeCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGZhYnJpYy51dGlsLnFyRGVjb21wb3NlKHRoaXMudHJhbnNmb3JtTWF0cml4KTtcbiAgICAgICAgdGhpcy5mbGlwWCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZsaXBZID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2V0KCdzY2FsZVgnLCBvcHRpb25zLnNjYWxlWCk7XG4gICAgICAgIHRoaXMuc2V0KCdzY2FsZVknLCBvcHRpb25zLnNjYWxlWSk7XG4gICAgICAgIHRoaXMuYW5nbGUgPSBvcHRpb25zLmFuZ2xlO1xuICAgICAgICB0aGlzLnNrZXdYID0gb3B0aW9ucy5za2V3WDtcbiAgICAgICAgdGhpcy5za2V3WSA9IDA7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgYW4gaGVscGVyIGZvciBzdmcgaW1wb3J0LiBpdCByZW1vdmVzIHRoZSB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICogYW5kIHNldCB0byBvYmplY3QgcHJvcGVydGllcyB0aGF0IGZhYnJpY2pzIGNhbiBoYW5kbGVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcmVzZXJ2ZUFzcGVjdFJhdGlvT3B0aW9uc1xuICAgICAqIEByZXR1cm4ge3RoaXNBcmd9XG4gICAgICovXG4gICAgX3JlbW92ZVRyYW5zZm9ybU1hdHJpeDogZnVuY3Rpb24ocHJlc2VydmVBc3BlY3RSYXRpb09wdGlvbnMpIHtcbiAgICAgIHZhciBjZW50ZXIgPSB0aGlzLl9maW5kQ2VudGVyRnJvbUVsZW1lbnQoKTtcbiAgICAgIGlmICh0aGlzLnRyYW5zZm9ybU1hdHJpeCkge1xuICAgICAgICB0aGlzLl9hc3NpZ25UcmFuc2Zvcm1NYXRyaXhQcm9wcygpO1xuICAgICAgICBjZW50ZXIgPSBmYWJyaWMudXRpbC50cmFuc2Zvcm1Qb2ludChjZW50ZXIsIHRoaXMudHJhbnNmb3JtTWF0cml4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMudHJhbnNmb3JtTWF0cml4ID0gbnVsbDtcbiAgICAgIGlmIChwcmVzZXJ2ZUFzcGVjdFJhdGlvT3B0aW9ucykge1xuICAgICAgICB0aGlzLnNjYWxlWCAqPSBwcmVzZXJ2ZUFzcGVjdFJhdGlvT3B0aW9ucy5zY2FsZVg7XG4gICAgICAgIHRoaXMuc2NhbGVZICo9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLnNjYWxlWTtcbiAgICAgICAgdGhpcy5jcm9wWCA9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLmNyb3BYO1xuICAgICAgICB0aGlzLmNyb3BZID0gcHJlc2VydmVBc3BlY3RSYXRpb09wdGlvbnMuY3JvcFk7XG4gICAgICAgIGNlbnRlci54ICs9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLm9mZnNldExlZnQ7XG4gICAgICAgIGNlbnRlci55ICs9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLm9mZnNldFRvcDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLmhlaWdodDtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0UG9zaXRpb25CeU9yaWdpbihjZW50ZXIsICdjZW50ZXInLCAnY2VudGVyJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsb25lcyBhbiBpbnN0YW5jZSwgdXNpbmcgYSBjYWxsYmFjayBtZXRob2Qgd2lsbCB3b3JrIGZvciBldmVyeSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgaXMgaW52b2tlZCB3aXRoIGEgY2xvbmUgYXMgYSBmaXJzdCBhcmd1bWVudFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKi9cbiAgICBjbG9uZTogZnVuY3Rpb24oY2FsbGJhY2ssIHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHZhciBvYmplY3RGb3JtID0gdGhpcy50b09iamVjdChwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLmZyb21PYmplY3QpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5mcm9tT2JqZWN0KG9iamVjdEZvcm0sIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0KCdPYmplY3QnLCBvYmplY3RGb3JtLCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgZmFicmljLkltYWdlIG91dCBvZiBhbiBvYmplY3RcbiAgICAgKiBtYWtlcyB1c2Ugb2YgdG9DYW52YXNFbGVtZW50LlxuICAgICAqIE9uY2UgdGhpcyBtZXRob2Qgd2FzIGJhc2VkIG9uIHRvRGF0YVVybCBhbmQgbG9hZEltYWdlLCBzbyBpdCBhbHNvIGhhZCBhIHF1YWxpdHlcbiAgICAgKiBhbmQgZm9ybWF0IG9wdGlvbi4gdG9DYW52YXNFbGVtZW50IGlzIGZhc3RlciBhbmQgcHJvZHVjZSBubyBsb3NzIG9mIHF1YWxpdHkuXG4gICAgICogSWYgeW91IG5lZWQgdG8gZ2V0IGEgcmVhbCBKcGVnIG9yIFBuZyBmcm9tIGFuIG9iamVjdCwgdXNpbmcgdG9EYXRhVVJMIGlzIHRoZSByaWdodCB3YXkgdG8gZG8gaXQuXG4gICAgICogdG9DYW52YXNFbGVtZW50IGFuZCB0aGVuIHRvQmxvYiBmcm9tIHRoZSBvYnRhaW5lZCBjYW52YXMgaXMgYWxzbyBhIGdvb2Qgb3B0aW9uLlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHN5bmMgbm93LCBidXQgc3RpbGwgc3VwcG9ydCB0aGUgY2FsbGJhY2sgYmVjYXVzZSB3ZSBkaWQgbm90IHdhbnQgdG8gYnJlYWsuXG4gICAgICogV2hlbiBmYWJyaWNKUyA1LjAgd2lsbCBiZSBwbGFubmVkLCB0aGlzIHdpbGwgcHJvYmFibHkgYmUgY2hhbmdlZCB0byBub3QgaGF2ZSBhIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGNhbGxiYWNrLCBpbnZva2VkIHdpdGggYW4gaW5zdGFuY2UgYXMgYSBmaXJzdCBhcmd1bWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gZm9yIGNsb25lIGFzIGltYWdlLCBwYXNzZWQgdG8gdG9EYXRhVVJMXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm11bHRpcGxpZXI9MV0gTXVsdGlwbGllciB0byBzY2FsZSBieVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5sZWZ0XSBDcm9wcGluZyBsZWZ0IG9mZnNldC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnRvcF0gQ3JvcHBpbmcgdG9wIG9mZnNldC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLndpZHRoXSBDcm9wcGluZyB3aWR0aC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmhlaWdodF0gQ3JvcHBpbmcgaGVpZ2h0LiBJbnRyb2R1Y2VkIGluIHYxLjIuMTRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmVuYWJsZVJldGluYVNjYWxpbmddIEVuYWJsZSByZXRpbmEgc2NhbGluZyBmb3IgY2xvbmUgaW1hZ2UuIEludHJvZHVjZSBpbiAxLjYuNFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMud2l0aG91dFRyYW5zZm9ybV0gUmVtb3ZlIGN1cnJlbnQgb2JqZWN0IHRyYW5zZm9ybSAoIG5vIHNjYWxlICwgbm8gYW5nbGUsIG5vIGZsaXAsIG5vIHNrZXcgKS4gSW50cm9kdWNlZCBpbiAyLjMuNFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMud2l0aG91dFNoYWRvd10gUmVtb3ZlIGN1cnJlbnQgb2JqZWN0IHNoYWRvdy4gSW50cm9kdWNlZCBpbiAyLjQuMlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBjbG9uZUFzSW1hZ2U6IGZ1bmN0aW9uKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICB2YXIgY2FudmFzRWwgPSB0aGlzLnRvQ2FudmFzRWxlbWVudChvcHRpb25zKTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayhuZXcgZmFicmljLkltYWdlKGNhbnZhc0VsKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gb2JqZWN0IGludG8gYSBIVE1MQ2FudmFzIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tdWx0aXBsaWVyPTFdIE11bHRpcGxpZXIgdG8gc2NhbGUgYnlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubGVmdF0gQ3JvcHBpbmcgbGVmdCBvZmZzZXQuIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy50b3BdIENyb3BwaW5nIHRvcCBvZmZzZXQuIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy53aWR0aF0gQ3JvcHBpbmcgd2lkdGguIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5oZWlnaHRdIENyb3BwaW5nIGhlaWdodC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5lbmFibGVSZXRpbmFTY2FsaW5nXSBFbmFibGUgcmV0aW5hIHNjYWxpbmcgZm9yIGNsb25lIGltYWdlLiBJbnRyb2R1Y2UgaW4gMS42LjRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLndpdGhvdXRUcmFuc2Zvcm1dIFJlbW92ZSBjdXJyZW50IG9iamVjdCB0cmFuc2Zvcm0gKCBubyBzY2FsZSAsIG5vIGFuZ2xlLCBubyBmbGlwLCBubyBza2V3ICkuIEludHJvZHVjZWQgaW4gMi4zLjRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLndpdGhvdXRTaGFkb3ddIFJlbW92ZSBjdXJyZW50IG9iamVjdCBzaGFkb3cuIEludHJvZHVjZWQgaW4gMi40LjJcbiAgICAgKiBAcmV0dXJuIHtIVE1MQ2FudmFzRWxlbWVudH0gUmV0dXJucyBET00gZWxlbWVudCA8Y2FudmFzPiB3aXRoIHRoZSBmYWJyaWMuT2JqZWN0XG4gICAgICovXG4gICAgdG9DYW52YXNFbGVtZW50OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0geyB9KTtcblxuICAgICAgdmFyIHV0aWxzID0gZmFicmljLnV0aWwsIG9yaWdQYXJhbXMgPSB1dGlscy5zYXZlT2JqZWN0VHJhbnNmb3JtKHRoaXMpLFxuICAgICAgICAgIG9yaWdpbmFsR3JvdXAgPSB0aGlzLmdyb3VwLFxuICAgICAgICAgIG9yaWdpbmFsU2hhZG93ID0gdGhpcy5zaGFkb3csIGFicyA9IE1hdGguYWJzLFxuICAgICAgICAgIG11bHRpcGxpZXIgPSAob3B0aW9ucy5tdWx0aXBsaWVyIHx8IDEpICogKG9wdGlvbnMuZW5hYmxlUmV0aW5hU2NhbGluZyA/IGZhYnJpYy5kZXZpY2VQaXhlbFJhdGlvIDogMSk7XG4gICAgICBkZWxldGUgdGhpcy5ncm91cDtcbiAgICAgIGlmIChvcHRpb25zLndpdGhvdXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgdXRpbHMucmVzZXRPYmplY3RUcmFuc2Zvcm0odGhpcyk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy53aXRob3V0U2hhZG93KSB7XG4gICAgICAgIHRoaXMuc2hhZG93ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpLFxuICAgICAgICAgIC8vIHNraXAgY2FudmFzIHpvb20gYW5kIGNhbGN1bGF0ZSB3aXRoIHNldENvb3JkcyBub3cuXG4gICAgICAgICAgYm91bmRpbmdSZWN0ID0gdGhpcy5nZXRCb3VuZGluZ1JlY3QodHJ1ZSwgdHJ1ZSksXG4gICAgICAgICAgc2hhZG93ID0gdGhpcy5zaGFkb3csIHNjYWxpbmcsXG4gICAgICAgICAgc2hhZG93T2Zmc2V0ID0geyB4OiAwLCB5OiAwIH0sIHNoYWRvd0JsdXIsXG4gICAgICAgICAgd2lkdGgsIGhlaWdodDtcblxuICAgICAgaWYgKHNoYWRvdykge1xuICAgICAgICBzaGFkb3dCbHVyID0gc2hhZG93LmJsdXI7XG4gICAgICAgIGlmIChzaGFkb3cubm9uU2NhbGluZykge1xuICAgICAgICAgIHNjYWxpbmcgPSB7IHNjYWxlWDogMSwgc2NhbGVZOiAxIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc2NhbGluZyA9IHRoaXMuZ2V0T2JqZWN0U2NhbGluZygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnNpZGVyIG5vbiBzY2FsaW5nIHNoYWRvdy5cbiAgICAgICAgc2hhZG93T2Zmc2V0LnggPSAyICogTWF0aC5yb3VuZChhYnMoc2hhZG93Lm9mZnNldFgpICsgc2hhZG93Qmx1cikgKiAoYWJzKHNjYWxpbmcuc2NhbGVYKSk7XG4gICAgICAgIHNoYWRvd09mZnNldC55ID0gMiAqIE1hdGgucm91bmQoYWJzKHNoYWRvdy5vZmZzZXRZKSArIHNoYWRvd0JsdXIpICogKGFicyhzY2FsaW5nLnNjYWxlWSkpO1xuICAgICAgfVxuICAgICAgd2lkdGggPSBib3VuZGluZ1JlY3Qud2lkdGggKyBzaGFkb3dPZmZzZXQueDtcbiAgICAgIGhlaWdodCA9IGJvdW5kaW5nUmVjdC5oZWlnaHQgKyBzaGFkb3dPZmZzZXQueTtcbiAgICAgIC8vIGlmIHRoZSBjdXJyZW50IHdpZHRoL2hlaWdodCBpcyBub3QgYW4gaW50ZWdlclxuICAgICAgLy8gd2UgbmVlZCB0byBtYWtlIGl0IHNvLlxuICAgICAgZWwud2lkdGggPSBNYXRoLmNlaWwod2lkdGgpO1xuICAgICAgZWwuaGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCk7XG4gICAgICB2YXIgY2FudmFzID0gbmV3IGZhYnJpYy5TdGF0aWNDYW52YXMoZWwsIHtcbiAgICAgICAgZW5hYmxlUmV0aW5hU2NhbGluZzogZmFsc2UsXG4gICAgICAgIHJlbmRlck9uQWRkUmVtb3ZlOiBmYWxzZSxcbiAgICAgICAgc2tpcE9mZnNjcmVlbjogZmFsc2UsXG4gICAgICB9KTtcbiAgICAgIGlmIChvcHRpb25zLmZvcm1hdCA9PT0gJ2pwZWcnKSB7XG4gICAgICAgIGNhbnZhcy5iYWNrZ3JvdW5kQ29sb3IgPSAnI2ZmZic7XG4gICAgICB9XG4gICAgICB0aGlzLnNldFBvc2l0aW9uQnlPcmlnaW4obmV3IGZhYnJpYy5Qb2ludChjYW52YXMud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMiksICdjZW50ZXInLCAnY2VudGVyJyk7XG5cbiAgICAgIHZhciBvcmlnaW5hbENhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgY2FudmFzLmFkZCh0aGlzKTtcbiAgICAgIHZhciBjYW52YXNFbCA9IGNhbnZhcy50b0NhbnZhc0VsZW1lbnQobXVsdGlwbGllciB8fCAxLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuc2hhZG93ID0gb3JpZ2luYWxTaGFkb3c7XG4gICAgICB0aGlzLnNldCgnY2FudmFzJywgb3JpZ2luYWxDYW52YXMpO1xuICAgICAgaWYgKG9yaWdpbmFsR3JvdXApIHtcbiAgICAgICAgdGhpcy5ncm91cCA9IG9yaWdpbmFsR3JvdXA7XG4gICAgICB9XG4gICAgICB0aGlzLnNldChvcmlnUGFyYW1zKS5zZXRDb29yZHMoKTtcbiAgICAgIC8vIGNhbnZhcy5kaXNwb3NlIHdpbGwgY2FsbCBpbWFnZS5kaXNwb3NlIHRoYXQgd2lsbCBudWxsaWZ5IHRoZSBlbGVtZW50c1xuICAgICAgLy8gc2luY2UgdGhpcyBjYW52YXMgaXMgYSBzaW1wbGUgZWxlbWVudCBmb3IgdGhlIHByb2Nlc3MsIHdlIHJlbW92ZSByZWZlcmVuY2VzXG4gICAgICAvLyB0byBvYmplY3RzIGluIHRoaXMgd2F5IGluIG9yZGVyIHRvIGF2b2lkIG9iamVjdCB0cmFzaGluZy5cbiAgICAgIGNhbnZhcy5fb2JqZWN0cyA9IFtdO1xuICAgICAgY2FudmFzLmRpc3Bvc2UoKTtcbiAgICAgIGNhbnZhcyA9IG51bGw7XG5cbiAgICAgIHJldHVybiBjYW52YXNFbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gb2JqZWN0IGludG8gYSBkYXRhLXVybC1saWtlIHN0cmluZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmZvcm1hdD1wbmddIFRoZSBmb3JtYXQgb2YgdGhlIG91dHB1dCBpbWFnZS4gRWl0aGVyIFwianBlZ1wiIG9yIFwicG5nXCJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucXVhbGl0eT0xXSBRdWFsaXR5IGxldmVsICgwLi4xKS4gT25seSB1c2VkIGZvciBqcGVnLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tdWx0aXBsaWVyPTFdIE11bHRpcGxpZXIgdG8gc2NhbGUgYnlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubGVmdF0gQ3JvcHBpbmcgbGVmdCBvZmZzZXQuIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy50b3BdIENyb3BwaW5nIHRvcCBvZmZzZXQuIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy53aWR0aF0gQ3JvcHBpbmcgd2lkdGguIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5oZWlnaHRdIENyb3BwaW5nIGhlaWdodC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5lbmFibGVSZXRpbmFTY2FsaW5nXSBFbmFibGUgcmV0aW5hIHNjYWxpbmcgZm9yIGNsb25lIGltYWdlLiBJbnRyb2R1Y2UgaW4gMS42LjRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLndpdGhvdXRUcmFuc2Zvcm1dIFJlbW92ZSBjdXJyZW50IG9iamVjdCB0cmFuc2Zvcm0gKCBubyBzY2FsZSAsIG5vIGFuZ2xlLCBubyBmbGlwLCBubyBza2V3ICkuIEludHJvZHVjZWQgaW4gMi4zLjRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLndpdGhvdXRTaGFkb3ddIFJlbW92ZSBjdXJyZW50IG9iamVjdCBzaGFkb3cuIEludHJvZHVjZWQgaW4gMi40LjJcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFJldHVybnMgYSBkYXRhOiBVUkwgY29udGFpbmluZyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3QgaW4gdGhlIGZvcm1hdCBzcGVjaWZpZWQgYnkgb3B0aW9ucy5mb3JtYXRcbiAgICAgKi9cbiAgICB0b0RhdGFVUkw6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7IH0pO1xuICAgICAgcmV0dXJuIGZhYnJpYy51dGlsLnRvRGF0YVVSTCh0aGlzLnRvQ2FudmFzRWxlbWVudChvcHRpb25zKSwgb3B0aW9ucy5mb3JtYXQgfHwgJ3BuZycsIG9wdGlvbnMucXVhbGl0eSB8fCAxKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHNwZWNpZmllZCB0eXBlIGlzIGlkZW50aWNhbCB0byB0aGUgdHlwZSBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFR5cGUgdG8gY2hlY2sgYWdhaW5zdFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNUeXBlOiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBBcnJheS5mcm9tKGFyZ3VtZW50cykuaW5jbHVkZXModGhpcy50eXBlKSA6IHRoaXMudHlwZSA9PT0gdHlwZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb21wbGV4aXR5IG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBjb21wbGV4aXR5IG9mIHRoaXMgaW5zdGFuY2UgKGlzIDEgdW5sZXNzIHN1YmNsYXNzZWQpXG4gICAgICovXG4gICAgY29tcGxleGl0eTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBKU09OXG4gICAgICovXG4gICAgdG9KU09OOiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICAvLyBkZWxlZ2F0ZSwgbm90IGFsaWFzXG4gICAgICByZXR1cm4gdGhpcy50b09iamVjdChwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBcImFuZ2xlXCIgb2YgYW4gaW5zdGFuY2Ugd2l0aCBjZW50ZXJlZCByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhbmdsZSBBbmdsZSB2YWx1ZSAoaW4gZGVncmVlcylcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHJvdGF0ZTogZnVuY3Rpb24oYW5nbGUpIHtcbiAgICAgIHZhciBzaG91bGRDZW50ZXJPcmlnaW4gPSAodGhpcy5vcmlnaW5YICE9PSAnY2VudGVyJyB8fCB0aGlzLm9yaWdpblkgIT09ICdjZW50ZXInKSAmJiB0aGlzLmNlbnRlcmVkUm90YXRpb247XG5cbiAgICAgIGlmIChzaG91bGRDZW50ZXJPcmlnaW4pIHtcbiAgICAgICAgdGhpcy5fc2V0T3JpZ2luVG9DZW50ZXIoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXQoJ2FuZ2xlJywgYW5nbGUpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2VudGVyT3JpZ2luKSB7XG4gICAgICAgIHRoaXMuX3Jlc2V0T3JpZ2luKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDZW50ZXJzIG9iamVjdCBob3Jpem9udGFsbHkgb24gY2FudmFzIHRvIHdoaWNoIGl0IHdhcyBhZGRlZCBsYXN0LlxuICAgICAqIFlvdSBtaWdodCBuZWVkIHRvIGNhbGwgYHNldENvb3Jkc2Agb24gYW4gb2JqZWN0IGFmdGVyIGNlbnRlcmluZywgdG8gdXBkYXRlIGNvbnRyb2xzIGFyZWEuXG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBjZW50ZXJIOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5jZW50ZXJPYmplY3RIKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENlbnRlcnMgb2JqZWN0IGhvcml6b250YWxseSBvbiBjdXJyZW50IHZpZXdwb3J0IG9mIGNhbnZhcyB0byB3aGljaCBpdCB3YXMgYWRkZWQgbGFzdC5cbiAgICAgKiBZb3UgbWlnaHQgbmVlZCB0byBjYWxsIGBzZXRDb29yZHNgIG9uIGFuIG9iamVjdCBhZnRlciBjZW50ZXJpbmcsIHRvIHVwZGF0ZSBjb250cm9scyBhcmVhLlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgdmlld3BvcnRDZW50ZXJIOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy52aWV3cG9ydENlbnRlck9iamVjdEgodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2VudGVycyBvYmplY3QgdmVydGljYWxseSBvbiBjYW52YXMgdG8gd2hpY2ggaXQgd2FzIGFkZGVkIGxhc3QuXG4gICAgICogWW91IG1pZ2h0IG5lZWQgdG8gY2FsbCBgc2V0Q29vcmRzYCBvbiBhbiBvYmplY3QgYWZ0ZXIgY2VudGVyaW5nLCB0byB1cGRhdGUgY29udHJvbHMgYXJlYS5cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGNlbnRlclY6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLmNlbnRlck9iamVjdFYodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2VudGVycyBvYmplY3QgdmVydGljYWxseSBvbiBjdXJyZW50IHZpZXdwb3J0IG9mIGNhbnZhcyB0byB3aGljaCBpdCB3YXMgYWRkZWQgbGFzdC5cbiAgICAgKiBZb3UgbWlnaHQgbmVlZCB0byBjYWxsIGBzZXRDb29yZHNgIG9uIGFuIG9iamVjdCBhZnRlciBjZW50ZXJpbmcsIHRvIHVwZGF0ZSBjb250cm9scyBhcmVhLlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgdmlld3BvcnRDZW50ZXJWOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy52aWV3cG9ydENlbnRlck9iamVjdFYodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2VudGVycyBvYmplY3QgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5IG9uIGNhbnZhcyB0byB3aGljaCBpcyB3YXMgYWRkZWQgbGFzdFxuICAgICAqIFlvdSBtaWdodCBuZWVkIHRvIGNhbGwgYHNldENvb3Jkc2Agb24gYW4gb2JqZWN0IGFmdGVyIGNlbnRlcmluZywgdG8gdXBkYXRlIGNvbnRyb2xzIGFyZWEuXG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBjZW50ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLmNlbnRlck9iamVjdCh0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDZW50ZXJzIG9iamVjdCBvbiBjdXJyZW50IHZpZXdwb3J0IG9mIGNhbnZhcyB0byB3aGljaCBpdCB3YXMgYWRkZWQgbGFzdC5cbiAgICAgKiBZb3UgbWlnaHQgbmVlZCB0byBjYWxsIGBzZXRDb29yZHNgIG9uIGFuIG9iamVjdCBhZnRlciBjZW50ZXJpbmcsIHRvIHVwZGF0ZSBjb250cm9scyBhcmVhLlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgdmlld3BvcnRDZW50ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLnZpZXdwb3J0Q2VudGVyT2JqZWN0KHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29vcmRpbmF0ZXMgb2YgYSBwb2ludGVyIHJlbGF0aXZlIHRvIGFuIG9iamVjdFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgdG8gb3BlcmF0ZSB1cG9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwb2ludGVyXSBQb2ludGVyIHRvIG9wZXJhdGUgdXBvbiAoaW5zdGVhZCBvZiBldmVudClcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIGEgcG9pbnRlciAoeCwgeSlcbiAgICAgKi9cbiAgICBnZXRMb2NhbFBvaW50ZXI6IGZ1bmN0aW9uKGUsIHBvaW50ZXIpIHtcbiAgICAgIHBvaW50ZXIgPSBwb2ludGVyIHx8IHRoaXMuY2FudmFzLmdldFBvaW50ZXIoZSk7XG4gICAgICB2YXIgcENsaWNrZWQgPSBuZXcgZmFicmljLlBvaW50KHBvaW50ZXIueCwgcG9pbnRlci55KSxcbiAgICAgICAgICBvYmplY3RMZWZ0VG9wID0gdGhpcy5fZ2V0TGVmdFRvcENvb3JkcygpO1xuICAgICAgaWYgKHRoaXMuYW5nbGUpIHtcbiAgICAgICAgcENsaWNrZWQgPSBmYWJyaWMudXRpbC5yb3RhdGVQb2ludChcbiAgICAgICAgICBwQ2xpY2tlZCwgb2JqZWN0TGVmdFRvcCwgZGVncmVlc1RvUmFkaWFucygtdGhpcy5hbmdsZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogcENsaWNrZWQueCAtIG9iamVjdExlZnRUb3AueCxcbiAgICAgICAgeTogcENsaWNrZWQueSAtIG9iamVjdExlZnRUb3AueVxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBjYW52YXMgZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIGZvciBzcGVjaWZpYyBvYmplY3RcbiAgICAgKiBjdXN0b20gY29tcG9zaXRpb24gb3BlcmF0aW9uIGZvciB0aGUgcGFydGljdWxhciBvYmplY3QgY2FuIGJlIHNwZWNpZmllZCB1c2luZyBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IFJlbmRlcmluZyBjYW52YXMgY29udGV4dFxuICAgICAqL1xuICAgIF9zZXR1cENvbXBvc2l0ZU9wZXJhdGlvbjogZnVuY3Rpb24gKGN0eCkge1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uKSB7XG4gICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSB0aGlzLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbjtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FuY2VsIGluc3RhbmNlJ3MgcnVubmluZyBhbmltYXRpb25zXG4gICAgICogb3ZlcnJpZGUgaWYgbmVjZXNzYXJ5IHRvIGRpc3Bvc2UgYXJ0aWZhY3RzIHN1Y2ggYXMgYGNsaXBQYXRoYFxuICAgICAqL1xuICAgIGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChmYWJyaWMucnVubmluZ0FuaW1hdGlvbnMpIHtcbiAgICAgICAgZmFicmljLnJ1bm5pbmdBbmltYXRpb25zLmNhbmNlbEJ5VGFyZ2V0KHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgZmFicmljLnV0aWwuY3JlYXRlQWNjZXNzb3JzICYmIGZhYnJpYy51dGlsLmNyZWF0ZUFjY2Vzc29ycyhmYWJyaWMuT2JqZWN0KTtcblxuICBleHRlbmQoZmFicmljLk9iamVjdC5wcm90b3R5cGUsIGZhYnJpYy5PYnNlcnZhYmxlKTtcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGZyYWN0aW9uIGRpZ2l0cyB0byB1c2Ugd2hlbiBzZXJpYWxpemluZyBvYmplY3QgdmFsdWVzLlxuICAgKiBZb3UgY2FuIHVzZSBpdCB0byBpbmNyZWFzZS9kZWNyZWFzZSBwcmVjaXNpb24gb2Ygc3VjaCB2YWx1ZXMgbGlrZSBsZWZ0LCB0b3AsIHNjYWxlWCwgc2NhbGVZLCBldGMuXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5PYmplY3RcbiAgICogQGNvbnN0YW50XG4gICAqIEB0eXBlIE51bWJlclxuICAgKi9cbiAgZmFicmljLk9iamVjdC5OVU1fRlJBQ1RJT05fRElHSVRTID0gMjtcblxuICAvKipcbiAgICogRGVmaW5lcyB3aGljaCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBlbmxpdmVuZWQgZnJvbSB0aGUgb2JqZWN0IHBhc3NlZCB0byB7QGxpbmsgZmFicmljLk9iamVjdC5fZnJvbU9iamVjdH1cbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLk9iamVjdFxuICAgKiBAY29uc3RhbnRcbiAgICogQHR5cGUgc3RyaW5nW11cbiAgICovXG4gIGZhYnJpYy5PYmplY3QuRU5MSVZFTl9QUk9QUyA9IFsnY2xpcFBhdGgnXTtcblxuICBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0ID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBvYmplY3QsIGNhbGxiYWNrLCBleHRyYVBhcmFtKSB7XG4gICAgdmFyIGtsYXNzID0gZmFicmljW2NsYXNzTmFtZV07XG4gICAgb2JqZWN0ID0gY2xvbmUob2JqZWN0LCB0cnVlKTtcbiAgICBmYWJyaWMudXRpbC5lbmxpdmVuUGF0dGVybnMoW29iamVjdC5maWxsLCBvYmplY3Quc3Ryb2tlXSwgZnVuY3Rpb24ocGF0dGVybnMpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0dGVybnNbMF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG9iamVjdC5maWxsID0gcGF0dGVybnNbMF07XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhdHRlcm5zWzFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBvYmplY3Quc3Ryb2tlID0gcGF0dGVybnNbMV07XG4gICAgICB9XG4gICAgICBmYWJyaWMudXRpbC5lbmxpdmVuT2JqZWN0RW5saXZhYmxlcyhvYmplY3QsIG9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBleHRyYVBhcmFtID8gbmV3IGtsYXNzKG9iamVjdFtleHRyYVBhcmFtXSwgb2JqZWN0KSA6IG5ldyBrbGFzcyhvYmplY3QpO1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhpbnN0YW5jZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogVW5pcXVlIGlkIHVzZWQgaW50ZXJuYWxseSB3aGVuIGNyZWF0aW5nIFNWRyBlbGVtZW50c1xuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuT2JqZWN0XG4gICAqIEB0eXBlIE51bWJlclxuICAgKi9cbiAgZmFicmljLk9iamVjdC5fX3VpZCA9IDA7XG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIHZhciBkZWdyZWVzVG9SYWRpYW5zID0gZmFicmljLnV0aWwuZGVncmVlc1RvUmFkaWFucyxcbiAgICAgIG9yaWdpblhPZmZzZXQgPSB7XG4gICAgICAgIGxlZnQ6IC0wLjUsXG4gICAgICAgIGNlbnRlcjogMCxcbiAgICAgICAgcmlnaHQ6IDAuNVxuICAgICAgfSxcbiAgICAgIG9yaWdpbllPZmZzZXQgPSB7XG4gICAgICAgIHRvcDogLTAuNSxcbiAgICAgICAgY2VudGVyOiAwLFxuICAgICAgICBib3R0b206IDAuNVxuICAgICAgfTtcblxuICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5PYmplY3QucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5PYmplY3QucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgdGhlIGNvb3JkaW5hdGVzIGZyb20gYSBzZXQgb2Ygb3JpZ2luIHRvIGFub3RoZXIgKGJhc2VkIG9uIHRoZSBvYmplY3QncyBkaW1lbnNpb25zKVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBwb2ludCBUaGUgcG9pbnQgd2hpY2ggY29ycmVzcG9uZHMgdG8gdGhlIG9yaWdpblggYW5kIG9yaWdpblkgcGFyYW1zXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZyb21PcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZnJvbU9yaWdpblkgVmVydGljYWwgb3JpZ2luOiAndG9wJywgJ2NlbnRlcicgb3IgJ2JvdHRvbSdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG9PcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG9PcmlnaW5ZIFZlcnRpY2FsIG9yaWdpbjogJ3RvcCcsICdjZW50ZXInIG9yICdib3R0b20nXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIHRyYW5zbGF0ZVRvR2l2ZW5PcmlnaW46IGZ1bmN0aW9uKHBvaW50LCBmcm9tT3JpZ2luWCwgZnJvbU9yaWdpblksIHRvT3JpZ2luWCwgdG9PcmlnaW5ZKSB7XG4gICAgICB2YXIgeCA9IHBvaW50LngsXG4gICAgICAgICAgeSA9IHBvaW50LnksXG4gICAgICAgICAgb2Zmc2V0WCwgb2Zmc2V0WSwgZGltO1xuXG4gICAgICBpZiAodHlwZW9mIGZyb21PcmlnaW5YID09PSAnc3RyaW5nJykge1xuICAgICAgICBmcm9tT3JpZ2luWCA9IG9yaWdpblhPZmZzZXRbZnJvbU9yaWdpblhdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZyb21PcmlnaW5YIC09IDAuNTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0b09yaWdpblggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRvT3JpZ2luWCA9IG9yaWdpblhPZmZzZXRbdG9PcmlnaW5YXTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0b09yaWdpblggLT0gMC41O1xuICAgICAgfVxuXG4gICAgICBvZmZzZXRYID0gdG9PcmlnaW5YIC0gZnJvbU9yaWdpblg7XG5cbiAgICAgIGlmICh0eXBlb2YgZnJvbU9yaWdpblkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZyb21PcmlnaW5ZID0gb3JpZ2luWU9mZnNldFtmcm9tT3JpZ2luWV07XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZnJvbU9yaWdpblkgLT0gMC41O1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRvT3JpZ2luWSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdG9PcmlnaW5ZID0gb3JpZ2luWU9mZnNldFt0b09yaWdpblldO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRvT3JpZ2luWSAtPSAwLjU7XG4gICAgICB9XG5cbiAgICAgIG9mZnNldFkgPSB0b09yaWdpblkgLSBmcm9tT3JpZ2luWTtcblxuICAgICAgaWYgKG9mZnNldFggfHwgb2Zmc2V0WSkge1xuICAgICAgICBkaW0gPSB0aGlzLl9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKTtcbiAgICAgICAgeCA9IHBvaW50LnggKyBvZmZzZXRYICogZGltLng7XG4gICAgICAgIHkgPSBwb2ludC55ICsgb2Zmc2V0WSAqIGRpbS55O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IGZhYnJpYy5Qb2ludCh4LCB5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlcyB0aGUgY29vcmRpbmF0ZXMgZnJvbSBvcmlnaW4gdG8gY2VudGVyIGNvb3JkaW5hdGVzIChiYXNlZCBvbiB0aGUgb2JqZWN0J3MgZGltZW5zaW9ucylcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9pbnQgVGhlIHBvaW50IHdoaWNoIGNvcnJlc3BvbmRzIHRvIHRoZSBvcmlnaW5YIGFuZCBvcmlnaW5ZIHBhcmFtc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWSBWZXJ0aWNhbCBvcmlnaW46ICd0b3AnLCAnY2VudGVyJyBvciAnYm90dG9tJ1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICB0cmFuc2xhdGVUb0NlbnRlclBvaW50OiBmdW5jdGlvbihwb2ludCwgb3JpZ2luWCwgb3JpZ2luWSkge1xuICAgICAgdmFyIHAgPSB0aGlzLnRyYW5zbGF0ZVRvR2l2ZW5PcmlnaW4ocG9pbnQsIG9yaWdpblgsIG9yaWdpblksICdjZW50ZXInLCAnY2VudGVyJyk7XG4gICAgICBpZiAodGhpcy5hbmdsZSkge1xuICAgICAgICByZXR1cm4gZmFicmljLnV0aWwucm90YXRlUG9pbnQocCwgcG9pbnQsIGRlZ3JlZXNUb1JhZGlhbnModGhpcy5hbmdsZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgdGhlIGNvb3JkaW5hdGVzIGZyb20gY2VudGVyIHRvIG9yaWdpbiBjb29yZGluYXRlcyAoYmFzZWQgb24gdGhlIG9iamVjdCdzIGRpbWVuc2lvbnMpXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IGNlbnRlciBUaGUgcG9pbnQgd2hpY2ggY29ycmVzcG9uZHMgdG8gY2VudGVyIG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWCBIb3Jpem9udGFsIG9yaWdpbjogJ2xlZnQnLCAnY2VudGVyJyBvciAncmlnaHQnXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpblkgVmVydGljYWwgb3JpZ2luOiAndG9wJywgJ2NlbnRlcicgb3IgJ2JvdHRvbSdcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9XG4gICAgICovXG4gICAgdHJhbnNsYXRlVG9PcmlnaW5Qb2ludDogZnVuY3Rpb24oY2VudGVyLCBvcmlnaW5YLCBvcmlnaW5ZKSB7XG4gICAgICB2YXIgcCA9IHRoaXMudHJhbnNsYXRlVG9HaXZlbk9yaWdpbihjZW50ZXIsICdjZW50ZXInLCAnY2VudGVyJywgb3JpZ2luWCwgb3JpZ2luWSk7XG4gICAgICBpZiAodGhpcy5hbmdsZSkge1xuICAgICAgICByZXR1cm4gZmFicmljLnV0aWwucm90YXRlUG9pbnQocCwgY2VudGVyLCBkZWdyZWVzVG9SYWRpYW5zKHRoaXMuYW5nbGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByZWFsIGNlbnRlciBjb29yZGluYXRlcyBvZiB0aGUgb2JqZWN0XG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIGdldENlbnRlclBvaW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsZWZ0VG9wID0gbmV3IGZhYnJpYy5Qb2ludCh0aGlzLmxlZnQsIHRoaXMudG9wKTtcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZVRvQ2VudGVyUG9pbnQobGVmdFRvcCwgdGhpcy5vcmlnaW5YLCB0aGlzLm9yaWdpblkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgb2JqZWN0IGJhc2VkIG9uIGNlbnRlciBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBwb2ludCBUaGUgcG9pbnQgd2hpY2ggY29ycmVzcG9uZHMgdG8gdGhlIG9yaWdpblggYW5kIG9yaWdpblkgcGFyYW1zXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIC8vIGdldE9yaWdpblBvaW50OiBmdW5jdGlvbihjZW50ZXIpIHtcbiAgICAvLyAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZVRvT3JpZ2luUG9pbnQoY2VudGVyLCB0aGlzLm9yaWdpblgsIHRoaXMub3JpZ2luWSk7XG4gICAgLy8gfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBvYmplY3QgYXMgaWYgaXQgaGFzIGEgZGlmZmVyZW50IG9yaWdpblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWSBWZXJ0aWNhbCBvcmlnaW46ICd0b3AnLCAnY2VudGVyJyBvciAnYm90dG9tJ1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICBnZXRQb2ludEJ5T3JpZ2luOiBmdW5jdGlvbihvcmlnaW5YLCBvcmlnaW5ZKSB7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlVG9PcmlnaW5Qb2ludChjZW50ZXIsIG9yaWdpblgsIG9yaWdpblkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwb2ludCBpbiBsb2NhbCBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBwb2ludCBUaGUgcG9pbnQgcmVsYXRpdmUgdG8gdGhlIGdsb2JhbCBjb29yZGluYXRlIHN5c3RlbVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWSBWZXJ0aWNhbCBvcmlnaW46ICd0b3AnLCAnY2VudGVyJyBvciAnYm90dG9tJ1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICB0b0xvY2FsUG9pbnQ6IGZ1bmN0aW9uKHBvaW50LCBvcmlnaW5YLCBvcmlnaW5ZKSB7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXJQb2ludCgpLFxuICAgICAgICAgIHAsIHAyO1xuXG4gICAgICBpZiAodHlwZW9mIG9yaWdpblggIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcmlnaW5ZICE9PSAndW5kZWZpbmVkJyApIHtcbiAgICAgICAgcCA9IHRoaXMudHJhbnNsYXRlVG9HaXZlbk9yaWdpbihjZW50ZXIsICdjZW50ZXInLCAnY2VudGVyJywgb3JpZ2luWCwgb3JpZ2luWSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcCA9IG5ldyBmYWJyaWMuUG9pbnQodGhpcy5sZWZ0LCB0aGlzLnRvcCk7XG4gICAgICB9XG5cbiAgICAgIHAyID0gbmV3IGZhYnJpYy5Qb2ludChwb2ludC54LCBwb2ludC55KTtcbiAgICAgIGlmICh0aGlzLmFuZ2xlKSB7XG4gICAgICAgIHAyID0gZmFicmljLnV0aWwucm90YXRlUG9pbnQocDIsIGNlbnRlciwgLWRlZ3JlZXNUb1JhZGlhbnModGhpcy5hbmdsZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHAyLnN1YnRyYWN0RXF1YWxzKHApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwb2ludCBpbiBnbG9iYWwgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gVGhlIHBvaW50IHJlbGF0aXZlIHRvIHRoZSBsb2NhbCBjb29yZGluYXRlIHN5c3RlbVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICAvLyB0b0dsb2JhbFBvaW50OiBmdW5jdGlvbihwb2ludCkge1xuICAgIC8vICAgcmV0dXJuIGZhYnJpYy51dGlsLnJvdGF0ZVBvaW50KHBvaW50LCB0aGlzLmdldENlbnRlclBvaW50KCksIGRlZ3JlZXNUb1JhZGlhbnModGhpcy5hbmdsZSkpLmFkZEVxdWFscyhuZXcgZmFicmljLlBvaW50KHRoaXMubGVmdCwgdGhpcy50b3ApKTtcbiAgICAvLyB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIG9iamVjdCB0YWtpbmcgaW50byBjb25zaWRlcmF0aW9uIHRoZSBvYmplY3QncyBvcmlnaW5cbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9zIFRoZSBuZXcgcG9zaXRpb24gb2YgdGhlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWSBWZXJ0aWNhbCBvcmlnaW46ICd0b3AnLCAnY2VudGVyJyBvciAnYm90dG9tJ1xuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgc2V0UG9zaXRpb25CeU9yaWdpbjogZnVuY3Rpb24ocG9zLCBvcmlnaW5YLCBvcmlnaW5ZKSB7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy50cmFuc2xhdGVUb0NlbnRlclBvaW50KHBvcywgb3JpZ2luWCwgb3JpZ2luWSksXG4gICAgICAgICAgcG9zaXRpb24gPSB0aGlzLnRyYW5zbGF0ZVRvT3JpZ2luUG9pbnQoY2VudGVyLCB0aGlzLm9yaWdpblgsIHRoaXMub3JpZ2luWSk7XG4gICAgICB0aGlzLnNldCgnbGVmdCcsIHBvc2l0aW9uLngpO1xuICAgICAgdGhpcy5zZXQoJ3RvcCcsIHBvc2l0aW9uLnkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG8gT25lIG9mICdsZWZ0JywgJ2NlbnRlcicsICdyaWdodCdcbiAgICAgKi9cbiAgICBhZGp1c3RQb3NpdGlvbjogZnVuY3Rpb24odG8pIHtcbiAgICAgIHZhciBhbmdsZSA9IGRlZ3JlZXNUb1JhZGlhbnModGhpcy5hbmdsZSksXG4gICAgICAgICAgaHlwb3RGdWxsID0gdGhpcy5nZXRTY2FsZWRXaWR0aCgpLFxuICAgICAgICAgIHhGdWxsID0gZmFicmljLnV0aWwuY29zKGFuZ2xlKSAqIGh5cG90RnVsbCxcbiAgICAgICAgICB5RnVsbCA9IGZhYnJpYy51dGlsLnNpbihhbmdsZSkgKiBoeXBvdEZ1bGwsXG4gICAgICAgICAgb2Zmc2V0RnJvbSwgb2Zmc2V0VG87XG5cbiAgICAgIC8vVE9ETzogdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBjb25zaWRlciBtaXhlZCBzaXR1YXRpb24gbGlrZSB0b3AsIGNlbnRlci5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcmlnaW5YID09PSAnc3RyaW5nJykge1xuICAgICAgICBvZmZzZXRGcm9tID0gb3JpZ2luWE9mZnNldFt0aGlzLm9yaWdpblhdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG9mZnNldEZyb20gPSB0aGlzLm9yaWdpblggLSAwLjU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRvID09PSAnc3RyaW5nJykge1xuICAgICAgICBvZmZzZXRUbyA9IG9yaWdpblhPZmZzZXRbdG9dO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG9mZnNldFRvID0gdG8gLSAwLjU7XG4gICAgICB9XG4gICAgICB0aGlzLmxlZnQgKz0geEZ1bGwgKiAob2Zmc2V0VG8gLSBvZmZzZXRGcm9tKTtcbiAgICAgIHRoaXMudG9wICs9IHlGdWxsICogKG9mZnNldFRvIC0gb2Zmc2V0RnJvbSk7XG4gICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgICAgdGhpcy5vcmlnaW5YID0gdG87XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG9yaWdpbi9wb3NpdGlvbiBvZiB0aGUgb2JqZWN0IHRvIGl0J3MgY2VudGVyIHBvaW50XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9zZXRPcmlnaW5Ub0NlbnRlcjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9vcmlnaW5hbE9yaWdpblggPSB0aGlzLm9yaWdpblg7XG4gICAgICB0aGlzLl9vcmlnaW5hbE9yaWdpblkgPSB0aGlzLm9yaWdpblk7XG5cbiAgICAgIHZhciBjZW50ZXIgPSB0aGlzLmdldENlbnRlclBvaW50KCk7XG5cbiAgICAgIHRoaXMub3JpZ2luWCA9ICdjZW50ZXInO1xuICAgICAgdGhpcy5vcmlnaW5ZID0gJ2NlbnRlcic7XG5cbiAgICAgIHRoaXMubGVmdCA9IGNlbnRlci54O1xuICAgICAgdGhpcy50b3AgPSBjZW50ZXIueTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBvcmlnaW4vcG9zaXRpb24gb2YgdGhlIG9iamVjdCB0byBpdCdzIG9yaWdpbmFsIG9yaWdpblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfcmVzZXRPcmlnaW46IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9yaWdpblBvaW50ID0gdGhpcy50cmFuc2xhdGVUb09yaWdpblBvaW50KFxuICAgICAgICB0aGlzLmdldENlbnRlclBvaW50KCksXG4gICAgICAgIHRoaXMuX29yaWdpbmFsT3JpZ2luWCxcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxPcmlnaW5ZKTtcblxuICAgICAgdGhpcy5vcmlnaW5YID0gdGhpcy5fb3JpZ2luYWxPcmlnaW5YO1xuICAgICAgdGhpcy5vcmlnaW5ZID0gdGhpcy5fb3JpZ2luYWxPcmlnaW5ZO1xuXG4gICAgICB0aGlzLmxlZnQgPSBvcmlnaW5Qb2ludC54O1xuICAgICAgdGhpcy50b3AgPSBvcmlnaW5Qb2ludC55O1xuXG4gICAgICB0aGlzLl9vcmlnaW5hbE9yaWdpblggPSBudWxsO1xuICAgICAgdGhpcy5fb3JpZ2luYWxPcmlnaW5ZID0gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0TGVmdFRvcENvb3JkczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGVUb09yaWdpblBvaW50KHRoaXMuZ2V0Q2VudGVyUG9pbnQoKSwgJ2xlZnQnLCAndG9wJyk7XG4gICAgfSxcbiAgfSk7XG5cbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIGZ1bmN0aW9uIGFycmF5RnJvbUNvb3Jkcyhjb29yZHMpIHtcbiAgICByZXR1cm4gW1xuICAgICAgbmV3IGZhYnJpYy5Qb2ludChjb29yZHMudGwueCwgY29vcmRzLnRsLnkpLFxuICAgICAgbmV3IGZhYnJpYy5Qb2ludChjb29yZHMudHIueCwgY29vcmRzLnRyLnkpLFxuICAgICAgbmV3IGZhYnJpYy5Qb2ludChjb29yZHMuYnIueCwgY29vcmRzLmJyLnkpLFxuICAgICAgbmV3IGZhYnJpYy5Qb2ludChjb29yZHMuYmwueCwgY29vcmRzLmJsLnkpXG4gICAgXTtcbiAgfVxuXG4gIHZhciB1dGlsID0gZmFicmljLnV0aWwsXG4gICAgICBkZWdyZWVzVG9SYWRpYW5zID0gdXRpbC5kZWdyZWVzVG9SYWRpYW5zLFxuICAgICAgbXVsdGlwbHlNYXRyaWNlcyA9IHV0aWwubXVsdGlwbHlUcmFuc2Zvcm1NYXRyaWNlcyxcbiAgICAgIHRyYW5zZm9ybVBvaW50ID0gdXRpbC50cmFuc2Zvcm1Qb2ludDtcblxuICB1dGlsLm9iamVjdC5leHRlbmQoZmFicmljLk9iamVjdC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLk9iamVjdC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpYmUgb2JqZWN0J3MgY29ybmVyIHBvc2l0aW9uIGluIGNhbnZhcyBlbGVtZW50IGNvb3JkaW5hdGVzLlxuICAgICAqIHByb3BlcnRpZXMgYXJlIGRlcGVuZGluZyBvbiBjb250cm9sIGtleXMgYW5kIHBhZGRpbmcgdGhlIG1haW4gY29udHJvbHMuXG4gICAgICogZWFjaCBwcm9wZXJ0eSBpcyBhbiBvYmplY3Qgd2l0aCB4LCB5IGFuZCBjb3JuZXIuXG4gICAgICogVGhlIGBjb3JuZXJgIHByb3BlcnR5IGNvbnRhaW5zIGluIGEgc2ltaWxhciBtYW5uZXIgdGhlIDQgcG9pbnRzIG9mIHRoZVxuICAgICAqIGludGVyYWN0aXZlIGFyZWEgb2YgdGhlIGNvcm5lci5cbiAgICAgKiBUaGUgY29vcmRpbmF0ZXMgZGVwZW5kcyBmcm9tIHRoZSBjb250cm9scyBwb3NpdGlvbkhhbmRsZXIgYW5kIGFyZSB1c2VkXG4gICAgICogdG8gZHJhdyBhbmQgbG9jYXRlIGNvbnRyb2xzXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5PYmplY3QucHJvdG90eXBlXG4gICAgICovXG4gICAgb0Nvb3JkczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlIG9iamVjdCdzIGNvcm5lciBwb3NpdGlvbiBpbiBjYW52YXMgb2JqZWN0IGFic29sdXRlIGNvb3JkaW5hdGVzXG4gICAgICogcHJvcGVydGllcyBhcmUgdGwsdHIsYmwsYnIgYW5kIGRlc2NyaWJlIHRoZSBmb3VyIG1haW4gY29ybmVyLlxuICAgICAqIGVhY2ggcHJvcGVydHkgaXMgYW4gb2JqZWN0IHdpdGggeCwgeSwgaW5zdGFuY2Ugb2YgRmFicmljLlBvaW50LlxuICAgICAqIFRoZSBjb29yZGluYXRlcyBkZXBlbmRzIGZyb20gdGhpcyBwcm9wZXJ0aWVzOiB3aWR0aCwgaGVpZ2h0LCBzY2FsZVgsIHNjYWxlWVxuICAgICAqIHNrZXdYLCBza2V3WSwgYW5nbGUsIHN0cm9rZVdpZHRoLCB0b3AsIGxlZnQuXG4gICAgICogVGhvc2UgY29vcmRpbmF0ZXMgYXJlIHVzZWZ1bCB0byB1bmRlcnN0YW5kIHdoZXJlIGFuIG9iamVjdCBpcy4gVGhleSBnZXQgdXBkYXRlZFxuICAgICAqIHdpdGggb0Nvb3JkcyBidXQgdGhleSBkbyBub3QgbmVlZCB0byBiZSB1cGRhdGVkIHdoZW4gem9vbSBvciBwYW5uaW5nIGNoYW5nZS5cbiAgICAgKiBUaGUgY29vcmRpbmF0ZXMgZ2V0IHVwZGF0ZWQgd2l0aCBAbWV0aG9kIHNldENvb3Jkcy5cbiAgICAgKiBZb3UgY2FuIGNhbGN1bGF0ZSB0aGVtIHdpdGhvdXQgdXBkYXRpbmcgd2l0aCBAbWV0aG9kIGNhbGNBQ29vcmRzKCk7XG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5PYmplY3QucHJvdG90eXBlXG4gICAgICovXG4gICAgYUNvb3JkczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlIG9iamVjdCdzIGNvcm5lciBwb3NpdGlvbiBpbiBjYW52YXMgZWxlbWVudCBjb29yZGluYXRlcy5cbiAgICAgKiBpbmNsdWRlcyBwYWRkaW5nLiBVc2VkIG9mIG9iamVjdCBkZXRlY3Rpb24uXG4gICAgICogc2V0IGFuZCByZWZyZXNoZWQgd2l0aCBzZXRDb29yZHMuXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5PYmplY3QucHJvdG90eXBlXG4gICAgICovXG4gICAgbGluZUNvb3JkczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIHN0b3JhZ2UgZm9yIG9iamVjdCB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICovXG4gICAgb3duTWF0cml4Q2FjaGU6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBzdG9yYWdlIGZvciBvYmplY3QgZnVsbCB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICovXG4gICAgbWF0cml4Q2FjaGU6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBjdXN0b20gY29udHJvbHMgaW50ZXJmYWNlXG4gICAgICogY29udHJvbHMgYXJlIGFkZGVkIGJ5IGRlZmF1bHRfY29udHJvbHMuanNcbiAgICAgKi9cbiAgICBjb250cm9sczogeyB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIGNvcnJlY3Qgc2V0IG9mIGNvb3JkaW5hdGVzIGZvciBpbnRlcnNlY3Rpb25cbiAgICAgKiB0aGlzIHdpbGwgcmV0dXJuIGVpdGhlciBhQ29vcmRzIG9yIGxpbmVDb29yZHMuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBhYnNvbHV0ZSB3aWxsIHJldHVybiBhQ29vcmRzIGlmIHRydWUgb3IgbGluZUNvb3Jkc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0ge3RsLCB0ciwgYnIsIGJsfSBwb2ludHNcbiAgICAgKi9cbiAgICBfZ2V0Q29vcmRzOiBmdW5jdGlvbihhYnNvbHV0ZSwgY2FsY3VsYXRlKSB7XG4gICAgICBpZiAoY2FsY3VsYXRlKSB7XG4gICAgICAgIHJldHVybiAoYWJzb2x1dGUgPyB0aGlzLmNhbGNBQ29vcmRzKCkgOiB0aGlzLmNhbGNMaW5lQ29vcmRzKCkpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmFDb29yZHMgfHwgIXRoaXMubGluZUNvb3Jkcykge1xuICAgICAgICB0aGlzLnNldENvb3Jkcyh0cnVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoYWJzb2x1dGUgPyB0aGlzLmFDb29yZHMgOiB0aGlzLmxpbmVDb29yZHMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gY29ycmVjdCBzZXQgb2YgY29vcmRpbmF0ZXMgZm9yIGludGVyc2VjdGlvblxuICAgICAqIHRoaXMgd2lsbCByZXR1cm4gZWl0aGVyIGFDb29yZHMgb3IgbGluZUNvb3Jkcy5cbiAgICAgKiBUaGUgY29vcmRzIGFyZSByZXR1cm5lZCBpbiBhbiBhcnJheS5cbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gW3RsLCB0ciwgYnIsIGJsXSBvZiBwb2ludHNcbiAgICAgKi9cbiAgICBnZXRDb29yZHM6IGZ1bmN0aW9uKGFic29sdXRlLCBjYWxjdWxhdGUpIHtcbiAgICAgIHJldHVybiBhcnJheUZyb21Db29yZHModGhpcy5fZ2V0Q29vcmRzKGFic29sdXRlLCBjYWxjdWxhdGUpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIG9iamVjdCBpbnRlcnNlY3RzIHdpdGggYW4gYXJlYSBmb3JtZWQgYnkgMiBwb2ludHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRUTCB0b3AtbGVmdCBwb2ludCBvZiBhcmVhXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50QlIgYm90dG9tLXJpZ2h0IHBvaW50IG9mIGFyZWFcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFthYnNvbHV0ZV0gdXNlIGNvb3JkaW5hdGVzIHdpdGhvdXQgdmlld3BvcnRUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjYWxjdWxhdGVdIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLm9Db29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIG9iamVjdCBpbnRlcnNlY3RzIHdpdGggYW4gYXJlYSBmb3JtZWQgYnkgMiBwb2ludHNcbiAgICAgKi9cbiAgICBpbnRlcnNlY3RzV2l0aFJlY3Q6IGZ1bmN0aW9uKHBvaW50VEwsIHBvaW50QlIsIGFic29sdXRlLCBjYWxjdWxhdGUpIHtcbiAgICAgIHZhciBjb29yZHMgPSB0aGlzLmdldENvb3JkcyhhYnNvbHV0ZSwgY2FsY3VsYXRlKSxcbiAgICAgICAgICBpbnRlcnNlY3Rpb24gPSBmYWJyaWMuSW50ZXJzZWN0aW9uLmludGVyc2VjdFBvbHlnb25SZWN0YW5nbGUoXG4gICAgICAgICAgICBjb29yZHMsXG4gICAgICAgICAgICBwb2ludFRMLFxuICAgICAgICAgICAgcG9pbnRCUlxuICAgICAgICAgICk7XG4gICAgICByZXR1cm4gaW50ZXJzZWN0aW9uLnN0YXR1cyA9PT0gJ0ludGVyc2VjdGlvbic7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBvYmplY3QgaW50ZXJzZWN0cyB3aXRoIGFub3RoZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIE9iamVjdCB0byB0ZXN0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbYWJzb2x1dGVdIHVzZSBjb29yZGluYXRlcyB3aXRob3V0IHZpZXdwb3J0VHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY2FsY3VsYXRlXSB1c2UgY29vcmRpbmF0ZXMgb2YgY3VycmVudCBwb3NpdGlvbiBpbnN0ZWFkIG9mIC5vQ29vcmRzXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBvYmplY3QgaW50ZXJzZWN0cyB3aXRoIGFub3RoZXIgb2JqZWN0XG4gICAgICovXG4gICAgaW50ZXJzZWN0c1dpdGhPYmplY3Q6IGZ1bmN0aW9uKG90aGVyLCBhYnNvbHV0ZSwgY2FsY3VsYXRlKSB7XG4gICAgICB2YXIgaW50ZXJzZWN0aW9uID0gZmFicmljLkludGVyc2VjdGlvbi5pbnRlcnNlY3RQb2x5Z29uUG9seWdvbihcbiAgICAgICAgdGhpcy5nZXRDb29yZHMoYWJzb2x1dGUsIGNhbGN1bGF0ZSksXG4gICAgICAgIG90aGVyLmdldENvb3JkcyhhYnNvbHV0ZSwgY2FsY3VsYXRlKVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIGludGVyc2VjdGlvbi5zdGF0dXMgPT09ICdJbnRlcnNlY3Rpb24nXG4gICAgICAgIHx8IG90aGVyLmlzQ29udGFpbmVkV2l0aGluT2JqZWN0KHRoaXMsIGFic29sdXRlLCBjYWxjdWxhdGUpXG4gICAgICAgIHx8IHRoaXMuaXNDb250YWluZWRXaXRoaW5PYmplY3Qob3RoZXIsIGFic29sdXRlLCBjYWxjdWxhdGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgb2JqZWN0IGlzIGZ1bGx5IGNvbnRhaW5lZCB3aXRoaW4gYXJlYSBvZiBhbm90aGVyIG9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBPYmplY3QgdG8gdGVzdFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2Fic29sdXRlXSB1c2UgY29vcmRpbmF0ZXMgd2l0aG91dCB2aWV3cG9ydFRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NhbGN1bGF0ZV0gdXNlIGNvb3JkaW5hdGVzIG9mIGN1cnJlbnQgcG9zaXRpb24gaW5zdGVhZCBvZiAub0Nvb3Jkc1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgb2JqZWN0IGlzIGZ1bGx5IGNvbnRhaW5lZCB3aXRoaW4gYXJlYSBvZiBhbm90aGVyIG9iamVjdFxuICAgICAqL1xuICAgIGlzQ29udGFpbmVkV2l0aGluT2JqZWN0OiBmdW5jdGlvbihvdGhlciwgYWJzb2x1dGUsIGNhbGN1bGF0ZSkge1xuICAgICAgdmFyIHBvaW50cyA9IHRoaXMuZ2V0Q29vcmRzKGFic29sdXRlLCBjYWxjdWxhdGUpLFxuICAgICAgICAgIG90aGVyQ29vcmRzID0gYWJzb2x1dGUgPyBvdGhlci5hQ29vcmRzIDogb3RoZXIubGluZUNvb3JkcyxcbiAgICAgICAgICBpID0gMCwgbGluZXMgPSBvdGhlci5fZ2V0SW1hZ2VMaW5lcyhvdGhlckNvb3Jkcyk7XG4gICAgICBmb3IgKDsgaSA8IDQ7IGkrKykge1xuICAgICAgICBpZiAoIW90aGVyLmNvbnRhaW5zUG9pbnQocG9pbnRzW2ldLCBsaW5lcykpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgb2JqZWN0IGlzIGZ1bGx5IGNvbnRhaW5lZCB3aXRoaW4gYXJlYSBmb3JtZWQgYnkgMiBwb2ludHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRUTCB0b3AtbGVmdCBwb2ludCBvZiBhcmVhXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50QlIgYm90dG9tLXJpZ2h0IHBvaW50IG9mIGFyZWFcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFthYnNvbHV0ZV0gdXNlIGNvb3JkaW5hdGVzIHdpdGhvdXQgdmlld3BvcnRUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjYWxjdWxhdGVdIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLm9Db29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIG9iamVjdCBpcyBmdWxseSBjb250YWluZWQgd2l0aGluIGFyZWEgZm9ybWVkIGJ5IDIgcG9pbnRzXG4gICAgICovXG4gICAgaXNDb250YWluZWRXaXRoaW5SZWN0OiBmdW5jdGlvbihwb2ludFRMLCBwb2ludEJSLCBhYnNvbHV0ZSwgY2FsY3VsYXRlKSB7XG4gICAgICB2YXIgYm91bmRpbmdSZWN0ID0gdGhpcy5nZXRCb3VuZGluZ1JlY3QoYWJzb2x1dGUsIGNhbGN1bGF0ZSk7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIGJvdW5kaW5nUmVjdC5sZWZ0ID49IHBvaW50VEwueCAmJlxuICAgICAgICBib3VuZGluZ1JlY3QubGVmdCArIGJvdW5kaW5nUmVjdC53aWR0aCA8PSBwb2ludEJSLnggJiZcbiAgICAgICAgYm91bmRpbmdSZWN0LnRvcCA+PSBwb2ludFRMLnkgJiZcbiAgICAgICAgYm91bmRpbmdSZWN0LnRvcCArIGJvdW5kaW5nUmVjdC5oZWlnaHQgPD0gcG9pbnRCUi55XG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgcG9pbnQgaXMgaW5zaWRlIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9pbnQgUG9pbnQgdG8gY2hlY2sgYWdhaW5zdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbbGluZXNdIG9iamVjdCByZXR1cm5lZCBmcm9tIEBtZXRob2QgX2dldEltYWdlTGluZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFthYnNvbHV0ZV0gdXNlIGNvb3JkaW5hdGVzIHdpdGhvdXQgdmlld3BvcnRUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjYWxjdWxhdGVdIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLm9Db29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHBvaW50IGlzIGluc2lkZSB0aGUgb2JqZWN0XG4gICAgICovXG4gICAgY29udGFpbnNQb2ludDogZnVuY3Rpb24ocG9pbnQsIGxpbmVzLCBhYnNvbHV0ZSwgY2FsY3VsYXRlKSB7XG4gICAgICB2YXIgY29vcmRzID0gdGhpcy5fZ2V0Q29vcmRzKGFic29sdXRlLCBjYWxjdWxhdGUpLFxuICAgICAgICAgIGxpbmVzID0gbGluZXMgfHwgdGhpcy5fZ2V0SW1hZ2VMaW5lcyhjb29yZHMpLFxuICAgICAgICAgIHhQb2ludHMgPSB0aGlzLl9maW5kQ3Jvc3NQb2ludHMocG9pbnQsIGxpbmVzKTtcbiAgICAgIC8vIGlmIHhQb2ludHMgaXMgb2RkIHRoZW4gcG9pbnQgaXMgaW5zaWRlIHRoZSBvYmplY3RcbiAgICAgIHJldHVybiAoeFBvaW50cyAhPT0gMCAmJiB4UG9pbnRzICUgMiA9PT0gMSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBvYmplY3QgaXMgY29udGFpbmVkIHdpdGhpbiB0aGUgY2FudmFzIHdpdGggY3VycmVudCB2aWV3cG9ydFRyYW5zZm9ybVxuICAgICAqIHRoZSBjaGVjayBpcyBkb25lIHN0b3BwaW5nIGF0IGZpcnN0IHBvaW50IHRoYXQgYXBwZWFycyBvbiBzY3JlZW5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjYWxjdWxhdGVdIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLmFDb29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIG9iamVjdCBpcyBmdWxseSBvciBwYXJ0aWFsbHkgY29udGFpbmVkIHdpdGhpbiBjYW52YXNcbiAgICAgKi9cbiAgICBpc09uU2NyZWVuOiBmdW5jdGlvbihjYWxjdWxhdGUpIHtcbiAgICAgIGlmICghdGhpcy5jYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBvaW50VEwgPSB0aGlzLmNhbnZhcy52cHRDb29yZHMudGwsIHBvaW50QlIgPSB0aGlzLmNhbnZhcy52cHRDb29yZHMuYnI7XG4gICAgICB2YXIgcG9pbnRzID0gdGhpcy5nZXRDb29yZHModHJ1ZSwgY2FsY3VsYXRlKTtcbiAgICAgIC8vIGlmIHNvbWUgcG9pbnQgaXMgb24gc2NyZWVuLCB0aGUgb2JqZWN0IGlzIG9uIHNjcmVlbi5cbiAgICAgIGlmIChwb2ludHMuc29tZShmdW5jdGlvbihwb2ludCkge1xuICAgICAgICByZXR1cm4gcG9pbnQueCA8PSBwb2ludEJSLnggJiYgcG9pbnQueCA+PSBwb2ludFRMLnggJiZcbiAgICAgICAgcG9pbnQueSA8PSBwb2ludEJSLnkgJiYgcG9pbnQueSA+PSBwb2ludFRMLnk7XG4gICAgICB9KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIG5vIHBvaW50cyBvbiBzY3JlZW4sIGNoZWNrIGludGVyc2VjdGlvbiB3aXRoIGFic29sdXRlIGNvb3JkaW5hdGVzXG4gICAgICBpZiAodGhpcy5pbnRlcnNlY3RzV2l0aFJlY3QocG9pbnRUTCwgcG9pbnRCUiwgdHJ1ZSwgY2FsY3VsYXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9jb250YWluc0NlbnRlck9mQ2FudmFzKHBvaW50VEwsIHBvaW50QlIsIGNhbGN1bGF0ZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgb2JqZWN0IGNvbnRhaW5zIHRoZSBtaWRwb2ludCBiZXR3ZWVuIGNhbnZhcyBleHRyZW1pdGllc1xuICAgICAqIERvZXMgbm90IG1ha2Ugc2Vuc2Ugb3V0c2lkZSB0aGUgY29udGV4dCBvZiBpc09uU2NyZWVuIGFuZCBpc1BhcnRpYWxseU9uU2NyZWVuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0ZhYnJpYy5Qb2ludH0gcG9pbnRUTCBUb3AgTGVmdCBwb2ludFxuICAgICAqIEBwYXJhbSB7RmFicmljLlBvaW50fSBwb2ludEJSIFRvcCBSaWdodCBwb2ludFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY2FsY3VsYXRlIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLm9Db29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoZSBvYmplY3QgY29udGFpbnMgdGhlIHBvaW50XG4gICAgICovXG4gICAgX2NvbnRhaW5zQ2VudGVyT2ZDYW52YXM6IGZ1bmN0aW9uKHBvaW50VEwsIHBvaW50QlIsIGNhbGN1bGF0ZSkge1xuICAgICAgLy8gd29yc3QgY2FzZSBzY2VuYXJpbyB0aGUgb2JqZWN0IGlzIHNvIGJpZyB0aGF0IGNvbnRhaW5zIHRoZSBzY3JlZW5cbiAgICAgIHZhciBjZW50ZXJQb2ludCA9IHsgeDogKHBvaW50VEwueCArIHBvaW50QlIueCkgLyAyLCB5OiAocG9pbnRUTC55ICsgcG9pbnRCUi55KSAvIDIgfTtcbiAgICAgIGlmICh0aGlzLmNvbnRhaW5zUG9pbnQoY2VudGVyUG9pbnQsIG51bGwsIHRydWUsIGNhbGN1bGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBvYmplY3QgaXMgcGFydGlhbGx5IGNvbnRhaW5lZCB3aXRoaW4gdGhlIGNhbnZhcyB3aXRoIGN1cnJlbnQgdmlld3BvcnRUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjYWxjdWxhdGVdIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLm9Db29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIG9iamVjdCBpcyBwYXJ0aWFsbHkgY29udGFpbmVkIHdpdGhpbiBjYW52YXNcbiAgICAgKi9cbiAgICBpc1BhcnRpYWxseU9uU2NyZWVuOiBmdW5jdGlvbihjYWxjdWxhdGUpIHtcbiAgICAgIGlmICghdGhpcy5jYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBvaW50VEwgPSB0aGlzLmNhbnZhcy52cHRDb29yZHMudGwsIHBvaW50QlIgPSB0aGlzLmNhbnZhcy52cHRDb29yZHMuYnI7XG4gICAgICBpZiAodGhpcy5pbnRlcnNlY3RzV2l0aFJlY3QocG9pbnRUTCwgcG9pbnRCUiwgdHJ1ZSwgY2FsY3VsYXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBhbGxQb2ludHNBcmVPdXRzaWRlID0gdGhpcy5nZXRDb29yZHModHJ1ZSwgY2FsY3VsYXRlKS5ldmVyeShmdW5jdGlvbihwb2ludCkge1xuICAgICAgICByZXR1cm4gKHBvaW50LnggPj0gcG9pbnRCUi54IHx8IHBvaW50LnggPD0gcG9pbnRUTC54KSAmJlxuICAgICAgICAocG9pbnQueSA+PSBwb2ludEJSLnkgfHwgcG9pbnQueSA8PSBwb2ludFRMLnkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWxsUG9pbnRzQXJlT3V0c2lkZSAmJiB0aGlzLl9jb250YWluc0NlbnRlck9mQ2FudmFzKHBvaW50VEwsIHBvaW50QlIsIGNhbGN1bGF0ZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IHJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIG9iamVjdCBlZGdlcyBpbiBpdCwgZ2l2ZW4gdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBjb3JuZXJzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb0Nvb3JkcyBDb29yZGluYXRlcyBvZiB0aGUgb2JqZWN0IGNvcm5lcnNcbiAgICAgKi9cbiAgICBfZ2V0SW1hZ2VMaW5lczogZnVuY3Rpb24ob0Nvb3Jkcykge1xuXG4gICAgICB2YXIgbGluZXMgPSB7XG4gICAgICAgIHRvcGxpbmU6IHtcbiAgICAgICAgICBvOiBvQ29vcmRzLnRsLFxuICAgICAgICAgIGQ6IG9Db29yZHMudHJcbiAgICAgICAgfSxcbiAgICAgICAgcmlnaHRsaW5lOiB7XG4gICAgICAgICAgbzogb0Nvb3Jkcy50cixcbiAgICAgICAgICBkOiBvQ29vcmRzLmJyXG4gICAgICAgIH0sXG4gICAgICAgIGJvdHRvbWxpbmU6IHtcbiAgICAgICAgICBvOiBvQ29vcmRzLmJyLFxuICAgICAgICAgIGQ6IG9Db29yZHMuYmxcbiAgICAgICAgfSxcbiAgICAgICAgbGVmdGxpbmU6IHtcbiAgICAgICAgICBvOiBvQ29vcmRzLmJsLFxuICAgICAgICAgIGQ6IG9Db29yZHMudGxcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gLy8gZGVidWdnaW5nXG4gICAgICAvLyBpZiAodGhpcy5jYW52YXMuY29udGV4dFRvcCkge1xuICAgICAgLy8gICB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLmZpbGxSZWN0KGxpbmVzLmJvdHRvbWxpbmUuZC54LCBsaW5lcy5ib3R0b21saW5lLmQueSwgMiwgMik7XG4gICAgICAvLyAgIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMuYm90dG9tbGluZS5vLngsIGxpbmVzLmJvdHRvbWxpbmUuby55LCAyLCAyKTtcbiAgICAgIC8vXG4gICAgICAvLyAgIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMubGVmdGxpbmUuZC54LCBsaW5lcy5sZWZ0bGluZS5kLnksIDIsIDIpO1xuICAgICAgLy8gICB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLmZpbGxSZWN0KGxpbmVzLmxlZnRsaW5lLm8ueCwgbGluZXMubGVmdGxpbmUuby55LCAyLCAyKTtcbiAgICAgIC8vXG4gICAgICAvLyAgIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMudG9wbGluZS5kLngsIGxpbmVzLnRvcGxpbmUuZC55LCAyLCAyKTtcbiAgICAgIC8vICAgdGhpcy5jYW52YXMuY29udGV4dFRvcC5maWxsUmVjdChsaW5lcy50b3BsaW5lLm8ueCwgbGluZXMudG9wbGluZS5vLnksIDIsIDIpO1xuICAgICAgLy9cbiAgICAgIC8vICAgdGhpcy5jYW52YXMuY29udGV4dFRvcC5maWxsUmVjdChsaW5lcy5yaWdodGxpbmUuZC54LCBsaW5lcy5yaWdodGxpbmUuZC55LCAyLCAyKTtcbiAgICAgIC8vICAgdGhpcy5jYW52YXMuY29udGV4dFRvcC5maWxsUmVjdChsaW5lcy5yaWdodGxpbmUuby54LCBsaW5lcy5yaWdodGxpbmUuby55LCAyLCAyKTtcbiAgICAgIC8vIH1cblxuICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgbWV0aG9kIHRvIGRldGVybWluZSBob3cgbWFueSBjcm9zcyBwb2ludHMgYXJlIGJldHdlZW4gdGhlIDQgb2JqZWN0IGVkZ2VzXG4gICAgICogYW5kIHRoZSBob3Jpem9udGFsIGxpbmUgZGV0ZXJtaW5lZCBieSBhIHBvaW50IG9uIGNhbnZhc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHBvaW50IFBvaW50IHRvIGNoZWNrXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGxpbmVzIENvb3JkaW5hdGVzIG9mIHRoZSBvYmplY3QgYmVpbmcgZXZhbHVhdGVkXG4gICAgICovXG4gICAgLy8gcmVtb3ZlIHlpLCBub3QgdXNlZCBidXQgbGVmdCBjb2RlIGhlcmUganVzdCBpbiBjYXNlLlxuICAgIF9maW5kQ3Jvc3NQb2ludHM6IGZ1bmN0aW9uKHBvaW50LCBsaW5lcykge1xuICAgICAgdmFyIGIxLCBiMiwgYTEsIGEyLCB4aSwgLy8geWksXG4gICAgICAgICAgeGNvdW50ID0gMCxcbiAgICAgICAgICBpTGluZTtcblxuICAgICAgZm9yICh2YXIgbGluZUtleSBpbiBsaW5lcykge1xuICAgICAgICBpTGluZSA9IGxpbmVzW2xpbmVLZXldO1xuICAgICAgICAvLyBvcHRpbWlzYXRpb24gMTogbGluZSBiZWxvdyBwb2ludC4gbm8gY3Jvc3NcbiAgICAgICAgaWYgKChpTGluZS5vLnkgPCBwb2ludC55KSAmJiAoaUxpbmUuZC55IDwgcG9pbnQueSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvcHRpbWlzYXRpb24gMjogbGluZSBhYm92ZSBwb2ludC4gbm8gY3Jvc3NcbiAgICAgICAgaWYgKChpTGluZS5vLnkgPj0gcG9pbnQueSkgJiYgKGlMaW5lLmQueSA+PSBwb2ludC55KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9wdGltaXNhdGlvbiAzOiB2ZXJ0aWNhbCBsaW5lIGNhc2VcbiAgICAgICAgaWYgKChpTGluZS5vLnggPT09IGlMaW5lLmQueCkgJiYgKGlMaW5lLm8ueCA+PSBwb2ludC54KSkge1xuICAgICAgICAgIHhpID0gaUxpbmUuby54O1xuICAgICAgICAgIC8vIHlpID0gcG9pbnQueTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIGludGVyc2VjdGlvbiBwb2ludFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBiMSA9IDA7XG4gICAgICAgICAgYjIgPSAoaUxpbmUuZC55IC0gaUxpbmUuby55KSAvIChpTGluZS5kLnggLSBpTGluZS5vLngpO1xuICAgICAgICAgIGExID0gcG9pbnQueSAtIGIxICogcG9pbnQueDtcbiAgICAgICAgICBhMiA9IGlMaW5lLm8ueSAtIGIyICogaUxpbmUuby54O1xuXG4gICAgICAgICAgeGkgPSAtKGExIC0gYTIpIC8gKGIxIC0gYjIpO1xuICAgICAgICAgIC8vIHlpID0gYTEgKyBiMSAqIHhpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRvbnQgY291bnQgeGkgPCBwb2ludC54IGNhc2VzXG4gICAgICAgIGlmICh4aSA+PSBwb2ludC54KSB7XG4gICAgICAgICAgeGNvdW50ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3B0aW1pc2F0aW9uIDQ6IHNwZWNpZmljIGZvciBzcXVhcmUgaW1hZ2VzXG4gICAgICAgIGlmICh4Y291bnQgPT09IDIpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHhjb3VudDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb29yZGluYXRlcyBvZiBvYmplY3QncyBib3VuZGluZyByZWN0YW5nbGUgKGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodClcbiAgICAgKiB0aGUgYm94IGlzIGludGVuZGVkIGFzIGFsaWduZWQgdG8gYXhpcyBvZiBjYW52YXMuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbYWJzb2x1dGVdIHVzZSBjb29yZGluYXRlcyB3aXRob3V0IHZpZXdwb3J0VHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY2FsY3VsYXRlXSB1c2UgY29vcmRpbmF0ZXMgb2YgY3VycmVudCBwb3NpdGlvbiBpbnN0ZWFkIG9mIC5vQ29vcmRzIC8gLmFDb29yZHNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ2V0Qm91bmRpbmdSZWN0OiBmdW5jdGlvbihhYnNvbHV0ZSwgY2FsY3VsYXRlKSB7XG4gICAgICB2YXIgY29vcmRzID0gdGhpcy5nZXRDb29yZHMoYWJzb2x1dGUsIGNhbGN1bGF0ZSk7XG4gICAgICByZXR1cm4gdXRpbC5tYWtlQm91bmRpbmdCb3hGcm9tUG9pbnRzKGNvb3Jkcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2lkdGggb2YgYW4gb2JqZWN0J3MgYm91bmRpbmcgYm94IGNvdW50aW5nIHRyYW5zZm9ybWF0aW9uc1xuICAgICAqIGJlZm9yZSAyLjAgaXQgd2FzIG5hbWVkIGdldFdpZHRoKCk7XG4gICAgICogQHJldHVybiB7TnVtYmVyfSB3aWR0aCB2YWx1ZVxuICAgICAqL1xuICAgIGdldFNjYWxlZFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKS54O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGhlaWdodCBvZiBhbiBvYmplY3QgYm91bmRpbmcgYm94IGNvdW50aW5nIHRyYW5zZm9ybWF0aW9uc1xuICAgICAqIGJlZm9yZSAyLjAgaXQgd2FzIG5hbWVkIGdldEhlaWdodCgpO1xuICAgICAqIEByZXR1cm4ge051bWJlcn0gaGVpZ2h0IHZhbHVlXG4gICAgICovXG4gICAgZ2V0U2NhbGVkSGVpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKS55O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyBzdXJlIHRoZSBzY2FsZSBpcyB2YWxpZCBhbmQgbW9kaWZpZXMgaXQgaWYgbmVjZXNzYXJ5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgX2NvbnN0cmFpblNjYWxlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKE1hdGguYWJzKHZhbHVlKSA8IHRoaXMubWluU2NhbGVMaW1pdCkge1xuICAgICAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIC10aGlzLm1pblNjYWxlTGltaXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWluU2NhbGVMaW1pdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDAuMDAwMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2NhbGVzIGFuIG9iamVjdCAoZXF1YWxseSBieSB4IGFuZCB5KVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBTY2FsZSBmYWN0b3JcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNjYWxlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdGhpcy5fc2V0KCdzY2FsZVgnLCB2YWx1ZSk7XG4gICAgICB0aGlzLl9zZXQoJ3NjYWxlWScsIHZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzLnNldENvb3JkcygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZXMgYW4gb2JqZWN0IHRvIGEgZ2l2ZW4gd2lkdGgsIHdpdGggcmVzcGVjdCB0byBib3VuZGluZyBib3ggKHNjYWxpbmcgYnkgeC95IGVxdWFsbHkpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIE5ldyB3aWR0aCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gYWJzb2x1dGUgaWdub3JlIHZpZXdwb3J0XG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzY2FsZVRvV2lkdGg6IGZ1bmN0aW9uKHZhbHVlLCBhYnNvbHV0ZSkge1xuICAgICAgLy8gYWRqdXN0IHRvIGJvdW5kaW5nIHJlY3QgZmFjdG9yIHNvIHRoYXQgcm90YXRlZCBzaGFwZXMgd291bGQgZml0IGFzIHdlbGxcbiAgICAgIHZhciBib3VuZGluZ1JlY3RGYWN0b3IgPSB0aGlzLmdldEJvdW5kaW5nUmVjdChhYnNvbHV0ZSkud2lkdGggLyB0aGlzLmdldFNjYWxlZFdpZHRoKCk7XG4gICAgICByZXR1cm4gdGhpcy5zY2FsZSh2YWx1ZSAvIHRoaXMud2lkdGggLyBib3VuZGluZ1JlY3RGYWN0b3IpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZXMgYW4gb2JqZWN0IHRvIGEgZ2l2ZW4gaGVpZ2h0LCB3aXRoIHJlc3BlY3QgdG8gYm91bmRpbmcgYm94IChzY2FsaW5nIGJ5IHgveSBlcXVhbGx5KVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBOZXcgaGVpZ2h0IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBhYnNvbHV0ZSBpZ25vcmUgdmlld3BvcnRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNjYWxlVG9IZWlnaHQ6IGZ1bmN0aW9uKHZhbHVlLCBhYnNvbHV0ZSkge1xuICAgICAgLy8gYWRqdXN0IHRvIGJvdW5kaW5nIHJlY3QgZmFjdG9yIHNvIHRoYXQgcm90YXRlZCBzaGFwZXMgd291bGQgZml0IGFzIHdlbGxcbiAgICAgIHZhciBib3VuZGluZ1JlY3RGYWN0b3IgPSB0aGlzLmdldEJvdW5kaW5nUmVjdChhYnNvbHV0ZSkuaGVpZ2h0IC8gdGhpcy5nZXRTY2FsZWRIZWlnaHQoKTtcbiAgICAgIHJldHVybiB0aGlzLnNjYWxlKHZhbHVlIC8gdGhpcy5oZWlnaHQgLyBib3VuZGluZ1JlY3RGYWN0b3IpO1xuICAgIH0sXG5cbiAgICBjYWxjTGluZUNvb3JkczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdnB0ID0gdGhpcy5nZXRWaWV3cG9ydFRyYW5zZm9ybSgpLFxuICAgICAgICAgIHBhZGRpbmcgPSB0aGlzLnBhZGRpbmcsIGFuZ2xlID0gZGVncmVlc1RvUmFkaWFucyh0aGlzLmFuZ2xlKSxcbiAgICAgICAgICBjb3MgPSB1dGlsLmNvcyhhbmdsZSksIHNpbiA9IHV0aWwuc2luKGFuZ2xlKSxcbiAgICAgICAgICBjb3NQID0gY29zICogcGFkZGluZywgc2luUCA9IHNpbiAqIHBhZGRpbmcsIGNvc1BTaW5QID0gY29zUCArIHNpblAsXG4gICAgICAgICAgY29zUE1pbnVzU2luUCA9IGNvc1AgLSBzaW5QLCBhQ29vcmRzID0gdGhpcy5jYWxjQUNvb3JkcygpO1xuXG4gICAgICB2YXIgbGluZUNvb3JkcyA9IHtcbiAgICAgICAgdGw6IHRyYW5zZm9ybVBvaW50KGFDb29yZHMudGwsIHZwdCksXG4gICAgICAgIHRyOiB0cmFuc2Zvcm1Qb2ludChhQ29vcmRzLnRyLCB2cHQpLFxuICAgICAgICBibDogdHJhbnNmb3JtUG9pbnQoYUNvb3Jkcy5ibCwgdnB0KSxcbiAgICAgICAgYnI6IHRyYW5zZm9ybVBvaW50KGFDb29yZHMuYnIsIHZwdCksXG4gICAgICB9O1xuXG4gICAgICBpZiAocGFkZGluZykge1xuICAgICAgICBsaW5lQ29vcmRzLnRsLnggLT0gY29zUE1pbnVzU2luUDtcbiAgICAgICAgbGluZUNvb3Jkcy50bC55IC09IGNvc1BTaW5QO1xuICAgICAgICBsaW5lQ29vcmRzLnRyLnggKz0gY29zUFNpblA7XG4gICAgICAgIGxpbmVDb29yZHMudHIueSAtPSBjb3NQTWludXNTaW5QO1xuICAgICAgICBsaW5lQ29vcmRzLmJsLnggLT0gY29zUFNpblA7XG4gICAgICAgIGxpbmVDb29yZHMuYmwueSArPSBjb3NQTWludXNTaW5QO1xuICAgICAgICBsaW5lQ29vcmRzLmJyLnggKz0gY29zUE1pbnVzU2luUDtcbiAgICAgICAgbGluZUNvb3Jkcy5ici55ICs9IGNvc1BTaW5QO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGluZUNvb3JkcztcbiAgICB9LFxuXG4gICAgY2FsY09Db29yZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJvdGF0ZU1hdHJpeCA9IHRoaXMuX2NhbGNSb3RhdGVNYXRyaXgoKSxcbiAgICAgICAgICB0cmFuc2xhdGVNYXRyaXggPSB0aGlzLl9jYWxjVHJhbnNsYXRlTWF0cml4KCksXG4gICAgICAgICAgdnB0ID0gdGhpcy5nZXRWaWV3cG9ydFRyYW5zZm9ybSgpLFxuICAgICAgICAgIHN0YXJ0TWF0cml4ID0gbXVsdGlwbHlNYXRyaWNlcyh2cHQsIHRyYW5zbGF0ZU1hdHJpeCksXG4gICAgICAgICAgZmluYWxNYXRyaXggPSBtdWx0aXBseU1hdHJpY2VzKHN0YXJ0TWF0cml4LCByb3RhdGVNYXRyaXgpLFxuICAgICAgICAgIGZpbmFsTWF0cml4ID0gbXVsdGlwbHlNYXRyaWNlcyhmaW5hbE1hdHJpeCwgWzEgLyB2cHRbMF0sIDAsIDAsIDEgLyB2cHRbM10sIDAsIDBdKSxcbiAgICAgICAgICBkaW0gPSB0aGlzLl9jYWxjdWxhdGVDdXJyZW50RGltZW5zaW9ucygpLFxuICAgICAgICAgIGNvb3JkcyA9IHt9O1xuICAgICAgdGhpcy5mb3JFYWNoQ29udHJvbChmdW5jdGlvbihjb250cm9sLCBrZXksIGZhYnJpY09iamVjdCkge1xuICAgICAgICBjb29yZHNba2V5XSA9IGNvbnRyb2wucG9zaXRpb25IYW5kbGVyKGRpbSwgZmluYWxNYXRyaXgsIGZhYnJpY09iamVjdCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gZGVidWcgY29kZVxuICAgICAgLy8gdmFyIGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgLy8gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIC8vICAgY2FudmFzLmNvbnRleHRUb3AuY2xlYXJSZWN0KDAsIDAsIDcwMCwgNzAwKTtcbiAgICAgIC8vICAgY2FudmFzLmNvbnRleHRUb3AuZmlsbFN0eWxlID0gJ2dyZWVuJztcbiAgICAgIC8vICAgT2JqZWN0LmtleXMoY29vcmRzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgLy8gICAgIHZhciBjb250cm9sID0gY29vcmRzW2tleV07XG4gICAgICAvLyAgICAgY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QoY29udHJvbC54LCBjb250cm9sLnksIDMsIDMpO1xuICAgICAgLy8gICB9KTtcbiAgICAgIC8vIH0sIDUwKTtcbiAgICAgIHJldHVybiBjb29yZHM7XG4gICAgfSxcblxuICAgIGNhbGNBQ29vcmRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByb3RhdGVNYXRyaXggPSB0aGlzLl9jYWxjUm90YXRlTWF0cml4KCksXG4gICAgICAgICAgdHJhbnNsYXRlTWF0cml4ID0gdGhpcy5fY2FsY1RyYW5zbGF0ZU1hdHJpeCgpLFxuICAgICAgICAgIGZpbmFsTWF0cml4ID0gbXVsdGlwbHlNYXRyaWNlcyh0cmFuc2xhdGVNYXRyaXgsIHJvdGF0ZU1hdHJpeCksXG4gICAgICAgICAgZGltID0gdGhpcy5fZ2V0VHJhbnNmb3JtZWREaW1lbnNpb25zKCksXG4gICAgICAgICAgdyA9IGRpbS54IC8gMiwgaCA9IGRpbS55IC8gMjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIGNvcm5lcnNcbiAgICAgICAgdGw6IHRyYW5zZm9ybVBvaW50KHsgeDogLXcsIHk6IC1oIH0sIGZpbmFsTWF0cml4KSxcbiAgICAgICAgdHI6IHRyYW5zZm9ybVBvaW50KHsgeDogdywgeTogLWggfSwgZmluYWxNYXRyaXgpLFxuICAgICAgICBibDogdHJhbnNmb3JtUG9pbnQoeyB4OiAtdywgeTogaCB9LCBmaW5hbE1hdHJpeCksXG4gICAgICAgIGJyOiB0cmFuc2Zvcm1Qb2ludCh7IHg6IHcsIHk6IGggfSwgZmluYWxNYXRyaXgpXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGNvcm5lciBhbmQgY29udHJvbHMgcG9zaXRpb24gY29vcmRpbmF0ZXMgYmFzZWQgb24gY3VycmVudCBhbmdsZSwgd2lkdGggYW5kIGhlaWdodCwgbGVmdCBhbmQgdG9wLlxuICAgICAqIG9Db29yZHMgYXJlIHVzZWQgdG8gZmluZCB0aGUgY29ybmVyc1xuICAgICAqIGFDb29yZHMgYXJlIHVzZWQgdG8gcXVpY2tseSBmaW5kIGFuIG9iamVjdCBvbiB0aGUgY2FudmFzXG4gICAgICogbGluZUNvb3JkcyBhcmUgdXNlZCB0byBxdWlja2x5IGZpbmQgb2JqZWN0IGR1cmluZyBwb2ludGVyIGV2ZW50cy5cbiAgICAgKiBTZWUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWJyaWNqcy9mYWJyaWMuanMvd2lraS9XaGVuLXRvLWNhbGwtc2V0Q29vcmRzfSBhbmQge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZmFicmljLWdvdGNoYXN9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtza2lwQ29ybmVyc10gc2tpcCBjYWxjdWxhdGlvbiBvZiBvQ29vcmRzLlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0Q29vcmRzOiBmdW5jdGlvbihza2lwQ29ybmVycykge1xuICAgICAgdGhpcy5hQ29vcmRzID0gdGhpcy5jYWxjQUNvb3JkcygpO1xuICAgICAgLy8gaW4gY2FzZSB3ZSBhcmUgaW4gYSBncm91cCwgZm9yIGhvdyB0aGUgaW5uZXIgZ3JvdXAgdGFyZ2V0IGNoZWNrIHdvcmtzLFxuICAgICAgLy8gbGluZUNvb3JkcyBhcmUgZXhhY3RseSBhQ29vcmRzLiBTaW5jZSB0aGUgdnB0IGdldHMgYWJzb3JiZWQgYnkgdGhlIG5vcm1hbGl6ZWQgcG9pbnRlci5cbiAgICAgIHRoaXMubGluZUNvb3JkcyA9IHRoaXMuZ3JvdXAgPyB0aGlzLmFDb29yZHMgOiB0aGlzLmNhbGNMaW5lQ29vcmRzKCk7XG4gICAgICBpZiAoc2tpcENvcm5lcnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICAvLyBzZXQgY29vcmRpbmF0ZXMgb2YgdGhlIGRyYWdnYWJsZSBib3hlcyBpbiB0aGUgY29ybmVycyB1c2VkIHRvIHNjYWxlL3JvdGF0ZSB0aGUgaW1hZ2VcbiAgICAgIHRoaXMub0Nvb3JkcyA9IHRoaXMuY2FsY09Db29yZHMoKTtcbiAgICAgIHRoaXMuX3NldENvcm5lckNvb3JkcyAmJiB0aGlzLl9zZXRDb3JuZXJDb29yZHMoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxjdWxhdGUgcm90YXRpb24gbWF0cml4IG9mIGFuIG9iamVjdFxuICAgICAqIEByZXR1cm4ge0FycmF5fSByb3RhdGlvbiBtYXRyaXggZm9yIHRoZSBvYmplY3RcbiAgICAgKi9cbiAgICBfY2FsY1JvdGF0ZU1hdHJpeDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdXRpbC5jYWxjUm90YXRlTWF0cml4KHRoaXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxjdWxhdGUgdGhlIHRyYW5zbGF0aW9uIG1hdHJpeCBmb3IgYW4gb2JqZWN0IHRyYW5zZm9ybVxuICAgICAqIEByZXR1cm4ge0FycmF5fSByb3RhdGlvbiBtYXRyaXggZm9yIHRoZSBvYmplY3RcbiAgICAgKi9cbiAgICBfY2FsY1RyYW5zbGF0ZU1hdHJpeDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgcmV0dXJuIFsxLCAwLCAwLCAxLCBjZW50ZXIueCwgY2VudGVyLnldO1xuICAgIH0sXG5cbiAgICB0cmFuc2Zvcm1NYXRyaXhLZXk6IGZ1bmN0aW9uKHNraXBHcm91cCkge1xuICAgICAgdmFyIHNlcCA9ICdfJywgcHJlZml4ID0gJyc7XG4gICAgICBpZiAoIXNraXBHcm91cCAmJiB0aGlzLmdyb3VwKSB7XG4gICAgICAgIHByZWZpeCA9IHRoaXMuZ3JvdXAudHJhbnNmb3JtTWF0cml4S2V5KHNraXBHcm91cCkgKyBzZXA7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHByZWZpeCArIHRoaXMudG9wICsgc2VwICsgdGhpcy5sZWZ0ICsgc2VwICsgdGhpcy5zY2FsZVggKyBzZXAgKyB0aGlzLnNjYWxlWSArXG4gICAgICAgIHNlcCArIHRoaXMuc2tld1ggKyBzZXAgKyB0aGlzLnNrZXdZICsgc2VwICsgdGhpcy5hbmdsZSArIHNlcCArIHRoaXMub3JpZ2luWCArIHNlcCArIHRoaXMub3JpZ2luWSArXG4gICAgICAgIHNlcCArIHRoaXMud2lkdGggKyBzZXAgKyB0aGlzLmhlaWdodCArIHNlcCArIHRoaXMuc3Ryb2tlV2lkdGggKyB0aGlzLmZsaXBYICsgdGhpcy5mbGlwWTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FsY3VsYXRlIHRyYW5zZm9ybSBtYXRyaXggdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IHRyYW5zZm9ybWF0aW9ucyBmcm9tIHRoZVxuICAgICAqIG9iamVjdCdzIHByb3BlcnRpZXMuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbc2tpcEdyb3VwXSByZXR1cm4gdHJhbnNmb3JtIG1hdHJpeCBmb3Igb2JqZWN0IG5vdCBjb3VudGluZyBwYXJlbnQgdHJhbnNmb3JtYXRpb25zXG4gICAgICogVGhlcmUgYXJlIHNvbWUgc2l0dWF0aW9uIGluIHdoaWNoIHRoaXMgaXMgdXNlZnVsIHRvIGF2b2lkIHRoZSBmYWtlIHJvdGF0aW9uLlxuICAgICAqIEByZXR1cm4ge0FycmF5fSB0cmFuc2Zvcm0gbWF0cml4IGZvciB0aGUgb2JqZWN0XG4gICAgICovXG4gICAgY2FsY1RyYW5zZm9ybU1hdHJpeDogZnVuY3Rpb24oc2tpcEdyb3VwKSB7XG4gICAgICB2YXIgbWF0cml4ID0gdGhpcy5jYWxjT3duTWF0cml4KCk7XG4gICAgICBpZiAoc2tpcEdyb3VwIHx8ICF0aGlzLmdyb3VwKSB7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgICB9XG4gICAgICB2YXIga2V5ID0gdGhpcy50cmFuc2Zvcm1NYXRyaXhLZXkoc2tpcEdyb3VwKSwgY2FjaGUgPSB0aGlzLm1hdHJpeENhY2hlIHx8ICh0aGlzLm1hdHJpeENhY2hlID0ge30pO1xuICAgICAgaWYgKGNhY2hlLmtleSA9PT0ga2V5KSB7XG4gICAgICAgIHJldHVybiBjYWNoZS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmdyb3VwKSB7XG4gICAgICAgIG1hdHJpeCA9IG11bHRpcGx5TWF0cmljZXModGhpcy5ncm91cC5jYWxjVHJhbnNmb3JtTWF0cml4KGZhbHNlKSwgbWF0cml4KTtcbiAgICAgIH1cbiAgICAgIGNhY2hlLmtleSA9IGtleTtcbiAgICAgIGNhY2hlLnZhbHVlID0gbWF0cml4O1xuICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FsY3VsYXRlIHRyYW5zZm9ybSBtYXRyaXggdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IHRyYW5zZm9ybWF0aW9ucyBmcm9tIHRoZVxuICAgICAqIG9iamVjdCdzIHByb3BlcnRpZXMsIHRoaXMgbWF0cml4IGRvZXMgbm90IGluY2x1ZGUgdGhlIGdyb3VwIHRyYW5zZm9ybWF0aW9uXG4gICAgICogQHJldHVybiB7QXJyYXl9IHRyYW5zZm9ybSBtYXRyaXggZm9yIHRoZSBvYmplY3RcbiAgICAgKi9cbiAgICBjYWxjT3duTWF0cml4OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrZXkgPSB0aGlzLnRyYW5zZm9ybU1hdHJpeEtleSh0cnVlKSwgY2FjaGUgPSB0aGlzLm93bk1hdHJpeENhY2hlIHx8ICh0aGlzLm93bk1hdHJpeENhY2hlID0ge30pO1xuICAgICAgaWYgKGNhY2hlLmtleSA9PT0ga2V5KSB7XG4gICAgICAgIHJldHVybiBjYWNoZS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciB0TWF0cml4ID0gdGhpcy5fY2FsY1RyYW5zbGF0ZU1hdHJpeCgpLFxuICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhbmdsZTogdGhpcy5hbmdsZSxcbiAgICAgICAgICAgIHRyYW5zbGF0ZVg6IHRNYXRyaXhbNF0sXG4gICAgICAgICAgICB0cmFuc2xhdGVZOiB0TWF0cml4WzVdLFxuICAgICAgICAgICAgc2NhbGVYOiB0aGlzLnNjYWxlWCxcbiAgICAgICAgICAgIHNjYWxlWTogdGhpcy5zY2FsZVksXG4gICAgICAgICAgICBza2V3WDogdGhpcy5za2V3WCxcbiAgICAgICAgICAgIHNrZXdZOiB0aGlzLnNrZXdZLFxuICAgICAgICAgICAgZmxpcFg6IHRoaXMuZmxpcFgsXG4gICAgICAgICAgICBmbGlwWTogdGhpcy5mbGlwWSxcbiAgICAgICAgICB9O1xuICAgICAgY2FjaGUua2V5ID0ga2V5O1xuICAgICAgY2FjaGUudmFsdWUgPSB1dGlsLmNvbXBvc2VNYXRyaXgob3B0aW9ucyk7XG4gICAgICByZXR1cm4gY2FjaGUudmFsdWU7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogQ2FsY3VsYXRlIG9iamVjdCBkaW1lbnNpb25zIGZyb20gaXRzIHByb3BlcnRpZXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gLnggd2lkdGggZGltZW5zaW9uXG4gICAgICogQHJldHVybiB7T2JqZWN0fSAueSBoZWlnaHQgZGltZW5zaW9uXG4gICAgICovXG4gICAgX2dldE5vblRyYW5zZm9ybWVkRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc3Ryb2tlV2lkdGggPSB0aGlzLnN0cm9rZVdpZHRoLFxuICAgICAgICAgIHcgPSB0aGlzLndpZHRoICsgc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgaCA9IHRoaXMuaGVpZ2h0ICsgc3Ryb2tlV2lkdGg7XG4gICAgICByZXR1cm4geyB4OiB3LCB5OiBoIH07XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogQ2FsY3VsYXRlIG9iamVjdCBib3VuZGluZyBib3ggZGltZW5zaW9ucyBmcm9tIGl0cyBwcm9wZXJ0aWVzIHNjYWxlLCBza2V3LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBza2V3WCwgYSB2YWx1ZSB0byBvdmVycmlkZSBjdXJyZW50IHNrZXdYXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNrZXdZLCBhIHZhbHVlIHRvIG92ZXJyaWRlIGN1cnJlbnQgc2tld1lcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gLnggd2lkdGggZGltZW5zaW9uXG4gICAgICogQHJldHVybiB7T2JqZWN0fSAueSBoZWlnaHQgZGltZW5zaW9uXG4gICAgICovXG4gICAgX2dldFRyYW5zZm9ybWVkRGltZW5zaW9uczogZnVuY3Rpb24oc2tld1gsIHNrZXdZKSB7XG4gICAgICBpZiAodHlwZW9mIHNrZXdYID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBza2V3WCA9IHRoaXMuc2tld1g7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHNrZXdZID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBza2V3WSA9IHRoaXMuc2tld1k7XG4gICAgICB9XG4gICAgICB2YXIgZGltZW5zaW9ucywgZGltWCwgZGltWSxcbiAgICAgICAgICBub1NrZXcgPSBza2V3WCA9PT0gMCAmJiBza2V3WSA9PT0gMDtcblxuICAgICAgaWYgKHRoaXMuc3Ryb2tlVW5pZm9ybSkge1xuICAgICAgICBkaW1YID0gdGhpcy53aWR0aDtcbiAgICAgICAgZGltWSA9IHRoaXMuaGVpZ2h0O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGRpbWVuc2lvbnMgPSB0aGlzLl9nZXROb25UcmFuc2Zvcm1lZERpbWVuc2lvbnMoKTtcbiAgICAgICAgZGltWCA9IGRpbWVuc2lvbnMueDtcbiAgICAgICAgZGltWSA9IGRpbWVuc2lvbnMueTtcbiAgICAgIH1cbiAgICAgIGlmIChub1NrZXcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmFsaXplRGltZW5zaW9ucyhkaW1YICogdGhpcy5zY2FsZVgsIGRpbVkgKiB0aGlzLnNjYWxlWSk7XG4gICAgICB9XG4gICAgICB2YXIgYmJveCA9IHV0aWwuc2l6ZUFmdGVyVHJhbnNmb3JtKGRpbVgsIGRpbVksIHtcbiAgICAgICAgc2NhbGVYOiB0aGlzLnNjYWxlWCxcbiAgICAgICAgc2NhbGVZOiB0aGlzLnNjYWxlWSxcbiAgICAgICAgc2tld1g6IHNrZXdYLFxuICAgICAgICBza2V3WTogc2tld1ksXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLl9maW5hbGl6ZURpbWVuc2lvbnMoYmJveC54LCBiYm94LnkpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIENhbGN1bGF0ZSBvYmplY3QgYm91bmRpbmcgYm94IGRpbWVuc2lvbnMgZnJvbSBpdHMgcHJvcGVydGllcyBzY2FsZSwgc2tldy5cbiAgICAgKiBAcGFyYW0gTnVtYmVyIHdpZHRoIHdpZHRoIG9mIHRoZSBiYm94XG4gICAgICogQHBhcmFtIE51bWJlciBoZWlnaHQgaGVpZ2h0IG9mIHRoZSBiYm94XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IC54IGZpbmFsaXplZCB3aWR0aCBkaW1lbnNpb25cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IC55IGZpbmFsaXplZCBoZWlnaHQgZGltZW5zaW9uXG4gICAgICovXG4gICAgX2ZpbmFsaXplRGltZW5zaW9uczogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3Ryb2tlVW5pZm9ybSA/XG4gICAgICAgIHsgeDogd2lkdGggKyB0aGlzLnN0cm9rZVdpZHRoLCB5OiBoZWlnaHQgKyB0aGlzLnN0cm9rZVdpZHRoIH1cbiAgICAgICAgOlxuICAgICAgICB7IHg6IHdpZHRoLCB5OiBoZWlnaHQgfTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBDYWxjdWxhdGUgb2JqZWN0IGRpbWVuc2lvbnMgZm9yIGNvbnRyb2xzIGJveCwgaW5jbHVkaW5nIHBhZGRpbmcgYW5kIGNhbnZhcyB6b29tLlxuICAgICAqIGFuZCBhY3RpdmUgc2VsZWN0aW9uXG4gICAgICogcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jYWxjdWxhdGVDdXJyZW50RGltZW5zaW9uczogZnVuY3Rpb24oKSAge1xuICAgICAgdmFyIHZwdCA9IHRoaXMuZ2V0Vmlld3BvcnRUcmFuc2Zvcm0oKSxcbiAgICAgICAgICBkaW0gPSB0aGlzLl9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKSxcbiAgICAgICAgICBwID0gdHJhbnNmb3JtUG9pbnQoZGltLCB2cHQsIHRydWUpO1xuICAgICAgcmV0dXJuIHAuc2NhbGFyQWRkKDIgKiB0aGlzLnBhZGRpbmcpO1xuICAgIH0sXG4gIH0pO1xufSkoKTtcblxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5PYmplY3QucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5PYmplY3QucHJvdG90eXBlICovIHtcblxuICAvKipcbiAgICogTW92ZXMgYW4gb2JqZWN0IHRvIHRoZSBib3R0b20gb2YgdGhlIHN0YWNrIG9mIGRyYXduIG9iamVjdHNcbiAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBzZW5kVG9CYWNrOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5ncm91cCkge1xuICAgICAgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUuc2VuZFRvQmFjay5jYWxsKHRoaXMuZ3JvdXAsIHRoaXMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgdGhpcy5jYW52YXMuc2VuZFRvQmFjayh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGFuIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzdGFjayBvZiBkcmF3biBvYmplY3RzXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgYnJpbmdUb0Zyb250OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5ncm91cCkge1xuICAgICAgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUuYnJpbmdUb0Zyb250LmNhbGwodGhpcy5ncm91cCwgdGhpcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhcy5icmluZ1RvRnJvbnQodGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb3ZlcyBhbiBvYmplY3QgZG93biBpbiBzdGFjayBvZiBkcmF3biBvYmplY3RzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ludGVyc2VjdGluZ10gSWYgYHRydWVgLCBzZW5kIG9iamVjdCBiZWhpbmQgbmV4dCBsb3dlciBpbnRlcnNlY3Rpbmcgb2JqZWN0XG4gICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgc2VuZEJhY2t3YXJkczogZnVuY3Rpb24oaW50ZXJzZWN0aW5nKSB7XG4gICAgaWYgKHRoaXMuZ3JvdXApIHtcbiAgICAgIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLnNlbmRCYWNrd2FyZHMuY2FsbCh0aGlzLmdyb3VwLCB0aGlzLCBpbnRlcnNlY3RpbmcpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgdGhpcy5jYW52YXMuc2VuZEJhY2t3YXJkcyh0aGlzLCBpbnRlcnNlY3RpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogTW92ZXMgYW4gb2JqZWN0IHVwIGluIHN0YWNrIG9mIGRyYXduIG9iamVjdHNcbiAgICogQHBhcmFtIHtCb29sZWFufSBbaW50ZXJzZWN0aW5nXSBJZiBgdHJ1ZWAsIHNlbmQgb2JqZWN0IGluIGZyb250IG9mIG5leHQgdXBwZXIgaW50ZXJzZWN0aW5nIG9iamVjdFxuICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGJyaW5nRm9yd2FyZDogZnVuY3Rpb24oaW50ZXJzZWN0aW5nKSB7XG4gICAgaWYgKHRoaXMuZ3JvdXApIHtcbiAgICAgIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLmJyaW5nRm9yd2FyZC5jYWxsKHRoaXMuZ3JvdXAsIHRoaXMsIGludGVyc2VjdGluZyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhcy5icmluZ0ZvcndhcmQodGhpcywgaW50ZXJzZWN0aW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGFuIG9iamVjdCB0byBzcGVjaWZpZWQgbGV2ZWwgaW4gc3RhY2sgb2YgZHJhd24gb2JqZWN0c1xuICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggTmV3IHBvc2l0aW9uIG9mIG9iamVjdFxuICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIG1vdmVUbzogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICBpZiAodGhpcy5ncm91cCAmJiB0aGlzLmdyb3VwLnR5cGUgIT09ICdhY3RpdmVTZWxlY3Rpb24nKSB7XG4gICAgICBmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZS5tb3ZlVG8uY2FsbCh0aGlzLmdyb3VwLCB0aGlzLCBpbmRleCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhcy5tb3ZlVG8odGhpcywgaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSk7XG5cblxuLyogX1RPX1NWR19TVEFSVF8gKi9cbihmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gZ2V0U3ZnQ29sb3JTdHJpbmcocHJvcCwgdmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gcHJvcCArICc6IG5vbmU7ICc7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlLnRvTGl2ZSkge1xuICAgICAgcmV0dXJuIHByb3AgKyAnOiB1cmwoI1NWR0lEXycgKyB2YWx1ZS5pZCArICcpOyAnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBjb2xvciA9IG5ldyBmYWJyaWMuQ29sb3IodmFsdWUpLFxuICAgICAgICAgIHN0ciA9IHByb3AgKyAnOiAnICsgY29sb3IudG9SZ2IoKSArICc7ICcsXG4gICAgICAgICAgb3BhY2l0eSA9IGNvbG9yLmdldEFscGhhKCk7XG4gICAgICBpZiAob3BhY2l0eSAhPT0gMSkge1xuICAgICAgICAvL2NoYW5nZSB0aGUgY29sb3IgaW4gcmdiICsgb3BhY2l0eVxuICAgICAgICBzdHIgKz0gcHJvcCArICctb3BhY2l0eTogJyArIG9wYWNpdHkudG9TdHJpbmcoKSArICc7ICc7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0b0ZpeGVkID0gZmFicmljLnV0aWwudG9GaXhlZDtcblxuICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5PYmplY3QucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5PYmplY3QucHJvdG90eXBlICovIHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN0eWxlcy1zdHJpbmcgZm9yIHN2Zy1leHBvcnRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNraXBTaGFkb3cgYSBib29sZWFuIHRvIHNraXAgc2hhZG93IGZpbHRlciBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0U3ZnU3R5bGVzOiBmdW5jdGlvbihza2lwU2hhZG93KSB7XG5cbiAgICAgIHZhciBmaWxsUnVsZSA9IHRoaXMuZmlsbFJ1bGUgPyB0aGlzLmZpbGxSdWxlIDogJ25vbnplcm8nLFxuICAgICAgICAgIHN0cm9rZVdpZHRoID0gdGhpcy5zdHJva2VXaWR0aCA/IHRoaXMuc3Ryb2tlV2lkdGggOiAnMCcsXG4gICAgICAgICAgc3Ryb2tlRGFzaEFycmF5ID0gdGhpcy5zdHJva2VEYXNoQXJyYXkgPyB0aGlzLnN0cm9rZURhc2hBcnJheS5qb2luKCcgJykgOiAnbm9uZScsXG4gICAgICAgICAgc3Ryb2tlRGFzaE9mZnNldCA9IHRoaXMuc3Ryb2tlRGFzaE9mZnNldCA/IHRoaXMuc3Ryb2tlRGFzaE9mZnNldCA6ICcwJyxcbiAgICAgICAgICBzdHJva2VMaW5lQ2FwID0gdGhpcy5zdHJva2VMaW5lQ2FwID8gdGhpcy5zdHJva2VMaW5lQ2FwIDogJ2J1dHQnLFxuICAgICAgICAgIHN0cm9rZUxpbmVKb2luID0gdGhpcy5zdHJva2VMaW5lSm9pbiA/IHRoaXMuc3Ryb2tlTGluZUpvaW4gOiAnbWl0ZXInLFxuICAgICAgICAgIHN0cm9rZU1pdGVyTGltaXQgPSB0aGlzLnN0cm9rZU1pdGVyTGltaXQgPyB0aGlzLnN0cm9rZU1pdGVyTGltaXQgOiAnNCcsXG4gICAgICAgICAgb3BhY2l0eSA9IHR5cGVvZiB0aGlzLm9wYWNpdHkgIT09ICd1bmRlZmluZWQnID8gdGhpcy5vcGFjaXR5IDogJzEnLFxuICAgICAgICAgIHZpc2liaWxpdHkgPSB0aGlzLnZpc2libGUgPyAnJyA6ICcgdmlzaWJpbGl0eTogaGlkZGVuOycsXG4gICAgICAgICAgZmlsdGVyID0gc2tpcFNoYWRvdyA/ICcnIDogdGhpcy5nZXRTdmdGaWx0ZXIoKSxcbiAgICAgICAgICBmaWxsID0gZ2V0U3ZnQ29sb3JTdHJpbmcoJ2ZpbGwnLCB0aGlzLmZpbGwpLFxuICAgICAgICAgIHN0cm9rZSA9IGdldFN2Z0NvbG9yU3RyaW5nKCdzdHJva2UnLCB0aGlzLnN0cm9rZSk7XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHN0cm9rZSxcbiAgICAgICAgJ3N0cm9rZS13aWR0aDogJywgc3Ryb2tlV2lkdGgsICc7ICcsXG4gICAgICAgICdzdHJva2UtZGFzaGFycmF5OiAnLCBzdHJva2VEYXNoQXJyYXksICc7ICcsXG4gICAgICAgICdzdHJva2UtbGluZWNhcDogJywgc3Ryb2tlTGluZUNhcCwgJzsgJyxcbiAgICAgICAgJ3N0cm9rZS1kYXNob2Zmc2V0OiAnLCBzdHJva2VEYXNoT2Zmc2V0LCAnOyAnLFxuICAgICAgICAnc3Ryb2tlLWxpbmVqb2luOiAnLCBzdHJva2VMaW5lSm9pbiwgJzsgJyxcbiAgICAgICAgJ3N0cm9rZS1taXRlcmxpbWl0OiAnLCBzdHJva2VNaXRlckxpbWl0LCAnOyAnLFxuICAgICAgICBmaWxsLFxuICAgICAgICAnZmlsbC1ydWxlOiAnLCBmaWxsUnVsZSwgJzsgJyxcbiAgICAgICAgJ29wYWNpdHk6ICcsIG9wYWNpdHksICc7JyxcbiAgICAgICAgZmlsdGVyLFxuICAgICAgICB2aXNpYmlsaXR5XG4gICAgICBdLmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN0eWxlcy1zdHJpbmcgZm9yIHN2Zy1leHBvcnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGUgdGhlIG9iamVjdCBmcm9tIHdoaWNoIHRvIHJldHJpZXZlIHN0eWxlIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHVzZVdoaXRlU3BhY2UgYSBib29sZWFuIHRvIGluY2x1ZGUgYW4gYWRkaXRpb25hbCBhdHRyaWJ1dGUgaW4gdGhlIHN0eWxlLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRTdmdTcGFuU3R5bGVzOiBmdW5jdGlvbihzdHlsZSwgdXNlV2hpdGVTcGFjZSkge1xuICAgICAgdmFyIHRlcm0gPSAnOyAnO1xuICAgICAgdmFyIGZvbnRGYW1pbHkgPSBzdHlsZS5mb250RmFtaWx5ID9cbiAgICAgICAgJ2ZvbnQtZmFtaWx5OiAnICsgKCgoc3R5bGUuZm9udEZhbWlseS5pbmRleE9mKCdcXCcnKSA9PT0gLTEgJiYgc3R5bGUuZm9udEZhbWlseS5pbmRleE9mKCdcIicpID09PSAtMSkgP1xuICAgICAgICAgICdcXCcnICsgc3R5bGUuZm9udEZhbWlseSAgKyAnXFwnJyA6IHN0eWxlLmZvbnRGYW1pbHkpKSArIHRlcm0gOiAnJztcbiAgICAgIHZhciBzdHJva2VXaWR0aCA9IHN0eWxlLnN0cm9rZVdpZHRoID8gJ3N0cm9rZS13aWR0aDogJyArIHN0eWxlLnN0cm9rZVdpZHRoICsgdGVybSA6ICcnLFxuICAgICAgICAgIGZvbnRGYW1pbHkgPSBmb250RmFtaWx5LFxuICAgICAgICAgIGZvbnRTaXplID0gc3R5bGUuZm9udFNpemUgPyAnZm9udC1zaXplOiAnICsgc3R5bGUuZm9udFNpemUgKyAncHgnICsgdGVybSA6ICcnLFxuICAgICAgICAgIGZvbnRTdHlsZSA9IHN0eWxlLmZvbnRTdHlsZSA/ICdmb250LXN0eWxlOiAnICsgc3R5bGUuZm9udFN0eWxlICsgdGVybSA6ICcnLFxuICAgICAgICAgIGZvbnRXZWlnaHQgPSBzdHlsZS5mb250V2VpZ2h0ID8gJ2ZvbnQtd2VpZ2h0OiAnICsgc3R5bGUuZm9udFdlaWdodCArIHRlcm0gOiAnJyxcbiAgICAgICAgICBmaWxsID0gc3R5bGUuZmlsbCA/IGdldFN2Z0NvbG9yU3RyaW5nKCdmaWxsJywgc3R5bGUuZmlsbCkgOiAnJyxcbiAgICAgICAgICBzdHJva2UgPSBzdHlsZS5zdHJva2UgPyBnZXRTdmdDb2xvclN0cmluZygnc3Ryb2tlJywgc3R5bGUuc3Ryb2tlKSA6ICcnLFxuICAgICAgICAgIHRleHREZWNvcmF0aW9uID0gdGhpcy5nZXRTdmdUZXh0RGVjb3JhdGlvbihzdHlsZSksXG4gICAgICAgICAgZGVsdGFZID0gc3R5bGUuZGVsdGFZID8gJ2Jhc2VsaW5lLXNoaWZ0OiAnICsgKC1zdHlsZS5kZWx0YVkpICsgJzsgJyA6ICcnO1xuICAgICAgaWYgKHRleHREZWNvcmF0aW9uKSB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uID0gJ3RleHQtZGVjb3JhdGlvbjogJyArIHRleHREZWNvcmF0aW9uICsgdGVybTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgc3Ryb2tlLFxuICAgICAgICBzdHJva2VXaWR0aCxcbiAgICAgICAgZm9udEZhbWlseSxcbiAgICAgICAgZm9udFNpemUsXG4gICAgICAgIGZvbnRTdHlsZSxcbiAgICAgICAgZm9udFdlaWdodCxcbiAgICAgICAgdGV4dERlY29yYXRpb24sXG4gICAgICAgIGZpbGwsXG4gICAgICAgIGRlbHRhWSxcbiAgICAgICAgdXNlV2hpdGVTcGFjZSA/ICd3aGl0ZS1zcGFjZTogcHJlOyAnIDogJydcbiAgICAgIF0uam9pbignJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGV4dC1kZWNvcmF0aW9uIHByb3BlcnR5IGZvciBzdmctZXhwb3J0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlIHRoZSBvYmplY3QgZnJvbSB3aGljaCB0byByZXRyaWV2ZSBzdHlsZSBwcm9wZXJ0aWVzXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldFN2Z1RleHREZWNvcmF0aW9uOiBmdW5jdGlvbihzdHlsZSkge1xuICAgICAgcmV0dXJuIFsnb3ZlcmxpbmUnLCAndW5kZXJsaW5lJywgJ2xpbmUtdGhyb3VnaCddLmZpbHRlcihmdW5jdGlvbihkZWNvcmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBzdHlsZVtkZWNvcmF0aW9uLnJlcGxhY2UoJy0nLCAnJyldO1xuICAgICAgfSkuam9pbignICcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGZpbHRlciBmb3Igc3ZnIHNoYWRvd1xuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRTdmdGaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2hhZG93ID8gJ2ZpbHRlcjogdXJsKCNTVkdJRF8nICsgdGhpcy5zaGFkb3cuaWQgKyAnKTsnIDogJyc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWQgYXR0cmlidXRlIGZvciBzdmcgb3V0cHV0XG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldFN2Z0NvbW1vbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdGhpcy5pZCA/ICdpZD1cIicgKyB0aGlzLmlkICsgJ1wiICcgOiAnJyxcbiAgICAgICAgdGhpcy5jbGlwUGF0aCA/ICdjbGlwLXBhdGg9XCJ1cmwoIycgKyB0aGlzLmNsaXBQYXRoLmNsaXBQYXRoSWQgKyAnKVwiICcgOiAnJyxcbiAgICAgIF0uam9pbignJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJhbnNmb3JtLXN0cmluZyBmb3Igc3ZnLWV4cG9ydFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdXNlIHRoZSBmdWxsIHRyYW5zZm9ybSBvciB0aGUgc2luZ2xlIG9iamVjdCBvbmUuXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldFN2Z1RyYW5zZm9ybTogZnVuY3Rpb24oZnVsbCwgYWRkaXRpb25hbFRyYW5zZm9ybSkge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IGZ1bGwgPyB0aGlzLmNhbGNUcmFuc2Zvcm1NYXRyaXgoKSA6IHRoaXMuY2FsY093bk1hdHJpeCgpLFxuICAgICAgICAgIHN2Z1RyYW5zZm9ybSA9ICd0cmFuc2Zvcm09XCInICsgZmFicmljLnV0aWwubWF0cml4VG9TVkcodHJhbnNmb3JtKTtcbiAgICAgIHJldHVybiBzdmdUcmFuc2Zvcm0gK1xuICAgICAgICAoYWRkaXRpb25hbFRyYW5zZm9ybSB8fCAnJykgKyAnXCIgJztcbiAgICB9LFxuXG4gICAgX3NldFNWR0JnOiBmdW5jdGlvbih0ZXh0QmdSZWN0cykge1xuICAgICAgaWYgKHRoaXMuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgIHZhciBOVU1fRlJBQ1RJT05fRElHSVRTID0gZmFicmljLk9iamVjdC5OVU1fRlJBQ1RJT05fRElHSVRTO1xuICAgICAgICB0ZXh0QmdSZWN0cy5wdXNoKFxuICAgICAgICAgICdcXHRcXHQ8cmVjdCAnLFxuICAgICAgICAgIHRoaXMuX2dldEZpbGxBdHRyaWJ1dGVzKHRoaXMuYmFja2dyb3VuZENvbG9yKSxcbiAgICAgICAgICAnIHg9XCInLFxuICAgICAgICAgIHRvRml4ZWQoLXRoaXMud2lkdGggLyAyLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAnXCIgeT1cIicsXG4gICAgICAgICAgdG9GaXhlZCgtdGhpcy5oZWlnaHQgLyAyLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAnXCIgd2lkdGg9XCInLFxuICAgICAgICAgIHRvRml4ZWQodGhpcy53aWR0aCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgJ1wiIGhlaWdodD1cIicsXG4gICAgICAgICAgdG9GaXhlZCh0aGlzLmhlaWdodCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgJ1wiPjwvcmVjdD5cXG4nKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2Ygc3ZnIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9TVkc6IGZ1bmN0aW9uKHJldml2ZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVCYXNlU1ZHTWFya3VwKHRoaXMuX3RvU1ZHKHJldml2ZXIpLCB7IHJldml2ZXI6IHJldml2ZXIgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3ZnIGNsaXBQYXRoIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdIE1ldGhvZCBmb3IgZnVydGhlciBwYXJzaW5nIG9mIHN2ZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvQ2xpcFBhdGhTVkc6IGZ1bmN0aW9uKHJldml2ZXIpIHtcbiAgICAgIHJldHVybiAnXFx0JyArIHRoaXMuX2NyZWF0ZUJhc2VDbGlwUGF0aFNWR01hcmt1cCh0aGlzLl90b1NWRyhyZXZpdmVyKSwgeyByZXZpdmVyOiByZXZpdmVyIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGVCYXNlQ2xpcFBhdGhTVkdNYXJrdXA6IGZ1bmN0aW9uKG9iamVjdE1hcmt1cCwgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB2YXIgcmV2aXZlciA9IG9wdGlvbnMucmV2aXZlcixcbiAgICAgICAgICBhZGRpdGlvbmFsVHJhbnNmb3JtID0gb3B0aW9ucy5hZGRpdGlvbmFsVHJhbnNmb3JtIHx8ICcnLFxuICAgICAgICAgIGNvbW1vblBpZWNlcyA9IFtcbiAgICAgICAgICAgIHRoaXMuZ2V0U3ZnVHJhbnNmb3JtKHRydWUsIGFkZGl0aW9uYWxUcmFuc2Zvcm0pLFxuICAgICAgICAgICAgdGhpcy5nZXRTdmdDb21tb25zKCksXG4gICAgICAgICAgXS5qb2luKCcnKSxcbiAgICAgICAgICAvLyBpbnNlcnQgY29tbW9ucyBpbiB0aGUgbWFya3VwLCBzdHlsZSBhbmQgc3ZnQ29tbW9uc1xuICAgICAgICAgIGluZGV4ID0gb2JqZWN0TWFya3VwLmluZGV4T2YoJ0NPTU1PTl9QQVJUUycpO1xuICAgICAgb2JqZWN0TWFya3VwW2luZGV4XSA9IGNvbW1vblBpZWNlcztcbiAgICAgIHJldHVybiByZXZpdmVyID8gcmV2aXZlcihvYmplY3RNYXJrdXAuam9pbignJykpIDogb2JqZWN0TWFya3VwLmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGVCYXNlU1ZHTWFya3VwOiBmdW5jdGlvbihvYmplY3RNYXJrdXAsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgdmFyIG5vU3R5bGUgPSBvcHRpb25zLm5vU3R5bGUsXG4gICAgICAgICAgcmV2aXZlciA9IG9wdGlvbnMucmV2aXZlcixcbiAgICAgICAgICBzdHlsZUluZm8gPSBub1N0eWxlID8gJycgOiAnc3R5bGU9XCInICsgdGhpcy5nZXRTdmdTdHlsZXMoKSArICdcIiAnLFxuICAgICAgICAgIHNoYWRvd0luZm8gPSBvcHRpb25zLndpdGhTaGFkb3cgPyAnc3R5bGU9XCInICsgdGhpcy5nZXRTdmdGaWx0ZXIoKSArICdcIiAnIDogJycsXG4gICAgICAgICAgY2xpcFBhdGggPSB0aGlzLmNsaXBQYXRoLFxuICAgICAgICAgIHZlY3RvckVmZmVjdCA9IHRoaXMuc3Ryb2tlVW5pZm9ybSA/ICd2ZWN0b3ItZWZmZWN0PVwibm9uLXNjYWxpbmctc3Ryb2tlXCIgJyA6ICcnLFxuICAgICAgICAgIGFic29sdXRlQ2xpcFBhdGggPSBjbGlwUGF0aCAmJiBjbGlwUGF0aC5hYnNvbHV0ZVBvc2l0aW9uZWQsXG4gICAgICAgICAgc3Ryb2tlID0gdGhpcy5zdHJva2UsIGZpbGwgPSB0aGlzLmZpbGwsIHNoYWRvdyA9IHRoaXMuc2hhZG93LFxuICAgICAgICAgIGNvbW1vblBpZWNlcywgbWFya3VwID0gW10sIGNsaXBQYXRoTWFya3VwLFxuICAgICAgICAgIC8vIGluc2VydCBjb21tb25zIGluIHRoZSBtYXJrdXAsIHN0eWxlIGFuZCBzdmdDb21tb25zXG4gICAgICAgICAgaW5kZXggPSBvYmplY3RNYXJrdXAuaW5kZXhPZignQ09NTU9OX1BBUlRTJyksXG4gICAgICAgICAgYWRkaXRpb25hbFRyYW5zZm9ybSA9IG9wdGlvbnMuYWRkaXRpb25hbFRyYW5zZm9ybTtcbiAgICAgIGlmIChjbGlwUGF0aCkge1xuICAgICAgICBjbGlwUGF0aC5jbGlwUGF0aElkID0gJ0NMSVBQQVRIXycgKyBmYWJyaWMuT2JqZWN0Ll9fdWlkKys7XG4gICAgICAgIGNsaXBQYXRoTWFya3VwID0gJzxjbGlwUGF0aCBpZD1cIicgKyBjbGlwUGF0aC5jbGlwUGF0aElkICsgJ1wiID5cXG4nICtcbiAgICAgICAgICBjbGlwUGF0aC50b0NsaXBQYXRoU1ZHKHJldml2ZXIpICtcbiAgICAgICAgICAnPC9jbGlwUGF0aD5cXG4nO1xuICAgICAgfVxuICAgICAgaWYgKGFic29sdXRlQ2xpcFBhdGgpIHtcbiAgICAgICAgbWFya3VwLnB1c2goXG4gICAgICAgICAgJzxnICcsIHNoYWRvd0luZm8sIHRoaXMuZ2V0U3ZnQ29tbW9ucygpLCAnID5cXG4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBtYXJrdXAucHVzaChcbiAgICAgICAgJzxnICcsXG4gICAgICAgIHRoaXMuZ2V0U3ZnVHJhbnNmb3JtKGZhbHNlKSxcbiAgICAgICAgIWFic29sdXRlQ2xpcFBhdGggPyBzaGFkb3dJbmZvICsgdGhpcy5nZXRTdmdDb21tb25zKCkgOiAnJyxcbiAgICAgICAgJyA+XFxuJ1xuICAgICAgKTtcbiAgICAgIGNvbW1vblBpZWNlcyA9IFtcbiAgICAgICAgc3R5bGVJbmZvLFxuICAgICAgICB2ZWN0b3JFZmZlY3QsXG4gICAgICAgIG5vU3R5bGUgPyAnJyA6IHRoaXMuYWRkUGFpbnRPcmRlcigpLCAnICcsXG4gICAgICAgIGFkZGl0aW9uYWxUcmFuc2Zvcm0gPyAndHJhbnNmb3JtPVwiJyArIGFkZGl0aW9uYWxUcmFuc2Zvcm0gKyAnXCIgJyA6ICcnLFxuICAgICAgXS5qb2luKCcnKTtcbiAgICAgIG9iamVjdE1hcmt1cFtpbmRleF0gPSBjb21tb25QaWVjZXM7XG4gICAgICBpZiAoZmlsbCAmJiBmaWxsLnRvTGl2ZSkge1xuICAgICAgICBtYXJrdXAucHVzaChmaWxsLnRvU1ZHKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJva2UgJiYgc3Ryb2tlLnRvTGl2ZSkge1xuICAgICAgICBtYXJrdXAucHVzaChzdHJva2UudG9TVkcodGhpcykpO1xuICAgICAgfVxuICAgICAgaWYgKHNoYWRvdykge1xuICAgICAgICBtYXJrdXAucHVzaChzaGFkb3cudG9TVkcodGhpcykpO1xuICAgICAgfVxuICAgICAgaWYgKGNsaXBQYXRoKSB7XG4gICAgICAgIG1hcmt1cC5wdXNoKGNsaXBQYXRoTWFya3VwKTtcbiAgICAgIH1cbiAgICAgIG1hcmt1cC5wdXNoKG9iamVjdE1hcmt1cC5qb2luKCcnKSk7XG4gICAgICBtYXJrdXAucHVzaCgnPC9nPlxcbicpO1xuICAgICAgYWJzb2x1dGVDbGlwUGF0aCAmJiBtYXJrdXAucHVzaCgnPC9nPlxcbicpO1xuICAgICAgcmV0dXJuIHJldml2ZXIgPyByZXZpdmVyKG1hcmt1cC5qb2luKCcnKSkgOiBtYXJrdXAuam9pbignJyk7XG4gICAgfSxcblxuICAgIGFkZFBhaW50T3JkZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFpbnRGaXJzdCAhPT0gJ2ZpbGwnID8gJyBwYWludC1vcmRlcj1cIicgKyB0aGlzLnBhaW50Rmlyc3QgKyAnXCIgJyA6ICcnO1xuICAgIH1cbiAgfSk7XG59KSgpO1xuLyogX1RPX1NWR19FTkRfICovXG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIHZhciBleHRlbmQgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kLFxuICAgICAgb3JpZ2luYWxTZXQgPSAnc3RhdGVQcm9wZXJ0aWVzJztcblxuICAvKlxuICAgIERlcGVuZHMgb24gYHN0YXRlUHJvcGVydGllc2BcbiAgKi9cbiAgZnVuY3Rpb24gc2F2ZVByb3BzKG9yaWdpbiwgZGVzdGluYXRpb24sIHByb3BzKSB7XG4gICAgdmFyIHRtcE9iaiA9IHsgfSwgZGVlcCA9IHRydWU7XG4gICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICB0bXBPYmpbcHJvcF0gPSBvcmlnaW5bcHJvcF07XG4gICAgfSk7XG5cbiAgICBleHRlbmQob3JpZ2luW2Rlc3RpbmF0aW9uXSwgdG1wT2JqLCBkZWVwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pc0VxdWFsKG9yaWdWYWx1ZSwgY3VycmVudFZhbHVlLCBmaXJzdFBhc3MpIHtcbiAgICBpZiAob3JpZ1ZhbHVlID09PSBjdXJyZW50VmFsdWUpIHtcbiAgICAgIC8vIGlmIHRoZSBvYmplY3RzIGFyZSBpZGVudGljYWwsIHJldHVyblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob3JpZ1ZhbHVlKSkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGN1cnJlbnRWYWx1ZSkgfHwgb3JpZ1ZhbHVlLmxlbmd0aCAhPT0gY3VycmVudFZhbHVlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gb3JpZ1ZhbHVlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICghX2lzRXF1YWwob3JpZ1ZhbHVlW2ldLCBjdXJyZW50VmFsdWVbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3JpZ1ZhbHVlICYmIHR5cGVvZiBvcmlnVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9yaWdWYWx1ZSksIGtleTtcbiAgICAgIGlmICghY3VycmVudFZhbHVlIHx8XG4gICAgICAgICAgdHlwZW9mIGN1cnJlbnRWYWx1ZSAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgICAoIWZpcnN0UGFzcyAmJiBrZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoY3VycmVudFZhbHVlKS5sZW5ndGgpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGtleXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgLy8gc2luY2UgY2xpcFBhdGggaXMgaW4gdGhlIHN0YXRlZnVsbCBjYWNoZSBsaXN0IGFuZCB0aGUgY2xpcFBhdGggb2JqZWN0c1xuICAgICAgICAvLyB3b3VsZCBiZSBpdGVyYXRlZCBhcyBhbiBvYmplY3QsIHRoaXMgd291bGQgbGVhZCB0byBwb3NzaWJsZSBpbmZpbml0ZSByZWN1cnNpb25cbiAgICAgICAgLy8gd2UgZG8gbm90IHdhbnQgdG8gY29tcGFyZSB0aG9zZS5cbiAgICAgICAgaWYgKGtleSA9PT0gJ2NhbnZhcycgfHwga2V5ID09PSAnZ3JvdXAnKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfaXNFcXVhbChvcmlnVmFsdWVba2V5XSwgY3VycmVudFZhbHVlW2tleV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuXG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLk9iamVjdC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLk9iamVjdC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIG9iamVjdCBzdGF0ZSAob25lIG9mIGl0cyBzdGF0ZSBwcm9wZXJ0aWVzKSB3YXMgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcGVydHlTZXRdIG9wdGlvbmFsIG5hbWUgZm9yIHRoZSBzZXQgb2YgcHJvcGVydHkgd2Ugd2FudCB0byBzYXZlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBpbnN0YW5jZScgc3RhdGUgaGFzIGNoYW5nZWQgc2luY2UgYHtAbGluayBmYWJyaWMuT2JqZWN0I3NhdmVTdGF0ZX1gIHdhcyBjYWxsZWRcbiAgICAgKi9cbiAgICBoYXNTdGF0ZUNoYW5nZWQ6IGZ1bmN0aW9uKHByb3BlcnR5U2V0KSB7XG4gICAgICBwcm9wZXJ0eVNldCA9IHByb3BlcnR5U2V0IHx8IG9yaWdpbmFsU2V0O1xuICAgICAgdmFyIGRhc2hlZFByb3BlcnR5U2V0ID0gJ18nICsgcHJvcGVydHlTZXQ7XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpc1tkYXNoZWRQcm9wZXJ0eVNldF0pLmxlbmd0aCA8IHRoaXNbcHJvcGVydHlTZXRdLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhX2lzRXF1YWwodGhpc1tkYXNoZWRQcm9wZXJ0eVNldF0sIHRoaXMsIHRydWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTYXZlcyBzdGF0ZSBvZiBhbiBvYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9iamVjdCB3aXRoIGFkZGl0aW9uYWwgYHN0YXRlUHJvcGVydGllc2AgYXJyYXkgdG8gaW5jbHVkZSB3aGVuIHNhdmluZyBzdGF0ZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBzYXZlU3RhdGU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wZXJ0eVNldCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wcm9wZXJ0eVNldCB8fCBvcmlnaW5hbFNldCxcbiAgICAgICAgICBkZXN0aW5hdGlvbiA9ICdfJyArIHByb3BlcnR5U2V0O1xuICAgICAgaWYgKCF0aGlzW2Rlc3RpbmF0aW9uXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR1cFN0YXRlKG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2F2ZVByb3BzKHRoaXMsIGRlc3RpbmF0aW9uLCB0aGlzW3Byb3BlcnR5U2V0XSk7XG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnN0YXRlUHJvcGVydGllcykge1xuICAgICAgICBzYXZlUHJvcHModGhpcywgZGVzdGluYXRpb24sIG9wdGlvbnMuc3RhdGVQcm9wZXJ0aWVzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXR1cHMgc3RhdGUgb2YgYW4gb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPYmplY3Qgd2l0aCBhZGRpdGlvbmFsIGBzdGF0ZVByb3BlcnRpZXNgIGFycmF5IHRvIGluY2x1ZGUgd2hlbiBzYXZpbmcgc3RhdGVcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICovXG4gICAgc2V0dXBTdGF0ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgeyB9O1xuICAgICAgdmFyIHByb3BlcnR5U2V0ID0gb3B0aW9ucy5wcm9wZXJ0eVNldCB8fCBvcmlnaW5hbFNldDtcbiAgICAgIG9wdGlvbnMucHJvcGVydHlTZXQgPSBwcm9wZXJ0eVNldDtcbiAgICAgIHRoaXNbJ18nICsgcHJvcGVydHlTZXRdID0geyB9O1xuICAgICAgdGhpcy5zYXZlU3RhdGUob3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGRlZ3JlZXNUb1JhZGlhbnMgPSBmYWJyaWMudXRpbC5kZWdyZWVzVG9SYWRpYW5zO1xuXG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLk9iamVjdC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLk9iamVjdC5wcm90b3R5cGUgKi8ge1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hpY2ggY29ybmVyIGhhcyBiZWVuIGNsaWNrZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyIFRoZSBwb2ludGVyIGluZGljYXRpbmcgdGhlIG1vdXNlIHBvc2l0aW9uXG4gICAgICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59IGNvcm5lciBjb2RlICh0bCwgdHIsIGJsLCBiciwgZXRjLiksIG9yIGZhbHNlIGlmIG5vdGhpbmcgaXMgZm91bmRcbiAgICAgKi9cbiAgICBfZmluZFRhcmdldENvcm5lcjogZnVuY3Rpb24ocG9pbnRlciwgZm9yVG91Y2gpIHtcbiAgICAgIC8vIG9iamVjdHMgaW4gZ3JvdXAsIGFueWtpbmQsIGFyZSBub3Qgc2VsZiBtb2RpZmljYWJsZSxcbiAgICAgIC8vIG11c3Qgbm90IHJldHVybiBhbiBob3ZlcmVkIGNvcm5lci5cbiAgICAgIGlmICghdGhpcy5oYXNDb250cm9scyB8fCB0aGlzLmdyb3VwIHx8ICghdGhpcy5jYW52YXMgfHwgdGhpcy5jYW52YXMuX2FjdGl2ZU9iamVjdCAhPT0gdGhpcykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZXggPSBwb2ludGVyLngsXG4gICAgICAgICAgZXkgPSBwb2ludGVyLnksXG4gICAgICAgICAgeFBvaW50cyxcbiAgICAgICAgICBsaW5lcywga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMub0Nvb3JkcyksXG4gICAgICAgICAgaiA9IGtleXMubGVuZ3RoIC0gMSwgaTtcbiAgICAgIHRoaXMuX19jb3JuZXIgPSAwO1xuXG4gICAgICAvLyBjeWNsZSBpbiByZXZlcnNlIG9yZGVyIHNvIHdlIHBpY2sgZmlyc3QgdGhlIG9uZSBvbiB0b3BcbiAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICBpID0ga2V5c1tqXTtcbiAgICAgICAgaWYgKCF0aGlzLmlzQ29udHJvbFZpc2libGUoaSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbmVzID0gdGhpcy5fZ2V0SW1hZ2VMaW5lcyhmb3JUb3VjaCA/IHRoaXMub0Nvb3Jkc1tpXS50b3VjaENvcm5lciA6IHRoaXMub0Nvb3Jkc1tpXS5jb3JuZXIpO1xuICAgICAgICAvLyAvLyBkZWJ1Z2dpbmdcbiAgICAgICAgLy9cbiAgICAgICAgLy8gdGhpcy5jYW52YXMuY29udGV4dFRvcC5maWxsUmVjdChsaW5lcy5ib3R0b21saW5lLmQueCwgbGluZXMuYm90dG9tbGluZS5kLnksIDIsIDIpO1xuICAgICAgICAvLyB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLmZpbGxSZWN0KGxpbmVzLmJvdHRvbWxpbmUuby54LCBsaW5lcy5ib3R0b21saW5lLm8ueSwgMiwgMik7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMubGVmdGxpbmUuZC54LCBsaW5lcy5sZWZ0bGluZS5kLnksIDIsIDIpO1xuICAgICAgICAvLyB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLmZpbGxSZWN0KGxpbmVzLmxlZnRsaW5lLm8ueCwgbGluZXMubGVmdGxpbmUuby55LCAyLCAyKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gdGhpcy5jYW52YXMuY29udGV4dFRvcC5maWxsUmVjdChsaW5lcy50b3BsaW5lLmQueCwgbGluZXMudG9wbGluZS5kLnksIDIsIDIpO1xuICAgICAgICAvLyB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLmZpbGxSZWN0KGxpbmVzLnRvcGxpbmUuby54LCBsaW5lcy50b3BsaW5lLm8ueSwgMiwgMik7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMucmlnaHRsaW5lLmQueCwgbGluZXMucmlnaHRsaW5lLmQueSwgMiwgMik7XG4gICAgICAgIC8vIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMucmlnaHRsaW5lLm8ueCwgbGluZXMucmlnaHRsaW5lLm8ueSwgMiwgMik7XG5cbiAgICAgICAgeFBvaW50cyA9IHRoaXMuX2ZpbmRDcm9zc1BvaW50cyh7IHg6IGV4LCB5OiBleSB9LCBsaW5lcyk7XG4gICAgICAgIGlmICh4UG9pbnRzICE9PSAwICYmIHhQb2ludHMgJSAyID09PSAxKSB7XG4gICAgICAgICAgdGhpcy5fX2Nvcm5lciA9IGk7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZWFjaCBjb250cm9sLiBUaGUgZnVuY3Rpb24gZ2V0cyBjYWxsZWQsXG4gICAgICogd2l0aCB0aGUgY29udHJvbCwgdGhlIG9iamVjdCB0aGF0IGlzIGNhbGxpbmcgdGhlIGl0ZXJhdG9yIGFuZCB0aGUgY29udHJvbCdzIGtleVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciB0aGUgY29udHJvbHMgb3ZlclxuICAgICAqL1xuICAgIGZvckVhY2hDb250cm9sOiBmdW5jdGlvbihmbikge1xuICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmNvbnRyb2xzKSB7XG4gICAgICAgIGZuKHRoaXMuY29udHJvbHNbaV0sIGksIHRoaXMpO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIGRyYWdnYWJsZSBib3hlcyBpbiB0aGUgY29ybmVycyBvZlxuICAgICAqIHRoZSBpbWFnZSB1c2VkIHRvIHNjYWxlL3JvdGF0ZSBpdC5cbiAgICAgKiBub3RlOiBpZiB3ZSB3b3VsZCBzd2l0Y2ggdG8gUk9VTkQgY29ybmVyIGFyZWEsIGFsbCBvZiB0aGlzIHdvdWxkIGRpc2FwcGVhci5cbiAgICAgKiBldmVyeXRoaW5nIHdvdWxkIHJlc29sdmUgdG8gYSBzaW5nbGUgcG9pbnQgYW5kIGEgcHl0aGFnb3JlYW4gdGhlb3JlbSBmb3IgdGhlIGRpc3RhbmNlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0Q29ybmVyQ29vcmRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb29yZHMgPSB0aGlzLm9Db29yZHM7XG5cbiAgICAgIGZvciAodmFyIGNvbnRyb2wgaW4gY29vcmRzKSB7XG4gICAgICAgIHZhciBjb250cm9sT2JqZWN0ID0gdGhpcy5jb250cm9sc1tjb250cm9sXTtcbiAgICAgICAgY29vcmRzW2NvbnRyb2xdLmNvcm5lciA9IGNvbnRyb2xPYmplY3QuY2FsY0Nvcm5lckNvb3JkcyhcbiAgICAgICAgICB0aGlzLmFuZ2xlLCB0aGlzLmNvcm5lclNpemUsIGNvb3Jkc1tjb250cm9sXS54LCBjb29yZHNbY29udHJvbF0ueSwgZmFsc2UpO1xuICAgICAgICBjb29yZHNbY29udHJvbF0udG91Y2hDb3JuZXIgPSBjb250cm9sT2JqZWN0LmNhbGNDb3JuZXJDb29yZHMoXG4gICAgICAgICAgdGhpcy5hbmdsZSwgdGhpcy50b3VjaENvcm5lclNpemUsIGNvb3Jkc1tjb250cm9sXS54LCBjb29yZHNbY29udHJvbF0ueSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGEgY29sb3JlZCBsYXllciBiZWhpbmQgdGhlIG9iamVjdCwgaW5zaWRlIGl0cyBzZWxlY3Rpb24gYm9yZGVycy5cbiAgICAgKiBSZXF1aXJlcyBwdWJsaWMgb3B0aW9uczogcGFkZGluZywgc2VsZWN0aW9uQmFja2dyb3VuZENvbG9yXG4gICAgICogdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiB0aGUgY29udGV4dCBpcyB0cmFuc2Zvcm1lZFxuICAgICAqIGhhcyBjaGVja3MgdG8gYmUgc2tpcHBlZCB3aGVuIHRoZSBvYmplY3QgaXMgb24gYSBzdGF0aWNDYW52YXNcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gZHJhdyBvblxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgZHJhd1NlbGVjdGlvbkJhY2tncm91bmQ6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbkJhY2tncm91bmRDb2xvciB8fFxuICAgICAgICAodGhpcy5jYW52YXMgJiYgIXRoaXMuY2FudmFzLmludGVyYWN0aXZlKSB8fFxuICAgICAgICAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMuX2FjdGl2ZU9iamVjdCAhPT0gdGhpcylcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXJQb2ludCgpLCB3aCA9IHRoaXMuX2NhbGN1bGF0ZUN1cnJlbnREaW1lbnNpb25zKCksXG4gICAgICAgICAgdnB0ID0gdGhpcy5jYW52YXMudmlld3BvcnRUcmFuc2Zvcm07XG4gICAgICBjdHgudHJhbnNsYXRlKGNlbnRlci54LCBjZW50ZXIueSk7XG4gICAgICBjdHguc2NhbGUoMSAvIHZwdFswXSwgMSAvIHZwdFszXSk7XG4gICAgICBjdHgucm90YXRlKGRlZ3JlZXNUb1JhZGlhbnModGhpcy5hbmdsZSkpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuc2VsZWN0aW9uQmFja2dyb3VuZENvbG9yO1xuICAgICAgY3R4LmZpbGxSZWN0KC13aC54IC8gMiwgLXdoLnkgLyAyLCB3aC54LCB3aC55KTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRHJhd3MgYm9yZGVycyBvZiBhbiBvYmplY3QncyBib3VuZGluZyBib3guXG4gICAgICogUmVxdWlyZXMgcHVibGljIHByb3BlcnRpZXM6IHdpZHRoLCBoZWlnaHRcbiAgICAgKiBSZXF1aXJlcyBwdWJsaWMgb3B0aW9uczogcGFkZGluZywgYm9yZGVyQ29sb3JcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gZHJhdyBvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZU92ZXJyaWRlIG9iamVjdCB0byBvdmVycmlkZSB0aGUgb2JqZWN0IHN0eWxlXG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBkcmF3Qm9yZGVyczogZnVuY3Rpb24oY3R4LCBzdHlsZU92ZXJyaWRlKSB7XG4gICAgICBzdHlsZU92ZXJyaWRlID0gc3R5bGVPdmVycmlkZSB8fCB7fTtcbiAgICAgIHZhciB3aCA9IHRoaXMuX2NhbGN1bGF0ZUN1cnJlbnREaW1lbnNpb25zKCksXG4gICAgICAgICAgc3Ryb2tlV2lkdGggPSB0aGlzLmJvcmRlclNjYWxlRmFjdG9yLFxuICAgICAgICAgIHdpZHRoID0gd2gueCArIHN0cm9rZVdpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IHdoLnkgKyBzdHJva2VXaWR0aCxcbiAgICAgICAgICBoYXNDb250cm9scyA9IHR5cGVvZiBzdHlsZU92ZXJyaWRlLmhhc0NvbnRyb2xzICE9PSAndW5kZWZpbmVkJyA/XG4gICAgICAgICAgICBzdHlsZU92ZXJyaWRlLmhhc0NvbnRyb2xzIDogdGhpcy5oYXNDb250cm9scyxcbiAgICAgICAgICBzaG91bGRTdHJva2UgPSBmYWxzZTtcblxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0eWxlT3ZlcnJpZGUuYm9yZGVyQ29sb3IgfHwgdGhpcy5ib3JkZXJDb2xvcjtcbiAgICAgIHRoaXMuX3NldExpbmVEYXNoKGN0eCwgc3R5bGVPdmVycmlkZS5ib3JkZXJEYXNoQXJyYXkgfHwgdGhpcy5ib3JkZXJEYXNoQXJyYXkpO1xuXG4gICAgICBjdHguc3Ryb2tlUmVjdChcbiAgICAgICAgLXdpZHRoIC8gMixcbiAgICAgICAgLWhlaWdodCAvIDIsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICAgICk7XG5cbiAgICAgIGlmIChoYXNDb250cm9scykge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuZm9yRWFjaENvbnRyb2woZnVuY3Rpb24oY29udHJvbCwga2V5LCBmYWJyaWNPYmplY3QpIHtcbiAgICAgICAgICAvLyBpbiB0aGlzIG1vbWVudCwgdGhlIGN0eCBpcyBjZW50ZXJlZCBvbiB0aGUgb2JqZWN0LlxuICAgICAgICAgIC8vIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGFib3ZlIGZ1bmN0aW9uIGFyZSB0aGUgc2l6ZSBvZiB0aGUgYmJveC5cbiAgICAgICAgICBpZiAoY29udHJvbC53aXRoQ29ubmVjdGlvbiAmJiBjb250cm9sLmdldFZpc2liaWxpdHkoZmFicmljT2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgICAvLyByZXNldCBtb3ZlbWVudCBmb3IgZWFjaCBjb250cm9sXG4gICAgICAgICAgICBzaG91bGRTdHJva2UgPSB0cnVlO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhjb250cm9sLnggKiB3aWR0aCwgY29udHJvbC55ICogaGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oXG4gICAgICAgICAgICAgIGNvbnRyb2wueCAqIHdpZHRoICsgY29udHJvbC5vZmZzZXRYLFxuICAgICAgICAgICAgICBjb250cm9sLnkgKiBoZWlnaHQgKyBjb250cm9sLm9mZnNldFlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNob3VsZFN0cm9rZSkge1xuICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib3JkZXJzIG9mIGFuIG9iamVjdCdzIGJvdW5kaW5nIGJveCB3aGVuIGl0IGlzIGluc2lkZSBhIGdyb3VwLlxuICAgICAqIFJlcXVpcmVzIHB1YmxpYyBwcm9wZXJ0aWVzOiB3aWR0aCwgaGVpZ2h0XG4gICAgICogUmVxdWlyZXMgcHVibGljIG9wdGlvbnM6IHBhZGRpbmcsIGJvcmRlckNvbG9yXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIGRyYXcgb25cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBvYmplY3QgcmVwcmVzZW50aW5nIGN1cnJlbnQgb2JqZWN0IHBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVPdmVycmlkZSBvYmplY3QgdG8gb3ZlcnJpZGUgdGhlIG9iamVjdCBzdHlsZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgZHJhd0JvcmRlcnNJbkdyb3VwOiBmdW5jdGlvbihjdHgsIG9wdGlvbnMsIHN0eWxlT3ZlcnJpZGUpIHtcbiAgICAgIHN0eWxlT3ZlcnJpZGUgPSBzdHlsZU92ZXJyaWRlIHx8IHt9O1xuICAgICAgdmFyIGJib3ggPSBmYWJyaWMudXRpbC5zaXplQWZ0ZXJUcmFuc2Zvcm0odGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIG9wdGlvbnMpLFxuICAgICAgICAgIHN0cm9rZVdpZHRoID0gdGhpcy5zdHJva2VXaWR0aCxcbiAgICAgICAgICBzdHJva2VVbmlmb3JtID0gdGhpcy5zdHJva2VVbmlmb3JtLFxuICAgICAgICAgIGJvcmRlclNjYWxlRmFjdG9yID0gdGhpcy5ib3JkZXJTY2FsZUZhY3RvcixcbiAgICAgICAgICB3aWR0aCA9XG4gICAgICAgICAgICBiYm94LnggKyBzdHJva2VXaWR0aCAqIChzdHJva2VVbmlmb3JtID8gdGhpcy5jYW52YXMuZ2V0Wm9vbSgpIDogb3B0aW9ucy5zY2FsZVgpICsgYm9yZGVyU2NhbGVGYWN0b3IsXG4gICAgICAgICAgaGVpZ2h0ID1cbiAgICAgICAgICAgIGJib3gueSArIHN0cm9rZVdpZHRoICogKHN0cm9rZVVuaWZvcm0gPyB0aGlzLmNhbnZhcy5nZXRab29tKCkgOiBvcHRpb25zLnNjYWxlWSkgKyBib3JkZXJTY2FsZUZhY3RvcjtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICB0aGlzLl9zZXRMaW5lRGFzaChjdHgsIHN0eWxlT3ZlcnJpZGUuYm9yZGVyRGFzaEFycmF5IHx8IHRoaXMuYm9yZGVyRGFzaEFycmF5KTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0eWxlT3ZlcnJpZGUuYm9yZGVyQ29sb3IgfHwgdGhpcy5ib3JkZXJDb2xvcjtcbiAgICAgIGN0eC5zdHJva2VSZWN0KFxuICAgICAgICAtd2lkdGggLyAyLFxuICAgICAgICAtaGVpZ2h0IC8gMixcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgICAgKTtcblxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBjb3JuZXJzIG9mIGFuIG9iamVjdCdzIGJvdW5kaW5nIGJveC5cbiAgICAgKiBSZXF1aXJlcyBwdWJsaWMgcHJvcGVydGllczogd2lkdGgsIGhlaWdodFxuICAgICAqIFJlcXVpcmVzIHB1YmxpYyBvcHRpb25zOiBjb3JuZXJTaXplLCBwYWRkaW5nXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIGRyYXcgb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVPdmVycmlkZSBvYmplY3QgdG8gb3ZlcnJpZGUgdGhlIG9iamVjdCBzdHlsZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgZHJhd0NvbnRyb2xzOiBmdW5jdGlvbihjdHgsIHN0eWxlT3ZlcnJpZGUpIHtcbiAgICAgIHN0eWxlT3ZlcnJpZGUgPSBzdHlsZU92ZXJyaWRlIHx8IHt9O1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIHZhciByZXRpbmFTY2FsaW5nID0gdGhpcy5jYW52YXMuZ2V0UmV0aW5hU2NhbGluZygpLCBtYXRyaXgsIHA7XG4gICAgICBjdHguc2V0VHJhbnNmb3JtKHJldGluYVNjYWxpbmcsIDAsIDAsIHJldGluYVNjYWxpbmcsIDAsIDApO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY3R4LmZpbGxTdHlsZSA9IHN0eWxlT3ZlcnJpZGUuY29ybmVyQ29sb3IgfHwgdGhpcy5jb3JuZXJDb2xvcjtcbiAgICAgIGlmICghdGhpcy50cmFuc3BhcmVudENvcm5lcnMpIHtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3R5bGVPdmVycmlkZS5jb3JuZXJTdHJva2VDb2xvciB8fCB0aGlzLmNvcm5lclN0cm9rZUNvbG9yO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2V0TGluZURhc2goY3R4LCBzdHlsZU92ZXJyaWRlLmNvcm5lckRhc2hBcnJheSB8fCB0aGlzLmNvcm5lckRhc2hBcnJheSk7XG4gICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgICAgaWYgKHRoaXMuZ3JvdXApIHtcbiAgICAgICAgLy8gZmFicmljSlMgZG9lcyBub3QgcmVhbGx5IHN1cHBvcnQgZHJhd2luZyBjb250cm9scyBpbnNpZGUgZ3JvdXBzLFxuICAgICAgICAvLyB0aGlzIHBpZWNlIG9mIGNvZGUgaGVyZSBoZWxwcyBoYXZpbmcgYXQgbGVhc3QgdGhlIGNvbnRyb2wgaW4gcGxhY2VzLlxuICAgICAgICAvLyBJZiBhbiBhcHBsaWNhdGlvbiBuZWVkcyB0byBzaG93IHNvbWUgb2JqZWN0cyBhcyBzZWxlY3RlZCBiZWNhdXNlIG9mIHNvbWUgVUkgc3RhdGVcbiAgICAgICAgLy8gY2FuIHN0aWxsIGNhbGwgT2JqZWN0Ll9yZW5kZXJDb250cm9scygpIG9uIGFueSBvYmplY3QgdGhleSBkZXNpcmUsIGluZGVwZW5kZW50bHkgb2YgZ3JvdXBzLlxuICAgICAgICAvLyB1c2luZyBubyBwYWRkaW5nLCBjaXJjdWxhciBjb250cm9scyBhbmQgaGlkaW5nIHRoZSByb3RhdGluZyBjdXJzb3IgaXMgaGlnbHkgc3VnZ2VzdGVkLFxuICAgICAgICBtYXRyaXggPSB0aGlzLmdyb3VwLmNhbGNUcmFuc2Zvcm1NYXRyaXgoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZm9yRWFjaENvbnRyb2woZnVuY3Rpb24oY29udHJvbCwga2V5LCBmYWJyaWNPYmplY3QpIHtcbiAgICAgICAgcCA9IGZhYnJpY09iamVjdC5vQ29vcmRzW2tleV07XG4gICAgICAgIGlmIChjb250cm9sLmdldFZpc2liaWxpdHkoZmFicmljT2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgaWYgKG1hdHJpeCkge1xuICAgICAgICAgICAgcCA9IGZhYnJpYy51dGlsLnRyYW5zZm9ybVBvaW50KHAsIG1hdHJpeCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRyb2wucmVuZGVyKGN0eCwgcC54LCBwLnksIHN0eWxlT3ZlcnJpZGUsIGZhYnJpY09iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIGNvbnRyb2wgaXMgdmlzaWJsZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb250cm9sS2V5IFRoZSBrZXkgb2YgdGhlIGNvbnRyb2wuIFBvc3NpYmxlIHZhbHVlcyBhcmUgJ3RsJywgJ3RyJywgJ2JyJywgJ2JsJywgJ21sJywgJ210JywgJ21yJywgJ21iJywgJ210cicuXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgdGhlIHNwZWNpZmllZCBjb250cm9sIGlzIHZpc2libGUsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGlzQ29udHJvbFZpc2libGU6IGZ1bmN0aW9uKGNvbnRyb2xLZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRyb2xzW2NvbnRyb2xLZXldICYmIHRoaXMuY29udHJvbHNbY29udHJvbEtleV0uZ2V0VmlzaWJpbGl0eSh0aGlzLCBjb250cm9sS2V5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgc3BlY2lmaWVkIGNvbnRyb2wuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRyb2xLZXkgVGhlIGtleSBvZiB0aGUgY29udHJvbC4gUG9zc2libGUgdmFsdWVzIGFyZSAndGwnLCAndHInLCAnYnInLCAnYmwnLCAnbWwnLCAnbXQnLCAnbXInLCAnbWInLCAnbXRyJy5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZpc2libGUgdHJ1ZSB0byBzZXQgdGhlIHNwZWNpZmllZCBjb250cm9sIHZpc2libGUsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0Q29udHJvbFZpc2libGU6IGZ1bmN0aW9uKGNvbnRyb2xLZXksIHZpc2libGUpIHtcbiAgICAgIGlmICghdGhpcy5fY29udHJvbHNWaXNpYmlsaXR5KSB7XG4gICAgICAgIHRoaXMuX2NvbnRyb2xzVmlzaWJpbGl0eSA9IHt9O1xuICAgICAgfVxuICAgICAgdGhpcy5fY29udHJvbHNWaXNpYmlsaXR5W2NvbnRyb2xLZXldID0gdmlzaWJsZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2aXNpYmlsaXR5IHN0YXRlIG9mIG9iamVjdCBjb250cm9scy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5ibF0gdHJ1ZSB0byBlbmFibGUgdGhlIGJvdHRvbS1sZWZ0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmJyXSB0cnVlIHRvIGVuYWJsZSB0aGUgYm90dG9tLXJpZ2h0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1iXSB0cnVlIHRvIGVuYWJsZSB0aGUgbWlkZGxlLWJvdHRvbSBjb250cm9sLCBmYWxzZSB0byBkaXNhYmxlIGl0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tbF0gdHJ1ZSB0byBlbmFibGUgdGhlIG1pZGRsZS1sZWZ0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1yXSB0cnVlIHRvIGVuYWJsZSB0aGUgbWlkZGxlLXJpZ2h0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm10XSB0cnVlIHRvIGVuYWJsZSB0aGUgbWlkZGxlLXRvcCBjb250cm9sLCBmYWxzZSB0byBkaXNhYmxlIGl0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy50bF0gdHJ1ZSB0byBlbmFibGUgdGhlIHRvcC1sZWZ0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnRyXSB0cnVlIHRvIGVuYWJsZSB0aGUgdG9wLXJpZ2h0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm10cl0gdHJ1ZSB0byBlbmFibGUgdGhlIG1pZGRsZS10b3Atcm90YXRlIGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldENvbnRyb2xzVmlzaWJpbGl0eTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG5cbiAgICAgIGZvciAodmFyIHAgaW4gb3B0aW9ucykge1xuICAgICAgICB0aGlzLnNldENvbnRyb2xWaXNpYmxlKHAsIG9wdGlvbnNbcF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogVGhpcyBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQgZXZlcnkgdGltZSBfZGlzY2FyZEFjdGl2ZU9iamVjdCBvciBfc2V0QWN0aXZlT2JqZWN0XG4gICAgICogdHJ5IHRvIHRvIGRlc2VsZWN0IHRoaXMgb2JqZWN0LiBJZiB0aGUgZnVuY3Rpb24gcmV0dXJucyB0cnVlLCB0aGUgcHJvY2VzcyBpcyBjYW5jZWxsZWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbnMgc2VudCBmcm9tIHRoZSB1cHBlciBmdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbb3B0aW9ucy5lXSBldmVudCBpZiB0aGUgcHJvY2VzcyBpcyBnZW5lcmF0ZWQgYnkgYW4gZXZlbnRcbiAgICAgKi9cbiAgICBvbkRlc2VsZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGltcGxlbWVudGVkIGJ5IHN1Yi1jbGFzc2VzLCBhcyBuZWVkZWQuXG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogVGhpcyBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQgZXZlcnkgdGltZSBfZGlzY2FyZEFjdGl2ZU9iamVjdCBvciBfc2V0QWN0aXZlT2JqZWN0XG4gICAgICogdHJ5IHRvIHRvIHNlbGVjdCB0aGlzIG9iamVjdC4gSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSwgdGhlIHByb2Nlc3MgaXMgY2FuY2VsbGVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBvcHRpb25zIHNlbnQgZnJvbSB0aGUgdXBwZXIgZnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtFdmVudH0gW29wdGlvbnMuZV0gZXZlbnQgaWYgdGhlIHByb2Nlc3MgaXMgZ2VuZXJhdGVkIGJ5IGFuIGV2ZW50XG4gICAgICovXG4gICAgb25TZWxlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaW1wbGVtZW50ZWQgYnkgc3ViLWNsYXNzZXMsIGFzIG5lZWRlZC5cbiAgICB9XG4gIH0pO1xufSkoKTtcblxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlICovIHtcblxuICAvKipcbiAgICogQW5pbWF0aW9uIGR1cmF0aW9uIChpbiBtcykgZm9yIGZ4KiBtZXRob2RzXG4gICAqIEB0eXBlIE51bWJlclxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgRlhfRFVSQVRJT046IDUwMCxcblxuICAvKipcbiAgICogQ2VudGVycyBvYmplY3QgaG9yaXpvbnRhbGx5IHdpdGggYW5pbWF0aW9uLlxuICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY2VudGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY2FsbGJhY2tzXSBDYWxsYmFja3Mgb2JqZWN0IHdpdGggb3B0aW9uYWwgXCJvbkNvbXBsZXRlXCIgYW5kL29yIFwib25DaGFuZ2VcIiBwcm9wZXJ0aWVzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja3Mub25Db21wbGV0ZV0gSW52b2tlZCBvbiBjb21wbGV0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja3Mub25DaGFuZ2VdIEludm9rZWQgb24gZXZlcnkgc3RlcCBvZiBhbmltYXRpb25cbiAgICogQHJldHVybiB7ZmFicmljLkFuaW1hdGlvbkNvbnRleHR9IGNvbnRleHRcbiAgICovXG4gIGZ4Q2VudGVyT2JqZWN0SDogZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2tzKSB7XG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzIHx8IHsgfTtcblxuICAgIHZhciBlbXB0eSA9IGZ1bmN0aW9uKCkgeyB9LFxuICAgICAgICBvbkNvbXBsZXRlID0gY2FsbGJhY2tzLm9uQ29tcGxldGUgfHwgZW1wdHksXG4gICAgICAgIG9uQ2hhbmdlID0gY2FsbGJhY2tzLm9uQ2hhbmdlIHx8IGVtcHR5LFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gZmFicmljLnV0aWwuYW5pbWF0ZSh7XG4gICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICBzdGFydFZhbHVlOiBvYmplY3QubGVmdCxcbiAgICAgIGVuZFZhbHVlOiB0aGlzLmdldENlbnRlclBvaW50KCkueCxcbiAgICAgIGR1cmF0aW9uOiB0aGlzLkZYX0RVUkFUSU9OLFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIG9iamVjdC5zZXQoJ2xlZnQnLCB2YWx1ZSk7XG4gICAgICAgIF90aGlzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICAgICAgb25DaGFuZ2UoKTtcbiAgICAgIH0sXG4gICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgb2JqZWN0LnNldENvb3JkcygpO1xuICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENlbnRlcnMgb2JqZWN0IHZlcnRpY2FsbHkgd2l0aCBhbmltYXRpb24uXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjZW50ZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjYWxsYmFja3NdIENhbGxiYWNrcyBvYmplY3Qgd2l0aCBvcHRpb25hbCBcIm9uQ29tcGxldGVcIiBhbmQvb3IgXCJvbkNoYW5nZVwiIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5vbkNvbXBsZXRlXSBJbnZva2VkIG9uIGNvbXBsZXRpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5vbkNoYW5nZV0gSW52b2tlZCBvbiBldmVyeSBzdGVwIG9mIGFuaW1hdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuQW5pbWF0aW9uQ29udGV4dH0gY29udGV4dFxuICAgKi9cbiAgZnhDZW50ZXJPYmplY3RWOiBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFja3MpIHtcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3MgfHwgeyB9O1xuXG4gICAgdmFyIGVtcHR5ID0gZnVuY3Rpb24oKSB7IH0sXG4gICAgICAgIG9uQ29tcGxldGUgPSBjYWxsYmFja3Mub25Db21wbGV0ZSB8fCBlbXB0eSxcbiAgICAgICAgb25DaGFuZ2UgPSBjYWxsYmFja3Mub25DaGFuZ2UgfHwgZW1wdHksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBmYWJyaWMudXRpbC5hbmltYXRlKHtcbiAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgIHN0YXJ0VmFsdWU6IG9iamVjdC50b3AsXG4gICAgICBlbmRWYWx1ZTogdGhpcy5nZXRDZW50ZXJQb2ludCgpLnksXG4gICAgICBkdXJhdGlvbjogdGhpcy5GWF9EVVJBVElPTixcbiAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBvYmplY3Quc2V0KCd0b3AnLCB2YWx1ZSk7XG4gICAgICAgIF90aGlzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICAgICAgb25DaGFuZ2UoKTtcbiAgICAgIH0sXG4gICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgb2JqZWN0LnNldENvb3JkcygpO1xuICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgYGZhYnJpYy5DYW52YXMjcmVtb3ZlYCBidXQgYW5pbWF0ZWRcbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIHJlbW92ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NhbGxiYWNrc10gQ2FsbGJhY2tzIG9iamVjdCB3aXRoIG9wdGlvbmFsIFwib25Db21wbGV0ZVwiIGFuZC9vciBcIm9uQ2hhbmdlXCIgcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tzLm9uQ29tcGxldGVdIEludm9rZWQgb24gY29tcGxldGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tzLm9uQ2hhbmdlXSBJbnZva2VkIG9uIGV2ZXJ5IHN0ZXAgb2YgYW5pbWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5BbmltYXRpb25Db250ZXh0fSBjb250ZXh0XG4gICAqL1xuICBmeFJlbW92ZTogZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2tzKSB7XG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzIHx8IHsgfTtcblxuICAgIHZhciBlbXB0eSA9IGZ1bmN0aW9uKCkgeyB9LFxuICAgICAgICBvbkNvbXBsZXRlID0gY2FsbGJhY2tzLm9uQ29tcGxldGUgfHwgZW1wdHksXG4gICAgICAgIG9uQ2hhbmdlID0gY2FsbGJhY2tzLm9uQ2hhbmdlIHx8IGVtcHR5LFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gZmFicmljLnV0aWwuYW5pbWF0ZSh7XG4gICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICBzdGFydFZhbHVlOiBvYmplY3Qub3BhY2l0eSxcbiAgICAgIGVuZFZhbHVlOiAwLFxuICAgICAgZHVyYXRpb246IHRoaXMuRlhfRFVSQVRJT04sXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgb2JqZWN0LnNldCgnb3BhY2l0eScsIHZhbHVlKTtcbiAgICAgICAgX3RoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgICBvbkNoYW5nZSgpO1xuICAgICAgfSxcbiAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMucmVtb3ZlKG9iamVjdCk7XG4gICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLk9iamVjdC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLk9iamVjdC5wcm90b3R5cGUgKi8ge1xuICAvKipcbiAgICogQW5pbWF0ZXMgb2JqZWN0J3MgcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHByb3BlcnR5IFByb3BlcnR5IHRvIGFuaW1hdGUgKGlmIHN0cmluZykgb3IgcHJvcGVydGllcyB0byBhbmltYXRlIChpZiBvYmplY3QpXG4gICAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gdmFsdWUgVmFsdWUgdG8gYW5pbWF0ZSBwcm9wZXJ0eSB0byAoaWYgc3RyaW5nIHdhcyBnaXZlbiBmaXJzdCkgb3Igb3B0aW9ucyBvYmplY3RcbiAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgKiBAdHV0b3JpYWwge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZmFicmljLWludHJvLXBhcnQtMiNhbmltYXRpb259XG4gICAqIEByZXR1cm4ge2ZhYnJpYy5BbmltYXRpb25Db250ZXh0IHwgZmFicmljLkFuaW1hdGlvbkNvbnRleHRbXX0gYW5pbWF0aW9uIGNvbnRleHQgKG9yIGFuIGFycmF5IGlmIHBhc3NlZCBtdWx0aXBsZSBwcm9wZXJ0aWVzKVxuICAgKlxuICAgKiBBcyBvYmplY3Qg4oCUIG11bHRpcGxlIHByb3BlcnRpZXNcbiAgICpcbiAgICogb2JqZWN0LmFuaW1hdGUoeyBsZWZ0OiAuLi4sIHRvcDogLi4uIH0pO1xuICAgKiBvYmplY3QuYW5pbWF0ZSh7IGxlZnQ6IC4uLiwgdG9wOiAuLi4gfSwgeyBkdXJhdGlvbjogLi4uIH0pO1xuICAgKlxuICAgKiBBcyBzdHJpbmcg4oCUIG9uZSBwcm9wZXJ0eVxuICAgKlxuICAgKiBvYmplY3QuYW5pbWF0ZSgnbGVmdCcsIC4uLik7XG4gICAqIG9iamVjdC5hbmltYXRlKCdsZWZ0JywgeyBkdXJhdGlvbjogLi4uIH0pO1xuICAgKlxuICAgKi9cbiAgYW5pbWF0ZTogZnVuY3Rpb24gKCkge1xuICAgIGlmIChhcmd1bWVudHNbMF0gJiYgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBwcm9wc1RvQW5pbWF0ZSA9IFtdLCBwcm9wLCBza2lwQ2FsbGJhY2tzLCBvdXQgPSBbXTtcbiAgICAgIGZvciAocHJvcCBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgcHJvcHNUb0FuaW1hdGUucHVzaChwcm9wKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwcm9wc1RvQW5pbWF0ZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBwcm9wID0gcHJvcHNUb0FuaW1hdGVbaV07XG4gICAgICAgIHNraXBDYWxsYmFja3MgPSBpICE9PSBsZW4gLSAxO1xuICAgICAgICBvdXQucHVzaCh0aGlzLl9hbmltYXRlKHByb3AsIGFyZ3VtZW50c1swXVtwcm9wXSwgYXJndW1lbnRzWzFdLCBza2lwQ2FsbGJhY2tzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9hbmltYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdG8gYW5pbWF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdG8gVmFsdWUgdG8gYW5pbWF0ZSB0b1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3NraXBDYWxsYmFja3NdIFdoZW4gdHJ1ZSwgY2FsbGJhY2tzIGxpa2Ugb25jaGFuZ2UgYW5kIG9uY29tcGxldGUgYXJlIG5vdCBpbnZva2VkXG4gICAqL1xuICBfYW5pbWF0ZTogZnVuY3Rpb24ocHJvcGVydHksIHRvLCBvcHRpb25zLCBza2lwQ2FsbGJhY2tzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcywgcHJvcFBhaXI7XG5cbiAgICB0byA9IHRvLnRvU3RyaW5nKCk7XG5cbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7IH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZShvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAofnByb3BlcnR5LmluZGV4T2YoJy4nKSkge1xuICAgICAgcHJvcFBhaXIgPSBwcm9wZXJ0eS5zcGxpdCgnLicpO1xuICAgIH1cblxuICAgIHZhciBwcm9wSXNDb2xvciA9XG4gICAgICBfdGhpcy5jb2xvclByb3BlcnRpZXMuaW5kZXhPZihwcm9wZXJ0eSkgPiAtMSB8fFxuICAgICAgKHByb3BQYWlyICYmIF90aGlzLmNvbG9yUHJvcGVydGllcy5pbmRleE9mKHByb3BQYWlyWzFdKSA+IC0xKTtcblxuICAgIHZhciBjdXJyZW50VmFsdWUgPSBwcm9wUGFpclxuICAgICAgPyB0aGlzLmdldChwcm9wUGFpclswXSlbcHJvcFBhaXJbMV1dXG4gICAgICA6IHRoaXMuZ2V0KHByb3BlcnR5KTtcblxuICAgIGlmICghKCdmcm9tJyBpbiBvcHRpb25zKSkge1xuICAgICAgb3B0aW9ucy5mcm9tID0gY3VycmVudFZhbHVlO1xuICAgIH1cblxuICAgIGlmICghcHJvcElzQ29sb3IpIHtcbiAgICAgIGlmICh+dG8uaW5kZXhPZignPScpKSB7XG4gICAgICAgIHRvID0gY3VycmVudFZhbHVlICsgcGFyc2VGbG9hdCh0by5yZXBsYWNlKCc9JywgJycpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0byA9IHBhcnNlRmxvYXQodG8pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IHtcbiAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgIHN0YXJ0VmFsdWU6IG9wdGlvbnMuZnJvbSxcbiAgICAgIGVuZFZhbHVlOiB0byxcbiAgICAgIGJ5VmFsdWU6IG9wdGlvbnMuYnksXG4gICAgICBlYXNpbmc6IG9wdGlvbnMuZWFzaW5nLFxuICAgICAgZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICBhYm9ydDogb3B0aW9ucy5hYm9ydCAmJiBmdW5jdGlvbih2YWx1ZSwgdmFsdWVQcm9ncmVzcywgdGltZVByb2dyZXNzKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmFib3J0LmNhbGwoX3RoaXMsIHZhbHVlLCB2YWx1ZVByb2dyZXNzLCB0aW1lUHJvZ3Jlc3MpO1xuICAgICAgfSxcbiAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiAodmFsdWUsIHZhbHVlUHJvZ3Jlc3MsIHRpbWVQcm9ncmVzcykge1xuICAgICAgICBpZiAocHJvcFBhaXIpIHtcbiAgICAgICAgICBfdGhpc1twcm9wUGFpclswXV1bcHJvcFBhaXJbMV1dID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgX3RoaXMuc2V0KHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNraXBDYWxsYmFja3MpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5vbkNoYW5nZSAmJiBvcHRpb25zLm9uQ2hhbmdlKHZhbHVlLCB2YWx1ZVByb2dyZXNzLCB0aW1lUHJvZ3Jlc3MpO1xuICAgICAgfSxcbiAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uICh2YWx1ZSwgdmFsdWVQcm9ncmVzcywgdGltZVByb2dyZXNzKSB7XG4gICAgICAgIGlmIChza2lwQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuc2V0Q29vcmRzKCk7XG4gICAgICAgIG9wdGlvbnMub25Db21wbGV0ZSAmJiBvcHRpb25zLm9uQ29tcGxldGUodmFsdWUsIHZhbHVlUHJvZ3Jlc3MsIHRpbWVQcm9ncmVzcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChwcm9wSXNDb2xvcikge1xuICAgICAgcmV0dXJuIGZhYnJpYy51dGlsLmFuaW1hdGVDb2xvcihfb3B0aW9ucy5zdGFydFZhbHVlLCBfb3B0aW9ucy5lbmRWYWx1ZSwgX29wdGlvbnMuZHVyYXRpb24sIF9vcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gZmFicmljLnV0aWwuYW5pbWF0ZShfb3B0aW9ucyk7XG4gICAgfVxuICB9XG59KTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGV4dGVuZCA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQsXG4gICAgICBjbG9uZSA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZSxcbiAgICAgIGNvb3JkUHJvcHMgPSB7IHgxOiAxLCB4MjogMSwgeTE6IDEsIHkyOiAxIH07XG5cbiAgaWYgKGZhYnJpYy5MaW5lKSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5MaW5lIGlzIGFscmVhZHkgZGVmaW5lZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaW5lIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuTGluZVxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuT2JqZWN0XG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5MaW5lI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuTGluZSA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5PYmplY3QsIC8qKiBAbGVuZHMgZmFicmljLkxpbmUucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgYW4gb2JqZWN0XG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnbGluZScsXG5cbiAgICAvKipcbiAgICAgKiB4IHZhbHVlIG9yIGZpcnN0IGxpbmUgZWRnZVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgeDE6IDAsXG5cbiAgICAvKipcbiAgICAgKiB5IHZhbHVlIG9yIGZpcnN0IGxpbmUgZWRnZVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgeTE6IDAsXG5cbiAgICAvKipcbiAgICAgKiB4IHZhbHVlIG9yIHNlY29uZCBsaW5lIGVkZ2VcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHgyOiAwLFxuXG4gICAgLyoqXG4gICAgICogeSB2YWx1ZSBvciBzZWNvbmQgbGluZSBlZGdlXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB5MjogMCxcblxuICAgIGNhY2hlUHJvcGVydGllczogZmFicmljLk9iamVjdC5wcm90b3R5cGUuY2FjaGVQcm9wZXJ0aWVzLmNvbmNhdCgneDEnLCAneDInLCAneTEnLCAneTInKSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BvaW50c10gQXJyYXkgb2YgcG9pbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5MaW5lfSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ocG9pbnRzLCBvcHRpb25zKSB7XG4gICAgICBpZiAoIXBvaW50cykge1xuICAgICAgICBwb2ludHMgPSBbMCwgMCwgMCwgMF07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdpbml0aWFsaXplJywgb3B0aW9ucyk7XG5cbiAgICAgIHRoaXMuc2V0KCd4MScsIHBvaW50c1swXSk7XG4gICAgICB0aGlzLnNldCgneTEnLCBwb2ludHNbMV0pO1xuICAgICAgdGhpcy5zZXQoJ3gyJywgcG9pbnRzWzJdKTtcbiAgICAgIHRoaXMuc2V0KCd5MicsIHBvaW50c1szXSk7XG5cbiAgICAgIHRoaXMuX3NldFdpZHRoSGVpZ2h0KG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uc1xuICAgICAqL1xuICAgIF9zZXRXaWR0aEhlaWdodDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG5cbiAgICAgIHRoaXMud2lkdGggPSBNYXRoLmFicyh0aGlzLngyIC0gdGhpcy54MSk7XG4gICAgICB0aGlzLmhlaWdodCA9IE1hdGguYWJzKHRoaXMueTIgLSB0aGlzLnkxKTtcblxuICAgICAgdGhpcy5sZWZ0ID0gJ2xlZnQnIGluIG9wdGlvbnNcbiAgICAgICAgPyBvcHRpb25zLmxlZnRcbiAgICAgICAgOiB0aGlzLl9nZXRMZWZ0VG9PcmlnaW5YKCk7XG5cbiAgICAgIHRoaXMudG9wID0gJ3RvcCcgaW4gb3B0aW9uc1xuICAgICAgICA/IG9wdGlvbnMudG9wXG4gICAgICAgIDogdGhpcy5fZ2V0VG9wVG9PcmlnaW5ZKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKi9cbiAgICBfc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignX3NldCcsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKHR5cGVvZiBjb29yZFByb3BzW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuX3NldFdpZHRoSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGxlZnRUb09yaWdpblggRGlzdGFuY2UgZnJvbSBsZWZ0IGVkZ2Ugb2YgY2FudmFzIHRvIG9yaWdpblggb2YgTGluZS5cbiAgICAgKi9cbiAgICBfZ2V0TGVmdFRvT3JpZ2luWDogbWFrZUVkZ2VUb09yaWdpbkdldHRlcihcbiAgICAgIHsgLy8gcHJvcGVydHkgbmFtZXNcbiAgICAgICAgb3JpZ2luOiAnb3JpZ2luWCcsXG4gICAgICAgIGF4aXMxOiAneDEnLFxuICAgICAgICBheGlzMjogJ3gyJyxcbiAgICAgICAgZGltZW5zaW9uOiAnd2lkdGgnXG4gICAgICB9LFxuICAgICAgeyAvLyBwb3NzaWJsZSB2YWx1ZXMgb2Ygb3JpZ2luXG4gICAgICAgIG5lYXJlc3Q6ICdsZWZ0JyxcbiAgICAgICAgY2VudGVyOiAnY2VudGVyJyxcbiAgICAgICAgZmFydGhlc3Q6ICdyaWdodCdcbiAgICAgIH1cbiAgICApLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRvcFRvT3JpZ2luWSBEaXN0YW5jZSBmcm9tIHRvcCBlZGdlIG9mIGNhbnZhcyB0byBvcmlnaW5ZIG9mIExpbmUuXG4gICAgICovXG4gICAgX2dldFRvcFRvT3JpZ2luWTogbWFrZUVkZ2VUb09yaWdpbkdldHRlcihcbiAgICAgIHsgLy8gcHJvcGVydHkgbmFtZXNcbiAgICAgICAgb3JpZ2luOiAnb3JpZ2luWScsXG4gICAgICAgIGF4aXMxOiAneTEnLFxuICAgICAgICBheGlzMjogJ3kyJyxcbiAgICAgICAgZGltZW5zaW9uOiAnaGVpZ2h0J1xuICAgICAgfSxcbiAgICAgIHsgLy8gcG9zc2libGUgdmFsdWVzIG9mIG9yaWdpblxuICAgICAgICBuZWFyZXN0OiAndG9wJyxcbiAgICAgICAgY2VudGVyOiAnY2VudGVyJyxcbiAgICAgICAgZmFydGhlc3Q6ICdib3R0b20nXG4gICAgICB9XG4gICAgKSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXI6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuXG5cbiAgICAgIHZhciBwID0gdGhpcy5jYWxjTGluZVBvaW50cygpO1xuICAgICAgY3R4Lm1vdmVUbyhwLngxLCBwLnkxKTtcbiAgICAgIGN0eC5saW5lVG8ocC54MiwgcC55Mik7XG5cbiAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLnN0cm9rZVdpZHRoO1xuXG4gICAgICAvLyBUT0RPOiB0ZXN0IHRoaXNcbiAgICAgIC8vIG1ha2Ugc3VyZSBzZXR0aW5nIFwiZmlsbFwiIGNoYW5nZXMgY29sb3Igb2YgYSBsaW5lXG4gICAgICAvLyAoYnkgY29weWluZyBmaWxsU3R5bGUgdG8gc3Ryb2tlU3R5bGUsIHNpbmNlIGxpbmUgaXMgc3Ryb2tlZCwgbm90IGZpbGxlZClcbiAgICAgIHZhciBvcmlnU3Ryb2tlU3R5bGUgPSBjdHguc3Ryb2tlU3R5bGU7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZSB8fCBjdHguZmlsbFN0eWxlO1xuICAgICAgdGhpcy5zdHJva2UgJiYgdGhpcy5fcmVuZGVyU3Ryb2tlKGN0eCk7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcmlnU3Ryb2tlU3R5bGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgYW4gaGVscGVyIGZvciBzdmcgaW1wb3J0LiBpdCByZXR1cm5zIHRoZSBjZW50ZXIgb2YgdGhlIG9iamVjdCBpbiB0aGUgc3ZnXG4gICAgICogdW50cmFuc2Zvcm1lZCBjb29yZGluYXRlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBjZW50ZXIgcG9pbnQgZnJvbSBlbGVtZW50IGNvb3JkaW5hdGVzXG4gICAgICovXG4gICAgX2ZpbmRDZW50ZXJGcm9tRWxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiAodGhpcy54MSArIHRoaXMueDIpIC8gMixcbiAgICAgICAgeTogKHRoaXMueTEgKyB0aGlzLnkyKSAvIDIsXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBtZXRob2QgdG9PYmplY3RcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24ocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgcmV0dXJuIGV4dGVuZCh0aGlzLmNhbGxTdXBlcigndG9PYmplY3QnLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKSwgdGhpcy5jYWxjTGluZVBvaW50cygpKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBDYWxjdWxhdGUgb2JqZWN0IGRpbWVuc2lvbnMgZnJvbSBpdHMgcHJvcGVydGllc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldE5vblRyYW5zZm9ybWVkRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGltID0gdGhpcy5jYWxsU3VwZXIoJ19nZXROb25UcmFuc2Zvcm1lZERpbWVuc2lvbnMnKTtcbiAgICAgIGlmICh0aGlzLnN0cm9rZUxpbmVDYXAgPT09ICdidXR0Jykge1xuICAgICAgICBpZiAodGhpcy53aWR0aCA9PT0gMCkge1xuICAgICAgICAgIGRpbS55IC09IHRoaXMuc3Ryb2tlV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgZGltLnggLT0gdGhpcy5zdHJva2VXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGRpbTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVjYWxjdWxhdGVzIGxpbmUgcG9pbnRzIGdpdmVuIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNhbGNMaW5lUG9pbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB4TXVsdCA9IHRoaXMueDEgPD0gdGhpcy54MiA/IC0xIDogMSxcbiAgICAgICAgICB5TXVsdCA9IHRoaXMueTEgPD0gdGhpcy55MiA/IC0xIDogMSxcbiAgICAgICAgICB4MSA9ICh4TXVsdCAqIHRoaXMud2lkdGggKiAwLjUpLFxuICAgICAgICAgIHkxID0gKHlNdWx0ICogdGhpcy5oZWlnaHQgKiAwLjUpLFxuICAgICAgICAgIHgyID0gKHhNdWx0ICogdGhpcy53aWR0aCAqIC0wLjUpLFxuICAgICAgICAgIHkyID0gKHlNdWx0ICogdGhpcy5oZWlnaHQgKiAtMC41KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDE6IHgxLFxuICAgICAgICB4MjogeDIsXG4gICAgICAgIHkxOiB5MSxcbiAgICAgICAgeTI6IHkyXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKiBfVE9fU1ZHX1NUQVJUXyAqL1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7QXJyYXl9IGFuIGFycmF5IG9mIHN0cmluZ3Mgd2l0aCB0aGUgc3BlY2lmaWMgc3ZnIHJlcHJlc2VudGF0aW9uXG4gICAgICogb2YgdGhlIGluc3RhbmNlXG4gICAgICovXG4gICAgX3RvU1ZHOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwID0gdGhpcy5jYWxjTGluZVBvaW50cygpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgJzxsaW5lICcsICdDT01NT05fUEFSVFMnLFxuICAgICAgICAneDE9XCInLCBwLngxLFxuICAgICAgICAnXCIgeTE9XCInLCBwLnkxLFxuICAgICAgICAnXCIgeDI9XCInLCBwLngyLFxuICAgICAgICAnXCIgeTI9XCInLCBwLnkyLFxuICAgICAgICAnXCIgLz5cXG4nXG4gICAgICBdO1xuICAgIH0sXG4gICAgLyogX1RPX1NWR19FTkRfICovXG4gIH0pO1xuXG4gIC8qIF9GUk9NX1NWR19TVEFSVF8gKi9cbiAgLyoqXG4gICAqIExpc3Qgb2YgYXR0cmlidXRlIG5hbWVzIHRvIGFjY291bnQgZm9yIHdoZW4gcGFyc2luZyBTVkcgZWxlbWVudCAodXNlZCBieSB7QGxpbmsgZmFicmljLkxpbmUuZnJvbUVsZW1lbnR9KVxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuTGluZVxuICAgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9zaGFwZXMuaHRtbCNMaW5lRWxlbWVudFxuICAgKi9cbiAgZmFicmljLkxpbmUuQVRUUklCVVRFX05BTUVTID0gZmFicmljLlNIQVJFRF9BVFRSSUJVVEVTLmNvbmNhdCgneDEgeTEgeDIgeTInLnNwbGl0KCcgJykpO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZhYnJpYy5MaW5lIGluc3RhbmNlIGZyb20gYW4gU1ZHIGVsZW1lbnRcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkxpbmVcbiAgICogQHBhcmFtIHtTVkdFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIGNhbGxiYWNrIGZ1bmN0aW9uIGludm9rZWQgYWZ0ZXIgcGFyc2luZ1xuICAgKi9cbiAgZmFicmljLkxpbmUuZnJvbUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50LCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHsgfTtcbiAgICB2YXIgcGFyc2VkQXR0cmlidXRlcyA9IGZhYnJpYy5wYXJzZUF0dHJpYnV0ZXMoZWxlbWVudCwgZmFicmljLkxpbmUuQVRUUklCVVRFX05BTUVTKSxcbiAgICAgICAgcG9pbnRzID0gW1xuICAgICAgICAgIHBhcnNlZEF0dHJpYnV0ZXMueDEgfHwgMCxcbiAgICAgICAgICBwYXJzZWRBdHRyaWJ1dGVzLnkxIHx8IDAsXG4gICAgICAgICAgcGFyc2VkQXR0cmlidXRlcy54MiB8fCAwLFxuICAgICAgICAgIHBhcnNlZEF0dHJpYnV0ZXMueTIgfHwgMFxuICAgICAgICBdO1xuICAgIGNhbGxiYWNrKG5ldyBmYWJyaWMuTGluZShwb2ludHMsIGV4dGVuZChwYXJzZWRBdHRyaWJ1dGVzLCBvcHRpb25zKSkpO1xuICB9O1xuICAvKiBfRlJPTV9TVkdfRU5EXyAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZhYnJpYy5MaW5lIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5MaW5lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gaW52b2tlZCB3aXRoIG5ldyBpbnN0YW5jZSBhcyBmaXJzdCBhcmd1bWVudFxuICAgKi9cbiAgZmFicmljLkxpbmUuZnJvbU9iamVjdCA9IGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICBmdW5jdGlvbiBfY2FsbGJhY2soaW5zdGFuY2UpIHtcbiAgICAgIGRlbGV0ZSBpbnN0YW5jZS5wb2ludHM7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhpbnN0YW5jZSk7XG4gICAgfTtcbiAgICB2YXIgb3B0aW9ucyA9IGNsb25lKG9iamVjdCwgdHJ1ZSk7XG4gICAgb3B0aW9ucy5wb2ludHMgPSBbb2JqZWN0LngxLCBvYmplY3QueTEsIG9iamVjdC54Miwgb2JqZWN0LnkyXTtcbiAgICBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0KCdMaW5lJywgb3B0aW9ucywgX2NhbGxiYWNrLCAncG9pbnRzJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFByb2R1Y2VzIGEgZnVuY3Rpb24gdGhhdCBjYWxjdWxhdGVzIGRpc3RhbmNlIGZyb20gY2FudmFzIGVkZ2UgdG8gTGluZSBvcmlnaW4uXG4gICAqL1xuICBmdW5jdGlvbiBtYWtlRWRnZVRvT3JpZ2luR2V0dGVyKHByb3BlcnR5TmFtZXMsIG9yaWdpblZhbHVlcykge1xuICAgIHZhciBvcmlnaW4gPSBwcm9wZXJ0eU5hbWVzLm9yaWdpbixcbiAgICAgICAgYXhpczEgPSBwcm9wZXJ0eU5hbWVzLmF4aXMxLFxuICAgICAgICBheGlzMiA9IHByb3BlcnR5TmFtZXMuYXhpczIsXG4gICAgICAgIGRpbWVuc2lvbiA9IHByb3BlcnR5TmFtZXMuZGltZW5zaW9uLFxuICAgICAgICBuZWFyZXN0ID0gb3JpZ2luVmFsdWVzLm5lYXJlc3QsXG4gICAgICAgIGNlbnRlciA9IG9yaWdpblZhbHVlcy5jZW50ZXIsXG4gICAgICAgIGZhcnRoZXN0ID0gb3JpZ2luVmFsdWVzLmZhcnRoZXN0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgc3dpdGNoICh0aGlzLmdldChvcmlnaW4pKSB7XG4gICAgICAgIGNhc2UgbmVhcmVzdDpcbiAgICAgICAgICByZXR1cm4gTWF0aC5taW4odGhpcy5nZXQoYXhpczEpLCB0aGlzLmdldChheGlzMikpO1xuICAgICAgICBjYXNlIGNlbnRlcjpcbiAgICAgICAgICByZXR1cm4gTWF0aC5taW4odGhpcy5nZXQoYXhpczEpLCB0aGlzLmdldChheGlzMikpICsgKDAuNSAqIHRoaXMuZ2V0KGRpbWVuc2lvbikpO1xuICAgICAgICBjYXNlIGZhcnRoZXN0OlxuICAgICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLmdldChheGlzMSksIHRoaXMuZ2V0KGF4aXMyKSk7XG4gICAgICB9XG4gICAgfTtcblxuICB9XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGRlZ3JlZXNUb1JhZGlhbnMgPSBmYWJyaWMudXRpbC5kZWdyZWVzVG9SYWRpYW5zO1xuXG4gIGlmIChmYWJyaWMuQ2lyY2xlKSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5DaXJjbGUgaXMgYWxyZWFkeSBkZWZpbmVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaXJjbGUgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5DaXJjbGVcbiAgICogQGV4dGVuZHMgZmFicmljLk9iamVjdFxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuQ2lyY2xlI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuQ2lyY2xlID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLk9iamVjdCwgLyoqIEBsZW5kcyBmYWJyaWMuQ2lyY2xlLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ2NpcmNsZScsXG5cbiAgICAvKipcbiAgICAgKiBSYWRpdXMgb2YgdGhpcyBjaXJjbGVcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHJhZGl1czogMCxcblxuICAgIC8qKlxuICAgICAqIGRlZ3JlZXMgb2Ygc3RhcnQgb2YgdGhlIGNpcmNsZS5cbiAgICAgKiBwcm9iYWJseSB3aWxsIGNoYW5nZSB0byBkZWdyZWVzIGluIG5leHQgbWFqb3IgdmVyc2lvblxuICAgICAqIEB0eXBlIE51bWJlciAwIC0gMzU5XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHN0YXJ0QW5nbGU6IDAsXG5cbiAgICAvKipcbiAgICAgKiBFbmQgYW5nbGUgb2YgdGhlIGNpcmNsZVxuICAgICAqIHByb2JhYmx5IHdpbGwgY2hhbmdlIHRvIGRlZ3JlZXMgaW4gbmV4dCBtYWpvciB2ZXJzaW9uXG4gICAgICogQHR5cGUgTnVtYmVyIDEgLSAzNjBcbiAgICAgKiBAZGVmYXVsdCAzNjBcbiAgICAgKi9cbiAgICBlbmRBbmdsZTogMzYwLFxuXG4gICAgY2FjaGVQcm9wZXJ0aWVzOiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5jYWNoZVByb3BlcnRpZXMuY29uY2F0KCdyYWRpdXMnLCAnc3RhcnRBbmdsZScsICdlbmRBbmdsZScpLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DaXJjbGV9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBfc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignX3NldCcsIGtleSwgdmFsdWUpO1xuXG4gICAgICBpZiAoa2V5ID09PSAncmFkaXVzJykge1xuICAgICAgICB0aGlzLnNldFJhZGl1cyh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsU3VwZXIoJ3RvT2JqZWN0JywgWydyYWRpdXMnLCAnc3RhcnRBbmdsZScsICdlbmRBbmdsZSddLmNvbmNhdChwcm9wZXJ0aWVzVG9JbmNsdWRlKSk7XG4gICAgfSxcblxuICAgIC8qIF9UT19TVkdfU1RBUlRfICovXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge0FycmF5fSBhbiBhcnJheSBvZiBzdHJpbmdzIHdpdGggdGhlIHNwZWNpZmljIHN2ZyByZXByZXNlbnRhdGlvblxuICAgICAqIG9mIHRoZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90b1NWRzogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc3ZnU3RyaW5nLCB4ID0gMCwgeSA9IDAsXG4gICAgICAgICAgYW5nbGUgPSAodGhpcy5lbmRBbmdsZSAtIHRoaXMuc3RhcnRBbmdsZSkgJSAzNjA7XG5cbiAgICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgICBzdmdTdHJpbmcgPSBbXG4gICAgICAgICAgJzxjaXJjbGUgJywgJ0NPTU1PTl9QQVJUUycsXG4gICAgICAgICAgJ2N4PVwiJyArIHggKyAnXCIgY3k9XCInICsgeSArICdcIiAnLFxuICAgICAgICAgICdyPVwiJywgdGhpcy5yYWRpdXMsXG4gICAgICAgICAgJ1wiIC8+XFxuJ1xuICAgICAgICBdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBzdGFydCA9IGRlZ3JlZXNUb1JhZGlhbnModGhpcy5zdGFydEFuZ2xlKSxcbiAgICAgICAgICAgIGVuZCA9IGRlZ3JlZXNUb1JhZGlhbnModGhpcy5lbmRBbmdsZSksXG4gICAgICAgICAgICByYWRpdXMgPSB0aGlzLnJhZGl1cyxcbiAgICAgICAgICAgIHN0YXJ0WCA9IGZhYnJpYy51dGlsLmNvcyhzdGFydCkgKiByYWRpdXMsXG4gICAgICAgICAgICBzdGFydFkgPSBmYWJyaWMudXRpbC5zaW4oc3RhcnQpICogcmFkaXVzLFxuICAgICAgICAgICAgZW5kWCA9IGZhYnJpYy51dGlsLmNvcyhlbmQpICogcmFkaXVzLFxuICAgICAgICAgICAgZW5kWSA9IGZhYnJpYy51dGlsLnNpbihlbmQpICogcmFkaXVzLFxuICAgICAgICAgICAgbGFyZ2VGbGFnID0gYW5nbGUgPiAxODAgPyAnMScgOiAnMCc7XG4gICAgICAgIHN2Z1N0cmluZyA9IFtcbiAgICAgICAgICAnPHBhdGggZD1cIk0gJyArIHN0YXJ0WCArICcgJyArIHN0YXJ0WSxcbiAgICAgICAgICAnIEEgJyArIHJhZGl1cyArICcgJyArIHJhZGl1cyxcbiAgICAgICAgICAnIDAgJywgK2xhcmdlRmxhZyArICcgMScsICcgJyArIGVuZFggKyAnICcgKyBlbmRZLFxuICAgICAgICAgICdcIiAnLCAnQ09NTU9OX1BBUlRTJywgJyAvPlxcbidcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdmdTdHJpbmc7XG4gICAgfSxcbiAgICAvKiBfVE9fU1ZHX0VORF8gKi9cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBjb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXI6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyhcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgdGhpcy5yYWRpdXMsXG4gICAgICAgIGRlZ3JlZXNUb1JhZGlhbnModGhpcy5zdGFydEFuZ2xlKSxcbiAgICAgICAgZGVncmVlc1RvUmFkaWFucyh0aGlzLmVuZEFuZ2xlKSxcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG4gICAgICB0aGlzLl9yZW5kZXJQYWludEluT3JkZXIoY3R4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBob3Jpem9udGFsIHJhZGl1cyBvZiBhbiBvYmplY3QgKGFjY29yZGluZyB0byBob3cgYW4gb2JqZWN0IGlzIHNjYWxlZClcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0UmFkaXVzWDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3JhZGl1cycpICogdGhpcy5nZXQoJ3NjYWxlWCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHZlcnRpY2FsIHJhZGl1cyBvZiBhbiBvYmplY3QgKGFjY29yZGluZyB0byBob3cgYW4gb2JqZWN0IGlzIHNjYWxlZClcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0UmFkaXVzWTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3JhZGl1cycpICogdGhpcy5nZXQoJ3NjYWxlWScpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHJhZGl1cyBvZiBhbiBvYmplY3QgKGFuZCB1cGRhdGVzIHdpZHRoIGFjY29yZGluZ2x5KVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DaXJjbGV9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBzZXRSYWRpdXM6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB0aGlzLnJhZGl1cyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KCd3aWR0aCcsIHZhbHVlICogMikuc2V0KCdoZWlnaHQnLCB2YWx1ZSAqIDIpO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qIF9GUk9NX1NWR19TVEFSVF8gKi9cbiAgLyoqXG4gICAqIExpc3Qgb2YgYXR0cmlidXRlIG5hbWVzIHRvIGFjY291bnQgZm9yIHdoZW4gcGFyc2luZyBTVkcgZWxlbWVudCAodXNlZCBieSB7QGxpbmsgZmFicmljLkNpcmNsZS5mcm9tRWxlbWVudH0pXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5DaXJjbGVcbiAgICogQHNlZTogaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3NoYXBlcy5odG1sI0NpcmNsZUVsZW1lbnRcbiAgICovXG4gIGZhYnJpYy5DaXJjbGUuQVRUUklCVVRFX05BTUVTID0gZmFicmljLlNIQVJFRF9BVFRSSUJVVEVTLmNvbmNhdCgnY3ggY3kgcicuc3BsaXQoJyAnKSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5DaXJjbGV9IGluc3RhbmNlIGZyb20gYW4gU1ZHIGVsZW1lbnRcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkNpcmNsZVxuICAgKiBAcGFyYW0ge1NWR0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBwYXJzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIE9wdGlvbnMgY2FsbGJhY2sgaW52b2tlZCBhZnRlciBwYXJzaW5nIGlzIGZpbmlzaGVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICogQHRocm93cyB7RXJyb3J9IElmIHZhbHVlIG9mIGByYCBhdHRyaWJ1dGUgaXMgbWlzc2luZyBvciBpbnZhbGlkXG4gICAqL1xuICBmYWJyaWMuQ2lyY2xlLmZyb21FbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICB2YXIgcGFyc2VkQXR0cmlidXRlcyA9IGZhYnJpYy5wYXJzZUF0dHJpYnV0ZXMoZWxlbWVudCwgZmFicmljLkNpcmNsZS5BVFRSSUJVVEVfTkFNRVMpO1xuXG4gICAgaWYgKCFpc1ZhbGlkUmFkaXVzKHBhcnNlZEF0dHJpYnV0ZXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZhbHVlIG9mIGByYCBhdHRyaWJ1dGUgaXMgcmVxdWlyZWQgYW5kIGNhbiBub3QgYmUgbmVnYXRpdmUnKTtcbiAgICB9XG5cbiAgICBwYXJzZWRBdHRyaWJ1dGVzLmxlZnQgPSAocGFyc2VkQXR0cmlidXRlcy5sZWZ0IHx8IDApIC0gcGFyc2VkQXR0cmlidXRlcy5yYWRpdXM7XG4gICAgcGFyc2VkQXR0cmlidXRlcy50b3AgPSAocGFyc2VkQXR0cmlidXRlcy50b3AgfHwgMCkgLSBwYXJzZWRBdHRyaWJ1dGVzLnJhZGl1cztcbiAgICBjYWxsYmFjayhuZXcgZmFicmljLkNpcmNsZShwYXJzZWRBdHRyaWJ1dGVzKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBpc1ZhbGlkUmFkaXVzKGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gKCgncmFkaXVzJyBpbiBhdHRyaWJ1dGVzKSAmJiAoYXR0cmlidXRlcy5yYWRpdXMgPj0gMCkpO1xuICB9XG4gIC8qIF9GUk9NX1NWR19FTkRfICovXG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5DaXJjbGV9IGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5DaXJjbGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBpbnZva2VkIHdpdGggbmV3IGluc3RhbmNlIGFzIGZpcnN0IGFyZ3VtZW50XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBmYWJyaWMuQ2lyY2xlLmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgZmFicmljLk9iamVjdC5fZnJvbU9iamVjdCgnQ2lyY2xlJywgb2JqZWN0LCBjYWxsYmFjayk7XG4gIH07XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KTtcblxuICBpZiAoZmFicmljLlRyaWFuZ2xlKSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5UcmlhbmdsZSBpcyBhbHJlYWR5IGRlZmluZWQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVHJpYW5nbGUgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5UcmlhbmdsZVxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuT2JqZWN0XG4gICAqIEByZXR1cm4ge2ZhYnJpYy5UcmlhbmdsZX0gdGhpc0FyZ1xuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuVHJpYW5nbGUjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICovXG4gIGZhYnJpYy5UcmlhbmdsZSA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5PYmplY3QsIC8qKiBAbGVuZHMgZmFicmljLlRyaWFuZ2xlLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ3RyaWFuZ2xlJyxcblxuICAgIC8qKlxuICAgICAqIFdpZHRoIGlzIHNldCB0byAxMDAgdG8gY29tcGVuc2F0ZSB0aGUgb2xkIGluaXRpYWxpemUgY29kZSB0aGF0IHdhcyBzZXR0aW5nIGl0IHRvIDEwMFxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgd2lkdGg6IDEwMCxcblxuICAgIC8qKlxuICAgICAqIEhlaWdodCBpcyBzZXQgdG8gMTAwIHRvIGNvbXBlbnNhdGUgdGhlIG9sZCBpbml0aWFsaXplIGNvZGUgdGhhdCB3YXMgc2V0dGluZyBpdCB0byAxMDBcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGhlaWdodDogMTAwLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB2YXIgd2lkdGhCeTIgPSB0aGlzLndpZHRoIC8gMixcbiAgICAgICAgICBoZWlnaHRCeTIgPSB0aGlzLmhlaWdodCAvIDI7XG5cbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8oLXdpZHRoQnkyLCBoZWlnaHRCeTIpO1xuICAgICAgY3R4LmxpbmVUbygwLCAtaGVpZ2h0QnkyKTtcbiAgICAgIGN0eC5saW5lVG8od2lkdGhCeTIsIGhlaWdodEJ5Mik7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG5cbiAgICAgIHRoaXMuX3JlbmRlclBhaW50SW5PcmRlcihjdHgpO1xuICAgIH0sXG5cbiAgICAvKiBfVE9fU1ZHX1NUQVJUXyAqL1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7QXJyYXl9IGFuIGFycmF5IG9mIHN0cmluZ3Mgd2l0aCB0aGUgc3BlY2lmaWMgc3ZnIHJlcHJlc2VudGF0aW9uXG4gICAgICogb2YgdGhlIGluc3RhbmNlXG4gICAgICovXG4gICAgX3RvU1ZHOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB3aWR0aEJ5MiA9IHRoaXMud2lkdGggLyAyLFxuICAgICAgICAgIGhlaWdodEJ5MiA9IHRoaXMuaGVpZ2h0IC8gMixcbiAgICAgICAgICBwb2ludHMgPSBbXG4gICAgICAgICAgICAtd2lkdGhCeTIgKyAnICcgKyBoZWlnaHRCeTIsXG4gICAgICAgICAgICAnMCAnICsgLWhlaWdodEJ5MixcbiAgICAgICAgICAgIHdpZHRoQnkyICsgJyAnICsgaGVpZ2h0QnkyXG4gICAgICAgICAgXS5qb2luKCcsJyk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAnPHBvbHlnb24gJywgJ0NPTU1PTl9QQVJUUycsXG4gICAgICAgICdwb2ludHM9XCInLCBwb2ludHMsXG4gICAgICAgICdcIiAvPidcbiAgICAgIF07XG4gICAgfSxcbiAgICAvKiBfVE9fU1ZHX0VORF8gKi9cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5UcmlhbmdsZX0gaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlRyaWFuZ2xlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gaW52b2tlZCB3aXRoIG5ldyBpbnN0YW5jZSBhcyBmaXJzdCBhcmd1bWVudFxuICAgKi9cbiAgZmFicmljLlRyaWFuZ2xlLmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZhYnJpYy5PYmplY3QuX2Zyb21PYmplY3QoJ1RyaWFuZ2xlJywgb2JqZWN0LCBjYWxsYmFjayk7XG4gIH07XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIHBpQnkyICAgPSBNYXRoLlBJICogMjtcblxuICBpZiAoZmFicmljLkVsbGlwc2UpIHtcbiAgICBmYWJyaWMud2FybignZmFicmljLkVsbGlwc2UgaXMgYWxyZWFkeSBkZWZpbmVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbGxpcHNlIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuRWxsaXBzZVxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuT2JqZWN0XG4gICAqIEByZXR1cm4ge2ZhYnJpYy5FbGxpcHNlfSB0aGlzQXJnXG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5FbGxpcHNlI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuRWxsaXBzZSA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5PYmplY3QsIC8qKiBAbGVuZHMgZmFicmljLkVsbGlwc2UucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgYW4gb2JqZWN0XG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnZWxsaXBzZScsXG5cbiAgICAvKipcbiAgICAgKiBIb3Jpem9udGFsIHJhZGl1c1xuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcng6ICAgMCxcblxuICAgIC8qKlxuICAgICAqIFZlcnRpY2FsIHJhZGl1c1xuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcnk6ICAgMCxcblxuICAgIGNhY2hlUHJvcGVydGllczogZmFicmljLk9iamVjdC5wcm90b3R5cGUuY2FjaGVQcm9wZXJ0aWVzLmNvbmNhdCgncngnLCAncnknKSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5FbGxpcHNlfSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuc2V0KCdyeCcsIG9wdGlvbnMgJiYgb3B0aW9ucy5yeCB8fCAwKTtcbiAgICAgIHRoaXMuc2V0KCdyeScsIG9wdGlvbnMgJiYgb3B0aW9ucy5yeSB8fCAwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5FbGxpcHNlfSB0aGlzQXJnXG4gICAgICovXG4gICAgX3NldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ19zZXQnLCBrZXksIHZhbHVlKTtcbiAgICAgIHN3aXRjaCAoa2V5KSB7XG5cbiAgICAgICAgY2FzZSAncngnOlxuICAgICAgICAgIHRoaXMucnggPSB2YWx1ZTtcbiAgICAgICAgICB0aGlzLnNldCgnd2lkdGgnLCB2YWx1ZSAqIDIpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3J5JzpcbiAgICAgICAgICB0aGlzLnJ5ID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5zZXQoJ2hlaWdodCcsIHZhbHVlICogMik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGhvcml6b250YWwgcmFkaXVzIG9mIGFuIG9iamVjdCAoYWNjb3JkaW5nIHRvIGhvdyBhbiBvYmplY3QgaXMgc2NhbGVkKVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXRSeDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3J4JykgKiB0aGlzLmdldCgnc2NhbGVYJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgVmVydGljYWwgcmFkaXVzIG9mIGFuIG9iamVjdCAoYWNjb3JkaW5nIHRvIGhvdyBhbiBvYmplY3QgaXMgc2NhbGVkKVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXRSeTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3J5JykgKiB0aGlzLmdldCgnc2NhbGVZJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxTdXBlcigndG9PYmplY3QnLCBbJ3J4JywgJ3J5J10uY29uY2F0KHByb3BlcnRpZXNUb0luY2x1ZGUpKTtcbiAgICB9LFxuXG4gICAgLyogX1RPX1NWR19TVEFSVF8gKi9cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge0FycmF5fSBhbiBhcnJheSBvZiBzdHJpbmdzIHdpdGggdGhlIHNwZWNpZmljIHN2ZyByZXByZXNlbnRhdGlvblxuICAgICAqIG9mIHRoZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90b1NWRzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAnPGVsbGlwc2UgJywgJ0NPTU1PTl9QQVJUUycsXG4gICAgICAgICdjeD1cIjBcIiBjeT1cIjBcIiAnLFxuICAgICAgICAncng9XCInLCB0aGlzLnJ4LFxuICAgICAgICAnXCIgcnk9XCInLCB0aGlzLnJ5LFxuICAgICAgICAnXCIgLz5cXG4nXG4gICAgICBdO1xuICAgIH0sXG4gICAgLyogX1RPX1NWR19FTkRfICovXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggY29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHgudHJhbnNmb3JtKDEsIDAsIDAsIHRoaXMucnkgLyB0aGlzLnJ4LCAwLCAwKTtcbiAgICAgIGN0eC5hcmMoXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIHRoaXMucngsXG4gICAgICAgIDAsXG4gICAgICAgIHBpQnkyLFxuICAgICAgICBmYWxzZSk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgdGhpcy5fcmVuZGVyUGFpbnRJbk9yZGVyKGN0eCk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyogX0ZST01fU1ZHX1NUQVJUXyAqL1xuICAvKipcbiAgICogTGlzdCBvZiBhdHRyaWJ1dGUgbmFtZXMgdG8gYWNjb3VudCBmb3Igd2hlbiBwYXJzaW5nIFNWRyBlbGVtZW50ICh1c2VkIGJ5IHtAbGluayBmYWJyaWMuRWxsaXBzZS5mcm9tRWxlbWVudH0pXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5FbGxpcHNlXG4gICAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3NoYXBlcy5odG1sI0VsbGlwc2VFbGVtZW50XG4gICAqL1xuICBmYWJyaWMuRWxsaXBzZS5BVFRSSUJVVEVfTkFNRVMgPSBmYWJyaWMuU0hBUkVEX0FUVFJJQlVURVMuY29uY2F0KCdjeCBjeSByeCByeScuc3BsaXQoJyAnKSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5FbGxpcHNlfSBpbnN0YW5jZSBmcm9tIGFuIFNWRyBlbGVtZW50XG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5FbGxpcHNlXG4gICAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gT3B0aW9ucyBjYWxsYmFjayBpbnZva2VkIGFmdGVyIHBhcnNpbmcgaXMgZmluaXNoZWRcbiAgICogQHJldHVybiB7ZmFicmljLkVsbGlwc2V9XG4gICAqL1xuICBmYWJyaWMuRWxsaXBzZS5mcm9tRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG5cbiAgICB2YXIgcGFyc2VkQXR0cmlidXRlcyA9IGZhYnJpYy5wYXJzZUF0dHJpYnV0ZXMoZWxlbWVudCwgZmFicmljLkVsbGlwc2UuQVRUUklCVVRFX05BTUVTKTtcblxuICAgIHBhcnNlZEF0dHJpYnV0ZXMubGVmdCA9IChwYXJzZWRBdHRyaWJ1dGVzLmxlZnQgfHwgMCkgLSBwYXJzZWRBdHRyaWJ1dGVzLnJ4O1xuICAgIHBhcnNlZEF0dHJpYnV0ZXMudG9wID0gKHBhcnNlZEF0dHJpYnV0ZXMudG9wIHx8IDApIC0gcGFyc2VkQXR0cmlidXRlcy5yeTtcbiAgICBjYWxsYmFjayhuZXcgZmFicmljLkVsbGlwc2UocGFyc2VkQXR0cmlidXRlcykpO1xuICB9O1xuICAvKiBfRlJPTV9TVkdfRU5EXyAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHtAbGluayBmYWJyaWMuRWxsaXBzZX0gaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkVsbGlwc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBpbnZva2VkIHdpdGggbmV3IGluc3RhbmNlIGFzIGZpcnN0IGFyZ3VtZW50XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBmYWJyaWMuRWxsaXBzZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIGZhYnJpYy5PYmplY3QuX2Zyb21PYmplY3QoJ0VsbGlwc2UnLCBvYmplY3QsIGNhbGxiYWNrKTtcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZXh0ZW5kID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZDtcblxuICBpZiAoZmFicmljLlJlY3QpIHtcbiAgICBmYWJyaWMud2FybignZmFicmljLlJlY3QgaXMgYWxyZWFkeSBkZWZpbmVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlY3RhbmdsZSBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLlJlY3RcbiAgICogQGV4dGVuZHMgZmFicmljLk9iamVjdFxuICAgKiBAcmV0dXJuIHtmYWJyaWMuUmVjdH0gdGhpc0FyZ1xuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuUmVjdCNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKi9cbiAgZmFicmljLlJlY3QgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuT2JqZWN0LCAvKiogQGxlbmRzIGZhYnJpYy5SZWN0LnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIHByb3BlcnRpZXMgdG8gY29uc2lkZXIgd2hlbiBjaGVja2luZyBpZiBzdGF0ZSBvZiBhbiBvYmplY3QgaXMgY2hhbmdlZCAoe0BsaW5rIGZhYnJpYy5PYmplY3QjaGFzU3RhdGVDaGFuZ2VkfSlcbiAgICAgKiBhcyB3ZWxsIGFzIGZvciBoaXN0b3J5ICh1bmRvL3JlZG8pIHB1cnBvc2VzXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKi9cbiAgICBzdGF0ZVByb3BlcnRpZXM6IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLnN0YXRlUHJvcGVydGllcy5jb25jYXQoJ3J4JywgJ3J5JyksXG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ3JlY3QnLFxuXG4gICAgLyoqXG4gICAgICogSG9yaXpvbnRhbCBib3JkZXIgcmFkaXVzXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICByeDogICAwLFxuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwgYm9yZGVyIHJhZGl1c1xuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcnk6ICAgMCxcblxuICAgIGNhY2hlUHJvcGVydGllczogZmFicmljLk9iamVjdC5wcm90b3R5cGUuY2FjaGVQcm9wZXJ0aWVzLmNvbmNhdCgncngnLCAncnknKSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdpbml0aWFsaXplJywgb3B0aW9ucyk7XG4gICAgICB0aGlzLl9pbml0UnhSeSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyByeC9yeSBhdHRyaWJ1dGVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaW5pdFJ4Unk6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMucnggJiYgIXRoaXMucnkpIHtcbiAgICAgICAgdGhpcy5yeSA9IHRoaXMucng7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0aGlzLnJ5ICYmICF0aGlzLnJ4KSB7XG4gICAgICAgIHRoaXMucnggPSB0aGlzLnJ5O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyOiBmdW5jdGlvbihjdHgpIHtcblxuICAgICAgLy8gMXgxIGNhc2UgKHVzZWQgaW4gc3ByYXkgYnJ1c2gpIG9wdGltaXphdGlvbiB3YXMgcmVtb3ZlZCBiZWNhdXNlXG4gICAgICAvLyB3aXRoIGNhY2hpbmcgYW5kIGhpZ2hlciB6b29tIGxldmVsIHRoaXMgbWFrZXMgbW9yZSBkYW1hZ2UgdGhhbiBoZWxwXG5cbiAgICAgIHZhciByeCA9IHRoaXMucnggPyBNYXRoLm1pbih0aGlzLnJ4LCB0aGlzLndpZHRoIC8gMikgOiAwLFxuICAgICAgICAgIHJ5ID0gdGhpcy5yeSA/IE1hdGgubWluKHRoaXMucnksIHRoaXMuaGVpZ2h0IC8gMikgOiAwLFxuICAgICAgICAgIHcgPSB0aGlzLndpZHRoLFxuICAgICAgICAgIGggPSB0aGlzLmhlaWdodCxcbiAgICAgICAgICB4ID0gLXRoaXMud2lkdGggLyAyLFxuICAgICAgICAgIHkgPSAtdGhpcy5oZWlnaHQgLyAyLFxuICAgICAgICAgIGlzUm91bmRlZCA9IHJ4ICE9PSAwIHx8IHJ5ICE9PSAwLFxuICAgICAgICAgIC8qIFwibWFnaWMgbnVtYmVyXCIgZm9yIGJlemllciBhcHByb3hpbWF0aW9ucyBvZiBhcmNzIChodHRwOi8vaXRjLmt0dS5sdC9pdGMzNTQvUmlza3VzMzU0LnBkZikgKi9cbiAgICAgICAgICBrID0gMSAtIDAuNTUyMjg0NzQ5ODtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcblxuICAgICAgY3R4Lm1vdmVUbyh4ICsgcngsIHkpO1xuXG4gICAgICBjdHgubGluZVRvKHggKyB3IC0gcngsIHkpO1xuICAgICAgaXNSb3VuZGVkICYmIGN0eC5iZXppZXJDdXJ2ZVRvKHggKyB3IC0gayAqIHJ4LCB5LCB4ICsgdywgeSArIGsgKiByeSwgeCArIHcsIHkgKyByeSk7XG5cbiAgICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyBoIC0gcnkpO1xuICAgICAgaXNSb3VuZGVkICYmIGN0eC5iZXppZXJDdXJ2ZVRvKHggKyB3LCB5ICsgaCAtIGsgKiByeSwgeCArIHcgLSBrICogcngsIHkgKyBoLCB4ICsgdyAtIHJ4LCB5ICsgaCk7XG5cbiAgICAgIGN0eC5saW5lVG8oeCArIHJ4LCB5ICsgaCk7XG4gICAgICBpc1JvdW5kZWQgJiYgY3R4LmJlemllckN1cnZlVG8oeCArIGsgKiByeCwgeSArIGgsIHgsIHkgKyBoIC0gayAqIHJ5LCB4LCB5ICsgaCAtIHJ5KTtcblxuICAgICAgY3R4LmxpbmVUbyh4LCB5ICsgcnkpO1xuICAgICAgaXNSb3VuZGVkICYmIGN0eC5iZXppZXJDdXJ2ZVRvKHgsIHkgKyBrICogcnksIHggKyBrICogcngsIHksIHggKyByeCwgeSk7XG5cbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcblxuICAgICAgdGhpcy5fcmVuZGVyUGFpbnRJbk9yZGVyKGN0eCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxTdXBlcigndG9PYmplY3QnLCBbJ3J4JywgJ3J5J10uY29uY2F0KHByb3BlcnRpZXNUb0luY2x1ZGUpKTtcbiAgICB9LFxuXG4gICAgLyogX1RPX1NWR19TVEFSVF8gKi9cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge0FycmF5fSBhbiBhcnJheSBvZiBzdHJpbmdzIHdpdGggdGhlIHNwZWNpZmljIHN2ZyByZXByZXNlbnRhdGlvblxuICAgICAqIG9mIHRoZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90b1NWRzogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IC10aGlzLndpZHRoIC8gMiwgeSA9IC10aGlzLmhlaWdodCAvIDI7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAnPHJlY3QgJywgJ0NPTU1PTl9QQVJUUycsXG4gICAgICAgICd4PVwiJywgeCwgJ1wiIHk9XCInLCB5LFxuICAgICAgICAnXCIgcng9XCInLCB0aGlzLnJ4LCAnXCIgcnk9XCInLCB0aGlzLnJ5LFxuICAgICAgICAnXCIgd2lkdGg9XCInLCB0aGlzLndpZHRoLCAnXCIgaGVpZ2h0PVwiJywgdGhpcy5oZWlnaHQsXG4gICAgICAgICdcIiAvPlxcbidcbiAgICAgIF07XG4gICAgfSxcbiAgICAvKiBfVE9fU1ZHX0VORF8gKi9cbiAgfSk7XG5cbiAgLyogX0ZST01fU1ZHX1NUQVJUXyAqL1xuICAvKipcbiAgICogTGlzdCBvZiBhdHRyaWJ1dGUgbmFtZXMgdG8gYWNjb3VudCBmb3Igd2hlbiBwYXJzaW5nIFNWRyBlbGVtZW50ICh1c2VkIGJ5IGBmYWJyaWMuUmVjdC5mcm9tRWxlbWVudGApXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5SZWN0XG4gICAqIEBzZWU6IGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9zaGFwZXMuaHRtbCNSZWN0RWxlbWVudFxuICAgKi9cbiAgZmFicmljLlJlY3QuQVRUUklCVVRFX05BTUVTID0gZmFicmljLlNIQVJFRF9BVFRSSUJVVEVTLmNvbmNhdCgneCB5IHJ4IHJ5IHdpZHRoIGhlaWdodCcuc3BsaXQoJyAnKSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5SZWN0fSBpbnN0YW5jZSBmcm9tIGFuIFNWRyBlbGVtZW50XG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5SZWN0XG4gICAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uIGludm9rZWQgYWZ0ZXIgcGFyc2luZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICBmYWJyaWMuUmVjdC5mcm9tRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHsgfTtcblxuICAgIHZhciBwYXJzZWRBdHRyaWJ1dGVzID0gZmFicmljLnBhcnNlQXR0cmlidXRlcyhlbGVtZW50LCBmYWJyaWMuUmVjdC5BVFRSSUJVVEVfTkFNRVMpO1xuICAgIHBhcnNlZEF0dHJpYnV0ZXMubGVmdCA9IHBhcnNlZEF0dHJpYnV0ZXMubGVmdCB8fCAwO1xuICAgIHBhcnNlZEF0dHJpYnV0ZXMudG9wICA9IHBhcnNlZEF0dHJpYnV0ZXMudG9wICB8fCAwO1xuICAgIHBhcnNlZEF0dHJpYnV0ZXMuaGVpZ2h0ICA9IHBhcnNlZEF0dHJpYnV0ZXMuaGVpZ2h0IHx8IDA7XG4gICAgcGFyc2VkQXR0cmlidXRlcy53aWR0aCAgPSBwYXJzZWRBdHRyaWJ1dGVzLndpZHRoIHx8IDA7XG4gICAgdmFyIHJlY3QgPSBuZXcgZmFicmljLlJlY3QoZXh0ZW5kKChvcHRpb25zID8gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKG9wdGlvbnMpIDogeyB9KSwgcGFyc2VkQXR0cmlidXRlcykpO1xuICAgIHJlY3QudmlzaWJsZSA9IHJlY3QudmlzaWJsZSAmJiByZWN0LndpZHRoID4gMCAmJiByZWN0LmhlaWdodCA+IDA7XG4gICAgY2FsbGJhY2socmVjdCk7XG4gIH07XG4gIC8qIF9GUk9NX1NWR19FTkRfICovXG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5SZWN0fSBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuUmVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGZhYnJpYy5SZWN0IGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5SZWN0LmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZhYnJpYy5PYmplY3QuX2Zyb21PYmplY3QoJ1JlY3QnLCBvYmplY3QsIGNhbGxiYWNrKTtcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZXh0ZW5kID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCxcbiAgICAgIG1pbiA9IGZhYnJpYy51dGlsLmFycmF5Lm1pbixcbiAgICAgIG1heCA9IGZhYnJpYy51dGlsLmFycmF5Lm1heCxcbiAgICAgIHRvRml4ZWQgPSBmYWJyaWMudXRpbC50b0ZpeGVkLFxuICAgICAgcHJvamVjdFN0cm9rZU9uUG9pbnRzID0gZmFicmljLnV0aWwucHJvamVjdFN0cm9rZU9uUG9pbnRzO1xuXG4gIGlmIChmYWJyaWMuUG9seWxpbmUpIHtcbiAgICBmYWJyaWMud2FybignZmFicmljLlBvbHlsaW5lIGlzIGFscmVhZHkgZGVmaW5lZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb2x5bGluZSBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLlBvbHlsaW5lXG4gICAqIEBleHRlbmRzIGZhYnJpYy5PYmplY3RcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLlBvbHlsaW5lI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuUG9seWxpbmUgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuT2JqZWN0LCAvKiogQGxlbmRzIGZhYnJpYy5Qb2x5bGluZS5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBhbiBvYmplY3RcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdwb2x5bGluZScsXG5cbiAgICAvKipcbiAgICAgKiBQb2ludHMgYXJyYXlcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcG9pbnRzOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogV0FSTklORzogRmVhdHVyZSBpbiBwcm9ncmVzc1xuICAgICAqIENhbGN1bGF0ZSB0aGUgZXhhY3QgYm91bmRpbmcgYm94IHRha2luZyBpbiBhY2NvdW50IHN0cm9rZVdpZHRoIG9uIGFjdXRlIGFuZ2xlc1xuICAgICAqIHRoaXMgd2lsbCBiZSB0dXJuZWQgdG8gdHJ1ZSBieSBkZWZhdWx0IG9uIGZhYnJpYyA2LjBcbiAgICAgKiBtYXliZSB3aWxsIGJlIGxlZnQgaW4gYXMgYW4gb3B0aW1pemF0aW9uIHNpbmNlIGNhbGN1bGF0aW9ucyBtYXkgYmUgc2xvd1xuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgZXhhY3RCb3VuZGluZ0JveDogZmFsc2UsXG5cbiAgICBjYWNoZVByb3BlcnRpZXM6IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLmNhY2hlUHJvcGVydGllcy5jb25jYXQoJ3BvaW50cycpLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwb2ludHMgQXJyYXkgb2YgcG9pbnRzICh3aGVyZSBlYWNoIHBvaW50IGlzIGFuIG9iamVjdCB3aXRoIHggYW5kIHkpXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2x5bGluZX0gdGhpc0FyZ1xuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHBvbHkgPSBuZXcgZmFicmljLlBvbHlsaW5lKFtcbiAgICAgKiAgICAgeyB4OiAxMCwgeTogMTAgfSxcbiAgICAgKiAgICAgeyB4OiA1MCwgeTogMzAgfSxcbiAgICAgKiAgICAgeyB4OiA0MCwgeTogNzAgfSxcbiAgICAgKiAgICAgeyB4OiA2MCwgeTogNTAgfSxcbiAgICAgKiAgICAgeyB4OiAxMDAsIHk6IDE1MCB9LFxuICAgICAqICAgICB7IHg6IDQwLCB5OiAxMDAgfVxuICAgICAqICAgXSwge1xuICAgICAqICAgc3Ryb2tlOiAncmVkJyxcbiAgICAgKiAgIGxlZnQ6IDEwMCxcbiAgICAgKiAgIHRvcDogMTAwXG4gICAgICogfSk7XG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ocG9pbnRzLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHRoaXMucG9pbnRzID0gcG9pbnRzIHx8IFtdO1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uRGltZW5zaW9ucyhvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcHJvamVjdFN0cm9rZU9uUG9pbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcHJvamVjdFN0cm9rZU9uUG9pbnRzKHRoaXMucG9pbnRzLCB0aGlzLCB0cnVlKTtcbiAgICB9LFxuXG4gICAgX3NldFBvc2l0aW9uRGltZW5zaW9uczogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGNhbGNEaW0gPSB0aGlzLl9jYWxjRGltZW5zaW9ucyhvcHRpb25zKSwgY29ycmVjdExlZnRUb3AsXG4gICAgICAgICAgY29ycmVjdFNpemUgPSB0aGlzLmV4YWN0Qm91bmRpbmdCb3ggPyB0aGlzLnN0cm9rZVdpZHRoIDogMDtcbiAgICAgIHRoaXMud2lkdGggPSBjYWxjRGltLndpZHRoIC0gY29ycmVjdFNpemU7XG4gICAgICB0aGlzLmhlaWdodCA9IGNhbGNEaW0uaGVpZ2h0IC0gY29ycmVjdFNpemU7XG4gICAgICBpZiAoIW9wdGlvbnMuZnJvbVNWRykge1xuICAgICAgICBjb3JyZWN0TGVmdFRvcCA9IHRoaXMudHJhbnNsYXRlVG9HaXZlbk9yaWdpbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyB0aGlzIGxvb2tzIGJhZCwgYnV0IGlzIG9uZSB3YXkgdG8ga2VlcCBpdCBvcHRpb25hbCBmb3Igbm93LlxuICAgICAgICAgICAgeDogY2FsY0RpbS5sZWZ0IC0gdGhpcy5zdHJva2VXaWR0aCAvIDIgKyBjb3JyZWN0U2l6ZSAvIDIsXG4gICAgICAgICAgICB5OiBjYWxjRGltLnRvcCAtIHRoaXMuc3Ryb2tlV2lkdGggLyAyICsgY29ycmVjdFNpemUgLyAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnbGVmdCcsXG4gICAgICAgICAgJ3RvcCcsXG4gICAgICAgICAgdGhpcy5vcmlnaW5YLFxuICAgICAgICAgIHRoaXMub3JpZ2luWVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxlZnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMubGVmdCA9IG9wdGlvbnMuZnJvbVNWRyA/IGNhbGNEaW0ubGVmdCA6IGNvcnJlY3RMZWZ0VG9wLng7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMudG9wID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnRvcCA9IG9wdGlvbnMuZnJvbVNWRyA/IGNhbGNEaW0udG9wIDogY29ycmVjdExlZnRUb3AueTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGF0aE9mZnNldCA9IHtcbiAgICAgICAgeDogY2FsY0RpbS5sZWZ0ICsgdGhpcy53aWR0aCAvIDIgKyBjb3JyZWN0U2l6ZSAvIDIsXG4gICAgICAgIHk6IGNhbGNEaW0udG9wICsgdGhpcy5oZWlnaHQgLyAyICsgY29ycmVjdFNpemUgLyAyXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIHBvbHlnb24gbWluIGFuZCBtYXggcG9pbnQgZnJvbSBwb2ludHMgYXJyYXksXG4gICAgICogcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCB0byBtZWFzdXJlIHRoZVxuICAgICAqIHBvbHlnb24gc2l6ZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0LmxlZnQgWCBjb29yZGluYXRlIG9mIHRoZSBwb2x5Z29uIGxlZnRtb3N0IHBvaW50XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3QudG9wIFkgY29vcmRpbmF0ZSBvZiB0aGUgcG9seWdvbiB0b3Btb3N0IHBvaW50XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3Qud2lkdGggZGlzdGFuY2UgYmV0d2VlbiBYIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2x5Z29uIGxlZnRtb3N0IGFuZCByaWdodG1vc3QgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdC5oZWlnaHQgZGlzdGFuY2UgYmV0d2VlbiBZIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2x5Z29uIHRvcG1vc3QgYW5kIGJvdHRvbW1vc3QgcG9pbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jYWxjRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cbiAgICAgIHZhciBwb2ludHMgPSB0aGlzLmV4YWN0Qm91bmRpbmdCb3ggPyB0aGlzLl9wcm9qZWN0U3Ryb2tlT25Qb2ludHMoKSA6IHRoaXMucG9pbnRzLFxuICAgICAgICAgIG1pblggPSBtaW4ocG9pbnRzLCAneCcpIHx8IDAsXG4gICAgICAgICAgbWluWSA9IG1pbihwb2ludHMsICd5JykgfHwgMCxcbiAgICAgICAgICBtYXhYID0gbWF4KHBvaW50cywgJ3gnKSB8fCAwLFxuICAgICAgICAgIG1heFkgPSBtYXgocG9pbnRzLCAneScpIHx8IDAsXG4gICAgICAgICAgd2lkdGggPSAobWF4WCAtIG1pblgpLFxuICAgICAgICAgIGhlaWdodCA9IChtYXhZIC0gbWluWSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IG1pblgsXG4gICAgICAgIHRvcDogbWluWSxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHJldHVybiBleHRlbmQodGhpcy5jYWxsU3VwZXIoJ3RvT2JqZWN0JywgcHJvcGVydGllc1RvSW5jbHVkZSksIHtcbiAgICAgICAgcG9pbnRzOiB0aGlzLnBvaW50cy5jb25jYXQoKVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qIF9UT19TVkdfU1RBUlRfICovXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2Ygc3RyaW5ncyB3aXRoIHRoZSBzcGVjaWZpYyBzdmcgcmVwcmVzZW50YXRpb25cbiAgICAgKiBvZiB0aGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdG9TVkc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvaW50cyA9IFtdLCBkaWZmWCA9IHRoaXMucGF0aE9mZnNldC54LCBkaWZmWSA9IHRoaXMucGF0aE9mZnNldC55LFxuICAgICAgICAgIE5VTV9GUkFDVElPTl9ESUdJVFMgPSBmYWJyaWMuT2JqZWN0Lk5VTV9GUkFDVElPTl9ESUdJVFM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBwb2ludHMucHVzaChcbiAgICAgICAgICB0b0ZpeGVkKHRoaXMucG9pbnRzW2ldLnggLSBkaWZmWCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksICcsJyxcbiAgICAgICAgICB0b0ZpeGVkKHRoaXMucG9pbnRzW2ldLnkgLSBkaWZmWSwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksICcgJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgJzwnICsgdGhpcy50eXBlICsgJyAnLCAnQ09NTU9OX1BBUlRTJyxcbiAgICAgICAgJ3BvaW50cz1cIicsIHBvaW50cy5qb2luKCcnKSxcbiAgICAgICAgJ1wiIC8+XFxuJ1xuICAgICAgXTtcbiAgICB9LFxuICAgIC8qIF9UT19TVkdfRU5EXyAqL1xuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBjb21tb25SZW5kZXI6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgdmFyIHBvaW50LCBsZW4gPSB0aGlzLnBvaW50cy5sZW5ndGgsXG4gICAgICAgICAgeCA9IHRoaXMucGF0aE9mZnNldC54LFxuICAgICAgICAgIHkgPSB0aGlzLnBhdGhPZmZzZXQueTtcblxuICAgICAgaWYgKCFsZW4gfHwgaXNOYU4odGhpcy5wb2ludHNbbGVuIC0gMV0ueSkpIHtcbiAgICAgICAgLy8gZG8gbm90IGRyYXcgaWYgbm8gcG9pbnRzIG9yIG9kZCBwb2ludHNcbiAgICAgICAgLy8gTmFOIGNvbWVzIGZyb20gcGFyc2VGbG9hdCBvZiBhIGVtcHR5IHN0cmluZyBpbiBwYXJzZXJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbyh0aGlzLnBvaW50c1swXS54IC0geCwgdGhpcy5wb2ludHNbMF0ueSAtIHkpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBwb2ludCA9IHRoaXMucG9pbnRzW2ldO1xuICAgICAgICBjdHgubGluZVRvKHBvaW50LnggLSB4LCBwb2ludC55IC0geSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAoIXRoaXMuY29tbW9uUmVuZGVyKGN0eCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmVuZGVyUGFpbnRJbk9yZGVyKGN0eCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29tcGxleGl0eSBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge051bWJlcn0gY29tcGxleGl0eSBvZiB0aGlzIGluc3RhbmNlXG4gICAgICovXG4gICAgY29tcGxleGl0eTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3BvaW50cycpLmxlbmd0aDtcbiAgICB9XG4gIH0pO1xuXG4gIC8qIF9GUk9NX1NWR19TVEFSVF8gKi9cbiAgLyoqXG4gICAqIExpc3Qgb2YgYXR0cmlidXRlIG5hbWVzIHRvIGFjY291bnQgZm9yIHdoZW4gcGFyc2luZyBTVkcgZWxlbWVudCAodXNlZCBieSB7QGxpbmsgZmFicmljLlBvbHlsaW5lLmZyb21FbGVtZW50fSlcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlBvbHlsaW5lXG4gICAqIEBzZWU6IGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9zaGFwZXMuaHRtbCNQb2x5bGluZUVsZW1lbnRcbiAgICovXG4gIGZhYnJpYy5Qb2x5bGluZS5BVFRSSUJVVEVfTkFNRVMgPSBmYWJyaWMuU0hBUkVEX0FUVFJJQlVURVMuY29uY2F0KCk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmFicmljLlBvbHlsaW5lIGluc3RhbmNlIGZyb20gYW4gU1ZHIGVsZW1lbnRcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlBvbHlsaW5lXG4gICAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHBhcnNlclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbiBpbnZva2VkIGFmdGVyIHBhcnNpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgKi9cbiAgZmFicmljLlBvbHlsaW5lLmZyb21FbGVtZW50R2VuZXJhdG9yID0gZnVuY3Rpb24oX2NsYXNzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG5cbiAgICAgIHZhciBwb2ludHMgPSBmYWJyaWMucGFyc2VQb2ludHNBdHRyaWJ1dGUoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3BvaW50cycpKSxcbiAgICAgICAgICBwYXJzZWRBdHRyaWJ1dGVzID0gZmFicmljLnBhcnNlQXR0cmlidXRlcyhlbGVtZW50LCBmYWJyaWNbX2NsYXNzXS5BVFRSSUJVVEVfTkFNRVMpO1xuICAgICAgcGFyc2VkQXR0cmlidXRlcy5mcm9tU1ZHID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrKG5ldyBmYWJyaWNbX2NsYXNzXShwb2ludHMsIGV4dGVuZChwYXJzZWRBdHRyaWJ1dGVzLCBvcHRpb25zKSkpO1xuICAgIH07XG4gIH07XG5cbiAgZmFicmljLlBvbHlsaW5lLmZyb21FbGVtZW50ID0gZmFicmljLlBvbHlsaW5lLmZyb21FbGVtZW50R2VuZXJhdG9yKCdQb2x5bGluZScpO1xuXG4gIC8qIF9GUk9NX1NWR19FTkRfICovXG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmFicmljLlBvbHlsaW5lIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Qb2x5bGluZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGZhYnJpYy5QYXRoIGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5Qb2x5bGluZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIHJldHVybiBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0KCdQb2x5bGluZScsIG9iamVjdCwgY2FsbGJhY2ssICdwb2ludHMnKTtcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7fSksXG4gICAgICBwcm9qZWN0U3Ryb2tlT25Qb2ludHMgPSBmYWJyaWMudXRpbC5wcm9qZWN0U3Ryb2tlT25Qb2ludHM7XG5cbiAgaWYgKGZhYnJpYy5Qb2x5Z29uKSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5Qb2x5Z29uIGlzIGFscmVhZHkgZGVmaW5lZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb2x5Z29uIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuUG9seWdvblxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuUG9seWxpbmVcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLlBvbHlnb24jaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICovXG4gIGZhYnJpYy5Qb2x5Z29uID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLlBvbHlsaW5lLCAvKiogQGxlbmRzIGZhYnJpYy5Qb2x5Z29uLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ3BvbHlnb24nLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcHJvamVjdFN0cm9rZU9uUG9pbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcHJvamVjdFN0cm9rZU9uUG9pbnRzKHRoaXMucG9pbnRzLCB0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAoIXRoaXMuY29tbW9uUmVuZGVyKGN0eCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fcmVuZGVyUGFpbnRJbk9yZGVyKGN0eCk7XG4gICAgfSxcblxuICB9KTtcblxuICAvKiBfRlJPTV9TVkdfU1RBUlRfICovXG4gIC8qKlxuICAgKiBMaXN0IG9mIGF0dHJpYnV0ZSBuYW1lcyB0byBhY2NvdW50IGZvciB3aGVuIHBhcnNpbmcgU1ZHIGVsZW1lbnQgKHVzZWQgYnkgYGZhYnJpYy5Qb2x5Z29uLmZyb21FbGVtZW50YClcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlBvbHlnb25cbiAgICogQHNlZTogaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3NoYXBlcy5odG1sI1BvbHlnb25FbGVtZW50XG4gICAqL1xuICBmYWJyaWMuUG9seWdvbi5BVFRSSUJVVEVfTkFNRVMgPSBmYWJyaWMuU0hBUkVEX0FUVFJJQlVURVMuY29uY2F0KCk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5Qb2x5Z29ufSBpbnN0YW5jZSBmcm9tIGFuIFNWRyBlbGVtZW50XG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Qb2x5Z29uXG4gICAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uIGludm9rZWQgYWZ0ZXIgcGFyc2luZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICBmYWJyaWMuUG9seWdvbi5mcm9tRWxlbWVudCA9IGZhYnJpYy5Qb2x5bGluZS5mcm9tRWxlbWVudEdlbmVyYXRvcignUG9seWdvbicpO1xuICAvKiBfRlJPTV9TVkdfRU5EXyAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZhYnJpYy5Qb2x5Z29uIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Qb2x5Z29uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gYW4gZmFicmljLlBhdGggaW5zdGFuY2UgaXMgY3JlYXRlZFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgZmFicmljLlBvbHlnb24uZnJvbU9iamVjdCA9IGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0KCdQb2x5Z29uJywgb2JqZWN0LCBjYWxsYmFjaywgJ3BvaW50cycpO1xuICB9O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBtaW4gPSBmYWJyaWMudXRpbC5hcnJheS5taW4sXG4gICAgICBtYXggPSBmYWJyaWMudXRpbC5hcnJheS5tYXgsXG4gICAgICBleHRlbmQgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kLFxuICAgICAgY2xvbmUgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUsXG4gICAgICB0b0ZpeGVkID0gZmFicmljLnV0aWwudG9GaXhlZDtcblxuICBpZiAoZmFicmljLlBhdGgpIHtcbiAgICBmYWJyaWMud2FybignZmFicmljLlBhdGggaXMgYWxyZWFkeSBkZWZpbmVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdGggY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5QYXRoXG4gICAqIEBleHRlbmRzIGZhYnJpYy5PYmplY3RcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTEjcGF0aF9hbmRfcGF0aGdyb3VwfVxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuUGF0aCNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKi9cbiAgZmFicmljLlBhdGggPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuT2JqZWN0LCAvKiogQGxlbmRzIGZhYnJpYy5QYXRoLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ3BhdGgnLFxuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgcGF0aCBwb2ludHNcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcGF0aDogbnVsbCxcblxuICAgIGNhY2hlUHJvcGVydGllczogZmFicmljLk9iamVjdC5wcm90b3R5cGUuY2FjaGVQcm9wZXJ0aWVzLmNvbmNhdCgncGF0aCcsICdmaWxsUnVsZScpLFxuXG4gICAgc3RhdGVQcm9wZXJ0aWVzOiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5zdGF0ZVByb3BlcnRpZXMuY29uY2F0KCdwYXRoJyksXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBwYXRoIFBhdGggZGF0YSAoc2VxdWVuY2Ugb2YgY29vcmRpbmF0ZXMgYW5kIGNvcnJlc3BvbmRpbmcgXCJjb21tYW5kXCIgdG9rZW5zKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUGF0aH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChwYXRoLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gY2xvbmUob3B0aW9ucyB8fCB7fSk7XG4gICAgICBkZWxldGUgb3B0aW9ucy5wYXRoO1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuX3NldFBhdGgocGF0aCB8fCBbXSwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICogQHByaXZhdGVcbiAgICAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBwYXRoIFBhdGggZGF0YSAoc2VxdWVuY2Ugb2YgY29vcmRpbmF0ZXMgYW5kIGNvcnJlc3BvbmRpbmcgXCJjb21tYW5kXCIgdG9rZW5zKVxuICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICovXG4gICAgX3NldFBhdGg6IGZ1bmN0aW9uIChwYXRoLCBvcHRpb25zKSB7XG4gICAgICB0aGlzLnBhdGggPSBmYWJyaWMudXRpbC5tYWtlUGF0aFNpbXBsZXIoXG4gICAgICAgIEFycmF5LmlzQXJyYXkocGF0aCkgPyBwYXRoIDogZmFicmljLnV0aWwucGFyc2VQYXRoKHBhdGgpXG4gICAgICApO1xuXG4gICAgICBmYWJyaWMuUG9seWxpbmUucHJvdG90eXBlLl9zZXRQb3NpdGlvbkRpbWVuc2lvbnMuY2FsbCh0aGlzLCBvcHRpb25zIHx8IHt9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IGNvbnRleHQgdG8gcmVuZGVyIHBhdGggb25cbiAgICAgKi9cbiAgICBfcmVuZGVyUGF0aENvbW1hbmRzOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIHZhciBjdXJyZW50LCAvLyBjdXJyZW50IGluc3RydWN0aW9uXG4gICAgICAgICAgc3VicGF0aFN0YXJ0WCA9IDAsXG4gICAgICAgICAgc3VicGF0aFN0YXJ0WSA9IDAsXG4gICAgICAgICAgeCA9IDAsIC8vIGN1cnJlbnQgeFxuICAgICAgICAgIHkgPSAwLCAvLyBjdXJyZW50IHlcbiAgICAgICAgICBjb250cm9sWCA9IDAsIC8vIGN1cnJlbnQgY29udHJvbCBwb2ludCB4XG4gICAgICAgICAgY29udHJvbFkgPSAwLCAvLyBjdXJyZW50IGNvbnRyb2wgcG9pbnQgeVxuICAgICAgICAgIGwgPSAtdGhpcy5wYXRoT2Zmc2V0LngsXG4gICAgICAgICAgdCA9IC10aGlzLnBhdGhPZmZzZXQueTtcblxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5wYXRoLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cbiAgICAgICAgY3VycmVudCA9IHRoaXMucGF0aFtpXTtcblxuICAgICAgICBzd2l0Y2ggKGN1cnJlbnRbMF0pIHsgLy8gZmlyc3QgbGV0dGVyXG5cbiAgICAgICAgICBjYXNlICdMJzogLy8gbGluZXRvLCBhYnNvbHV0ZVxuICAgICAgICAgICAgeCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgICB5ID0gY3VycmVudFsyXTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIGwsIHkgKyB0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnTSc6IC8vIG1vdmVUbywgYWJzb2x1dGVcbiAgICAgICAgICAgIHggPSBjdXJyZW50WzFdO1xuICAgICAgICAgICAgeSA9IGN1cnJlbnRbMl07XG4gICAgICAgICAgICBzdWJwYXRoU3RhcnRYID0geDtcbiAgICAgICAgICAgIHN1YnBhdGhTdGFydFkgPSB5O1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgbCwgeSArIHQpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdDJzogLy8gYmV6aWVyQ3VydmVUbywgYWJzb2x1dGVcbiAgICAgICAgICAgIHggPSBjdXJyZW50WzVdO1xuICAgICAgICAgICAgeSA9IGN1cnJlbnRbNl07XG4gICAgICAgICAgICBjb250cm9sWCA9IGN1cnJlbnRbM107XG4gICAgICAgICAgICBjb250cm9sWSA9IGN1cnJlbnRbNF07XG4gICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhcbiAgICAgICAgICAgICAgY3VycmVudFsxXSArIGwsXG4gICAgICAgICAgICAgIGN1cnJlbnRbMl0gKyB0LFxuICAgICAgICAgICAgICBjb250cm9sWCArIGwsXG4gICAgICAgICAgICAgIGNvbnRyb2xZICsgdCxcbiAgICAgICAgICAgICAgeCArIGwsXG4gICAgICAgICAgICAgIHkgKyB0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdRJzogLy8gcXVhZHJhdGljQ3VydmVUbywgYWJzb2x1dGVcbiAgICAgICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKFxuICAgICAgICAgICAgICBjdXJyZW50WzFdICsgbCxcbiAgICAgICAgICAgICAgY3VycmVudFsyXSArIHQsXG4gICAgICAgICAgICAgIGN1cnJlbnRbM10gKyBsLFxuICAgICAgICAgICAgICBjdXJyZW50WzRdICsgdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHggPSBjdXJyZW50WzNdO1xuICAgICAgICAgICAgeSA9IGN1cnJlbnRbNF07XG4gICAgICAgICAgICBjb250cm9sWCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgICBjb250cm9sWSA9IGN1cnJlbnRbMl07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3onOlxuICAgICAgICAgIGNhc2UgJ1onOlxuICAgICAgICAgICAgeCA9IHN1YnBhdGhTdGFydFg7XG4gICAgICAgICAgICB5ID0gc3VicGF0aFN0YXJ0WTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBjb250ZXh0IHRvIHJlbmRlciBwYXRoIG9uXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB0aGlzLl9yZW5kZXJQYXRoQ29tbWFuZHMoY3R4KTtcbiAgICAgIHRoaXMuX3JlbmRlclBhaW50SW5PcmRlcihjdHgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICcjPGZhYnJpYy5QYXRoICgnICsgdGhpcy5jb21wbGV4aXR5KCkgK1xuICAgICAgICAnKTogeyBcInRvcFwiOiAnICsgdGhpcy50b3AgKyAnLCBcImxlZnRcIjogJyArIHRoaXMubGVmdCArICcgfT4nO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kKHRoaXMuY2FsbFN1cGVyKCd0b09iamVjdCcsIHByb3BlcnRpZXNUb0luY2x1ZGUpLCB7XG4gICAgICAgIHBhdGg6IHRoaXMucGF0aC5tYXAoZnVuY3Rpb24oaXRlbSkgeyByZXR1cm4gaXRlbS5zbGljZSgpOyB9KSxcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGRhdGFsZXNzIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvRGF0YWxlc3NPYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHZhciBvID0gdGhpcy50b09iamVjdChbJ3NvdXJjZVBhdGgnXS5jb25jYXQocHJvcGVydGllc1RvSW5jbHVkZSkpO1xuICAgICAgaWYgKG8uc291cmNlUGF0aCkge1xuICAgICAgICBkZWxldGUgby5wYXRoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG87XG4gICAgfSxcblxuICAgIC8qIF9UT19TVkdfU1RBUlRfICovXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2Ygc3RyaW5ncyB3aXRoIHRoZSBzcGVjaWZpYyBzdmcgcmVwcmVzZW50YXRpb25cbiAgICAgKiBvZiB0aGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdG9TVkc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhdGggPSBmYWJyaWMudXRpbC5qb2luUGF0aCh0aGlzLnBhdGgpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgJzxwYXRoICcsICdDT01NT05fUEFSVFMnLFxuICAgICAgICAnZD1cIicsIHBhdGgsXG4gICAgICAgICdcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgJyxcbiAgICAgICAgJy8+XFxuJ1xuICAgICAgXTtcbiAgICB9LFxuXG4gICAgX2dldE9mZnNldFRyYW5zZm9ybTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGlnaXRzID0gZmFicmljLk9iamVjdC5OVU1fRlJBQ1RJT05fRElHSVRTO1xuICAgICAgcmV0dXJuICcgdHJhbnNsYXRlKCcgKyB0b0ZpeGVkKC10aGlzLnBhdGhPZmZzZXQueCwgZGlnaXRzKSArICcsICcgK1xuICAgICAgICAgIHRvRml4ZWQoLXRoaXMucGF0aE9mZnNldC55LCBkaWdpdHMpICsgJyknO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN2ZyBjbGlwUGF0aCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXZpdmVyXSBNZXRob2QgZm9yIGZ1cnRoZXIgcGFyc2luZyBvZiBzdmcgcmVwcmVzZW50YXRpb24uXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b0NsaXBQYXRoU1ZHOiBmdW5jdGlvbihyZXZpdmVyKSB7XG4gICAgICB2YXIgYWRkaXRpb25hbFRyYW5zZm9ybSA9IHRoaXMuX2dldE9mZnNldFRyYW5zZm9ybSgpO1xuICAgICAgcmV0dXJuICdcXHQnICsgdGhpcy5fY3JlYXRlQmFzZUNsaXBQYXRoU1ZHTWFya3VwKFxuICAgICAgICB0aGlzLl90b1NWRygpLCB7IHJldml2ZXI6IHJldml2ZXIsIGFkZGl0aW9uYWxUcmFuc2Zvcm06IGFkZGl0aW9uYWxUcmFuc2Zvcm0gfVxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2Ygc3ZnIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9TVkc6IGZ1bmN0aW9uKHJldml2ZXIpIHtcbiAgICAgIHZhciBhZGRpdGlvbmFsVHJhbnNmb3JtID0gdGhpcy5fZ2V0T2Zmc2V0VHJhbnNmb3JtKCk7XG4gICAgICByZXR1cm4gdGhpcy5fY3JlYXRlQmFzZVNWR01hcmt1cCh0aGlzLl90b1NWRygpLCB7IHJldml2ZXI6IHJldml2ZXIsIGFkZGl0aW9uYWxUcmFuc2Zvcm06IGFkZGl0aW9uYWxUcmFuc2Zvcm0gIH0pO1xuICAgIH0sXG4gICAgLyogX1RPX1NWR19FTkRfICovXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG51bWJlciByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZSBjb21wbGV4aXR5XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBjb21wbGV4aXR5IG9mIHRoaXMgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBjb21wbGV4aXR5OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhdGgubGVuZ3RoO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jYWxjRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cbiAgICAgIHZhciBhWCA9IFtdLFxuICAgICAgICAgIGFZID0gW10sXG4gICAgICAgICAgY3VycmVudCwgLy8gY3VycmVudCBpbnN0cnVjdGlvblxuICAgICAgICAgIHN1YnBhdGhTdGFydFggPSAwLFxuICAgICAgICAgIHN1YnBhdGhTdGFydFkgPSAwLFxuICAgICAgICAgIHggPSAwLCAvLyBjdXJyZW50IHhcbiAgICAgICAgICB5ID0gMCwgLy8gY3VycmVudCB5XG4gICAgICAgICAgYm91bmRzO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5wYXRoLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cbiAgICAgICAgY3VycmVudCA9IHRoaXMucGF0aFtpXTtcblxuICAgICAgICBzd2l0Y2ggKGN1cnJlbnRbMF0pIHsgLy8gZmlyc3QgbGV0dGVyXG5cbiAgICAgICAgICBjYXNlICdMJzogLy8gbGluZXRvLCBhYnNvbHV0ZVxuICAgICAgICAgICAgeCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgICB5ID0gY3VycmVudFsyXTtcbiAgICAgICAgICAgIGJvdW5kcyA9IFtdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdNJzogLy8gbW92ZVRvLCBhYnNvbHV0ZVxuICAgICAgICAgICAgeCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgICB5ID0gY3VycmVudFsyXTtcbiAgICAgICAgICAgIHN1YnBhdGhTdGFydFggPSB4O1xuICAgICAgICAgICAgc3VicGF0aFN0YXJ0WSA9IHk7XG4gICAgICAgICAgICBib3VuZHMgPSBbXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnQyc6IC8vIGJlemllckN1cnZlVG8sIGFic29sdXRlXG4gICAgICAgICAgICBib3VuZHMgPSBmYWJyaWMudXRpbC5nZXRCb3VuZHNPZkN1cnZlKHgsIHksXG4gICAgICAgICAgICAgIGN1cnJlbnRbMV0sXG4gICAgICAgICAgICAgIGN1cnJlbnRbMl0sXG4gICAgICAgICAgICAgIGN1cnJlbnRbM10sXG4gICAgICAgICAgICAgIGN1cnJlbnRbNF0sXG4gICAgICAgICAgICAgIGN1cnJlbnRbNV0sXG4gICAgICAgICAgICAgIGN1cnJlbnRbNl1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB4ID0gY3VycmVudFs1XTtcbiAgICAgICAgICAgIHkgPSBjdXJyZW50WzZdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdRJzogLy8gcXVhZHJhdGljQ3VydmVUbywgYWJzb2x1dGVcbiAgICAgICAgICAgIGJvdW5kcyA9IGZhYnJpYy51dGlsLmdldEJvdW5kc09mQ3VydmUoeCwgeSxcbiAgICAgICAgICAgICAgY3VycmVudFsxXSxcbiAgICAgICAgICAgICAgY3VycmVudFsyXSxcbiAgICAgICAgICAgICAgY3VycmVudFsxXSxcbiAgICAgICAgICAgICAgY3VycmVudFsyXSxcbiAgICAgICAgICAgICAgY3VycmVudFszXSxcbiAgICAgICAgICAgICAgY3VycmVudFs0XVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHggPSBjdXJyZW50WzNdO1xuICAgICAgICAgICAgeSA9IGN1cnJlbnRbNF07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3onOlxuICAgICAgICAgIGNhc2UgJ1onOlxuICAgICAgICAgICAgeCA9IHN1YnBhdGhTdGFydFg7XG4gICAgICAgICAgICB5ID0gc3VicGF0aFN0YXJ0WTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGJvdW5kcy5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICAgIGFYLnB1c2gocG9pbnQueCk7XG4gICAgICAgICAgYVkucHVzaChwb2ludC55KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFYLnB1c2goeCk7XG4gICAgICAgIGFZLnB1c2goeSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtaW5YID0gbWluKGFYKSB8fCAwLFxuICAgICAgICAgIG1pblkgPSBtaW4oYVkpIHx8IDAsXG4gICAgICAgICAgbWF4WCA9IG1heChhWCkgfHwgMCxcbiAgICAgICAgICBtYXhZID0gbWF4KGFZKSB8fCAwLFxuICAgICAgICAgIGRlbHRhWCA9IG1heFggLSBtaW5YLFxuICAgICAgICAgIGRlbHRhWSA9IG1heFkgLSBtaW5ZO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBtaW5YLFxuICAgICAgICB0b3A6IG1pblksXG4gICAgICAgIHdpZHRoOiBkZWx0YVgsXG4gICAgICAgIGhlaWdodDogZGVsdGFZXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgZmFicmljLlBhdGggZnJvbSBhbiBvYmplY3RcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlBhdGhcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGZhYnJpYy5QYXRoIGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5QYXRoLmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvYmplY3Quc291cmNlUGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwYXRoVXJsID0gb2JqZWN0LnNvdXJjZVBhdGg7XG4gICAgICBmYWJyaWMubG9hZFNWR0Zyb21VUkwocGF0aFVybCwgZnVuY3Rpb24gKGVsZW1lbnRzKSB7XG4gICAgICAgIHZhciBwYXRoID0gZWxlbWVudHNbMF07XG4gICAgICAgIHBhdGguc2V0T3B0aW9ucyhvYmplY3QpO1xuICAgICAgICBpZiAob2JqZWN0LmNsaXBQYXRoKSB7XG4gICAgICAgICAgZmFicmljLnV0aWwuZW5saXZlbk9iamVjdHMoW29iamVjdC5jbGlwUGF0aF0sIGZ1bmN0aW9uKGVsaXZlbmVkT2JqZWN0cykge1xuICAgICAgICAgICAgcGF0aC5jbGlwUGF0aCA9IGVsaXZlbmVkT2JqZWN0c1swXTtcbiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHBhdGgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHBhdGgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0KCdQYXRoJywgb2JqZWN0LCBjYWxsYmFjaywgJ3BhdGgnKTtcbiAgICB9XG4gIH07XG5cbiAgLyogX0ZST01fU1ZHX1NUQVJUXyAqL1xuICAvKipcbiAgICogTGlzdCBvZiBhdHRyaWJ1dGUgbmFtZXMgdG8gYWNjb3VudCBmb3Igd2hlbiBwYXJzaW5nIFNWRyBlbGVtZW50ICh1c2VkIGJ5IGBmYWJyaWMuUGF0aC5mcm9tRWxlbWVudGApXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5QYXRoXG4gICAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3BhdGhzLmh0bWwjUGF0aEVsZW1lbnRcbiAgICovXG4gIGZhYnJpYy5QYXRoLkFUVFJJQlVURV9OQU1FUyA9IGZhYnJpYy5TSEFSRURfQVRUUklCVVRFUy5jb25jYXQoWydkJ10pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGZhYnJpYy5QYXRoIGZyb20gYW4gU1ZHIDxwYXRoPiBlbGVtZW50XG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5QYXRoXG4gICAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZWxlbWVudCB0byBwYXJzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiBhbiBmYWJyaWMuUGF0aCBpbnN0YW5jZSBpcyBjcmVhdGVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBPcHRpb25zIGNhbGxiYWNrIGludm9rZWQgYWZ0ZXIgcGFyc2luZyBpcyBmaW5pc2hlZFxuICAgKi9cbiAgZmFicmljLlBhdGguZnJvbUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50LCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIHZhciBwYXJzZWRBdHRyaWJ1dGVzID0gZmFicmljLnBhcnNlQXR0cmlidXRlcyhlbGVtZW50LCBmYWJyaWMuUGF0aC5BVFRSSUJVVEVfTkFNRVMpO1xuICAgIHBhcnNlZEF0dHJpYnV0ZXMuZnJvbVNWRyA9IHRydWU7XG4gICAgY2FsbGJhY2sobmV3IGZhYnJpYy5QYXRoKHBhcnNlZEF0dHJpYnV0ZXMuZCwgZXh0ZW5kKHBhcnNlZEF0dHJpYnV0ZXMsIG9wdGlvbnMpKSk7XG4gIH07XG4gIC8qIF9GUk9NX1NWR19FTkRfICovXG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIG1pbiA9IGZhYnJpYy51dGlsLmFycmF5Lm1pbixcbiAgICAgIG1heCA9IGZhYnJpYy51dGlsLmFycmF5Lm1heDtcblxuICBpZiAoZmFicmljLkdyb3VwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdyb3VwIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuR3JvdXBcbiAgICogQGV4dGVuZHMgZmFicmljLk9iamVjdFxuICAgKiBAbWl4ZXMgZmFicmljLkNvbGxlY3Rpb25cbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTMjZ3JvdXBzfVxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuR3JvdXAjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICovXG4gIGZhYnJpYy5Hcm91cCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5PYmplY3QsIGZhYnJpYy5Db2xsZWN0aW9uLCAvKiogQGxlbmRzIGZhYnJpYy5Hcm91cC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBhbiBvYmplY3RcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdncm91cCcsXG5cbiAgICAvKipcbiAgICAgKiBXaWR0aCBvZiBzdHJva2VcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHN0cm9rZVdpZHRoOiAwLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIGNsaWNrLCBtb3VzZW92ZXIsIG1vdXNlb3V0IGV2ZW50cyAmIGhvdmVyQ3Vyc29yIHNob3VsZCBhbHNvIGNoZWNrIGZvciBzdWJ0YXJnZXRzXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc3ViVGFyZ2V0Q2hlY2s6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogR3JvdXBzIGFyZSBjb250YWluZXIsIGRvIG5vdCByZW5kZXIgYW55dGhpbmcgb24gdGhleXIgb3duLCBlbmNlIG5vIGNhY2hlIHByb3BlcnRpZXNcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY2FjaGVQcm9wZXJ0aWVzOiBbXSxcblxuICAgIC8qKlxuICAgICAqIHNldE9uR3JvdXAgaXMgYSBtZXRob2QgdXNlZCBmb3IgVGV4dEJveCB0aGF0IGlzIG5vIG1vcmUgdXNlZCBzaW5jZSAyLjAuMCBUaGUgYmVoYXZpb3IgaXMgc3RpbGxcbiAgICAgKiBhdmFpbGFibGUgc2V0dGluZyB0aGlzIGJvb2xlYW4gdG8gdHJ1ZS5cbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB1c2VTZXRPbkdyb3VwOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdHMgR3JvdXAgb2JqZWN0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpc0FscmVhZHlHcm91cGVkXSBpZiB0cnVlLCBvYmplY3RzIGhhdmUgYmVlbiBncm91cGVkIGFscmVhZHkuXG4gICAgICogQHJldHVybiB7T2JqZWN0fSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob2JqZWN0cywgb3B0aW9ucywgaXNBbHJlYWR5R3JvdXBlZCkge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB0aGlzLl9vYmplY3RzID0gW107XG4gICAgICAvLyBpZiBvYmplY3RzIGVuY2xvc2VkIGluIGEgZ3JvdXAgaGF2ZSBiZWVuIGdyb3VwZWQgYWxyZWFkeSxcbiAgICAgIC8vIHdlIGNhbm5vdCBjaGFuZ2UgcHJvcGVydGllcyBvZiBvYmplY3RzLlxuICAgICAgLy8gVGh1cyB3ZSBuZWVkIHRvIHNldCBvcHRpb25zIHRvIGdyb3VwIHdpdGhvdXQgb2JqZWN0cyxcbiAgICAgIGlzQWxyZWFkeUdyb3VwZWQgJiYgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuX29iamVjdHMgPSBvYmplY3RzIHx8IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX29iamVjdHMubGVuZ3RoOyBpLS07ICkge1xuICAgICAgICB0aGlzLl9vYmplY3RzW2ldLmdyb3VwID0gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0FscmVhZHlHcm91cGVkKSB7XG4gICAgICAgIHZhciBjZW50ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuY2VudGVyUG9pbnQ7XG4gICAgICAgIC8vIHdlIHdhbnQgdG8gc2V0IG9yaWdpbnMgYmVmb3JlIGNhbGN1bGF0aW5nIHRoZSBib3VuZGluZyBib3guXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIHRvcGxlZnQgY2FuIGJlIHNldCB3aXRoIHRoYXQgaW4gbWluZC5cbiAgICAgICAgLy8gaWYgc3BlY2lmaWMgdG9wIGFuZCBsZWZ0IGFyZSBwYXNzZWQsIGFyZSBvdmVyd3JpdHRlbiBsYXRlclxuICAgICAgICAvLyB3aXRoIHRoZSBjYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKVxuICAgICAgICBpZiAob3B0aW9ucy5vcmlnaW5YICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLm9yaWdpblggPSBvcHRpb25zLm9yaWdpblg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMub3JpZ2luWSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5vcmlnaW5ZID0gb3B0aW9ucy5vcmlnaW5ZO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGNvbWluZyBmcm9tIHN2ZyBpIGRvIG5vdCB3YW50IHRvIGNhbGMgYm91bmRzLlxuICAgICAgICAvLyBpIGFzc3VtZSB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBwYXNzZWQgYWxvbmcgb3B0aW9uc1xuICAgICAgICBjZW50ZXIgfHwgdGhpcy5fY2FsY0JvdW5kcygpO1xuICAgICAgICB0aGlzLl91cGRhdGVPYmplY3RzQ29vcmRzKGNlbnRlcik7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmNlbnRlclBvaW50O1xuICAgICAgICB0aGlzLmNhbGxTdXBlcignaW5pdGlhbGl6ZScsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZU9iamVjdHNBQ29vcmRzKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0Q29vcmRzKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VwZGF0ZU9iamVjdHNBQ29vcmRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBza2lwQ29udHJvbHMgPSB0cnVlO1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX29iamVjdHMubGVuZ3RoOyBpLS07ICl7XG4gICAgICAgIHRoaXMuX29iamVjdHNbaV0uc2V0Q29vcmRzKHNraXBDb250cm9scyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbc2tpcENvb3Jkc0NoYW5nZV0gaWYgdHJ1ZSwgY29vcmRpbmF0ZXMgb2Ygb2JqZWN0cyBlbmNsb3NlZCBpbiBhIGdyb3VwIGRvIG5vdCBjaGFuZ2VcbiAgICAgKi9cbiAgICBfdXBkYXRlT2JqZWN0c0Nvb3JkczogZnVuY3Rpb24oY2VudGVyKSB7XG4gICAgICB2YXIgY2VudGVyID0gY2VudGVyIHx8IHRoaXMuZ2V0Q2VudGVyUG9pbnQoKTtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9vYmplY3RzLmxlbmd0aDsgaS0tOyApe1xuICAgICAgICB0aGlzLl91cGRhdGVPYmplY3RDb29yZHModGhpcy5fb2JqZWN0c1tpXSwgY2VudGVyKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IGNlbnRlciwgY3VycmVudCBjZW50ZXIgb2YgZ3JvdXAuXG4gICAgICovXG4gICAgX3VwZGF0ZU9iamVjdENvb3JkczogZnVuY3Rpb24ob2JqZWN0LCBjZW50ZXIpIHtcbiAgICAgIHZhciBvYmplY3RMZWZ0ID0gb2JqZWN0LmxlZnQsXG4gICAgICAgICAgb2JqZWN0VG9wID0gb2JqZWN0LnRvcCxcbiAgICAgICAgICBza2lwQ29udHJvbHMgPSB0cnVlO1xuXG4gICAgICBvYmplY3Quc2V0KHtcbiAgICAgICAgbGVmdDogb2JqZWN0TGVmdCAtIGNlbnRlci54LFxuICAgICAgICB0b3A6IG9iamVjdFRvcCAtIGNlbnRlci55XG4gICAgICB9KTtcbiAgICAgIG9iamVjdC5ncm91cCA9IHRoaXM7XG4gICAgICBvYmplY3Quc2V0Q29vcmRzKHNraXBDb250cm9scyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VuYXRpb24gb2YgYSBncm91cFxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJyM8ZmFicmljLkdyb3VwOiAoJyArIHRoaXMuY29tcGxleGl0eSgpICsgJyk+JztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBvYmplY3QgdG8gYSBncm91cDsgVGhlbiByZWNhbGN1bGF0ZXMgZ3JvdXAncyBkaW1lbnNpb24sIHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuR3JvdXB9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgYWRkV2l0aFVwZGF0ZTogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgbmVzdGVkID0gISF0aGlzLmdyb3VwO1xuICAgICAgdGhpcy5fcmVzdG9yZU9iamVjdHNTdGF0ZSgpO1xuICAgICAgZmFicmljLnV0aWwucmVzZXRPYmplY3RUcmFuc2Zvcm0odGhpcyk7XG4gICAgICBpZiAob2JqZWN0KSB7XG4gICAgICAgIGlmIChuZXN0ZWQpIHtcbiAgICAgICAgICAvLyBpZiB0aGlzIGdyb3VwIGlzIGluc2lkZSBhbm90aGVyIGdyb3VwLCB3ZSBuZWVkIHRvIHByZSB0cmFuc2Zvcm0gdGhlIG9iamVjdFxuICAgICAgICAgIGZhYnJpYy51dGlsLnJlbW92ZVRyYW5zZm9ybUZyb21PYmplY3Qob2JqZWN0LCB0aGlzLmdyb3VwLmNhbGNUcmFuc2Zvcm1NYXRyaXgoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb2JqZWN0cy5wdXNoKG9iamVjdCk7XG4gICAgICAgIG9iamVjdC5ncm91cCA9IHRoaXM7XG4gICAgICAgIG9iamVjdC5fc2V0KCdjYW52YXMnLCB0aGlzLmNhbnZhcyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9jYWxjQm91bmRzKCk7XG4gICAgICB0aGlzLl91cGRhdGVPYmplY3RzQ29vcmRzKCk7XG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIGlmIChuZXN0ZWQpIHtcbiAgICAgICAgdGhpcy5ncm91cC5hZGRXaXRoVXBkYXRlKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRDb29yZHMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFuIG9iamVjdCBmcm9tIGEgZ3JvdXA7IFRoZW4gcmVjYWxjdWxhdGVzIGdyb3VwJ3MgZGltZW5zaW9uLCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAgICogQHJldHVybiB7ZmFicmljLkdyb3VwfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHJlbW92ZVdpdGhVcGRhdGU6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdGhpcy5fcmVzdG9yZU9iamVjdHNTdGF0ZSgpO1xuICAgICAgZmFicmljLnV0aWwucmVzZXRPYmplY3RUcmFuc2Zvcm0odGhpcyk7XG5cbiAgICAgIHRoaXMucmVtb3ZlKG9iamVjdCk7XG4gICAgICB0aGlzLl9jYWxjQm91bmRzKCk7XG4gICAgICB0aGlzLl91cGRhdGVPYmplY3RzQ29vcmRzKCk7XG4gICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfb25PYmplY3RBZGRlZDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIG9iamVjdC5ncm91cCA9IHRoaXM7XG4gICAgICBvYmplY3QuX3NldCgnY2FudmFzJywgdGhpcy5jYW52YXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9vbk9iamVjdFJlbW92ZWQ6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICBkZWxldGUgb2JqZWN0Lmdyb3VwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBpID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7XG4gICAgICBpZiAodGhpcy51c2VTZXRPbkdyb3VwKSB7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICB0aGlzLl9vYmplY3RzW2ldLnNldE9uR3JvdXAoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdjYW52YXMnKSB7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICB0aGlzLl9vYmplY3RzW2ldLl9zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZhYnJpYy5PYmplY3QucHJvdG90eXBlLl9zZXQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24ocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgdmFyIF9pbmNsdWRlRGVmYXVsdFZhbHVlcyA9IHRoaXMuaW5jbHVkZURlZmF1bHRWYWx1ZXM7XG4gICAgICB2YXIgb2Jqc1RvT2JqZWN0ID0gdGhpcy5fb2JqZWN0c1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gIW9iai5leGNsdWRlRnJvbUV4cG9ydDtcbiAgICAgICAgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgdmFyIG9yaWdpbmFsRGVmYXVsdHMgPSBvYmouaW5jbHVkZURlZmF1bHRWYWx1ZXM7XG4gICAgICAgICAgb2JqLmluY2x1ZGVEZWZhdWx0VmFsdWVzID0gX2luY2x1ZGVEZWZhdWx0VmFsdWVzO1xuICAgICAgICAgIHZhciBfb2JqID0gb2JqLnRvT2JqZWN0KHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgICAgIG9iai5pbmNsdWRlRGVmYXVsdFZhbHVlcyA9IG9yaWdpbmFsRGVmYXVsdHM7XG4gICAgICAgICAgcmV0dXJuIF9vYmo7XG4gICAgICAgIH0pO1xuICAgICAgdmFyIG9iaiA9IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLnRvT2JqZWN0LmNhbGwodGhpcywgcHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgICBvYmoub2JqZWN0cyA9IG9ianNUb09iamVjdDtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlLCBpbiBkYXRhbGVzcyBtb2RlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvRGF0YWxlc3NPYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHZhciBvYmpzVG9PYmplY3QsIHNvdXJjZVBhdGggPSB0aGlzLnNvdXJjZVBhdGg7XG4gICAgICBpZiAoc291cmNlUGF0aCkge1xuICAgICAgICBvYmpzVG9PYmplY3QgPSBzb3VyY2VQYXRoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBfaW5jbHVkZURlZmF1bHRWYWx1ZXMgPSB0aGlzLmluY2x1ZGVEZWZhdWx0VmFsdWVzO1xuICAgICAgICBvYmpzVG9PYmplY3QgPSB0aGlzLl9vYmplY3RzLm1hcChmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICB2YXIgb3JpZ2luYWxEZWZhdWx0cyA9IG9iai5pbmNsdWRlRGVmYXVsdFZhbHVlcztcbiAgICAgICAgICBvYmouaW5jbHVkZURlZmF1bHRWYWx1ZXMgPSBfaW5jbHVkZURlZmF1bHRWYWx1ZXM7XG4gICAgICAgICAgdmFyIF9vYmogPSBvYmoudG9EYXRhbGVzc09iamVjdChwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICAgICAgICBvYmouaW5jbHVkZURlZmF1bHRWYWx1ZXMgPSBvcmlnaW5hbERlZmF1bHRzO1xuICAgICAgICAgIHJldHVybiBfb2JqO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHZhciBvYmogPSBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS50b0RhdGFsZXNzT2JqZWN0LmNhbGwodGhpcywgcHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgICBvYmoub2JqZWN0cyA9IG9ianNUb09iamVjdDtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgaW5zdGFuY2Ugb24gYSBnaXZlbiBjb250ZXh0XG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBjb250ZXh0IHRvIHJlbmRlciBpbnN0YW5jZSBvblxuICAgICAqL1xuICAgIHJlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB0aGlzLl90cmFuc2Zvcm1Eb25lID0gdHJ1ZTtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdyZW5kZXInLCBjdHgpO1xuICAgICAgdGhpcy5fdHJhbnNmb3JtRG9uZSA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWNpZGUgaWYgdGhlIG9iamVjdCBzaG91bGQgY2FjaGUgb3Igbm90LiBDcmVhdGUgaXRzIG93biBjYWNoZSBsZXZlbFxuICAgICAqIG5lZWRzSXRzT3duQ2FjaGUgc2hvdWxkIGJlIHVzZWQgd2hlbiB0aGUgb2JqZWN0IGRyYXdpbmcgbWV0aG9kIHJlcXVpcmVzXG4gICAgICogYSBjYWNoZSBzdGVwLiBOb25lIG9mIHRoZSBmYWJyaWMgY2xhc3NlcyByZXF1aXJlcyBpdC5cbiAgICAgKiBHZW5lcmFsbHkgeW91IGRvIG5vdCBjYWNoZSBvYmplY3RzIGluIGdyb3VwcyBiZWNhdXNlIHRoZSBncm91cCBpcyBhbHJlYWR5IGNhY2hlZC5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIHNob3VsZENhY2hlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvd25DYWNoZSA9IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLnNob3VsZENhY2hlLmNhbGwodGhpcyk7XG4gICAgICBpZiAob3duQ2FjaGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX29iamVjdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5fb2JqZWN0c1tpXS53aWxsRHJhd1NoYWRvdygpKSB7XG4gICAgICAgICAgICB0aGlzLm93bkNhY2hpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvd25DYWNoZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhpcyBvYmplY3Qgb3IgYSBjaGlsZCBvYmplY3Qgd2lsbCBjYXN0IGEgc2hhZG93XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICB3aWxsRHJhd1NoYWRvdzogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoZmFicmljLk9iamVjdC5wcm90b3R5cGUud2lsbERyYXdTaGFkb3cuY2FsbCh0aGlzKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl9vYmplY3RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLl9vYmplY3RzW2ldLndpbGxEcmF3U2hhZG93KCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGlzIGdyb3VwIG9yIGl0cyBwYXJlbnQgZ3JvdXAgYXJlIGNhY2hpbmcsIHJlY3Vyc2l2ZWx5IHVwXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc09uQUNhY2hlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm93bkNhY2hpbmcgfHwgKHRoaXMuZ3JvdXAgJiYgdGhpcy5ncm91cC5pc09uQUNhY2hlKCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSBkcmF3aW5nIG9wZXJhdGlvbiBmb3IgYW4gb2JqZWN0IG9uIGEgc3BlY2lmaWVkIGNvbnRleHRcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgZHJhd09iamVjdDogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aGlzLl9vYmplY3RzW2ldLnJlbmRlcihjdHgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fZHJhd0NsaXBQYXRoKGN0eCwgdGhpcy5jbGlwUGF0aCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGNhY2hlIGlzIGRpcnR5XG4gICAgICovXG4gICAgaXNDYWNoZURpcnR5OiBmdW5jdGlvbihza2lwQ2FudmFzKSB7XG4gICAgICBpZiAodGhpcy5jYWxsU3VwZXIoJ2lzQ2FjaGVEaXJ0eScsIHNraXBDYW52YXMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLnN0YXRlZnVsbENhY2hlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl9vYmplY3RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLl9vYmplY3RzW2ldLmlzQ2FjaGVEaXJ0eSh0cnVlKSkge1xuICAgICAgICAgIGlmICh0aGlzLl9jYWNoZUNhbnZhcykge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBncm91cCBoYXMgbm90IGEgY2FjaGUgY2FudmFzIHRoZXJlIGlzIG5vdGhpbmcgdG8gY2xlYW5cbiAgICAgICAgICAgIHZhciB4ID0gdGhpcy5jYWNoZVdpZHRoIC8gdGhpcy56b29tWCwgeSA9IHRoaXMuY2FjaGVIZWlnaHQgLyB0aGlzLnpvb21ZO1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVDb250ZXh0LmNsZWFyUmVjdCgteCAvIDIsIC15IC8gMiwgeCwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc3RvcmVzIG9yaWdpbmFsIHN0YXRlIG9mIGVhY2ggb2YgZ3JvdXAgb2JqZWN0cyAob3JpZ2luYWwgc3RhdGUgaXMgdGhhdCB3aGljaCB3YXMgYmVmb3JlIGdyb3VwIHdhcyBjcmVhdGVkKS5cbiAgICAgKiBpZiB0aGUgbmVzdGVkIGJvb2xlYW4gaXMgdHJ1ZSwgdGhlIG9yaWdpbmFsIHN0YXRlIHdpbGwgYmUgcmVzdG9yZWQganVzdCBmb3IgdGhlXG4gICAgICogZmlyc3QgZ3JvdXAgYW5kIG5vdCBmb3IgYWxsIHRoZSBncm91cCBjaGFpblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBuZXN0ZWQgdGVsbCB0aGUgZnVuY3Rpb24gdG8gcmVzdG9yZSBvYmplY3Qgc3RhdGUgdXAgdG8gdGhlIHBhcmVudCBncm91cCBhbmQgbm90IG1vcmVcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuR3JvdXB9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgX3Jlc3RvcmVPYmplY3RzU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGdyb3VwTWF0cml4ID0gdGhpcy5jYWxjT3duTWF0cml4KCk7XG4gICAgICB0aGlzLl9vYmplY3RzLmZvckVhY2goZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgX3RoaXMgPSB0aGlzO1xuICAgICAgICBmYWJyaWMudXRpbC5hZGRUcmFuc2Zvcm1Ub09iamVjdChvYmplY3QsIGdyb3VwTWF0cml4KTtcbiAgICAgICAgZGVsZXRlIG9iamVjdC5ncm91cDtcbiAgICAgICAgb2JqZWN0LnNldENvb3JkcygpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYSBncm91cCAocmVzdG9yaW5nIHN0YXRlIG9mIGl0cyBvYmplY3RzKVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Hcm91cH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIHdoZW4gZ3JvdXAgaXMgZGVzdHJveWVkIG9iamVjdHMgbmVlZHMgdG8gZ2V0IGEgcmVwYWludCB0byBiZSBldmVudHVhbGx5XG4gICAgICAvLyBkaXNwbGF5ZWQgb24gY2FudmFzLlxuICAgICAgdGhpcy5fb2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBvYmplY3Quc2V0KCdkaXJ0eScsIHRydWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcy5fcmVzdG9yZU9iamVjdHNTdGF0ZSgpO1xuICAgIH0sXG5cbiAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignZGlzcG9zZScpO1xuICAgICAgdGhpcy5mb3JFYWNoT2JqZWN0KGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgb2JqZWN0LmRpc3Bvc2UgJiYgb2JqZWN0LmRpc3Bvc2UoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fb2JqZWN0cyA9IFtdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBtYWtlIGEgZ3JvdXAgYW4gYWN0aXZlIHNlbGVjdGlvbiwgcmVtb3ZlIHRoZSBncm91cCBmcm9tIGNhbnZhc1xuICAgICAqIHRoZSBncm91cCBoYXMgdG8gYmUgb24gY2FudmFzIGZvciB0aGlzIHRvIHdvcmsuXG4gICAgICogQHJldHVybiB7ZmFicmljLkFjdGl2ZVNlbGVjdGlvbn0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICB0b0FjdGl2ZVNlbGVjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuY2FudmFzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBvYmplY3RzID0gdGhpcy5fb2JqZWN0cywgY2FudmFzID0gdGhpcy5jYW52YXM7XG4gICAgICB0aGlzLl9vYmplY3RzID0gW107XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMudG9PYmplY3QoKTtcbiAgICAgIGRlbGV0ZSBvcHRpb25zLm9iamVjdHM7XG4gICAgICB2YXIgYWN0aXZlU2VsZWN0aW9uID0gbmV3IGZhYnJpYy5BY3RpdmVTZWxlY3Rpb24oW10pO1xuICAgICAgYWN0aXZlU2VsZWN0aW9uLnNldChvcHRpb25zKTtcbiAgICAgIGFjdGl2ZVNlbGVjdGlvbi50eXBlID0gJ2FjdGl2ZVNlbGVjdGlvbic7XG4gICAgICBjYW52YXMucmVtb3ZlKHRoaXMpO1xuICAgICAgb2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBvYmplY3QuZ3JvdXAgPSBhY3RpdmVTZWxlY3Rpb247XG4gICAgICAgIG9iamVjdC5kaXJ0eSA9IHRydWU7XG4gICAgICAgIGNhbnZhcy5hZGQob2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgYWN0aXZlU2VsZWN0aW9uLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgIGFjdGl2ZVNlbGVjdGlvbi5fb2JqZWN0cyA9IG9iamVjdHM7XG4gICAgICBjYW52YXMuX2FjdGl2ZU9iamVjdCA9IGFjdGl2ZVNlbGVjdGlvbjtcbiAgICAgIGFjdGl2ZVNlbGVjdGlvbi5zZXRDb29yZHMoKTtcbiAgICAgIHJldHVybiBhY3RpdmVTZWxlY3Rpb247XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIGEgZ3JvdXAgKHJlc3RvcmluZyBzdGF0ZSBvZiBpdHMgb2JqZWN0cylcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuR3JvdXB9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgdW5ncm91cE9uQ2FudmFzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZXN0b3JlT2JqZWN0c1N0YXRlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgY29vcmRpbmF0ZXMgb2YgYWxsIG9iamVjdHMgaW5zaWRlIGdyb3VwXG4gICAgICogQHJldHVybiB7ZmFicmljLkdyb3VwfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldE9iamVjdHNDb29yZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNraXBDb250cm9scyA9IHRydWU7XG4gICAgICB0aGlzLmZvckVhY2hPYmplY3QoZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIG9iamVjdC5zZXRDb29yZHMoc2tpcENvbnRyb2xzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2NhbGNCb3VuZHM6IGZ1bmN0aW9uKG9ubHlXaWR0aEhlaWdodCkge1xuICAgICAgdmFyIGFYID0gW10sXG4gICAgICAgICAgYVkgPSBbXSxcbiAgICAgICAgICBvLCBwcm9wLCBjb29yZHMsXG4gICAgICAgICAgcHJvcHMgPSBbJ3RyJywgJ2JyJywgJ2JsJywgJ3RsJ10sXG4gICAgICAgICAgaSA9IDAsIGlMZW4gPSB0aGlzLl9vYmplY3RzLmxlbmd0aCxcbiAgICAgICAgICBqLCBqTGVuID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICBmb3IgKCA7IGkgPCBpTGVuOyArK2kpIHtcbiAgICAgICAgbyA9IHRoaXMuX29iamVjdHNbaV07XG4gICAgICAgIGNvb3JkcyA9IG8uY2FsY0FDb29yZHMoKTtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGorKykge1xuICAgICAgICAgIHByb3AgPSBwcm9wc1tqXTtcbiAgICAgICAgICBhWC5wdXNoKGNvb3Jkc1twcm9wXS54KTtcbiAgICAgICAgICBhWS5wdXNoKGNvb3Jkc1twcm9wXS55KTtcbiAgICAgICAgfVxuICAgICAgICBvLmFDb29yZHMgPSBjb29yZHM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2dldEJvdW5kcyhhWCwgYVksIG9ubHlXaWR0aEhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldEJvdW5kczogZnVuY3Rpb24oYVgsIGFZLCBvbmx5V2lkdGhIZWlnaHQpIHtcbiAgICAgIHZhciBtaW5YWSA9IG5ldyBmYWJyaWMuUG9pbnQobWluKGFYKSwgbWluKGFZKSksXG4gICAgICAgICAgbWF4WFkgPSBuZXcgZmFicmljLlBvaW50KG1heChhWCksIG1heChhWSkpLFxuICAgICAgICAgIHRvcCA9IG1pblhZLnkgfHwgMCwgbGVmdCA9IG1pblhZLnggfHwgMCxcbiAgICAgICAgICB3aWR0aCA9IChtYXhYWS54IC0gbWluWFkueCkgfHwgMCxcbiAgICAgICAgICBoZWlnaHQgPSAobWF4WFkueSAtIG1pblhZLnkpIHx8IDA7XG4gICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIGlmICghb25seVdpZHRoSGVpZ2h0KSB7XG4gICAgICAgIC8vIHRoZSBib3VuZGluZyBib3ggYWx3YXlzIGZpbmRzIHRoZSB0b3BsZWZ0IG1vc3QgY29ybmVyLlxuICAgICAgICAvLyB3aGF0ZXZlciBpcyB0aGUgZ3JvdXAgb3JpZ2luLCB3ZSBzZXQgdXAgaGVyZSB0aGUgbGVmdC90b3AgcG9zaXRpb24uXG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb25CeU9yaWdpbih7IHg6IGxlZnQsIHk6IHRvcCB9LCAnbGVmdCcsICd0b3AnKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogX1RPX1NWR19TVEFSVF8gKi9cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXZpdmVyXSBNZXRob2QgZm9yIGZ1cnRoZXIgcGFyc2luZyBvZiBzdmcgcmVwcmVzZW50YXRpb24uXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdG9TVkc6IGZ1bmN0aW9uKHJldml2ZXIpIHtcbiAgICAgIHZhciBzdmdTdHJpbmcgPSBbJzxnICcsICdDT01NT05fUEFSVFMnLCAnID5cXG4nXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX29iamVjdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc3ZnU3RyaW5nLnB1c2goJ1xcdFxcdCcsIHRoaXMuX29iamVjdHNbaV0udG9TVkcocmV2aXZlcikpO1xuICAgICAgfVxuICAgICAgc3ZnU3RyaW5nLnB1c2goJzwvZz5cXG4nKTtcbiAgICAgIHJldHVybiBzdmdTdHJpbmc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3R5bGVzLXN0cmluZyBmb3Igc3ZnLWV4cG9ydCwgc3BlY2lmaWMgdmVyc2lvbiBmb3IgZ3JvdXBcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0U3ZnU3R5bGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcGFjaXR5ID0gdHlwZW9mIHRoaXMub3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5vcGFjaXR5ICE9PSAxID9cbiAgICAgICAgICAgICdvcGFjaXR5OiAnICsgdGhpcy5vcGFjaXR5ICsgJzsnIDogJycsXG4gICAgICAgICAgdmlzaWJpbGl0eSA9IHRoaXMudmlzaWJsZSA/ICcnIDogJyB2aXNpYmlsaXR5OiBoaWRkZW47JztcbiAgICAgIHJldHVybiBbXG4gICAgICAgIG9wYWNpdHksXG4gICAgICAgIHRoaXMuZ2V0U3ZnRmlsdGVyKCksXG4gICAgICAgIHZpc2liaWxpdHlcbiAgICAgIF0uam9pbignJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3ZnIGNsaXBQYXRoIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdIE1ldGhvZCBmb3IgZnVydGhlciBwYXJzaW5nIG9mIHN2ZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvQ2xpcFBhdGhTVkc6IGZ1bmN0aW9uKHJldml2ZXIpIHtcbiAgICAgIHZhciBzdmdTdHJpbmcgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX29iamVjdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc3ZnU3RyaW5nLnB1c2goJ1xcdCcsIHRoaXMuX29iamVjdHNbaV0udG9DbGlwUGF0aFNWRyhyZXZpdmVyKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVCYXNlQ2xpcFBhdGhTVkdNYXJrdXAoc3ZnU3RyaW5nLCB7IHJldml2ZXI6IHJldml2ZXIgfSk7XG4gICAgfSxcbiAgICAvKiBfVE9fU1ZHX0VORF8gKi9cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5Hcm91cH0gaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkdyb3VwXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhIGdyb3VwIGZyb21cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiBhbiBncm91cCBpbnN0YW5jZSBpcyBjcmVhdGVkXG4gICAqL1xuICBmYWJyaWMuR3JvdXAuZnJvbU9iamVjdCA9IGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgb2JqZWN0cyA9IG9iamVjdC5vYmplY3RzLFxuICAgICAgICBvcHRpb25zID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKG9iamVjdCwgdHJ1ZSk7XG4gICAgZGVsZXRlIG9wdGlvbnMub2JqZWN0cztcbiAgICBpZiAodHlwZW9mIG9iamVjdHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBpdCBoYXMgdG8gYmUgYW4gdXJsIG9yIHNvbWV0aGluZyB3ZW50IHdyb25nLlxuICAgICAgZmFicmljLmxvYWRTVkdGcm9tVVJMKG9iamVjdHMsIGZ1bmN0aW9uIChlbGVtZW50cykge1xuICAgICAgICB2YXIgZ3JvdXAgPSBmYWJyaWMudXRpbC5ncm91cFNWR0VsZW1lbnRzKGVsZW1lbnRzLCBvYmplY3QsIG9iamVjdHMpO1xuICAgICAgICB2YXIgY2xpcFBhdGggPSBvcHRpb25zLmNsaXBQYXRoO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5jbGlwUGF0aDtcbiAgICAgICAgZ3JvdXAuc2V0KG9wdGlvbnMpO1xuICAgICAgICBpZiAoY2xpcFBhdGgpIHtcbiAgICAgICAgICBmYWJyaWMudXRpbC5lbmxpdmVuT2JqZWN0cyhbY2xpcFBhdGhdLCBmdW5jdGlvbihlbGl2ZW5lZE9iamVjdHMpIHtcbiAgICAgICAgICAgIGdyb3VwLmNsaXBQYXRoID0gZWxpdmVuZWRPYmplY3RzWzBdO1xuICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZ3JvdXApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGdyb3VwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZhYnJpYy51dGlsLmVubGl2ZW5PYmplY3RzKG9iamVjdHMsIGZ1bmN0aW9uIChlbmxpdmVuZWRPYmplY3RzKSB7XG4gICAgICBmYWJyaWMudXRpbC5lbmxpdmVuT2JqZWN0RW5saXZhYmxlcyhvYmplY3QsIG9wdGlvbnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobmV3IGZhYnJpYy5Hcm91cChlbmxpdmVuZWRPYmplY3RzLCBvcHRpb25zLCB0cnVlKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KTtcblxuICBpZiAoZmFicmljLkFjdGl2ZVNlbGVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHcm91cCBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLkFjdGl2ZVNlbGVjdGlvblxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuR3JvdXBcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTMjZ3JvdXBzfVxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuQWN0aXZlU2VsZWN0aW9uI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuQWN0aXZlU2VsZWN0aW9uID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLkdyb3VwLCAvKiogQGxlbmRzIGZhYnJpYy5BY3RpdmVTZWxlY3Rpb24ucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgYW4gb2JqZWN0XG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnYWN0aXZlU2VsZWN0aW9uJyxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdHMgQWN0aXZlU2VsZWN0aW9uIG9iamVjdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob2JqZWN0cywgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB0aGlzLl9vYmplY3RzID0gb2JqZWN0cyB8fCBbXTtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9vYmplY3RzLmxlbmd0aDsgaS0tOyApIHtcbiAgICAgICAgdGhpcy5fb2JqZWN0c1tpXS5ncm91cCA9IHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLm9yaWdpblgpIHtcbiAgICAgICAgdGhpcy5vcmlnaW5YID0gb3B0aW9ucy5vcmlnaW5YO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMub3JpZ2luWSkge1xuICAgICAgICB0aGlzLm9yaWdpblkgPSBvcHRpb25zLm9yaWdpblk7XG4gICAgICB9XG4gICAgICB0aGlzLl9jYWxjQm91bmRzKCk7XG4gICAgICB0aGlzLl91cGRhdGVPYmplY3RzQ29vcmRzKCk7XG4gICAgICBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGUgYWN0aXZlU2VsZWN0aW9uIHRvIGEgbm9ybWFsIGdyb3VwLFxuICAgICAqIEhpZ2ggbGV2ZWwgZnVuY3Rpb24gdGhhdCBhdXRvbWF0aWNhbGx5IGFkZHMgaXQgdG8gY2FudmFzIGFzXG4gICAgICogYWN0aXZlIG9iamVjdC4gbm8gZXZlbnRzIGZpcmVkLlxuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Hcm91cH1cbiAgICAgKi9cbiAgICB0b0dyb3VwOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvYmplY3RzID0gdGhpcy5fb2JqZWN0cy5jb25jYXQoKTtcbiAgICAgIHRoaXMuX29iamVjdHMgPSBbXTtcbiAgICAgIHZhciBvcHRpb25zID0gZmFicmljLk9iamVjdC5wcm90b3R5cGUudG9PYmplY3QuY2FsbCh0aGlzKTtcbiAgICAgIHZhciBuZXdHcm91cCA9IG5ldyBmYWJyaWMuR3JvdXAoW10pO1xuICAgICAgZGVsZXRlIG9wdGlvbnMudHlwZTtcbiAgICAgIG5ld0dyb3VwLnNldChvcHRpb25zKTtcbiAgICAgIG9iamVjdHMuZm9yRWFjaChmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgb2JqZWN0LmNhbnZhcy5yZW1vdmUob2JqZWN0KTtcbiAgICAgICAgb2JqZWN0Lmdyb3VwID0gbmV3R3JvdXA7XG4gICAgICB9KTtcbiAgICAgIG5ld0dyb3VwLl9vYmplY3RzID0gb2JqZWN0cztcbiAgICAgIGlmICghdGhpcy5jYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIG5ld0dyb3VwO1xuICAgICAgfVxuICAgICAgdmFyIGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgY2FudmFzLmFkZChuZXdHcm91cCk7XG4gICAgICBjYW52YXMuX2FjdGl2ZU9iamVjdCA9IG5ld0dyb3VwO1xuICAgICAgbmV3R3JvdXAuc2V0Q29vcmRzKCk7XG4gICAgICByZXR1cm4gbmV3R3JvdXA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIElmIHJldHVybnMgdHJ1ZSwgZGVzZWxlY3Rpb24gaXMgY2FuY2VsbGVkLlxuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFtjYW5jZWxdXG4gICAgICovXG4gICAgb25EZXNlbGVjdDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBncm91cFxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJyM8ZmFicmljLkFjdGl2ZVNlbGVjdGlvbjogKCcgKyB0aGlzLmNvbXBsZXhpdHkoKSArICcpPic7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlY2lkZSBpZiB0aGUgb2JqZWN0IHNob3VsZCBjYWNoZSBvciBub3QuIENyZWF0ZSBpdHMgb3duIGNhY2hlIGxldmVsXG4gICAgICogb2JqZWN0Q2FjaGluZyBpcyBhIGdsb2JhbCBmbGFnLCB3aW5zIG92ZXIgZXZlcnl0aGluZ1xuICAgICAqIG5lZWRzSXRzT3duQ2FjaGUgc2hvdWxkIGJlIHVzZWQgd2hlbiB0aGUgb2JqZWN0IGRyYXdpbmcgbWV0aG9kIHJlcXVpcmVzXG4gICAgICogYSBjYWNoZSBzdGVwLiBOb25lIG9mIHRoZSBmYWJyaWMgY2xhc3NlcyByZXF1aXJlcyBpdC5cbiAgICAgKiBHZW5lcmFsbHkgeW91IGRvIG5vdCBjYWNoZSBvYmplY3RzIGluIGdyb3VwcyBiZWNhdXNlIHRoZSBncm91cCBvdXRzaWRlIGlzIGNhY2hlZC5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIHNob3VsZENhY2hlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhpcyBncm91cCBvciBpdHMgcGFyZW50IGdyb3VwIGFyZSBjYWNoaW5nLCByZWN1cnNpdmVseSB1cFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNPbkFDYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgY29udHJvbHMgYW5kIGJvcmRlcnMgZm9yIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdHlsZU92ZXJyaWRlXSBwcm9wZXJ0aWVzIHRvIG92ZXJyaWRlIHRoZSBvYmplY3Qgc3R5bGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NoaWxkcmVuT3ZlcnJpZGVdIHByb3BlcnRpZXMgdG8gb3ZlcnJpZGUgdGhlIGNoaWxkcmVuIG92ZXJyaWRlc1xuICAgICAqL1xuICAgIF9yZW5kZXJDb250cm9sczogZnVuY3Rpb24oY3R4LCBzdHlsZU92ZXJyaWRlLCBjaGlsZHJlbk92ZXJyaWRlKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gdGhpcy5pc01vdmluZyA/IHRoaXMuYm9yZGVyT3BhY2l0eVdoZW5Nb3ZpbmcgOiAxO1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ19yZW5kZXJDb250cm9scycsIGN0eCwgc3R5bGVPdmVycmlkZSk7XG4gICAgICBjaGlsZHJlbk92ZXJyaWRlID0gY2hpbGRyZW5PdmVycmlkZSB8fCB7IH07XG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuT3ZlcnJpZGUuaGFzQ29udHJvbHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNoaWxkcmVuT3ZlcnJpZGUuaGFzQ29udHJvbHMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuT3ZlcnJpZGUuZm9yQWN0aXZlU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl9vYmplY3RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRoaXMuX29iamVjdHNbaV0uX3JlbmRlckNvbnRyb2xzKGN0eCwgY2hpbGRyZW5PdmVycmlkZSk7XG4gICAgICB9XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHtAbGluayBmYWJyaWMuQWN0aXZlU2VsZWN0aW9ufSBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuQWN0aXZlU2VsZWN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhIGdyb3VwIGZyb21cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiBhbiBBY3RpdmVTZWxlY3Rpb24gaW5zdGFuY2UgaXMgY3JlYXRlZFxuICAgKi9cbiAgZmFicmljLkFjdGl2ZVNlbGVjdGlvbi5mcm9tT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIGZhYnJpYy51dGlsLmVubGl2ZW5PYmplY3RzKG9iamVjdC5vYmplY3RzLCBmdW5jdGlvbihlbmxpdmVuZWRPYmplY3RzKSB7XG4gICAgICBkZWxldGUgb2JqZWN0Lm9iamVjdHM7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhuZXcgZmFicmljLkFjdGl2ZVNlbGVjdGlvbihlbmxpdmVuZWRPYmplY3RzLCBvYmplY3QsIHRydWUpKTtcbiAgICB9KTtcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGV4dGVuZCA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQ7XG5cbiAgaWYgKCFnbG9iYWwuZmFicmljKSB7XG4gICAgZ2xvYmFsLmZhYnJpYyA9IHsgfTtcbiAgfVxuXG4gIGlmIChnbG9iYWwuZmFicmljLkltYWdlKSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5JbWFnZSBpcyBhbHJlYWR5IGRlZmluZWQuJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEltYWdlIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuSW1hZ2VcbiAgICogQGV4dGVuZHMgZmFicmljLk9iamVjdFxuICAgKiBAdHV0b3JpYWwge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZmFicmljLWludHJvLXBhcnQtMSNpbWFnZXN9XG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5JbWFnZSNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKi9cbiAgZmFicmljLkltYWdlID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLk9iamVjdCwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgYW4gb2JqZWN0XG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnaW1hZ2UnLFxuXG4gICAgLyoqXG4gICAgICogV2lkdGggb2YgYSBzdHJva2UuXG4gICAgICogRm9yIGltYWdlIHF1YWxpdHkgYSBzdHJva2UgbXVsdGlwbGUgb2YgMiBnaXZlcyBiZXR0ZXIgcmVzdWx0cy5cbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHN0cm9rZVdpZHRoOiAwLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiBjYWxsaW5nIHtAbGluayBmYWJyaWMuSW1hZ2UuZ2V0U3JjfSwgcmV0dXJuIHZhbHVlIGZyb20gZWxlbWVudCBzcmMgd2l0aCBgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3NyYycpYC5cbiAgICAgKiBUaGlzIGFsbG93cyBmb3IgcmVsYXRpdmUgdXJscyBhcyBpbWFnZSBzcmMuXG4gICAgICogQHNpbmNlIDIuNy4wXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc3JjRnJvbUF0dHJpYnV0ZTogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBwcml2YXRlXG4gICAgICogY29udGFpbnMgbGFzdCB2YWx1ZSBvZiBzY2FsZVggdG8gZGV0ZWN0XG4gICAgICogaWYgdGhlIEltYWdlIGdvdCByZXNpemVkIGFmdGVyIHRoZSBsYXN0IFJlbmRlclxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqL1xuICAgIF9sYXN0U2NhbGVYOiAxLFxuXG4gICAgLyoqXG4gICAgICogcHJpdmF0ZVxuICAgICAqIGNvbnRhaW5zIGxhc3QgdmFsdWUgb2Ygc2NhbGVZIHRvIGRldGVjdFxuICAgICAqIGlmIHRoZSBJbWFnZSBnb3QgcmVzaXplZCBhZnRlciB0aGUgbGFzdCBSZW5kZXJcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKi9cbiAgICBfbGFzdFNjYWxlWTogMSxcblxuICAgIC8qKlxuICAgICAqIHByaXZhdGVcbiAgICAgKiBjb250YWlucyBsYXN0IHZhbHVlIG9mIHNjYWxpbmcgYXBwbGllZCBieSB0aGUgYXBwbHkgZmlsdGVyIGNoYWluXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICovXG4gICAgX2ZpbHRlclNjYWxpbmdYOiAxLFxuXG4gICAgLyoqXG4gICAgICogcHJpdmF0ZVxuICAgICAqIGNvbnRhaW5zIGxhc3QgdmFsdWUgb2Ygc2NhbGluZyBhcHBsaWVkIGJ5IHRoZSBhcHBseSBmaWx0ZXIgY2hhaW5cbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKi9cbiAgICBfZmlsdGVyU2NhbGluZ1k6IDEsXG5cbiAgICAvKipcbiAgICAgKiBtaW5pbXVtIHNjYWxlIGZhY3RvciB1bmRlciB3aGljaCBhbnkgcmVzaXplRmlsdGVyIGlzIHRyaWdnZXJlZCB0byByZXNpemUgdGhlIGltYWdlXG4gICAgICogMCB3aWxsIGRpc2FibGUgdGhlIGF1dG9tYXRpYyByZXNpemUuIDEgd2lsbCB0cmlnZ2VyIGF1dG9tYXRpY2FsbHkgYWx3YXlzLlxuICAgICAqIG51bWJlciBiaWdnZXIgdGhhbiAxIGFyZSBub3QgaW1wbGVtZW50ZWQgeWV0LlxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqL1xuICAgIG1pbmltdW1TY2FsZVRyaWdnZXI6IDAuNSxcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgcHJvcGVydGllcyB0byBjb25zaWRlciB3aGVuIGNoZWNraW5nIGlmXG4gICAgICogc3RhdGUgb2YgYW4gb2JqZWN0IGlzIGNoYW5nZWQgKHtAbGluayBmYWJyaWMuT2JqZWN0I2hhc1N0YXRlQ2hhbmdlZH0pXG4gICAgICogYXMgd2VsbCBhcyBmb3IgaGlzdG9yeSAodW5kby9yZWRvKSBwdXJwb3Nlc1xuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICovXG4gICAgc3RhdGVQcm9wZXJ0aWVzOiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5zdGF0ZVByb3BlcnRpZXMuY29uY2F0KCdjcm9wWCcsICdjcm9wWScpLFxuXG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBwcm9wZXJ0aWVzIHRvIGNvbnNpZGVyIHdoZW4gY2hlY2tpbmcgaWYgY2FjaGUgbmVlZHMgcmVmcmVzaFxuICAgICAqIFRob3NlIHByb3BlcnRpZXMgYXJlIGNoZWNrZWQgYnkgc3RhdGVmdWxsQ2FjaGUgT04gKCBvciBsYXp5IG1vZGUgaWYgd2Ugd2FudCApIG9yIGZyb20gc2luZ2xlXG4gICAgICogY2FsbHMgdG8gT2JqZWN0LnNldChrZXksIHZhbHVlKS4gSWYgdGhlIGtleSBpcyBpbiB0aGlzIGxpc3QsIHRoZSBvYmplY3QgaXMgbWFya2VkIGFzIGRpcnR5XG4gICAgICogYW5kIHJlZnJlc2hlZCBhdCB0aGUgbmV4dCByZW5kZXJcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqL1xuICAgIGNhY2hlUHJvcGVydGllczogZmFicmljLk9iamVjdC5wcm90b3R5cGUuY2FjaGVQcm9wZXJ0aWVzLmNvbmNhdCgnY3JvcFgnLCAnY3JvcFknKSxcblxuICAgIC8qKlxuICAgICAqIGtleSB1c2VkIHRvIHJldHJpZXZlIHRoZSB0ZXh0dXJlIHJlcHJlc2VudGluZyB0aGlzIGltYWdlXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjYWNoZUtleTogJycsXG5cbiAgICAvKipcbiAgICAgKiBJbWFnZSBjcm9wIGluIHBpeGVscyBmcm9tIG9yaWdpbmFsIGltYWdlIHNpemUuXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjcm9wWDogMCxcblxuICAgIC8qKlxuICAgICAqIEltYWdlIGNyb3AgaW4gcGl4ZWxzIGZyb20gb3JpZ2luYWwgaW1hZ2Ugc2l6ZS5cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGNyb3BZOiAwLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBjYW52YXMgd2lsbCB1c2UgaW1hZ2Ugc21vb3RoaW5nIHdoZW4gcGFpbnRpbmcgdGhpcyBpbWFnZS5cbiAgICAgKiBBbHNvIGluZmx1ZW5jZSBpZiB0aGUgY2FjaGVDYW52YXMgZm9yIHRoaXMgaW1hZ2UgdXNlcyBpbWFnZVNtb290aGluZ1xuICAgICAqIEBzaW5jZSA0LjAuMC1iZXRhLjExXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgaW1hZ2VTbW9vdGhpbmc6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEltYWdlIGNhbiBiZSBpbml0aWFsaXplZCB3aXRoIGFueSBjYW52YXMgZHJhd2FibGUgb3IgYSBzdHJpbmcuXG4gICAgICogVGhlIHN0cmluZyBzaG91bGQgYmUgYSB1cmwgYW5kIHdpbGwgYmUgbG9hZGVkIGFzIGFuIGltYWdlLlxuICAgICAqIENhbnZhcyBhbmQgSW1hZ2UgZWxlbWVudCB3b3JrIG91dCBvZiB0aGUgYm94LCB3aGlsZSB2aWRlb3MgcmVxdWlyZSBleHRyYSBjb2RlIHRvIHdvcmsuXG4gICAgICogUGxlYXNlIGNoZWNrIHZpZGVvIGVsZW1lbnQgZXZlbnRzIGZvciBzZWVraW5nLlxuICAgICAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudCB8IEhUTUxDYW52YXNFbGVtZW50IHwgSFRNTFZpZGVvRWxlbWVudCB8IFN0cmluZ30gZWxlbWVudCBJbWFnZSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gY2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCBhZnRlciBldmVudHVhbCBmaWx0ZXJzIGFwcGxpZWQuXG4gICAgICogQHJldHVybiB7ZmFicmljLkltYWdlfSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG4gICAgICB0aGlzLmZpbHRlcnMgPSBbXTtcbiAgICAgIHRoaXMuY2FjaGVLZXkgPSAndGV4dHVyZScgKyBmYWJyaWMuT2JqZWN0Ll9fdWlkKys7XG4gICAgICB0aGlzLmNhbGxTdXBlcignaW5pdGlhbGl6ZScsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5faW5pdEVsZW1lbnQoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW1hZ2UgZWxlbWVudCB3aGljaCB0aGlzIGluc3RhbmNlIGlmIGJhc2VkIG9uXG4gICAgICogQHJldHVybiB7SFRNTEltYWdlRWxlbWVudH0gSW1hZ2UgZWxlbWVudFxuICAgICAqL1xuICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQgfHwge307XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgaW1hZ2UgZWxlbWVudCBmb3IgdGhpcyBpbnN0YW5jZSB0byBhIHNwZWNpZmllZCBvbmUuXG4gICAgICogSWYgZmlsdGVycyBkZWZpbmVkIHRoZXkgYXJlIGFwcGxpZWQgdG8gbmV3IGltYWdlLlxuICAgICAqIFlvdSBtaWdodCBuZWVkIHRvIGNhbGwgYGNhbnZhcy5yZW5kZXJBbGxgIGFuZCBgb2JqZWN0LnNldENvb3Jkc2AgYWZ0ZXIgcmVwbGFjaW5nLCB0byByZW5kZXIgbmV3IGltYWdlIGFuZCB1cGRhdGUgY29udHJvbHMgYXJlYS5cbiAgICAgKiBAcGFyYW0ge0hUTUxJbWFnZUVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHJldHVybiB7ZmFicmljLkltYWdlfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldEVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMucmVtb3ZlVGV4dHVyZSh0aGlzLmNhY2hlS2V5KTtcbiAgICAgIHRoaXMucmVtb3ZlVGV4dHVyZSh0aGlzLmNhY2hlS2V5ICsgJ19maWx0ZXJlZCcpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9vcmlnaW5hbEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5faW5pdENvbmZpZyhvcHRpb25zKTtcbiAgICAgIGlmICh0aGlzLmZpbHRlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHRoaXMuYXBwbHlGaWx0ZXJzKCk7XG4gICAgICB9XG4gICAgICAvLyByZXNpemVGaWx0ZXJzIHdvcmsgb24gdGhlIGFscmVhZHkgZmlsdGVyZWQgY29weS5cbiAgICAgIC8vIHdlIG5lZWQgdG8gYXBwbHkgcmVzaXplRmlsdGVycyBBRlRFUiBub3JtYWwgZmlsdGVycy5cbiAgICAgIC8vIGFwcGx5UmVzaXplRmlsdGVycyBpcyBydW4gbW9yZSBvZnRlbiB0aGFuIG5vcm1hbCBmaWx0ZXJzXG4gICAgICAvLyBhbmQgaXMgdHJpZ2dlcmVkIGJ5IHVzZXIgaW50ZXJhY3Rpb25zIHJhdGhlciB0aGFuIGRldiBjb2RlXG4gICAgICBpZiAodGhpcy5yZXNpemVGaWx0ZXIpIHtcbiAgICAgICAgdGhpcy5hcHBseVJlc2l6ZUZpbHRlcnMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBzaW5nbGUgdGV4dHVyZSBpZiBpbiB3ZWJnbCBtb2RlXG4gICAgICovXG4gICAgcmVtb3ZlVGV4dHVyZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgYmFja2VuZCA9IGZhYnJpYy5maWx0ZXJCYWNrZW5kO1xuICAgICAgaWYgKGJhY2tlbmQgJiYgYmFja2VuZC5ldmljdENhY2hlc0ZvcktleSkge1xuICAgICAgICBiYWNrZW5kLmV2aWN0Q2FjaGVzRm9yS2V5KGtleSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSB0ZXh0dXJlcywgcmVmZXJlbmNlIHRvIGVsZW1lbnRzIGFuZCBldmVudHVhbGx5IEpTRE9NIGNsZWFudXBcbiAgICAgKi9cbiAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignZGlzcG9zZScpO1xuICAgICAgdGhpcy5yZW1vdmVUZXh0dXJlKHRoaXMuY2FjaGVLZXkpO1xuICAgICAgdGhpcy5yZW1vdmVUZXh0dXJlKHRoaXMuY2FjaGVLZXkgKyAnX2ZpbHRlcmVkJyk7XG4gICAgICB0aGlzLl9jYWNoZUNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICBbJ19vcmlnaW5hbEVsZW1lbnQnLCAnX2VsZW1lbnQnLCAnX2ZpbHRlcmVkRWwnLCAnX2NhY2hlQ2FudmFzJ10uZm9yRWFjaCgoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBmYWJyaWMudXRpbC5jbGVhblVwSnNkb21Ob2RlKHRoaXNbZWxlbWVudF0pO1xuICAgICAgICB0aGlzW2VsZW1lbnRdID0gdW5kZWZpbmVkO1xuICAgICAgfSkuYmluZCh0aGlzKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3Jvc3NPcmlnaW4gdmFsdWUgKG9mIHRoZSBjb3JyZXNwb25kaW5nIGltYWdlIGVsZW1lbnQpXG4gICAgICovXG4gICAgZ2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX29yaWdpbmFsRWxlbWVudCAmJiAodGhpcy5fb3JpZ2luYWxFbGVtZW50LmNyb3NzT3JpZ2luIHx8IG51bGwpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9yaWdpbmFsIHNpemUgb2YgYW4gaW1hZ2VcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIFwid2lkdGhcIiBhbmQgXCJoZWlnaHRcIiBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ2V0T3JpZ2luYWxTaXplOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5nZXRFbGVtZW50KCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogZWxlbWVudC5uYXR1cmFsV2lkdGggfHwgZWxlbWVudC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBlbGVtZW50Lm5hdHVyYWxIZWlnaHQgfHwgZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9zdHJva2U6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgaWYgKCF0aGlzLnN0cm9rZSB8fCB0aGlzLnN0cm9rZVdpZHRoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB3ID0gdGhpcy53aWR0aCAvIDIsIGggPSB0aGlzLmhlaWdodCAvIDI7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHgubW92ZVRvKC13LCAtaCk7XG4gICAgICBjdHgubGluZVRvKHcsIC1oKTtcbiAgICAgIGN0eC5saW5lVG8odywgaCk7XG4gICAgICBjdHgubGluZVRvKC13LCBoKTtcbiAgICAgIGN0eC5saW5lVG8oLXcsIC1oKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24ocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgdmFyIGZpbHRlcnMgPSBbXTtcblxuICAgICAgdGhpcy5maWx0ZXJzLmZvckVhY2goZnVuY3Rpb24oZmlsdGVyT2JqKSB7XG4gICAgICAgIGlmIChmaWx0ZXJPYmopIHtcbiAgICAgICAgICBmaWx0ZXJzLnB1c2goZmlsdGVyT2JqLnRvT2JqZWN0KCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciBvYmplY3QgPSBleHRlbmQoXG4gICAgICAgIHRoaXMuY2FsbFN1cGVyKFxuICAgICAgICAgICd0b09iamVjdCcsXG4gICAgICAgICAgWydjcm9wWCcsICdjcm9wWSddLmNvbmNhdChwcm9wZXJ0aWVzVG9JbmNsdWRlKVxuICAgICAgICApLCB7XG4gICAgICAgICAgc3JjOiB0aGlzLmdldFNyYygpLFxuICAgICAgICAgIGNyb3NzT3JpZ2luOiB0aGlzLmdldENyb3NzT3JpZ2luKCksXG4gICAgICAgICAgZmlsdGVyczogZmlsdGVycyxcbiAgICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5yZXNpemVGaWx0ZXIpIHtcbiAgICAgICAgb2JqZWN0LnJlc2l6ZUZpbHRlciA9IHRoaXMucmVzaXplRmlsdGVyLnRvT2JqZWN0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYW4gaW1hZ2UgaGFzIGNyb3AgYXBwbGllZCwgaW5zcGVjdGluZyB2YWx1ZXMgb2YgY3JvcFgsY3JvcFksd2lkdGgsaGVpZ2h0LlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaGFzQ3JvcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcm9wWCB8fCB0aGlzLmNyb3BZIHx8IHRoaXMud2lkdGggPCB0aGlzLl9lbGVtZW50LndpZHRoIHx8IHRoaXMuaGVpZ2h0IDwgdGhpcy5fZWxlbWVudC5oZWlnaHQ7XG4gICAgfSxcblxuICAgIC8qIF9UT19TVkdfU1RBUlRfICovXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2Ygc3RyaW5ncyB3aXRoIHRoZSBzcGVjaWZpYyBzdmcgcmVwcmVzZW50YXRpb25cbiAgICAgKiBvZiB0aGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdG9TVkc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHN2Z1N0cmluZyA9IFtdLCBpbWFnZU1hcmt1cCA9IFtdLCBzdHJva2VTdmcsIGVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LFxuICAgICAgICAgIHggPSAtdGhpcy53aWR0aCAvIDIsIHkgPSAtdGhpcy5oZWlnaHQgLyAyLCBjbGlwUGF0aCA9ICcnLCBpbWFnZVJlbmRlcmluZyA9ICcnO1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmhhc0Nyb3AoKSkge1xuICAgICAgICB2YXIgY2xpcFBhdGhJZCA9IGZhYnJpYy5PYmplY3QuX191aWQrKztcbiAgICAgICAgc3ZnU3RyaW5nLnB1c2goXG4gICAgICAgICAgJzxjbGlwUGF0aCBpZD1cImltYWdlQ3JvcF8nICsgY2xpcFBhdGhJZCArICdcIj5cXG4nLFxuICAgICAgICAgICdcXHQ8cmVjdCB4PVwiJyArIHggKyAnXCIgeT1cIicgKyB5ICsgJ1wiIHdpZHRoPVwiJyArIHRoaXMud2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIHRoaXMuaGVpZ2h0ICsgJ1wiIC8+XFxuJyxcbiAgICAgICAgICAnPC9jbGlwUGF0aD5cXG4nXG4gICAgICAgICk7XG4gICAgICAgIGNsaXBQYXRoID0gJyBjbGlwLXBhdGg9XCJ1cmwoI2ltYWdlQ3JvcF8nICsgY2xpcFBhdGhJZCArICcpXCIgJztcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5pbWFnZVNtb290aGluZykge1xuICAgICAgICBpbWFnZVJlbmRlcmluZyA9ICdcIiBpbWFnZS1yZW5kZXJpbmc9XCJvcHRpbWl6ZVNwZWVkJztcbiAgICAgIH1cbiAgICAgIGltYWdlTWFya3VwLnB1c2goJ1xcdDxpbWFnZSAnLCAnQ09NTU9OX1BBUlRTJywgJ3hsaW5rOmhyZWY9XCInLCB0aGlzLmdldFN2Z1NyYyh0cnVlKSxcbiAgICAgICAgJ1wiIHg9XCInLCB4IC0gdGhpcy5jcm9wWCwgJ1wiIHk9XCInLCB5IC0gdGhpcy5jcm9wWSxcbiAgICAgICAgLy8gd2UncmUgZXNzZW50aWFsbHkgbW92aW5nIG9yaWdpbiBvZiB0cmFuc2Zvcm1hdGlvbiBmcm9tIHRvcC9sZWZ0IGNvcm5lciB0byB0aGUgY2VudGVyIG9mIHRoZSBzaGFwZVxuICAgICAgICAvLyBieSB3cmFwcGluZyBpdCBpbiBjb250YWluZXIgPGc+IGVsZW1lbnQgd2l0aCBhY3R1YWwgdHJhbnNmb3JtYXRpb24sIHRoZW4gb2Zmc2V0dGluZyBvYmplY3QgdG8gdGhlIHRvcC9sZWZ0XG4gICAgICAgIC8vIHNvIHRoYXQgb2JqZWN0J3MgY2VudGVyIGFsaWducyB3aXRoIGNvbnRhaW5lcidzIGxlZnQvdG9wXG4gICAgICAgICdcIiB3aWR0aD1cIicsIGVsZW1lbnQud2lkdGggfHwgZWxlbWVudC5uYXR1cmFsV2lkdGgsXG4gICAgICAgICdcIiBoZWlnaHQ9XCInLCBlbGVtZW50LmhlaWdodCB8fCBlbGVtZW50LmhlaWdodCxcbiAgICAgICAgaW1hZ2VSZW5kZXJpbmcsXG4gICAgICAgICdcIicsIGNsaXBQYXRoLFxuICAgICAgICAnPjwvaW1hZ2U+XFxuJyk7XG5cbiAgICAgIGlmICh0aGlzLnN0cm9rZSB8fCB0aGlzLnN0cm9rZURhc2hBcnJheSkge1xuICAgICAgICB2YXIgb3JpZ0ZpbGwgPSB0aGlzLmZpbGw7XG4gICAgICAgIHRoaXMuZmlsbCA9IG51bGw7XG4gICAgICAgIHN0cm9rZVN2ZyA9IFtcbiAgICAgICAgICAnXFx0PHJlY3QgJyxcbiAgICAgICAgICAneD1cIicsIHgsICdcIiB5PVwiJywgeSxcbiAgICAgICAgICAnXCIgd2lkdGg9XCInLCB0aGlzLndpZHRoLCAnXCIgaGVpZ2h0PVwiJywgdGhpcy5oZWlnaHQsXG4gICAgICAgICAgJ1wiIHN0eWxlPVwiJywgdGhpcy5nZXRTdmdTdHlsZXMoKSxcbiAgICAgICAgICAnXCIvPlxcbidcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy5maWxsID0gb3JpZ0ZpbGw7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wYWludEZpcnN0ICE9PSAnZmlsbCcpIHtcbiAgICAgICAgc3ZnU3RyaW5nID0gc3ZnU3RyaW5nLmNvbmNhdChzdHJva2VTdmcsIGltYWdlTWFya3VwKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdmdTdHJpbmcgPSBzdmdTdHJpbmcuY29uY2F0KGltYWdlTWFya3VwLCBzdHJva2VTdmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN2Z1N0cmluZztcbiAgICB9LFxuICAgIC8qIF9UT19TVkdfRU5EXyAqL1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzb3VyY2Ugb2YgYW4gaW1hZ2VcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZpbHRlcmVkIGluZGljYXRlcyBpZiB0aGUgc3JjIGlzIG5lZWRlZCBmb3Igc3ZnXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBTb3VyY2Ugb2YgYW4gaW1hZ2VcbiAgICAgKi9cbiAgICBnZXRTcmM6IGZ1bmN0aW9uKGZpbHRlcmVkKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IGZpbHRlcmVkID8gdGhpcy5fZWxlbWVudCA6IHRoaXMuX29yaWdpbmFsRWxlbWVudDtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGlmIChlbGVtZW50LnRvRGF0YVVSTCkge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50LnRvRGF0YVVSTCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3JjRnJvbUF0dHJpYnV0ZSkge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQuc3JjO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JjIHx8ICcnO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHNvdXJjZSBvZiBhbiBpbWFnZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgU291cmNlIHN0cmluZyAoVVJMKVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gQ2FsbGJhY2sgaXMgaW52b2tlZCB3aGVuIGltYWdlIGhhcyBiZWVuIGxvYWRlZCAoYW5kIGFsbCBmaWx0ZXJzIGhhdmUgYmVlbiBhcHBsaWVkKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuY3Jvc3NPcmlnaW5dIGNyb3NzT3JpZ2luIHZhbHVlIChvbmUgb2YgXCJcIiwgXCJhbm9ueW1vdXNcIiwgXCJ1c2UtY3JlZGVudGlhbHNcIilcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSFRNTC9DT1JTX3NldHRpbmdzX2F0dHJpYnV0ZXNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2V9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0U3JjOiBmdW5jdGlvbihzcmMsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICBmYWJyaWMudXRpbC5sb2FkSW1hZ2Uoc3JjLCBmdW5jdGlvbihpbWcsIGlzRXJyb3IpIHtcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50KGltZywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3NldFdpZHRoSGVpZ2h0KCk7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHRoaXMsIGlzRXJyb3IpO1xuICAgICAgfSwgdGhpcywgb3B0aW9ucyAmJiBvcHRpb25zLmNyb3NzT3JpZ2luKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICcjPGZhYnJpYy5JbWFnZTogeyBzcmM6IFwiJyArIHRoaXMuZ2V0U3JjKCkgKyAnXCIgfT4nO1xuICAgIH0sXG5cbiAgICBhcHBseVJlc2l6ZUZpbHRlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGZpbHRlciA9IHRoaXMucmVzaXplRmlsdGVyLFxuICAgICAgICAgIG1pbmltdW1TY2FsZSA9IHRoaXMubWluaW11bVNjYWxlVHJpZ2dlcixcbiAgICAgICAgICBvYmplY3RTY2FsZSA9IHRoaXMuZ2V0VG90YWxPYmplY3RTY2FsaW5nKCksXG4gICAgICAgICAgc2NhbGVYID0gb2JqZWN0U2NhbGUuc2NhbGVYLFxuICAgICAgICAgIHNjYWxlWSA9IG9iamVjdFNjYWxlLnNjYWxlWSxcbiAgICAgICAgICBlbGVtZW50VG9GaWx0ZXIgPSB0aGlzLl9maWx0ZXJlZEVsIHx8IHRoaXMuX29yaWdpbmFsRWxlbWVudDtcbiAgICAgIGlmICh0aGlzLmdyb3VwKSB7XG4gICAgICAgIHRoaXMuc2V0KCdkaXJ0eScsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKCFmaWx0ZXIgfHwgKHNjYWxlWCA+IG1pbmltdW1TY2FsZSAmJiBzY2FsZVkgPiBtaW5pbXVtU2NhbGUpKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50VG9GaWx0ZXI7XG4gICAgICAgIHRoaXMuX2ZpbHRlclNjYWxpbmdYID0gMTtcbiAgICAgICAgdGhpcy5fZmlsdGVyU2NhbGluZ1kgPSAxO1xuICAgICAgICB0aGlzLl9sYXN0U2NhbGVYID0gc2NhbGVYO1xuICAgICAgICB0aGlzLl9sYXN0U2NhbGVZID0gc2NhbGVZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIWZhYnJpYy5maWx0ZXJCYWNrZW5kKSB7XG4gICAgICAgIGZhYnJpYy5maWx0ZXJCYWNrZW5kID0gZmFicmljLmluaXRGaWx0ZXJCYWNrZW5kKCk7XG4gICAgICB9XG4gICAgICB2YXIgY2FudmFzRWwgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCksXG4gICAgICAgICAgY2FjaGVLZXkgPSB0aGlzLl9maWx0ZXJlZEVsID8gKHRoaXMuY2FjaGVLZXkgKyAnX2ZpbHRlcmVkJykgOiB0aGlzLmNhY2hlS2V5LFxuICAgICAgICAgIHNvdXJjZVdpZHRoID0gZWxlbWVudFRvRmlsdGVyLndpZHRoLCBzb3VyY2VIZWlnaHQgPSBlbGVtZW50VG9GaWx0ZXIuaGVpZ2h0O1xuICAgICAgY2FudmFzRWwud2lkdGggPSBzb3VyY2VXaWR0aDtcbiAgICAgIGNhbnZhc0VsLmhlaWdodCA9IHNvdXJjZUhlaWdodDtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBjYW52YXNFbDtcbiAgICAgIHRoaXMuX2xhc3RTY2FsZVggPSBmaWx0ZXIuc2NhbGVYID0gc2NhbGVYO1xuICAgICAgdGhpcy5fbGFzdFNjYWxlWSA9IGZpbHRlci5zY2FsZVkgPSBzY2FsZVk7XG4gICAgICBmYWJyaWMuZmlsdGVyQmFja2VuZC5hcHBseUZpbHRlcnMoXG4gICAgICAgIFtmaWx0ZXJdLCBlbGVtZW50VG9GaWx0ZXIsIHNvdXJjZVdpZHRoLCBzb3VyY2VIZWlnaHQsIHRoaXMuX2VsZW1lbnQsIGNhY2hlS2V5KTtcbiAgICAgIHRoaXMuX2ZpbHRlclNjYWxpbmdYID0gY2FudmFzRWwud2lkdGggLyB0aGlzLl9vcmlnaW5hbEVsZW1lbnQud2lkdGg7XG4gICAgICB0aGlzLl9maWx0ZXJTY2FsaW5nWSA9IGNhbnZhc0VsLmhlaWdodCAvIHRoaXMuX29yaWdpbmFsRWxlbWVudC5oZWlnaHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgZmlsdGVycyBhc3NpZ25lZCB0byB0aGlzIGltYWdlIChmcm9tIFwiZmlsdGVyc1wiIGFycmF5KSBvciBmcm9tIGZpbHRlciBwYXJhbVxuICAgICAqIEBtZXRob2QgYXBwbHlGaWx0ZXJzXG4gICAgICogQHBhcmFtIHtBcnJheX0gZmlsdGVycyB0byBiZSBhcHBsaWVkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBmb3JSZXNpemluZyBzcGVjaWZ5IGlmIHRoZSBmaWx0ZXIgb3BlcmF0aW9uIGlzIGEgcmVzaXplIG9wZXJhdGlvblxuICAgICAqIEByZXR1cm4ge3RoaXNBcmd9IHJldHVybiB0aGUgZmFicmljLkltYWdlIG9iamVjdFxuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBhcHBseUZpbHRlcnM6IGZ1bmN0aW9uKGZpbHRlcnMpIHtcblxuICAgICAgZmlsdGVycyA9IGZpbHRlcnMgfHwgdGhpcy5maWx0ZXJzIHx8IFtdO1xuICAgICAgZmlsdGVycyA9IGZpbHRlcnMuZmlsdGVyKGZ1bmN0aW9uKGZpbHRlcikgeyByZXR1cm4gZmlsdGVyICYmICFmaWx0ZXIuaXNOZXV0cmFsU3RhdGUoKTsgfSk7XG4gICAgICB0aGlzLnNldCgnZGlydHknLCB0cnVlKTtcblxuICAgICAgLy8gbmVlZHMgdG8gY2xlYXIgb3V0IG9yIFdFQkdMIHdpbGwgbm90IHJlc2l6ZSBjb3JyZWN0bHlcbiAgICAgIHRoaXMucmVtb3ZlVGV4dHVyZSh0aGlzLmNhY2hlS2V5ICsgJ19maWx0ZXJlZCcpO1xuXG4gICAgICBpZiAoZmlsdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX29yaWdpbmFsRWxlbWVudDtcbiAgICAgICAgdGhpcy5fZmlsdGVyZWRFbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZpbHRlclNjYWxpbmdYID0gMTtcbiAgICAgICAgdGhpcy5fZmlsdGVyU2NhbGluZ1kgPSAxO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIGltZ0VsZW1lbnQgPSB0aGlzLl9vcmlnaW5hbEVsZW1lbnQsXG4gICAgICAgICAgc291cmNlV2lkdGggPSBpbWdFbGVtZW50Lm5hdHVyYWxXaWR0aCB8fCBpbWdFbGVtZW50LndpZHRoLFxuICAgICAgICAgIHNvdXJjZUhlaWdodCA9IGltZ0VsZW1lbnQubmF0dXJhbEhlaWdodCB8fCBpbWdFbGVtZW50LmhlaWdodDtcblxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQgPT09IHRoaXMuX29yaWdpbmFsRWxlbWVudCkge1xuICAgICAgICAvLyBpZiB0aGUgZWxlbWVudCBpcyB0aGUgc2FtZSB3ZSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBlbGVtZW50XG4gICAgICAgIHZhciBjYW52YXNFbCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgICAgY2FudmFzRWwud2lkdGggPSBzb3VyY2VXaWR0aDtcbiAgICAgICAgY2FudmFzRWwuaGVpZ2h0ID0gc291cmNlSGVpZ2h0O1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gY2FudmFzRWw7XG4gICAgICAgIHRoaXMuX2ZpbHRlcmVkRWwgPSBjYW52YXNFbDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBjbGVhciB0aGUgZXhpc3RpbmcgZWxlbWVudCB0byBnZXQgbmV3IGZpbHRlciBkYXRhXG4gICAgICAgIC8vIGFsc28gZGVyZWZlcmVuY2UgdGhlIGV2ZW50dWFsIHJlc2l6ZWQgX2VsZW1lbnRcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2ZpbHRlcmVkRWw7XG4gICAgICAgIHRoaXMuX2ZpbHRlcmVkRWwuZ2V0Q29udGV4dCgnMmQnKS5jbGVhclJlY3QoMCwgMCwgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCk7XG4gICAgICAgIC8vIHdlIGFsc28gbmVlZCB0byByZXNpemUgYWdhaW4gYXQgbmV4dCByZW5kZXJBbGwsIHNvIHJlbW92ZSBzYXZlZCBfbGFzdFNjYWxlWC9ZXG4gICAgICAgIHRoaXMuX2xhc3RTY2FsZVggPSAxO1xuICAgICAgICB0aGlzLl9sYXN0U2NhbGVZID0gMTtcbiAgICAgIH1cbiAgICAgIGlmICghZmFicmljLmZpbHRlckJhY2tlbmQpIHtcbiAgICAgICAgZmFicmljLmZpbHRlckJhY2tlbmQgPSBmYWJyaWMuaW5pdEZpbHRlckJhY2tlbmQoKTtcbiAgICAgIH1cbiAgICAgIGZhYnJpYy5maWx0ZXJCYWNrZW5kLmFwcGx5RmlsdGVycyhcbiAgICAgICAgZmlsdGVycywgdGhpcy5fb3JpZ2luYWxFbGVtZW50LCBzb3VyY2VXaWR0aCwgc291cmNlSGVpZ2h0LCB0aGlzLl9lbGVtZW50LCB0aGlzLmNhY2hlS2V5KTtcbiAgICAgIGlmICh0aGlzLl9vcmlnaW5hbEVsZW1lbnQud2lkdGggIT09IHRoaXMuX2VsZW1lbnQud2lkdGggfHxcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxFbGVtZW50LmhlaWdodCAhPT0gdGhpcy5fZWxlbWVudC5oZWlnaHQpIHtcbiAgICAgICAgdGhpcy5fZmlsdGVyU2NhbGluZ1ggPSB0aGlzLl9lbGVtZW50LndpZHRoIC8gdGhpcy5fb3JpZ2luYWxFbGVtZW50LndpZHRoO1xuICAgICAgICB0aGlzLl9maWx0ZXJTY2FsaW5nWSA9IHRoaXMuX2VsZW1lbnQuaGVpZ2h0IC8gdGhpcy5fb3JpZ2luYWxFbGVtZW50LmhlaWdodDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGZhYnJpYy51dGlsLnNldEltYWdlU21vb3RoaW5nKGN0eCwgdGhpcy5pbWFnZVNtb290aGluZyk7XG4gICAgICBpZiAodGhpcy5pc01vdmluZyAhPT0gdHJ1ZSAmJiB0aGlzLnJlc2l6ZUZpbHRlciAmJiB0aGlzLl9uZWVkc1Jlc2l6ZSgpKSB7XG4gICAgICAgIHRoaXMuYXBwbHlSZXNpemVGaWx0ZXJzKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdHJva2UoY3R4KTtcbiAgICAgIHRoaXMuX3JlbmRlclBhaW50SW5PcmRlcihjdHgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQYWludCB0aGUgY2FjaGVkIGNvcHkgb2YgdGhlIG9iamVjdCBvbiB0aGUgdGFyZ2V0IGNvbnRleHQuXG4gICAgICogaXQgd2lsbCBzZXQgdGhlIGltYWdlU21vb3RoaW5nIGZvciB0aGUgZHJhdyBvcGVyYXRpb25cbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgZHJhd0NhY2hlT25DYW52YXM6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgZmFicmljLnV0aWwuc2V0SW1hZ2VTbW9vdGhpbmcoY3R4LCB0aGlzLmltYWdlU21vb3RoaW5nKTtcbiAgICAgIGZhYnJpYy5PYmplY3QucHJvdG90eXBlLmRyYXdDYWNoZU9uQ2FudmFzLmNhbGwodGhpcywgY3R4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVjaWRlIGlmIHRoZSBvYmplY3Qgc2hvdWxkIGNhY2hlIG9yIG5vdC4gQ3JlYXRlIGl0cyBvd24gY2FjaGUgbGV2ZWxcbiAgICAgKiBuZWVkc0l0c093bkNhY2hlIHNob3VsZCBiZSB1c2VkIHdoZW4gdGhlIG9iamVjdCBkcmF3aW5nIG1ldGhvZCByZXF1aXJlc1xuICAgICAqIGEgY2FjaGUgc3RlcC4gTm9uZSBvZiB0aGUgZmFicmljIGNsYXNzZXMgcmVxdWlyZXMgaXQuXG4gICAgICogR2VuZXJhbGx5IHlvdSBkbyBub3QgY2FjaGUgb2JqZWN0cyBpbiBncm91cHMgYmVjYXVzZSB0aGUgZ3JvdXAgb3V0c2lkZSBpcyBjYWNoZWQuXG4gICAgICogVGhpcyBpcyB0aGUgc3BlY2lhbCBpbWFnZSB2ZXJzaW9uIHdoZXJlIHdlIHdvdWxkIGxpa2UgdG8gYXZvaWQgY2FjaGluZyB3aGVyZSBwb3NzaWJsZS5cbiAgICAgKiBFc3NlbnRpYWxseSBpbWFnZXMgZG8gbm90IGJlbmVmaXQgZnJvbSBjYWNoaW5nLiBUaGV5IG1heSByZXF1aXJlIGNhY2hpbmcsIGFuZCBpbiB0aGF0XG4gICAgICogY2FzZSB3ZSBkbyBpdC4gQWxzbyBjYWNoaW5nIGFuIGltYWdlIHVzdWFsbHkgZW5kcyBpbiBhIGxvc3Mgb2YgZGV0YWlscy5cbiAgICAgKiBBIGZ1bGwgcGVyZm9ybWFuY2UgYXVkaXQgc2hvdWxkIGJlIGRvbmUuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBzaG91bGRDYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5uZWVkc0l0c093bkNhY2hlKCk7XG4gICAgfSxcblxuICAgIF9yZW5kZXJGaWxsOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIHZhciBlbGVtZW50VG9EcmF3ID0gdGhpcy5fZWxlbWVudDtcbiAgICAgIGlmICghZWxlbWVudFRvRHJhdykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc2NhbGVYID0gdGhpcy5fZmlsdGVyU2NhbGluZ1gsIHNjYWxlWSA9IHRoaXMuX2ZpbHRlclNjYWxpbmdZLFxuICAgICAgICAgIHcgPSB0aGlzLndpZHRoLCBoID0gdGhpcy5oZWlnaHQsIG1pbiA9IE1hdGgubWluLCBtYXggPSBNYXRoLm1heCxcbiAgICAgICAgICAvLyBjcm9wIHZhbHVlcyBjYW5ub3QgYmUgbGVzc2VyIHRoYW4gMC5cbiAgICAgICAgICBjcm9wWCA9IG1heCh0aGlzLmNyb3BYLCAwKSwgY3JvcFkgPSBtYXgodGhpcy5jcm9wWSwgMCksXG4gICAgICAgICAgZWxXaWR0aCA9IGVsZW1lbnRUb0RyYXcubmF0dXJhbFdpZHRoIHx8IGVsZW1lbnRUb0RyYXcud2lkdGgsXG4gICAgICAgICAgZWxIZWlnaHQgPSBlbGVtZW50VG9EcmF3Lm5hdHVyYWxIZWlnaHQgfHwgZWxlbWVudFRvRHJhdy5oZWlnaHQsXG4gICAgICAgICAgc1ggPSBjcm9wWCAqIHNjYWxlWCxcbiAgICAgICAgICBzWSA9IGNyb3BZICogc2NhbGVZLFxuICAgICAgICAgIC8vIHRoZSB3aWR0aCBoZWlnaHQgY2Fubm90IGV4Y2VlZCBlbGVtZW50IHdpZHRoL2hlaWdodCwgc3RhcnRpbmcgZnJvbSB0aGUgY3JvcCBvZmZzZXQuXG4gICAgICAgICAgc1cgPSBtaW4odyAqIHNjYWxlWCwgZWxXaWR0aCAtIHNYKSxcbiAgICAgICAgICBzSCA9IG1pbihoICogc2NhbGVZLCBlbEhlaWdodCAtIHNZKSxcbiAgICAgICAgICB4ID0gLXcgLyAyLCB5ID0gLWggLyAyLFxuICAgICAgICAgIG1heERlc3RXID0gbWluKHcsIGVsV2lkdGggLyBzY2FsZVggLSBjcm9wWCksXG4gICAgICAgICAgbWF4RGVzdEggPSBtaW4oaCwgZWxIZWlnaHQgLyBzY2FsZVkgLSBjcm9wWSk7XG5cbiAgICAgIGVsZW1lbnRUb0RyYXcgJiYgY3R4LmRyYXdJbWFnZShlbGVtZW50VG9EcmF3LCBzWCwgc1ksIHNXLCBzSCwgeCwgeSwgbWF4RGVzdFcsIG1heERlc3RIKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogbmVlZGVkIHRvIGNoZWNrIGlmIGltYWdlIG5lZWRzIHJlc2l6ZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX25lZWRzUmVzaXplOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2FsZSA9IHRoaXMuZ2V0VG90YWxPYmplY3RTY2FsaW5nKCk7XG4gICAgICByZXR1cm4gKHNjYWxlLnNjYWxlWCAhPT0gdGhpcy5fbGFzdFNjYWxlWCB8fCBzY2FsZS5zY2FsZVkgIT09IHRoaXMuX2xhc3RTY2FsZVkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZXNldFdpZHRoSGVpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc2V0KHRoaXMuZ2V0T3JpZ2luYWxTaXplKCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgSW1hZ2UgY2xhc3MncyBpbml0aWFsaXphdGlvbiBtZXRob2QuIFRoaXMgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHlcbiAgICAgKiBjYWxsZWQgYnkgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtIVE1MSW1hZ2VFbGVtZW50fFN0cmluZ30gZWxlbWVudCBUaGUgZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGltYWdlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqL1xuICAgIF9pbml0RWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdGhpcy5zZXRFbGVtZW50KGZhYnJpYy51dGlsLmdldEJ5SWQoZWxlbWVudCksIG9wdGlvbnMpO1xuICAgICAgZmFicmljLnV0aWwuYWRkQ2xhc3ModGhpcy5nZXRFbGVtZW50KCksIGZhYnJpYy5JbWFnZS5DU1NfQ0FOVkFTKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICovXG4gICAgX2luaXRDb25maWc6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7IH0pO1xuICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgdGhpcy5fc2V0V2lkdGhIZWlnaHQob3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZmlsdGVycyB0byBiZSBpbml0aWFsaXplZFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFsbCBmYWJyaWMuSW1hZ2UuZmlsdGVycyBpbnN0YW5jZXMgYXJlIGNyZWF0ZWRcbiAgICAgKi9cbiAgICBfaW5pdEZpbHRlcnM6IGZ1bmN0aW9uKGZpbHRlcnMsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoZmlsdGVycyAmJiBmaWx0ZXJzLmxlbmd0aCkge1xuICAgICAgICBmYWJyaWMudXRpbC5lbmxpdmVuT2JqZWN0cyhmaWx0ZXJzLCBmdW5jdGlvbihlbmxpdmVuZWRPYmplY3RzKSB7XG4gICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZW5saXZlbmVkT2JqZWN0cyk7XG4gICAgICAgIH0sICdmYWJyaWMuSW1hZ2UuZmlsdGVycycpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogU2V0IHRoZSB3aWR0aCBhbmQgdGhlIGhlaWdodCBvZiB0aGUgaW1hZ2Ugb2JqZWN0LCB1c2luZyB0aGUgZWxlbWVudCBvciB0aGVcbiAgICAgKiBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT2JqZWN0IHdpdGggd2lkdGgvaGVpZ2h0IHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBfc2V0V2lkdGhIZWlnaHQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7IH0pO1xuICAgICAgdmFyIGVsID0gdGhpcy5nZXRFbGVtZW50KCk7XG4gICAgICB0aGlzLndpZHRoID0gb3B0aW9ucy53aWR0aCB8fCBlbC5uYXR1cmFsV2lkdGggfHwgZWwud2lkdGggfHwgMDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgfHwgZWwubmF0dXJhbEhlaWdodCB8fCBlbC5oZWlnaHQgfHwgMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIG9mZnNldCBmb3IgY2VudGVyIGFuZCBzY2FsZSBmYWN0b3IgZm9yIHRoZSBpbWFnZSBpbiBvcmRlciB0byByZXNwZWN0XG4gICAgICogdGhlIHByZXNlcnZlQXNwZWN0UmF0aW8gYXR0cmlidXRlXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgcGFyc2VQcmVzZXJ2ZUFzcGVjdFJhdGlvQXR0cmlidXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwQVIgPSBmYWJyaWMudXRpbC5wYXJzZVByZXNlcnZlQXNwZWN0UmF0aW9BdHRyaWJ1dGUodGhpcy5wcmVzZXJ2ZUFzcGVjdFJhdGlvIHx8ICcnKSxcbiAgICAgICAgICByV2lkdGggPSB0aGlzLl9lbGVtZW50LndpZHRoLCBySGVpZ2h0ID0gdGhpcy5fZWxlbWVudC5oZWlnaHQsXG4gICAgICAgICAgc2NhbGVYID0gMSwgc2NhbGVZID0gMSwgb2Zmc2V0TGVmdCA9IDAsIG9mZnNldFRvcCA9IDAsIGNyb3BYID0gMCwgY3JvcFkgPSAwLFxuICAgICAgICAgIG9mZnNldCwgcFdpZHRoID0gdGhpcy53aWR0aCwgcEhlaWdodCA9IHRoaXMuaGVpZ2h0LCBwYXJzZWRBdHRyaWJ1dGVzID0geyB3aWR0aDogcFdpZHRoLCBoZWlnaHQ6IHBIZWlnaHQgfTtcbiAgICAgIGlmIChwQVIgJiYgKHBBUi5hbGlnblggIT09ICdub25lJyB8fCBwQVIuYWxpZ25ZICE9PSAnbm9uZScpKSB7XG4gICAgICAgIGlmIChwQVIubWVldE9yU2xpY2UgPT09ICdtZWV0Jykge1xuICAgICAgICAgIHNjYWxlWCA9IHNjYWxlWSA9IGZhYnJpYy51dGlsLmZpbmRTY2FsZVRvRml0KHRoaXMuX2VsZW1lbnQsIHBhcnNlZEF0dHJpYnV0ZXMpO1xuICAgICAgICAgIG9mZnNldCA9IChwV2lkdGggLSByV2lkdGggKiBzY2FsZVgpIC8gMjtcbiAgICAgICAgICBpZiAocEFSLmFsaWduWCA9PT0gJ01pbicpIHtcbiAgICAgICAgICAgIG9mZnNldExlZnQgPSAtb2Zmc2V0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocEFSLmFsaWduWCA9PT0gJ01heCcpIHtcbiAgICAgICAgICAgIG9mZnNldExlZnQgPSBvZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9mZnNldCA9IChwSGVpZ2h0IC0gckhlaWdodCAqIHNjYWxlWSkgLyAyO1xuICAgICAgICAgIGlmIChwQVIuYWxpZ25ZID09PSAnTWluJykge1xuICAgICAgICAgICAgb2Zmc2V0VG9wID0gLW9mZnNldDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBBUi5hbGlnblkgPT09ICdNYXgnKSB7XG4gICAgICAgICAgICBvZmZzZXRUb3AgPSBvZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwQVIubWVldE9yU2xpY2UgPT09ICdzbGljZScpIHtcbiAgICAgICAgICBzY2FsZVggPSBzY2FsZVkgPSBmYWJyaWMudXRpbC5maW5kU2NhbGVUb0NvdmVyKHRoaXMuX2VsZW1lbnQsIHBhcnNlZEF0dHJpYnV0ZXMpO1xuICAgICAgICAgIG9mZnNldCA9IHJXaWR0aCAtIHBXaWR0aCAvIHNjYWxlWDtcbiAgICAgICAgICBpZiAocEFSLmFsaWduWCA9PT0gJ01pZCcpIHtcbiAgICAgICAgICAgIGNyb3BYID0gb2Zmc2V0IC8gMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBBUi5hbGlnblggPT09ICdNYXgnKSB7XG4gICAgICAgICAgICBjcm9wWCA9IG9mZnNldDtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2Zmc2V0ID0gckhlaWdodCAtIHBIZWlnaHQgLyBzY2FsZVk7XG4gICAgICAgICAgaWYgKHBBUi5hbGlnblkgPT09ICdNaWQnKSB7XG4gICAgICAgICAgICBjcm9wWSA9IG9mZnNldCAvIDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwQVIuYWxpZ25ZID09PSAnTWF4Jykge1xuICAgICAgICAgICAgY3JvcFkgPSBvZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJXaWR0aCA9IHBXaWR0aCAvIHNjYWxlWDtcbiAgICAgICAgICBySGVpZ2h0ID0gcEhlaWdodCAvIHNjYWxlWTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNjYWxlWCA9IHBXaWR0aCAvIHJXaWR0aDtcbiAgICAgICAgc2NhbGVZID0gcEhlaWdodCAvIHJIZWlnaHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogcldpZHRoLFxuICAgICAgICBoZWlnaHQ6IHJIZWlnaHQsXG4gICAgICAgIHNjYWxlWDogc2NhbGVYLFxuICAgICAgICBzY2FsZVk6IHNjYWxlWSxcbiAgICAgICAgb2Zmc2V0TGVmdDogb2Zmc2V0TGVmdCxcbiAgICAgICAgb2Zmc2V0VG9wOiBvZmZzZXRUb3AsXG4gICAgICAgIGNyb3BYOiBjcm9wWCxcbiAgICAgICAgY3JvcFk6IGNyb3BZXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgQ1NTIGNsYXNzIG5hbWUgZm9yIGNhbnZhc1xuICAgKiBAc3RhdGljXG4gICAqIEB0eXBlIFN0cmluZ1xuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgZmFicmljLkltYWdlLkNTU19DQU5WQVMgPSAnY2FudmFzLWltZyc7XG5cbiAgLyoqXG4gICAqIEFsaWFzIGZvciBnZXRTcmNcbiAgICogQHN0YXRpY1xuICAgKi9cbiAgZmFicmljLkltYWdlLnByb3RvdHlwZS5nZXRTdmdTcmMgPSBmYWJyaWMuSW1hZ2UucHJvdG90eXBlLmdldFNyYztcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2UgZnJvbSBpdHMgb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gYW4gaW1hZ2UgaW5zdGFuY2UgaXMgY3JlYXRlZFxuICAgKi9cbiAgZmFicmljLkltYWdlLmZyb21PYmplY3QgPSBmdW5jdGlvbihfb2JqZWN0LCBjYWxsYmFjaykge1xuICAgIHZhciBvYmplY3QgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUoX29iamVjdCk7XG4gICAgZmFicmljLnV0aWwubG9hZEltYWdlKG9iamVjdC5zcmMsIGZ1bmN0aW9uKGltZywgaXNFcnJvcikge1xuICAgICAgaWYgKGlzRXJyb3IpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobnVsbCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZhYnJpYy5JbWFnZS5wcm90b3R5cGUuX2luaXRGaWx0ZXJzLmNhbGwob2JqZWN0LCBvYmplY3QuZmlsdGVycywgZnVuY3Rpb24oZmlsdGVycykge1xuICAgICAgICBvYmplY3QuZmlsdGVycyA9IGZpbHRlcnMgfHwgW107XG4gICAgICAgIGZhYnJpYy5JbWFnZS5wcm90b3R5cGUuX2luaXRGaWx0ZXJzLmNhbGwob2JqZWN0LCBbb2JqZWN0LnJlc2l6ZUZpbHRlcl0sIGZ1bmN0aW9uKHJlc2l6ZUZpbHRlcnMpIHtcbiAgICAgICAgICBvYmplY3QucmVzaXplRmlsdGVyID0gcmVzaXplRmlsdGVyc1swXTtcbiAgICAgICAgICBmYWJyaWMudXRpbC5lbmxpdmVuT2JqZWN0RW5saXZhYmxlcyhvYmplY3QsIG9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGltYWdlID0gbmV3IGZhYnJpYy5JbWFnZShpbWcsIG9iamVjdCk7XG4gICAgICAgICAgICBjYWxsYmFjayhpbWFnZSwgZmFsc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sIG51bGwsIG9iamVjdC5jcm9zc09yaWdpbik7XG4gIH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgZmFicmljLkltYWdlIGZyb20gYW4gVVJMIHN0cmluZ1xuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVVJMIHRvIGNyZWF0ZSBhbiBpbWFnZSBmcm9tXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gaW1hZ2UgaXMgY3JlYXRlZCAobmV3bHkgY3JlYXRlZCBpbWFnZSBpcyBwYXNzZWQgYXMgYSBmaXJzdCBhcmd1bWVudCkuIFNlY29uZCBhcmd1bWVudCBpcyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBhbiBlcnJvciBvY2N1cnJlZCBvciBub3QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbaW1nT3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5mcm9tVVJMID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjaywgaW1nT3B0aW9ucykge1xuICAgIGZhYnJpYy51dGlsLmxvYWRJbWFnZSh1cmwsIGZ1bmN0aW9uKGltZywgaXNFcnJvcikge1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobmV3IGZhYnJpYy5JbWFnZShpbWcsIGltZ09wdGlvbnMpLCBpc0Vycm9yKTtcbiAgICB9LCBudWxsLCBpbWdPcHRpb25zICYmIGltZ09wdGlvbnMuY3Jvc3NPcmlnaW4pO1xuICB9O1xuXG4gIC8qIF9GUk9NX1NWR19TVEFSVF8gKi9cbiAgLyoqXG4gICAqIExpc3Qgb2YgYXR0cmlidXRlIG5hbWVzIHRvIGFjY291bnQgZm9yIHdoZW4gcGFyc2luZyBTVkcgZWxlbWVudCAodXNlZCBieSB7QGxpbmsgZmFicmljLkltYWdlLmZyb21FbGVtZW50fSlcbiAgICogQHN0YXRpY1xuICAgKiBAc2VlIHtAbGluayBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvc3RydWN0Lmh0bWwjSW1hZ2VFbGVtZW50fVxuICAgKi9cbiAgZmFicmljLkltYWdlLkFUVFJJQlVURV9OQU1FUyA9XG4gICAgZmFicmljLlNIQVJFRF9BVFRSSUJVVEVTLmNvbmNhdChcbiAgICAgICd4IHkgd2lkdGggaGVpZ2h0IHByZXNlcnZlQXNwZWN0UmF0aW8geGxpbms6aHJlZiBjcm9zc09yaWdpbiBpbWFnZS1yZW5kZXJpbmcnLnNwbGl0KCcgJylcbiAgICApO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHtAbGluayBmYWJyaWMuSW1hZ2V9IGluc3RhbmNlIGZyb20gYW4gU1ZHIGVsZW1lbnRcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge1NWR0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBwYXJzZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGV4ZWN1dGUgd2hlbiBmYWJyaWMuSW1hZ2Ugb2JqZWN0IGlzIGNyZWF0ZWRcbiAgICogQHJldHVybiB7ZmFicmljLkltYWdlfSBJbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2VcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5mcm9tRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgdmFyIHBhcnNlZEF0dHJpYnV0ZXMgPSBmYWJyaWMucGFyc2VBdHRyaWJ1dGVzKGVsZW1lbnQsIGZhYnJpYy5JbWFnZS5BVFRSSUJVVEVfTkFNRVMpO1xuICAgIGZhYnJpYy5JbWFnZS5mcm9tVVJMKHBhcnNlZEF0dHJpYnV0ZXNbJ3hsaW5rOmhyZWYnXSwgY2FsbGJhY2ssXG4gICAgICBleHRlbmQoKG9wdGlvbnMgPyBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUob3B0aW9ucykgOiB7IH0pLCBwYXJzZWRBdHRyaWJ1dGVzKSk7XG4gIH07XG4gIC8qIF9GUk9NX1NWR19FTkRfICovXG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5PYmplY3QucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5PYmplY3QucHJvdG90eXBlICovIHtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybiB7TnVtYmVyfSBhbmdsZSB2YWx1ZVxuICAgKi9cbiAgX2dldEFuZ2xlVmFsdWVGb3JTdHJhaWdodGVuOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYW5nbGUgPSB0aGlzLmFuZ2xlICUgMzYwO1xuICAgIGlmIChhbmdsZSA+IDApIHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKChhbmdsZSAtIDEpIC8gOTApICogOTA7XG4gICAgfVxuICAgIHJldHVybiBNYXRoLnJvdW5kKGFuZ2xlIC8gOTApICogOTA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFN0cmFpZ2h0ZW5zIGFuIG9iamVjdCAocm90YXRpbmcgaXQgZnJvbSBjdXJyZW50IGFuZ2xlIHRvIG9uZSBvZiAwLCA5MCwgMTgwLCAyNzAsIGV0Yy4gZGVwZW5kaW5nIG9uIHdoaWNoIGlzIGNsb3NlcilcbiAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBzdHJhaWdodGVuOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yb3RhdGUodGhpcy5fZ2V0QW5nbGVWYWx1ZUZvclN0cmFpZ2h0ZW4oKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNhbWUgYXMge0BsaW5rIGZhYnJpYy5PYmplY3QucHJvdG90eXBlLnN0cmFpZ2h0ZW59IGJ1dCB3aXRoIGFuaW1hdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FsbGJhY2tzIE9iamVjdCB3aXRoIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tzLm9uQ29tcGxldGVdIEludm9rZWQgb24gY29tcGxldGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tzLm9uQ2hhbmdlXSBJbnZva2VkIG9uIGV2ZXJ5IHN0ZXAgb2YgYW5pbWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICovXG4gIGZ4U3RyYWlnaHRlbjogZnVuY3Rpb24oY2FsbGJhY2tzKSB7XG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzIHx8IHsgfTtcblxuICAgIHZhciBlbXB0eSA9IGZ1bmN0aW9uKCkgeyB9LFxuICAgICAgICBvbkNvbXBsZXRlID0gY2FsbGJhY2tzLm9uQ29tcGxldGUgfHwgZW1wdHksXG4gICAgICAgIG9uQ2hhbmdlID0gY2FsbGJhY2tzLm9uQ2hhbmdlIHx8IGVtcHR5LFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gZmFicmljLnV0aWwuYW5pbWF0ZSh7XG4gICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICBzdGFydFZhbHVlOiB0aGlzLmdldCgnYW5nbGUnKSxcbiAgICAgIGVuZFZhbHVlOiB0aGlzLl9nZXRBbmdsZVZhbHVlRm9yU3RyYWlnaHRlbigpLFxuICAgICAgZHVyYXRpb246IHRoaXMuRlhfRFVSQVRJT04sXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgX3RoaXMucm90YXRlKHZhbHVlKTtcbiAgICAgICAgb25DaGFuZ2UoKTtcbiAgICAgIH0sXG4gICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuc2V0Q29vcmRzKCk7XG4gICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn0pO1xuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlICovIHtcblxuICAvKipcbiAgICogU3RyYWlnaHRlbnMgb2JqZWN0LCB0aGVuIHJlcmVuZGVycyBjYW52YXNcbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIHN0cmFpZ2h0ZW5cbiAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBzdHJhaWdodGVuT2JqZWN0OiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgb2JqZWN0LnN0cmFpZ2h0ZW4oKTtcbiAgICB0aGlzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogU2FtZSBhcyB7QGxpbmsgZmFicmljLkNhbnZhcy5wcm90b3R5cGUuc3RyYWlnaHRlbk9iamVjdH0sIGJ1dCBhbmltYXRlZFxuICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gc3RyYWlnaHRlblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAqL1xuICBmeFN0cmFpZ2h0ZW5PYmplY3Q6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0LmZ4U3RyYWlnaHRlbih7XG4gICAgICBvbkNoYW5nZTogdGhpcy5yZXF1ZXN0UmVuZGVyQWxsQm91bmRcbiAgICB9KTtcbiAgfVxufSk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogVGVzdHMgaWYgd2ViZ2wgc3VwcG9ydHMgY2VydGFpbiBwcmVjaXNpb25cbiAgICogQHBhcmFtIHtXZWJHTH0gQ2FudmFzIFdlYkdMIGNvbnRleHQgdG8gdGVzdCBvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gUHJlY2lzaW9uIHRvIHRlc3QgY2FuIGJlIGFueSBvZiBmb2xsb3dpbmc6ICdsb3dwJywgJ21lZGl1bXAnLCAnaGlnaHAnXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBXZWJHTCBzdXBwb3J0cyBnaXZlbiBwcmVjaXNpb24uXG4gICAqL1xuICBmdW5jdGlvbiB0ZXN0UHJlY2lzaW9uKGdsLCBwcmVjaXNpb24pe1xuICAgIHZhciBmcmFnbWVudFNvdXJjZSA9ICdwcmVjaXNpb24gJyArIHByZWNpc2lvbiArICcgZmxvYXQ7XFxudm9pZCBtYWluKCl7fSc7XG4gICAgdmFyIGZyYWdtZW50U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUik7XG4gICAgZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVyLCBmcmFnbWVudFNvdXJjZSk7XG4gICAgZ2wuY29tcGlsZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnJhZ21lbnRTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZSB3aGV0aGVyIHRoaXMgZmlsdGVyaW5nIGJhY2tlbmQgaXMgc3VwcG9ydGVkIGJ5IHRoZSB1c2VyJ3MgYnJvd3Nlci5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbGVTaXplIGNoZWNrIGlmIHRoZSB0aWxlU2l6ZSBpcyBzdXBwb3J0ZWRcbiAgICogQHJldHVybnMge0Jvb2xlYW59IFdoZXRoZXIgdGhlIHVzZXIncyBicm93c2VyIHN1cHBvcnRzIFdlYkdMLlxuICAgKi9cbiAgZmFicmljLmlzV2ViZ2xTdXBwb3J0ZWQgPSBmdW5jdGlvbih0aWxlU2l6ZSkge1xuICAgIGlmIChmYWJyaWMuaXNMaWtlbHlOb2RlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRpbGVTaXplID0gdGlsZVNpemUgfHwgZmFicmljLldlYmdsRmlsdGVyQmFja2VuZC5wcm90b3R5cGUudGlsZVNpemU7XG4gICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIHZhciBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcpIHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnKTtcbiAgICB2YXIgaXNTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBpZiAoZ2wpIHtcbiAgICAgIGZhYnJpYy5tYXhUZXh0dXJlU2l6ZSA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfVEVYVFVSRV9TSVpFKTtcbiAgICAgIGlzU3VwcG9ydGVkID0gZmFicmljLm1heFRleHR1cmVTaXplID49IHRpbGVTaXplO1xuICAgICAgdmFyIHByZWNpc2lvbnMgPSBbJ2hpZ2hwJywgJ21lZGl1bXAnLCAnbG93cCddO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspe1xuICAgICAgICBpZiAodGVzdFByZWNpc2lvbihnbCwgcHJlY2lzaW9uc1tpXSkpe1xuICAgICAgICAgIGZhYnJpYy53ZWJHbFByZWNpc2lvbiA9IHByZWNpc2lvbnNbaV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuaXNTdXBwb3J0ZWQgPSBpc1N1cHBvcnRlZDtcbiAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG4gIH07XG5cbiAgZmFicmljLldlYmdsRmlsdGVyQmFja2VuZCA9IFdlYmdsRmlsdGVyQmFja2VuZDtcblxuICAvKipcbiAgICogV2ViR0wgZmlsdGVyIGJhY2tlbmQuXG4gICAqL1xuICBmdW5jdGlvbiBXZWJnbEZpbHRlckJhY2tlbmQob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudGlsZVNpemUpIHtcbiAgICAgIHRoaXMudGlsZVNpemUgPSBvcHRpb25zLnRpbGVTaXplO1xuICAgIH1cbiAgICB0aGlzLnNldHVwR0xDb250ZXh0KHRoaXMudGlsZVNpemUsIHRoaXMudGlsZVNpemUpO1xuICAgIHRoaXMuY2FwdHVyZUdQVUluZm8oKTtcbiAgfTtcblxuICBXZWJnbEZpbHRlckJhY2tlbmQucHJvdG90eXBlID0gLyoqIEBsZW5kcyBmYWJyaWMuV2ViZ2xGaWx0ZXJCYWNrZW5kLnByb3RvdHlwZSAqLyB7XG5cbiAgICB0aWxlU2l6ZTogMjA0OCxcblxuICAgIC8qKlxuICAgICAqIEV4cGVyaW1lbnRhbC4gVGhpcyBvYmplY3QgaXMgYSBzb3J0IG9mIHJlcG9zaXRvcnkgb2YgaGVscCBsYXllcnMgdXNlZCB0byBhdm9pZFxuICAgICAqIG9mIHJlY3JlYXRpbmcgdGhlbSBkdXJpbmcgZnJlcXVlbnQgZmlsdGVyaW5nLiBJZiB5b3UgYXJlIHByZXZpZXdpbmcgYSBmaWx0ZXIgd2l0aFxuICAgICAqIGEgc2xpZGVyIHlvdSBwcm9iYWJseSBkbyBub3Qgd2FudCB0byBjcmVhdGUgaGVscCBsYXllcnMgZXZlcnkgZmlsdGVyIHN0ZXAuXG4gICAgICogaW4gdGhpcyBvYmplY3QgdGhlcmUgd2lsbCBiZSBhcHBlbmRlZCBzb21lIGNhbnZhc2VzLCBjcmVhdGVkIG9uY2UsIHJlc2l6ZWQgc29tZXRpbWVzXG4gICAgICogY2xlYXJlZCBuZXZlci4gQ2xlYXJpbmcgaXMgbGVmdCB0byB0aGUgZGV2ZWxvcGVyLlxuICAgICAqKi9cbiAgICByZXNvdXJjZXM6IHtcblxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXR1cCBhIFdlYkdMIGNvbnRleHQgc3VpdGFibGUgZm9yIGZpbHRlcmluZywgYW5kIGJpbmQgYW55IG5lZWRlZCBldmVudCBoYW5kbGVycy5cbiAgICAgKi9cbiAgICBzZXR1cEdMQ29udGV4dDogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgICB0aGlzLmNyZWF0ZVdlYkdMQ2FudmFzKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICB0aGlzLmFQb3NpdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkoWzAsIDAsIDAsIDEsIDEsIDAsIDEsIDFdKTtcbiAgICAgIHRoaXMuY2hvb3NlRmFzdGVzdENvcHlHTFRvMkRNZXRob2Qod2lkdGgsIGhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFBpY2sgYSBtZXRob2QgdG8gY29weSBkYXRhIGZyb20gR0wgY29udGV4dCB0byAyZCBjYW52YXMuICBJbiBzb21lIGJyb3dzZXJzIHVzaW5nXG4gICAgICogcHV0SW1hZ2VEYXRhIGlzIGZhc3RlciB0aGFuIGRyYXdJbWFnZSBmb3IgdGhhdCBzcGVjaWZpYyBvcGVyYXRpb24uXG4gICAgICovXG4gICAgY2hvb3NlRmFzdGVzdENvcHlHTFRvMkRNZXRob2Q6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIHZhciBjYW5NZWFzdXJlUGVyZiA9IHR5cGVvZiB3aW5kb3cucGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnLCBjYW5Vc2VJbWFnZURhdGE7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgSW1hZ2VEYXRhKDEsIDEpO1xuICAgICAgICBjYW5Vc2VJbWFnZURhdGEgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FuVXNlSW1hZ2VEYXRhID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIHZhciBjYW5Vc2VBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIHZhciBjYW5Vc2VVaW50OENsYW1wZWQgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnO1xuXG4gICAgICBpZiAoIShjYW5NZWFzdXJlUGVyZiAmJiBjYW5Vc2VJbWFnZURhdGEgJiYgY2FuVXNlQXJyYXlCdWZmZXIgJiYgY2FuVXNlVWludDhDbGFtcGVkKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0YXJnZXRDYW52YXMgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIHZhciBpbWFnZUJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcih3aWR0aCAqIGhlaWdodCAqIDQpO1xuICAgICAgaWYgKGZhYnJpYy5mb3JjZUdMUHV0SW1hZ2VEYXRhKSB7XG4gICAgICAgIHRoaXMuaW1hZ2VCdWZmZXIgPSBpbWFnZUJ1ZmZlcjtcbiAgICAgICAgdGhpcy5jb3B5R0xUbzJEID0gY29weUdMVG8yRFB1dEltYWdlRGF0YTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHRlc3RDb250ZXh0ID0ge1xuICAgICAgICBpbWFnZUJ1ZmZlcjogaW1hZ2VCdWZmZXIsXG4gICAgICAgIGRlc3RpbmF0aW9uV2lkdGg6IHdpZHRoLFxuICAgICAgICBkZXN0aW5hdGlvbkhlaWdodDogaGVpZ2h0LFxuICAgICAgICB0YXJnZXRDYW52YXM6IHRhcmdldENhbnZhc1xuICAgICAgfTtcbiAgICAgIHZhciBzdGFydFRpbWUsIGRyYXdJbWFnZVRpbWUsIHB1dEltYWdlRGF0YVRpbWU7XG4gICAgICB0YXJnZXRDYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgIHRhcmdldENhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgIHN0YXJ0VGltZSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGNvcHlHTFRvMkREcmF3SW1hZ2UuY2FsbCh0ZXN0Q29udGV4dCwgdGhpcy5nbCwgdGVzdENvbnRleHQpO1xuICAgICAgZHJhd0ltYWdlVGltZSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZTtcblxuICAgICAgc3RhcnRUaW1lID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgY29weUdMVG8yRFB1dEltYWdlRGF0YS5jYWxsKHRlc3RDb250ZXh0LCB0aGlzLmdsLCB0ZXN0Q29udGV4dCk7XG4gICAgICBwdXRJbWFnZURhdGFUaW1lID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICBpZiAoZHJhd0ltYWdlVGltZSA+IHB1dEltYWdlRGF0YVRpbWUpIHtcbiAgICAgICAgdGhpcy5pbWFnZUJ1ZmZlciA9IGltYWdlQnVmZmVyO1xuICAgICAgICB0aGlzLmNvcHlHTFRvMkQgPSBjb3B5R0xUbzJEUHV0SW1hZ2VEYXRhO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuY29weUdMVG8yRCA9IGNvcHlHTFRvMkREcmF3SW1hZ2U7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNhbnZhcyBlbGVtZW50IGFuZCBhc3NvY2lhdGVkIFdlYkdMIGNvbnRleHQgYW5kIGF0dGFjaGVzIHRoZW0gYXNcbiAgICAgKiBjbGFzcyBwcm9wZXJ0aWVzIHRvIHRoZSBHTEZpbHRlckJhY2tlbmQgY2xhc3MuXG4gICAgICovXG4gICAgY3JlYXRlV2ViR0xDYW52YXM6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIHZhciBjYW52YXMgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICB2YXIgZ2xPcHRpb25zID0ge1xuICAgICAgICAgICAgYWxwaGE6IHRydWUsXG4gICAgICAgICAgICBwcmVtdWx0aXBsaWVkQWxwaGE6IGZhbHNlLFxuICAgICAgICAgICAgZGVwdGg6IGZhbHNlLFxuICAgICAgICAgICAgc3RlbmNpbDogZmFsc2UsXG4gICAgICAgICAgICBhbnRpYWxpYXM6IGZhbHNlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIGdsT3B0aW9ucyk7XG4gICAgICBpZiAoIWdsKSB7XG4gICAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGdsT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBpZiAoIWdsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XG4gICAgICAvLyB0aGlzIGNhbnZhcyBjYW4gZmlyZSB3ZWJnbGNvbnRleHRsb3N0IGFuZCB3ZWJnbGNvbnRleHRyZXN0b3JlZFxuICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICB0aGlzLmdsID0gZ2w7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGFwcGx5IHRoZSByZXF1ZXN0ZWQgZmlsdGVycyB0byB0aGUgc291cmNlIHByb3ZpZGVkLCBkcmF3aW5nIHRoZSBmaWx0ZXJlZCBvdXRwdXRcbiAgICAgKiB0byB0aGUgcHJvdmlkZWQgdGFyZ2V0IGNhbnZhcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGZpbHRlcnMgVGhlIGZpbHRlcnMgdG8gYXBwbHkuXG4gICAgICogQHBhcmFtIHtIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50fSBzb3VyY2UgVGhlIHNvdXJjZSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGggVGhlIHdpZHRoIG9mIHRoZSBzb3VyY2UgaW5wdXQuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBzb3VyY2UgaW5wdXQuXG4gICAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gdGFyZ2V0Q2FudmFzIFRoZSBkZXN0aW5hdGlvbiBmb3IgZmlsdGVyZWQgb3V0cHV0IHRvIGJlIGRyYXduLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfHVuZGVmaW5lZH0gY2FjaGVLZXkgQSBrZXkgdXNlZCB0byBjYWNoZSByZXNvdXJjZXMgcmVsYXRlZCB0byB0aGUgc291cmNlLiBJZlxuICAgICAqIG9taXR0ZWQsIGNhY2hpbmcgd2lsbCBiZSBza2lwcGVkLlxuICAgICAqL1xuICAgIGFwcGx5RmlsdGVyczogZnVuY3Rpb24oZmlsdGVycywgc291cmNlLCB3aWR0aCwgaGVpZ2h0LCB0YXJnZXRDYW52YXMsIGNhY2hlS2V5KSB7XG4gICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xuICAgICAgdmFyIGNhY2hlZFRleHR1cmU7XG4gICAgICBpZiAoY2FjaGVLZXkpIHtcbiAgICAgICAgY2FjaGVkVGV4dHVyZSA9IHRoaXMuZ2V0Q2FjaGVkVGV4dHVyZShjYWNoZUtleSwgc291cmNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBwaXBlbGluZVN0YXRlID0ge1xuICAgICAgICBvcmlnaW5hbFdpZHRoOiBzb3VyY2Uud2lkdGggfHwgc291cmNlLm9yaWdpbmFsV2lkdGgsXG4gICAgICAgIG9yaWdpbmFsSGVpZ2h0OiBzb3VyY2UuaGVpZ2h0IHx8IHNvdXJjZS5vcmlnaW5hbEhlaWdodCxcbiAgICAgICAgc291cmNlV2lkdGg6IHdpZHRoLFxuICAgICAgICBzb3VyY2VIZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgZGVzdGluYXRpb25XaWR0aDogd2lkdGgsXG4gICAgICAgIGRlc3RpbmF0aW9uSGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIGNvbnRleHQ6IGdsLFxuICAgICAgICBzb3VyY2VUZXh0dXJlOiB0aGlzLmNyZWF0ZVRleHR1cmUoZ2wsIHdpZHRoLCBoZWlnaHQsICFjYWNoZWRUZXh0dXJlICYmIHNvdXJjZSksXG4gICAgICAgIHRhcmdldFRleHR1cmU6IHRoaXMuY3JlYXRlVGV4dHVyZShnbCwgd2lkdGgsIGhlaWdodCksXG4gICAgICAgIG9yaWdpbmFsVGV4dHVyZTogY2FjaGVkVGV4dHVyZSB8fFxuICAgICAgICAgIHRoaXMuY3JlYXRlVGV4dHVyZShnbCwgd2lkdGgsIGhlaWdodCwgIWNhY2hlZFRleHR1cmUgJiYgc291cmNlKSxcbiAgICAgICAgcGFzc2VzOiBmaWx0ZXJzLmxlbmd0aCxcbiAgICAgICAgd2ViZ2w6IHRydWUsXG4gICAgICAgIGFQb3NpdGlvbjogdGhpcy5hUG9zaXRpb24sXG4gICAgICAgIHByb2dyYW1DYWNoZTogdGhpcy5wcm9ncmFtQ2FjaGUsXG4gICAgICAgIHBhc3M6IDAsXG4gICAgICAgIGZpbHRlckJhY2tlbmQ6IHRoaXMsXG4gICAgICAgIHRhcmdldENhbnZhczogdGFyZ2V0Q2FudmFzXG4gICAgICB9O1xuICAgICAgdmFyIHRlbXBGYm8gPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0ZW1wRmJvKTtcbiAgICAgIGZpbHRlcnMuZm9yRWFjaChmdW5jdGlvbihmaWx0ZXIpIHsgZmlsdGVyICYmIGZpbHRlci5hcHBseVRvKHBpcGVsaW5lU3RhdGUpOyB9KTtcbiAgICAgIHJlc2l6ZUNhbnZhc0lmTmVlZGVkKHBpcGVsaW5lU3RhdGUpO1xuICAgICAgdGhpcy5jb3B5R0xUbzJEKGdsLCBwaXBlbGluZVN0YXRlKTtcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuICAgICAgZ2wuZGVsZXRlVGV4dHVyZShwaXBlbGluZVN0YXRlLnNvdXJjZVRleHR1cmUpO1xuICAgICAgZ2wuZGVsZXRlVGV4dHVyZShwaXBlbGluZVN0YXRlLnRhcmdldFRleHR1cmUpO1xuICAgICAgZ2wuZGVsZXRlRnJhbWVidWZmZXIodGVtcEZibyk7XG4gICAgICB0YXJnZXRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgICByZXR1cm4gcGlwZWxpbmVTdGF0ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGV0YWNoIGV2ZW50IGxpc3RlbmVycywgcmVtb3ZlIHJlZmVyZW5jZXMsIGFuZCBjbGVhbiB1cCBjYWNoZXMuXG4gICAgICovXG4gICAgZGlzcG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBudWxsO1xuICAgICAgICB0aGlzLmdsID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xlYXJXZWJHTENhY2hlcygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBXaXBlIG91dCBXZWJHTC1yZWxhdGVkIGNhY2hlcy5cbiAgICAgKi9cbiAgICBjbGVhcldlYkdMQ2FjaGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMucHJvZ3JhbUNhY2hlID0ge307XG4gICAgICB0aGlzLnRleHR1cmVDYWNoZSA9IHt9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBXZWJHTCB0ZXh0dXJlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEFjY2VwdHMgc3BlY2lmaWMgZGltZW5zaW9ucyB0byBpbml0aWFsaXplIHRoZSB0ZXh0dXJlIHRvIG9yIGEgc291cmNlIGltYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjb250ZXh0IHRvIHVzZSBmb3IgY3JlYXRpbmcgdGhlIHRleHR1cmUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIFRoZSB3aWR0aCB0byBpbml0aWFsaXplIHRoZSB0ZXh0dXJlIGF0LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHQgVGhlIGhlaWdodCB0byBpbml0aWFsaXplIHRoZSB0ZXh0dXJlLlxuICAgICAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudH0gdGV4dHVyZUltYWdlU291cmNlIEEgc291cmNlIGZvciB0aGUgdGV4dHVyZSBkYXRhLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmaWx0ZXJUeXBlIGdsLk5FQVJFU1Qgb3IgZ2wuTElORUFSIHVzdWFsbHksIHdlYmdsIG51bWVyaSBjb25zdGFudHNcbiAgICAgKiBAcmV0dXJucyB7V2ViR0xUZXh0dXJlfVxuICAgICAqL1xuICAgIGNyZWF0ZVRleHR1cmU6IGZ1bmN0aW9uKGdsLCB3aWR0aCwgaGVpZ2h0LCB0ZXh0dXJlSW1hZ2VTb3VyY2UsIGZpbHRlclR5cGUpIHtcbiAgICAgIHZhciB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZmlsdGVyVHlwZSB8fCBnbC5ORUFSRVNUKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBmaWx0ZXJUeXBlIHx8IGdsLk5FQVJFU1QpO1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgIGlmICh0ZXh0dXJlSW1hZ2VTb3VyY2UpIHtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCB0ZXh0dXJlSW1hZ2VTb3VyY2UpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgd2lkdGgsIGhlaWdodCwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FuIGJlIG9wdGlvbmFsbHkgdXNlZCB0byBnZXQgYSB0ZXh0dXJlIGZyb20gdGhlIGNhY2hlIGFycmF5XG4gICAgICpcbiAgICAgKiBJZiBhbiBleGlzdGluZyB0ZXh0dXJlIGlzIG5vdCBmb3VuZCwgYSBuZXcgdGV4dHVyZSBpcyBjcmVhdGVkIGFuZCBjYWNoZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdW5pcXVlSWQgQSBjYWNoZSBrZXkgdG8gdXNlIHRvIGZpbmQgYW4gZXhpc3RpbmcgdGV4dHVyZS5cbiAgICAgKiBAcGFyYW0ge0hUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR9IHRleHR1cmVJbWFnZVNvdXJjZSBBIHNvdXJjZSB0byB1c2UgdG8gY3JlYXRlIHRoZVxuICAgICAqIHRleHR1cmUgY2FjaGUgZW50cnkgaWYgb25lIGRvZXMgbm90IGFscmVhZHkgZXhpc3QuXG4gICAgICovXG4gICAgZ2V0Q2FjaGVkVGV4dHVyZTogZnVuY3Rpb24odW5pcXVlSWQsIHRleHR1cmVJbWFnZVNvdXJjZSkge1xuICAgICAgaWYgKHRoaXMudGV4dHVyZUNhY2hlW3VuaXF1ZUlkXSkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0dXJlQ2FjaGVbdW5pcXVlSWRdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciB0ZXh0dXJlID0gdGhpcy5jcmVhdGVUZXh0dXJlKFxuICAgICAgICAgIHRoaXMuZ2wsIHRleHR1cmVJbWFnZVNvdXJjZS53aWR0aCwgdGV4dHVyZUltYWdlU291cmNlLmhlaWdodCwgdGV4dHVyZUltYWdlU291cmNlKTtcbiAgICAgICAgdGhpcy50ZXh0dXJlQ2FjaGVbdW5pcXVlSWRdID0gdGV4dHVyZTtcbiAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFyIG91dCBjYWNoZWQgcmVzb3VyY2VzIHJlbGF0ZWQgdG8gYSBzb3VyY2UgaW1hZ2UgdGhhdCBoYXMgYmVlblxuICAgICAqIGZpbHRlcmVkIHByZXZpb3VzbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2FjaGVLZXkgVGhlIGNhY2hlIGtleSBwcm92aWRlZCB3aGVuIHRoZSBzb3VyY2UgaW1hZ2Ugd2FzIGZpbHRlcmVkLlxuICAgICAqL1xuICAgIGV2aWN0Q2FjaGVzRm9yS2V5OiBmdW5jdGlvbihjYWNoZUtleSkge1xuICAgICAgaWYgKHRoaXMudGV4dHVyZUNhY2hlW2NhY2hlS2V5XSkge1xuICAgICAgICB0aGlzLmdsLmRlbGV0ZVRleHR1cmUodGhpcy50ZXh0dXJlQ2FjaGVbY2FjaGVLZXldKTtcbiAgICAgICAgZGVsZXRlIHRoaXMudGV4dHVyZUNhY2hlW2NhY2hlS2V5XTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY29weUdMVG8yRDogY29weUdMVG8yRERyYXdJbWFnZSxcblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHQgdG8gZXh0cmFjdCBHUFUgaW5mb3JtYXRpb24gc3RyaW5ncyBmcm9tIGEgV2ViR0wgY29udGV4dC5cbiAgICAgKlxuICAgICAqIFVzZWZ1bCBpbmZvcm1hdGlvbiB3aGVuIGRlYnVnZ2luZyBvciBibGFja2xpc3Rpbmcgc3BlY2lmaWMgR1BVcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IEEgR1BVIGluZm8gb2JqZWN0IHdpdGggcmVuZGVyZXIgYW5kIHZlbmRvciBzdHJpbmdzLlxuICAgICAqL1xuICAgIGNhcHR1cmVHUFVJbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmdwdUluZm8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3B1SW5mbztcbiAgICAgIH1cbiAgICAgIHZhciBnbCA9IHRoaXMuZ2wsIGdwdUluZm8gPSB7IHJlbmRlcmVyOiAnJywgdmVuZG9yOiAnJyB9O1xuICAgICAgaWYgKCFnbCkge1xuICAgICAgICByZXR1cm4gZ3B1SW5mbztcbiAgICAgIH1cbiAgICAgIHZhciBleHQgPSBnbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2RlYnVnX3JlbmRlcmVyX2luZm8nKTtcbiAgICAgIGlmIChleHQpIHtcbiAgICAgICAgdmFyIHJlbmRlcmVyID0gZ2wuZ2V0UGFyYW1ldGVyKGV4dC5VTk1BU0tFRF9SRU5ERVJFUl9XRUJHTCk7XG4gICAgICAgIHZhciB2ZW5kb3IgPSBnbC5nZXRQYXJhbWV0ZXIoZXh0LlVOTUFTS0VEX1ZFTkRPUl9XRUJHTCk7XG4gICAgICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgICAgIGdwdUluZm8ucmVuZGVyZXIgPSByZW5kZXJlci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2ZW5kb3IpIHtcbiAgICAgICAgICBncHVJbmZvLnZlbmRvciA9IHZlbmRvci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmdwdUluZm8gPSBncHVJbmZvO1xuICAgICAgcmV0dXJuIGdwdUluZm87XG4gICAgfSxcbiAgfTtcbn0pKCk7XG5cbmZ1bmN0aW9uIHJlc2l6ZUNhbnZhc0lmTmVlZGVkKHBpcGVsaW5lU3RhdGUpIHtcbiAgdmFyIHRhcmdldENhbnZhcyA9IHBpcGVsaW5lU3RhdGUudGFyZ2V0Q2FudmFzLFxuICAgICAgd2lkdGggPSB0YXJnZXRDYW52YXMud2lkdGgsIGhlaWdodCA9IHRhcmdldENhbnZhcy5oZWlnaHQsXG4gICAgICBkV2lkdGggPSBwaXBlbGluZVN0YXRlLmRlc3RpbmF0aW9uV2lkdGgsXG4gICAgICBkSGVpZ2h0ID0gcGlwZWxpbmVTdGF0ZS5kZXN0aW5hdGlvbkhlaWdodDtcblxuICBpZiAod2lkdGggIT09IGRXaWR0aCB8fCBoZWlnaHQgIT09IGRIZWlnaHQpIHtcbiAgICB0YXJnZXRDYW52YXMud2lkdGggPSBkV2lkdGg7XG4gICAgdGFyZ2V0Q2FudmFzLmhlaWdodCA9IGRIZWlnaHQ7XG4gIH1cbn1cblxuLyoqXG4gKiBDb3B5IGFuIGlucHV0IFdlYkdMIGNhbnZhcyBvbiB0byBhbiBvdXRwdXQgMkQgY2FudmFzLlxuICpcbiAqIFRoZSBXZWJHTCBjYW52YXMgaXMgYXNzdW1lZCB0byBiZSB1cHNpZGUgZG93biwgd2l0aCB0aGUgdG9wLWxlZnQgcGl4ZWwgb2YgdGhlXG4gKiBkZXNpcmVkIG91dHB1dCBpbWFnZSBhcHBlYXJpbmcgaW4gdGhlIGJvdHRvbS1sZWZ0IGNvcm5lciBvZiB0aGUgV2ViR0wgY2FudmFzLlxuICpcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBzb3VyY2VDb250ZXh0IFRoZSBXZWJHTCBjb250ZXh0IHRvIGNvcHkgZnJvbS5cbiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IHRhcmdldENhbnZhcyBUaGUgMkQgdGFyZ2V0IGNhbnZhcyB0byBjb3B5IG9uIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IHBpcGVsaW5lU3RhdGUgVGhlIDJEIHRhcmdldCBjYW52YXMgdG8gY29weSBvbiB0by5cbiAqL1xuZnVuY3Rpb24gY29weUdMVG8yRERyYXdJbWFnZShnbCwgcGlwZWxpbmVTdGF0ZSkge1xuICB2YXIgZ2xDYW52YXMgPSBnbC5jYW52YXMsIHRhcmdldENhbnZhcyA9IHBpcGVsaW5lU3RhdGUudGFyZ2V0Q2FudmFzLFxuICAgICAgY3R4ID0gdGFyZ2V0Q2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIGN0eC50cmFuc2xhdGUoMCwgdGFyZ2V0Q2FudmFzLmhlaWdodCk7IC8vIG1vdmUgaXQgZG93biBhZ2FpblxuICBjdHguc2NhbGUoMSwgLTEpOyAvLyB2ZXJ0aWNhbCBmbGlwXG4gIC8vIHdoZXJlIGlzIG15IGltYWdlIG9uIHRoZSBiaWcgZ2xjYW52YXM/XG4gIHZhciBzb3VyY2VZID0gZ2xDYW52YXMuaGVpZ2h0IC0gdGFyZ2V0Q2FudmFzLmhlaWdodDtcbiAgY3R4LmRyYXdJbWFnZShnbENhbnZhcywgMCwgc291cmNlWSwgdGFyZ2V0Q2FudmFzLndpZHRoLCB0YXJnZXRDYW52YXMuaGVpZ2h0LCAwLCAwLFxuICAgIHRhcmdldENhbnZhcy53aWR0aCwgdGFyZ2V0Q2FudmFzLmhlaWdodCk7XG59XG5cbi8qKlxuICogQ29weSBhbiBpbnB1dCBXZWJHTCBjYW52YXMgb24gdG8gYW4gb3V0cHV0IDJEIGNhbnZhcyB1c2luZyAyZCBjYW52YXMnIHB1dEltYWdlRGF0YVxuICogQVBJLiBNZWFzdXJhYmx5IGZhc3RlciB0aGFuIHVzaW5nIGN0eC5kcmF3SW1hZ2UgaW4gRmlyZWZveCAodmVyc2lvbiA1NCBvbiBPU1ggU2llcnJhKS5cbiAqXG4gKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gc291cmNlQ29udGV4dCBUaGUgV2ViR0wgY29udGV4dCB0byBjb3B5IGZyb20uXG4gKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSB0YXJnZXRDYW52YXMgVGhlIDJEIHRhcmdldCBjYW52YXMgdG8gY29weSBvbiB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwaXBlbGluZVN0YXRlIFRoZSAyRCB0YXJnZXQgY2FudmFzIHRvIGNvcHkgb24gdG8uXG4gKi9cbmZ1bmN0aW9uIGNvcHlHTFRvMkRQdXRJbWFnZURhdGEoZ2wsIHBpcGVsaW5lU3RhdGUpIHtcbiAgdmFyIHRhcmdldENhbnZhcyA9IHBpcGVsaW5lU3RhdGUudGFyZ2V0Q2FudmFzLCBjdHggPSB0YXJnZXRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKSxcbiAgICAgIGRXaWR0aCA9IHBpcGVsaW5lU3RhdGUuZGVzdGluYXRpb25XaWR0aCxcbiAgICAgIGRIZWlnaHQgPSBwaXBlbGluZVN0YXRlLmRlc3RpbmF0aW9uSGVpZ2h0LFxuICAgICAgbnVtQnl0ZXMgPSBkV2lkdGggKiBkSGVpZ2h0ICogNDtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIHU4ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5pbWFnZUJ1ZmZlciwgMCwgbnVtQnl0ZXMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIHU4Q2xhbXBlZCA9IG5ldyBVaW50OENsYW1wZWRBcnJheSh0aGlzLmltYWdlQnVmZmVyLCAwLCBudW1CeXRlcyk7XG5cbiAgZ2wucmVhZFBpeGVscygwLCAwLCBkV2lkdGgsIGRIZWlnaHQsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIHU4KTtcbiAgdmFyIGltZ0RhdGEgPSBuZXcgSW1hZ2VEYXRhKHU4Q2xhbXBlZCwgZFdpZHRoLCBkSGVpZ2h0KTtcbiAgY3R4LnB1dEltYWdlRGF0YShpbWdEYXRhLCAwLCAwKTtcbn1cblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcblxuICBmYWJyaWMuQ2FudmFzMmRGaWx0ZXJCYWNrZW5kID0gQ2FudmFzMmRGaWx0ZXJCYWNrZW5kO1xuXG4gIC8qKlxuICAgKiBDYW52YXMgMkQgZmlsdGVyIGJhY2tlbmQuXG4gICAqL1xuICBmdW5jdGlvbiBDYW52YXMyZEZpbHRlckJhY2tlbmQoKSB7fTtcblxuICBDYW52YXMyZEZpbHRlckJhY2tlbmQucHJvdG90eXBlID0gLyoqIEBsZW5kcyBmYWJyaWMuQ2FudmFzMmRGaWx0ZXJCYWNrZW5kLnByb3RvdHlwZSAqLyB7XG4gICAgZXZpY3RDYWNoZXNGb3JLZXk6IG5vb3AsXG4gICAgZGlzcG9zZTogbm9vcCxcbiAgICBjbGVhcldlYkdMQ2FjaGVzOiBub29wLFxuXG4gICAgLyoqXG4gICAgICogRXhwZXJpbWVudGFsLiBUaGlzIG9iamVjdCBpcyBhIHNvcnQgb2YgcmVwb3NpdG9yeSBvZiBoZWxwIGxheWVycyB1c2VkIHRvIGF2b2lkXG4gICAgICogb2YgcmVjcmVhdGluZyB0aGVtIGR1cmluZyBmcmVxdWVudCBmaWx0ZXJpbmcuIElmIHlvdSBhcmUgcHJldmlld2luZyBhIGZpbHRlciB3aXRoXG4gICAgICogYSBzbGlkZXIgeW91IHByb2JhYmx5IGRvIG5vdCB3YW50IHRvIGNyZWF0ZSBoZWxwIGxheWVycyBldmVyeSBmaWx0ZXIgc3RlcC5cbiAgICAgKiBpbiB0aGlzIG9iamVjdCB0aGVyZSB3aWxsIGJlIGFwcGVuZGVkIHNvbWUgY2FudmFzZXMsIGNyZWF0ZWQgb25jZSwgcmVzaXplZCBzb21ldGltZXNcbiAgICAgKiBjbGVhcmVkIG5ldmVyLiBDbGVhcmluZyBpcyBsZWZ0IHRvIHRoZSBkZXZlbG9wZXIuXG4gICAgICoqL1xuICAgIHJlc291cmNlczoge1xuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IGEgc2V0IG9mIGZpbHRlcnMgYWdhaW5zdCBhIHNvdXJjZSBpbWFnZSBhbmQgZHJhdyB0aGUgZmlsdGVyZWQgb3V0cHV0XG4gICAgICogdG8gdGhlIHByb3ZpZGVkIGRlc3RpbmF0aW9uIGNhbnZhcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RW5oYW5jZWRGaWx0ZXJ9IGZpbHRlcnMgVGhlIGZpbHRlciB0byBhcHBseS5cbiAgICAgKiBAcGFyYW0ge0hUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR9IHNvdXJjZUVsZW1lbnQgVGhlIHNvdXJjZSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc291cmNlV2lkdGggVGhlIHdpZHRoIG9mIHRoZSBzb3VyY2UgaW5wdXQuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNvdXJjZUhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBzb3VyY2UgaW5wdXQuXG4gICAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gdGFyZ2V0Q2FudmFzIFRoZSBkZXN0aW5hdGlvbiBmb3IgZmlsdGVyZWQgb3V0cHV0IHRvIGJlIGRyYXduLlxuICAgICAqL1xuICAgIGFwcGx5RmlsdGVyczogZnVuY3Rpb24oZmlsdGVycywgc291cmNlRWxlbWVudCwgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCwgdGFyZ2V0Q2FudmFzKSB7XG4gICAgICB2YXIgY3R4ID0gdGFyZ2V0Q2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjdHguZHJhd0ltYWdlKHNvdXJjZUVsZW1lbnQsIDAsIDAsIHNvdXJjZVdpZHRoLCBzb3VyY2VIZWlnaHQpO1xuICAgICAgdmFyIGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCk7XG4gICAgICB2YXIgb3JpZ2luYWxJbWFnZURhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHNvdXJjZVdpZHRoLCBzb3VyY2VIZWlnaHQpO1xuICAgICAgdmFyIHBpcGVsaW5lU3RhdGUgPSB7XG4gICAgICAgIHNvdXJjZVdpZHRoOiBzb3VyY2VXaWR0aCxcbiAgICAgICAgc291cmNlSGVpZ2h0OiBzb3VyY2VIZWlnaHQsXG4gICAgICAgIGltYWdlRGF0YTogaW1hZ2VEYXRhLFxuICAgICAgICBvcmlnaW5hbEVsOiBzb3VyY2VFbGVtZW50LFxuICAgICAgICBvcmlnaW5hbEltYWdlRGF0YTogb3JpZ2luYWxJbWFnZURhdGEsXG4gICAgICAgIGNhbnZhc0VsOiB0YXJnZXRDYW52YXMsXG4gICAgICAgIGN0eDogY3R4LFxuICAgICAgICBmaWx0ZXJCYWNrZW5kOiB0aGlzLFxuICAgICAgfTtcbiAgICAgIGZpbHRlcnMuZm9yRWFjaChmdW5jdGlvbihmaWx0ZXIpIHsgZmlsdGVyLmFwcGx5VG8ocGlwZWxpbmVTdGF0ZSk7IH0pO1xuICAgICAgaWYgKHBpcGVsaW5lU3RhdGUuaW1hZ2VEYXRhLndpZHRoICE9PSBzb3VyY2VXaWR0aCB8fCBwaXBlbGluZVN0YXRlLmltYWdlRGF0YS5oZWlnaHQgIT09IHNvdXJjZUhlaWdodCkge1xuICAgICAgICB0YXJnZXRDYW52YXMud2lkdGggPSBwaXBlbGluZVN0YXRlLmltYWdlRGF0YS53aWR0aDtcbiAgICAgICAgdGFyZ2V0Q2FudmFzLmhlaWdodCA9IHBpcGVsaW5lU3RhdGUuaW1hZ2VEYXRhLmhlaWdodDtcbiAgICAgIH1cbiAgICAgIGN0eC5wdXRJbWFnZURhdGEocGlwZWxpbmVTdGF0ZS5pbWFnZURhdGEsIDAsIDApO1xuICAgICAgcmV0dXJuIHBpcGVsaW5lU3RhdGU7XG4gICAgfSxcblxuICB9O1xufSkoKTtcblxuXG4vKipcbiAqIEBuYW1lc3BhY2UgZmFicmljLkltYWdlLmZpbHRlcnNcbiAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2VcbiAqIEB0dXRvcmlhbCB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9mYWJyaWMtaW50cm8tcGFydC0yI2ltYWdlX2ZpbHRlcnN9XG4gKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gKi9cbmZhYnJpYy5JbWFnZSA9IGZhYnJpYy5JbWFnZSB8fCB7IH07XG5mYWJyaWMuSW1hZ2UuZmlsdGVycyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzIHx8IHsgfTtcblxuLyoqXG4gKiBSb290IGZpbHRlciBjbGFzcyBmcm9tIHdoaWNoIGFsbCBmaWx0ZXIgY2xhc3NlcyBpbmhlcml0IGZyb21cbiAqIEBjbGFzcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyXG4gKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAqL1xuZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlciA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlci5wcm90b3R5cGUgKi8ge1xuXG4gIC8qKlxuICAgKiBGaWx0ZXIgdHlwZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgdHlwZTogJ0Jhc2VGaWx0ZXInLFxuXG4gIC8qKlxuICAgKiBBcnJheSBvZiBhdHRyaWJ1dGVzIHRvIHNlbmQgd2l0aCBidWZmZXJzLiBkbyBub3QgbW9kaWZ5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHZlcnRleFNvdXJjZTogJ2F0dHJpYnV0ZSB2ZWMyIGFQb3NpdGlvbjtcXG4nICtcbiAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgJ3ZUZXhDb29yZCA9IGFQb3NpdGlvbjtcXG4nICtcbiAgICAgICdnbF9Qb3NpdGlvbiA9IHZlYzQoYVBvc2l0aW9uICogMi4wIC0gMS4wLCAwLjAsIDEuMCk7XFxuJyArXG4gICAgJ30nLFxuXG4gIGZyYWdtZW50U291cmNlOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgJ2dsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nICtcbiAgICAnfScsXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBmaWx0ZXIncyBwcm9wZXJ0aWVzIGZyb20gb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICBzZXRPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvcHRpb25zKSB7XG4gICAgICB0aGlzW3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIgcHJvZ3JhbS5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB0byB1c2UgZm9yIHNoYWRlciBjb21waWxhdGlvbi5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGZyYWdtZW50U291cmNlIGZyYWdtZW50U2hhZGVyIHNvdXJjZSBmb3IgY29tcGlsYXRpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHZlcnRleFNvdXJjZSB2ZXJ0ZXhTaGFkZXIgc291cmNlIGZvciBjb21waWxhdGlvblxuICAgKi9cbiAgY3JlYXRlUHJvZ3JhbTogZnVuY3Rpb24oZ2wsIGZyYWdtZW50U291cmNlLCB2ZXJ0ZXhTb3VyY2UpIHtcbiAgICBmcmFnbWVudFNvdXJjZSA9IGZyYWdtZW50U291cmNlIHx8IHRoaXMuZnJhZ21lbnRTb3VyY2U7XG4gICAgdmVydGV4U291cmNlID0gdmVydGV4U291cmNlIHx8IHRoaXMudmVydGV4U291cmNlO1xuICAgIGlmIChmYWJyaWMud2ViR2xQcmVjaXNpb24gIT09ICdoaWdocCcpe1xuICAgICAgZnJhZ21lbnRTb3VyY2UgPSBmcmFnbWVudFNvdXJjZS5yZXBsYWNlKFxuICAgICAgICAvcHJlY2lzaW9uIGhpZ2hwIGZsb2F0L2csXG4gICAgICAgICdwcmVjaXNpb24gJyArIGZhYnJpYy53ZWJHbFByZWNpc2lvbiArICcgZmxvYXQnXG4gICAgICApO1xuICAgIH1cbiAgICB2YXIgdmVydGV4U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpO1xuICAgIGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXIsIHZlcnRleFNvdXJjZSk7XG4gICAgZ2wuY29tcGlsZVNoYWRlcih2ZXJ0ZXhTaGFkZXIpO1xuICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHZlcnRleFNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItdGVtcGxhdGVcbiAgICAgICAgJ1ZlcnRleCBzaGFkZXIgY29tcGlsZSBlcnJvciBmb3IgJyArIHRoaXMudHlwZSArICc6ICcgK1xuICAgICAgICBnbC5nZXRTaGFkZXJJbmZvTG9nKHZlcnRleFNoYWRlcilcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGZyYWdtZW50U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUik7XG4gICAgZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVyLCBmcmFnbWVudFNvdXJjZSk7XG4gICAgZ2wuY29tcGlsZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnJhZ21lbnRTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXRlbXBsYXRlXG4gICAgICAgICdGcmFnbWVudCBzaGFkZXIgY29tcGlsZSBlcnJvciBmb3IgJyArIHRoaXMudHlwZSArICc6ICcgK1xuICAgICAgICBnbC5nZXRTaGFkZXJJbmZvTG9nKGZyYWdtZW50U2hhZGVyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci10ZW1wbGF0ZVxuICAgICAgICAnU2hhZGVyIGxpbmsgZXJyb3IgZm9yIFwiJHt0aGlzLnR5cGV9XCIgJyArXG4gICAgICAgIGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pXG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBhdHRyaWJ1dGVMb2NhdGlvbnMgPSB0aGlzLmdldEF0dHJpYnV0ZUxvY2F0aW9ucyhnbCwgcHJvZ3JhbSk7XG4gICAgdmFyIHVuaWZvcm1Mb2NhdGlvbnMgPSB0aGlzLmdldFVuaWZvcm1Mb2NhdGlvbnMoZ2wsIHByb2dyYW0pIHx8IHsgfTtcbiAgICB1bmlmb3JtTG9jYXRpb25zLnVTdGVwVyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndVN0ZXBXJyk7XG4gICAgdW5pZm9ybUxvY2F0aW9ucy51U3RlcEggPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VTdGVwSCcpO1xuICAgIHJldHVybiB7XG4gICAgICBwcm9ncmFtOiBwcm9ncmFtLFxuICAgICAgYXR0cmlidXRlTG9jYXRpb25zOiBhdHRyaWJ1dGVMb2NhdGlvbnMsXG4gICAgICB1bmlmb3JtTG9jYXRpb25zOiB1bmlmb3JtTG9jYXRpb25zXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJuIGEgbWFwIG9mIGF0dHJpYnV0ZSBuYW1lcyB0byBXZWJHTEF0dHJpYnV0ZUxvY2F0aW9uIG9iamVjdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoZSBzaGFkZXIgcHJvZ3JhbS5cbiAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhlIHNoYWRlciBwcm9ncmFtIGZyb20gd2hpY2ggdG8gdGFrZSBhdHRyaWJ1dGUgbG9jYXRpb25zLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBIG1hcCBvZiBhdHRyaWJ1dGUgbmFtZXMgdG8gYXR0cmlidXRlIGxvY2F0aW9ucy5cbiAgICovXG4gIGdldEF0dHJpYnV0ZUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgYVBvc2l0aW9uOiBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCAnYVBvc2l0aW9uJyksXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJuIGEgbWFwIG9mIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0cy5cbiAgICpcbiAgICogSW50ZW5kZWQgdG8gYmUgb3ZlcnJpZGRlbiBieSBzdWJjbGFzc2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGUgc2hhZGVyIHByb2dyYW0uXG4gICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoZSBzaGFkZXIgcHJvZ3JhbSBmcm9tIHdoaWNoIHRvIHRha2UgdW5pZm9ybSBsb2NhdGlvbnMuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEEgbWFwIG9mIHVuaWZvcm0gbmFtZXMgdG8gdW5pZm9ybSBsb2NhdGlvbnMuXG4gICAqL1xuICBnZXRVbmlmb3JtTG9jYXRpb25zOiBmdW5jdGlvbiAoLyogZ2wsIHByb2dyYW0gKi8pIHtcbiAgICAvLyBpbiBjYXNlIGkgZG8gbm90IG5lZWQgYW55IHNwZWNpYWwgdW5pZm9ybSBpIG5lZWQgdG8gcmV0dXJuIGFuIGVtcHR5IG9iamVjdFxuICAgIHJldHVybiB7IH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNlbmQgYXR0cmlidXRlIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0gb24gdGhlIEdQVS5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhlIHNoYWRlciBwcm9ncmFtLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlTG9jYXRpb25zIEEgbWFwIG9mIHNoYWRlciBhdHRyaWJ1dGUgbmFtZXMgdG8gdGhlaXIgbG9jYXRpb25zLlxuICAgKi9cbiAgc2VuZEF0dHJpYnV0ZURhdGE6IGZ1bmN0aW9uKGdsLCBhdHRyaWJ1dGVMb2NhdGlvbnMsIGFQb3NpdGlvbkRhdGEpIHtcbiAgICB2YXIgYXR0cmlidXRlTG9jYXRpb24gPSBhdHRyaWJ1dGVMb2NhdGlvbnMuYVBvc2l0aW9uO1xuICAgIHZhciBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyKTtcbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhdHRyaWJ1dGVMb2NhdGlvbik7XG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJ1dGVMb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgYVBvc2l0aW9uRGF0YSwgZ2wuU1RBVElDX0RSQVcpO1xuICB9LFxuXG4gIF9zZXR1cEZyYW1lQnVmZmVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGdsID0gb3B0aW9ucy5jb250ZXh0LCB3aWR0aCwgaGVpZ2h0O1xuICAgIGlmIChvcHRpb25zLnBhc3NlcyA+IDEpIHtcbiAgICAgIHdpZHRoID0gb3B0aW9ucy5kZXN0aW5hdGlvbldpZHRoO1xuICAgICAgaGVpZ2h0ID0gb3B0aW9ucy5kZXN0aW5hdGlvbkhlaWdodDtcbiAgICAgIGlmIChvcHRpb25zLnNvdXJjZVdpZHRoICE9PSB3aWR0aCB8fCBvcHRpb25zLnNvdXJjZUhlaWdodCAhPT0gaGVpZ2h0KSB7XG4gICAgICAgIGdsLmRlbGV0ZVRleHR1cmUob3B0aW9ucy50YXJnZXRUZXh0dXJlKTtcbiAgICAgICAgb3B0aW9ucy50YXJnZXRUZXh0dXJlID0gb3B0aW9ucy5maWx0ZXJCYWNrZW5kLmNyZWF0ZVRleHR1cmUoZ2wsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgfVxuICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELFxuICAgICAgICBvcHRpb25zLnRhcmdldFRleHR1cmUsIDApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIGRyYXcgbGFzdCBmaWx0ZXIgb24gY2FudmFzIGFuZCBub3QgdG8gZnJhbWVidWZmZXIuXG4gICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuICAgICAgZ2wuZmluaXNoKCk7XG4gICAgfVxuICB9LFxuXG4gIF9zd2FwVGV4dHVyZXM6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zLnBhc3Nlcy0tO1xuICAgIG9wdGlvbnMucGFzcysrO1xuICAgIHZhciB0ZW1wID0gb3B0aW9ucy50YXJnZXRUZXh0dXJlO1xuICAgIG9wdGlvbnMudGFyZ2V0VGV4dHVyZSA9IG9wdGlvbnMuc291cmNlVGV4dHVyZTtcbiAgICBvcHRpb25zLnNvdXJjZVRleHR1cmUgPSB0ZW1wO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZW5lcmljIGlzTmV1dHJhbCBpbXBsZW1lbnRhdGlvbiBmb3Igb25lIHBhcmFtZXRlciBiYXNlZCBmaWx0ZXJzLlxuICAgKiBVc2VkIG9ubHkgaW4gaW1hZ2UgYXBwbHlGaWx0ZXJzIHRvIGRpc2NhcmQgZmlsdGVycyB0aGF0IHdpbGwgbm90IGhhdmUgYW4gZWZmZWN0XG4gICAqIG9uIHRoZSBpbWFnZVxuICAgKiBPdGhlciBmaWx0ZXJzIG1heSBuZWVkIHRoZWlyIG93biB2ZXJzaW9uICggQ29sb3JNYXRyaXgsIEh1ZVJvdGF0aW9uLCBnYW1tYSwgQ29tcG9zZWRGaWx0ZXIgKVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiovXG4gIGlzTmV1dHJhbFN0YXRlOiBmdW5jdGlvbigvKiBvcHRpb25zICovKSB7XG4gICAgdmFyIG1haW4gPSB0aGlzLm1haW5QYXJhbWV0ZXIsXG4gICAgICAgIF9jbGFzcyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzW3RoaXMudHlwZV0ucHJvdG90eXBlO1xuICAgIGlmIChtYWluKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShfY2xhc3NbbWFpbl0pKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBfY2xhc3NbbWFpbl0ubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgaWYgKHRoaXNbbWFpbl1baV0gIT09IF9jbGFzc1ttYWluXVtpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gX2NsYXNzW21haW5dID09PSB0aGlzW21haW5dO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGx5IHRoaXMgZmlsdGVyIHRvIHRoZSBpbnB1dCBpbWFnZSBkYXRhIHByb3ZpZGVkLlxuICAgKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gdXNlIFdlYkdMIG9yIENhbnZhczJEIGJhc2VkIG9uIHRoZSBvcHRpb25zLndlYmdsIGZsYWcuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnBhc3NlcyBUaGUgbnVtYmVyIG9mIGZpbHRlcnMgcmVtYWluaW5nIHRvIGJlIGV4ZWN1dGVkXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy53ZWJnbCBXaGV0aGVyIHRvIHVzZSB3ZWJnbCB0byByZW5kZXIgdGhlIGZpbHRlci5cbiAgICogQHBhcmFtIHtXZWJHTFRleHR1cmV9IG9wdGlvbnMuc291cmNlVGV4dHVyZSBUaGUgdGV4dHVyZSBzZXR1cCBhcyB0aGUgc291cmNlIHRvIGJlIGZpbHRlcmVkLlxuICAgKiBAcGFyYW0ge1dlYkdMVGV4dHVyZX0gb3B0aW9ucy50YXJnZXRUZXh0dXJlIFRoZSB0ZXh0dXJlIHdoZXJlIGZpbHRlcmVkIG91dHB1dCBzaG91bGQgYmUgZHJhd24uXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBvcHRpb25zLmNvbnRleHQgVGhlIEdMIGNvbnRleHQgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5wcm9ncmFtQ2FjaGUgQSBtYXAgb2YgY29tcGlsZWQgc2hhZGVyIHByb2dyYW1zLCBrZXllZCBieSBmaWx0ZXIgdHlwZS5cbiAgICovXG4gIGFwcGx5VG86IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy53ZWJnbCkge1xuICAgICAgdGhpcy5fc2V0dXBGcmFtZUJ1ZmZlcihvcHRpb25zKTtcbiAgICAgIHRoaXMuYXBwbHlUb1dlYkdMKG9wdGlvbnMpO1xuICAgICAgdGhpcy5fc3dhcFRleHR1cmVzKG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuYXBwbHlUbzJkKG9wdGlvbnMpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBjYWNoZWQgc2hhZGVyLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gb3B0aW9ucy5jb250ZXh0IFRoZSBHTCBjb250ZXh0IHVzZWQgZm9yIHJlbmRlcmluZy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMucHJvZ3JhbUNhY2hlIEEgbWFwIG9mIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtcywga2V5ZWQgYnkgZmlsdGVyIHR5cGUuXG4gICAqL1xuICByZXRyaWV2ZVNoYWRlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy5wcm9ncmFtQ2FjaGUuaGFzT3duUHJvcGVydHkodGhpcy50eXBlKSkge1xuICAgICAgb3B0aW9ucy5wcm9ncmFtQ2FjaGVbdGhpcy50eXBlXSA9IHRoaXMuY3JlYXRlUHJvZ3JhbShvcHRpb25zLmNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucy5wcm9ncmFtQ2FjaGVbdGhpcy50eXBlXTtcbiAgfSxcblxuICAvKipcbiAgICogQXBwbHkgdGhpcyBmaWx0ZXIgdXNpbmcgd2ViZ2wuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnBhc3NlcyBUaGUgbnVtYmVyIG9mIGZpbHRlcnMgcmVtYWluaW5nIHRvIGJlIGV4ZWN1dGVkXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy53ZWJnbCBXaGV0aGVyIHRvIHVzZSB3ZWJnbCB0byByZW5kZXIgdGhlIGZpbHRlci5cbiAgICogQHBhcmFtIHtXZWJHTFRleHR1cmV9IG9wdGlvbnMub3JpZ2luYWxUZXh0dXJlIFRoZSB0ZXh0dXJlIG9mIHRoZSBvcmlnaW5hbCBpbnB1dCBpbWFnZS5cbiAgICogQHBhcmFtIHtXZWJHTFRleHR1cmV9IG9wdGlvbnMuc291cmNlVGV4dHVyZSBUaGUgdGV4dHVyZSBzZXR1cCBhcyB0aGUgc291cmNlIHRvIGJlIGZpbHRlcmVkLlxuICAgKiBAcGFyYW0ge1dlYkdMVGV4dHVyZX0gb3B0aW9ucy50YXJnZXRUZXh0dXJlIFRoZSB0ZXh0dXJlIHdoZXJlIGZpbHRlcmVkIG91dHB1dCBzaG91bGQgYmUgZHJhd24uXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBvcHRpb25zLmNvbnRleHQgVGhlIEdMIGNvbnRleHQgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5wcm9ncmFtQ2FjaGUgQSBtYXAgb2YgY29tcGlsZWQgc2hhZGVyIHByb2dyYW1zLCBrZXllZCBieSBmaWx0ZXIgdHlwZS5cbiAgICovXG4gIGFwcGx5VG9XZWJHTDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBnbCA9IG9wdGlvbnMuY29udGV4dDtcbiAgICB2YXIgc2hhZGVyID0gdGhpcy5yZXRyaWV2ZVNoYWRlcihvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5wYXNzID09PSAwICYmIG9wdGlvbnMub3JpZ2luYWxUZXh0dXJlKSB7XG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBvcHRpb25zLm9yaWdpbmFsVGV4dHVyZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgb3B0aW9ucy5zb3VyY2VUZXh0dXJlKTtcbiAgICB9XG4gICAgZ2wudXNlUHJvZ3JhbShzaGFkZXIucHJvZ3JhbSk7XG4gICAgdGhpcy5zZW5kQXR0cmlidXRlRGF0YShnbCwgc2hhZGVyLmF0dHJpYnV0ZUxvY2F0aW9ucywgb3B0aW9ucy5hUG9zaXRpb24pO1xuXG4gICAgZ2wudW5pZm9ybTFmKHNoYWRlci51bmlmb3JtTG9jYXRpb25zLnVTdGVwVywgMSAvIG9wdGlvbnMuc291cmNlV2lkdGgpO1xuICAgIGdsLnVuaWZvcm0xZihzaGFkZXIudW5pZm9ybUxvY2F0aW9ucy51U3RlcEgsIDEgLyBvcHRpb25zLnNvdXJjZUhlaWdodCk7XG5cbiAgICB0aGlzLnNlbmRVbmlmb3JtRGF0YShnbCwgc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnMpO1xuICAgIGdsLnZpZXdwb3J0KDAsIDAsIG9wdGlvbnMuZGVzdGluYXRpb25XaWR0aCwgb3B0aW9ucy5kZXN0aW5hdGlvbkhlaWdodCk7XG4gICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNCk7XG4gIH0sXG5cbiAgYmluZEFkZGl0aW9uYWxUZXh0dXJlOiBmdW5jdGlvbihnbCwgdGV4dHVyZSwgdGV4dHVyZVVuaXQpIHtcbiAgICBnbC5hY3RpdmVUZXh0dXJlKHRleHR1cmVVbml0KTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICAvLyByZXNldCBhY3RpdmUgdGV4dHVyZSB0byAwIGFzIHVzdWFsXG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCk7XG4gIH0sXG5cbiAgdW5iaW5kQWRkaXRpb25hbFRleHR1cmU6IGZ1bmN0aW9uKGdsLCB0ZXh0dXJlVW5pdCkge1xuICAgIGdsLmFjdGl2ZVRleHR1cmUodGV4dHVyZVVuaXQpO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xuICB9LFxuXG4gIGdldE1haW5QYXJhbWV0ZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzW3RoaXMubWFpblBhcmFtZXRlcl07XG4gIH0sXG5cbiAgc2V0TWFpblBhcmFtZXRlcjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB0aGlzW3RoaXMubWFpblBhcmFtZXRlcl0gPSB2YWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogU2VuZCB1bmlmb3JtIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0gb24gdGhlIEdQVS5cbiAgICpcbiAgICogSW50ZW5kZWQgdG8gYmUgb3ZlcnJpZGRlbiBieSBzdWJjbGFzc2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGUgc2hhZGVyIHByb2dyYW0uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHNoYWRlciB1bmlmb3JtIG5hbWVzIHRvIHRoZWlyIGxvY2F0aW9ucy5cbiAgICovXG4gIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oLyogZ2wsIHVuaWZvcm1Mb2NhdGlvbnMgKi8pIHtcbiAgICAvLyBJbnRlbnRpb25hbGx5IGxlZnQgYmxhbmsuICBPdmVycmlkZSBtZSBpbiBzdWJjbGFzc2VzLlxuICB9LFxuXG4gIC8qKlxuICAgKiBJZiBuZWVkZWQgYnkgYSAyZCBmaWx0ZXIsIHRoaXMgZnVuY3Rpb25zIGNhbiBjcmVhdGUgYW4gaGVscGVyIGNhbnZhcyB0byBiZSB1c2VkXG4gICAqIHJlbWVtYmVyIHRoYXQgb3B0aW9ucy50YXJnZXRDYW52YXMgaXMgYXZhaWxhYmxlIGZvciB1c2UgdGlsbCBlbmQgb2YgY2hhaW4uXG4gICAqL1xuICBjcmVhdGVIZWxwTGF5ZXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMuaGVscExheWVyKSB7XG4gICAgICB2YXIgaGVscExheWVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICBoZWxwTGF5ZXIud2lkdGggPSBvcHRpb25zLnNvdXJjZVdpZHRoO1xuICAgICAgaGVscExheWVyLmhlaWdodCA9IG9wdGlvbnMuc291cmNlSGVpZ2h0O1xuICAgICAgb3B0aW9ucy5oZWxwTGF5ZXIgPSBoZWxwTGF5ZXI7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgKi9cbiAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmplY3QgPSB7IHR5cGU6IHRoaXMudHlwZSB9LCBtYWluUCA9IHRoaXMubWFpblBhcmFtZXRlcjtcbiAgICBpZiAobWFpblApIHtcbiAgICAgIG9iamVjdFttYWluUF0gPSB0aGlzW21haW5QXTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICogQHJldHVybiB7T2JqZWN0fSBKU09OXG4gICAqL1xuICB0b0pTT046IGZ1bmN0aW9uKCkge1xuICAgIC8vIGRlbGVnYXRlLCBub3QgYWxpYXNcbiAgICByZXR1cm4gdGhpcy50b09iamVjdCgpO1xuICB9XG59KTtcblxuZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlci5mcm9tT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0LCBjYWxsYmFjaykge1xuICB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzW29iamVjdC50eXBlXShvYmplY3QpO1xuICBjYWxsYmFjayAmJiBjYWxsYmFjayhmaWx0ZXIpO1xuICByZXR1cm4gZmlsdGVyO1xufTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBDb2xvciBNYXRyaXggZmlsdGVyIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db2xvck1hdHJpeFxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db2xvck1hdHJpeCNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gICAqIEBzZWUge0BMaW5rIGh0dHA6Ly93d3cud2Vid2FzcC5jby51ay90dXRvcmlhbHMvMjE5L0NvbG9yX01hdHJpeF9GaWx0ZXIucGhwfVxuICAgKiBAc2VlIHtATGluayBodHRwOi8vcGhvYm9zbGFiLm9yZy9sb2cvMjAxMy8xMS9mYXN0LWltYWdlLWZpbHRlcnMtd2l0aC13ZWJnbH1cbiAgICogQGV4YW1wbGUgPGNhcHRpb24+S29kYWNocm9tZSBmaWx0ZXI8L2NhcHRpb24+XG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuQ29sb3JNYXRyaXgoe1xuICAgKiAgbWF0cml4OiBbXG4gICAgICAgMS4xMjg1NTgyMzk2NTkzNTI1LCAtMC4zOTY3MzgyMjgzNjAxMzQ4LCAtMC4wMzk5MjU1OTE3MjkyMTc5MywgMCwgNjMuNzI5NTg3NjIxOTY1MDIsXG4gICAgICAgLTAuMTY0MDQzMzk5NjIyNDQ2MTYsIDEuMDgzNTI1MTU2NjI5MTMwNCwgLTAuMDU0OTg4MDUxMTU2MzMxMzIsIDAsIDI0LjczMjQwNzg5NjcwNjIwMyxcbiAgICAgICAtMC4xNjc4NjAxMDcwNjE1NTc2MywgLTAuNTYwMzQxNjI3NzY5NTI0OCwgMS42MDE0ODUwNzYxOTY0OTQzLCAwLCAzNS42Mjk4MjgwNzQ2MDk0NixcbiAgICAgICAwLCAwLCAwLCAxLCAwXG4gICAgICBdXG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICovXG4gIGZpbHRlcnMuQ29sb3JNYXRyaXggPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQ29sb3JNYXRyaXgucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdDb2xvck1hdHJpeCcsXG5cbiAgICBmcmFnbWVudFNvdXJjZTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgJ3VuaWZvcm0gbWF0NCB1Q29sb3JNYXRyaXg7XFxuJyArXG4gICAgICAndW5pZm9ybSB2ZWM0IHVDb25zdGFudHM7XFxuJyArXG4gICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAndmVjNCBjb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nICtcbiAgICAgICAgJ2NvbG9yICo9IHVDb2xvck1hdHJpeDtcXG4nICtcbiAgICAgICAgJ2NvbG9yICs9IHVDb25zdGFudHM7XFxuJyArXG4gICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICd9JyxcblxuICAgIC8qKlxuICAgICAqIENvbG9ybWF0cml4IGZvciBwaXhlbHMuXG4gICAgICogYXJyYXkgb2YgMjAgZmxvYXRzLiBOdW1iZXJzIGluIHBvc2l0aW9ucyA0LCA5LCAxNCwgMTkgbG9vc2UgbWVhbmluZ1xuICAgICAqIG91dHNpZGUgdGhlIC0xLCAxIHJhbmdlLlxuICAgICAqIDAuMDAzOTIxNTY4NiBpcyB0aGUgcGFydCBvZiAxIHRoYXQgZ2V0IHRyYW5zbGF0ZWQgdG8gMSBpbiAyZFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdHJpeCBhcnJheSBvZiAyMCBudW1iZXJzLlxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbWF0cml4OiBbXG4gICAgICAxLCAwLCAwLCAwLCAwLFxuICAgICAgMCwgMSwgMCwgMCwgMCxcbiAgICAgIDAsIDAsIDEsIDAsIDAsXG4gICAgICAwLCAwLCAwLCAxLCAwXG4gICAgXSxcblxuICAgIG1haW5QYXJhbWV0ZXI6ICdtYXRyaXgnLFxuXG4gICAgLyoqXG4gICAgICogTG9jayB0aGUgY29sb3JtYXRyaXggb24gdGhlIGNvbG9yIHBhcnQsIHNraXBwaW5nIGFscGhhLCBtYWlubHkgZm9yIG5vbiB3ZWJnbCBzY2VuYXJpb1xuICAgICAqIHRvIHNhdmUgc29tZSBjYWxjdWxhdGlvblxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgY29sb3JzT25seTogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdpbml0aWFsaXplJywgb3B0aW9ucyk7XG4gICAgICAvLyBjcmVhdGUgYSBuZXcgYXJyYXkgaW5zdGVhZCBtdXRhdGluZyB0aGUgcHJvdG90eXBlIHdpdGggcHVzaFxuICAgICAgdGhpcy5tYXRyaXggPSB0aGlzLm1hdHJpeC5zbGljZSgwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgdGhlIENvbG9yTWF0cml4IG9wZXJhdGlvbiB0byBhIFVpbnQ4QXJyYXkgcmVwcmVzZW50aW5nIHRoZSBwaXhlbHMgb2YgYW4gaW1hZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7SW1hZ2VEYXRhfSBvcHRpb25zLmltYWdlRGF0YSBUaGUgVWludDhBcnJheSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgKi9cbiAgICBhcHBseVRvMmQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBpbWFnZURhdGEgPSBvcHRpb25zLmltYWdlRGF0YSxcbiAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgaUxlbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIG0gPSB0aGlzLm1hdHJpeCxcbiAgICAgICAgICByLCBnLCBiLCBhLCBpLCBjb2xvcnNPbmx5ID0gdGhpcy5jb2xvcnNPbmx5O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgaUxlbjsgaSArPSA0KSB7XG4gICAgICAgIHIgPSBkYXRhW2ldO1xuICAgICAgICBnID0gZGF0YVtpICsgMV07XG4gICAgICAgIGIgPSBkYXRhW2kgKyAyXTtcbiAgICAgICAgaWYgKGNvbG9yc09ubHkpIHtcbiAgICAgICAgICBkYXRhW2ldID0gciAqIG1bMF0gKyBnICogbVsxXSArIGIgKiBtWzJdICsgbVs0XSAqIDI1NTtcbiAgICAgICAgICBkYXRhW2kgKyAxXSA9IHIgKiBtWzVdICsgZyAqIG1bNl0gKyBiICogbVs3XSArIG1bOV0gKiAyNTU7XG4gICAgICAgICAgZGF0YVtpICsgMl0gPSByICogbVsxMF0gKyBnICogbVsxMV0gKyBiICogbVsxMl0gKyBtWzE0XSAqIDI1NTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhID0gZGF0YVtpICsgM107XG4gICAgICAgICAgZGF0YVtpXSA9IHIgKiBtWzBdICsgZyAqIG1bMV0gKyBiICogbVsyXSArIGEgKiBtWzNdICsgbVs0XSAqIDI1NTtcbiAgICAgICAgICBkYXRhW2kgKyAxXSA9IHIgKiBtWzVdICsgZyAqIG1bNl0gKyBiICogbVs3XSArIGEgKiBtWzhdICsgbVs5XSAqIDI1NTtcbiAgICAgICAgICBkYXRhW2kgKyAyXSA9IHIgKiBtWzEwXSArIGcgKiBtWzExXSArIGIgKiBtWzEyXSArIGEgKiBtWzEzXSArIG1bMTRdICogMjU1O1xuICAgICAgICAgIGRhdGFbaSArIDNdID0gciAqIG1bMTVdICsgZyAqIG1bMTZdICsgYiAqIG1bMTddICsgYSAqIG1bMThdICsgbVsxOV0gKiAyNTU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFdlYkdMIHVuaWZvcm0gbG9jYXRpb25zIGZvciB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoaXMgZmlsdGVyJ3MgY29tcGlsZWQgc2hhZGVyIHByb2dyYW0uXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVDb2xvck1hdHJpeDogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1Q29sb3JNYXRyaXgnKSxcbiAgICAgICAgdUNvbnN0YW50czogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1Q29uc3RhbnRzJyksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0ncyB1bmlmb3Jtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHN0cmluZyB1bmlmb3JtIG5hbWVzIHRvIFdlYkdMVW5pZm9ybUxvY2F0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBzZW5kVW5pZm9ybURhdGE6IGZ1bmN0aW9uKGdsLCB1bmlmb3JtTG9jYXRpb25zKSB7XG4gICAgICB2YXIgbSA9IHRoaXMubWF0cml4LFxuICAgICAgICAgIG1hdHJpeCA9IFtcbiAgICAgICAgICAgIG1bMF0sIG1bMV0sIG1bMl0sIG1bM10sXG4gICAgICAgICAgICBtWzVdLCBtWzZdLCBtWzddLCBtWzhdLFxuICAgICAgICAgICAgbVsxMF0sIG1bMTFdLCBtWzEyXSwgbVsxM10sXG4gICAgICAgICAgICBtWzE1XSwgbVsxNl0sIG1bMTddLCBtWzE4XVxuICAgICAgICAgIF0sXG4gICAgICAgICAgY29uc3RhbnRzID0gW21bNF0sIG1bOV0sIG1bMTRdLCBtWzE5XV07XG4gICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHVuaWZvcm1Mb2NhdGlvbnMudUNvbG9yTWF0cml4LCBmYWxzZSwgbWF0cml4KTtcbiAgICAgIGdsLnVuaWZvcm00ZnYodW5pZm9ybUxvY2F0aW9ucy51Q29uc3RhbnRzLCBjb25zdGFudHMpO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZpbHRlciBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gZnVuY3Rpb24gdG8gaW52b2tlIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db2xvck1hdHJpeH0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuQ29sb3JNYXRyaXhcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbG9yTWF0cml4LmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljICA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZmlsdGVycyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLFxuICAgICAgY3JlYXRlQ2xhc3MgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcztcblxuICAvKipcbiAgICogQnJpZ2h0bmVzcyBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJyaWdodG5lc3NcbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLkltYWdlLmZpbHRlcnMuQnJpZ2h0bmVzcyNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuQnJpZ2h0bmVzcyh7XG4gICAqICAgYnJpZ2h0bmVzczogMC4wNVxuICAgKiB9KTtcbiAgICogb2JqZWN0LmZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgKiBvYmplY3QuYXBwbHlGaWx0ZXJzKCk7XG4gICAqL1xuICBmaWx0ZXJzLkJyaWdodG5lc3MgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQnJpZ2h0bmVzcy5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHR5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ0JyaWdodG5lc3MnLFxuXG4gICAgLyoqXG4gICAgICogRnJhZ21lbnQgc291cmNlIGZvciB0aGUgYnJpZ2h0bmVzcyBwcm9ncmFtXG4gICAgICovXG4gICAgZnJhZ21lbnRTb3VyY2U6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAndW5pZm9ybSBmbG9hdCB1QnJpZ2h0bmVzcztcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJyArXG4gICAgICAgICdjb2xvci5yZ2IgKz0gdUJyaWdodG5lc3M7XFxuJyArXG4gICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICd9JyxcblxuICAgIC8qKlxuICAgICAqIEJyaWdodG5lc3MgdmFsdWUsIGZyb20gLTEgdG8gMS5cbiAgICAgKiB0cmFuc2xhdGVkIHRvIC0yNTUgdG8gMjU1IGZvciAyZFxuICAgICAqIDAuMDAzOTIxNTY4NiBpcyB0aGUgcGFydCBvZiAxIHRoYXQgZ2V0IHRyYW5zbGF0ZWQgdG8gMSBpbiAyZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBicmlnaHRuZXNzXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBicmlnaHRuZXNzOiAwLFxuXG4gICAgLyoqXG4gICAgICogRGVzY3JpYmUgdGhlIHByb3BlcnR5IHRoYXQgaXMgdGhlIGZpbHRlciBwYXJhbWV0ZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbWFpblBhcmFtZXRlcjogJ2JyaWdodG5lc3MnLFxuXG4gICAgLyoqXG4gICAgKiBBcHBseSB0aGUgQnJpZ2h0bmVzcyBvcGVyYXRpb24gdG8gYSBVaW50OENsYW1wZWRBcnJheSByZXByZXNlbnRpbmcgdGhlIHBpeGVscyBvZiBhbiBpbWFnZS5cbiAgICAqXG4gICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICogQHBhcmFtIHtJbWFnZURhdGF9IG9wdGlvbnMuaW1hZ2VEYXRhIFRoZSBVaW50OENsYW1wZWRBcnJheSB0byBiZSBmaWx0ZXJlZC5cbiAgICAqL1xuICAgIGFwcGx5VG8yZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKHRoaXMuYnJpZ2h0bmVzcyA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsXG4gICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLCBpLCBsZW4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICBicmlnaHRuZXNzID0gTWF0aC5yb3VuZCh0aGlzLmJyaWdodG5lc3MgKiAyNTUpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgIGRhdGFbaV0gPSBkYXRhW2ldICsgYnJpZ2h0bmVzcztcbiAgICAgICAgZGF0YVtpICsgMV0gPSBkYXRhW2kgKyAxXSArIGJyaWdodG5lc3M7XG4gICAgICAgIGRhdGFbaSArIDJdID0gZGF0YVtpICsgMl0gKyBicmlnaHRuZXNzO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gV2ViR0wgdW5pZm9ybSBsb2NhdGlvbnMgZm9yIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhpcyBmaWx0ZXIncyBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBnZXRVbmlmb3JtTG9jYXRpb25zOiBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdUJyaWdodG5lc3M6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndUJyaWdodG5lc3MnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIGdsLnVuaWZvcm0xZih1bmlmb3JtTG9jYXRpb25zLnVCcmlnaHRuZXNzLCB0aGlzLmJyaWdodG5lc3MpO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZpbHRlciBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gdG8gYmUgaW52b2tlZCBhZnRlciBmaWx0ZXIgY3JlYXRpb25cbiAgICogQHJldHVybiB7ZmFicmljLkltYWdlLmZpbHRlcnMuQnJpZ2h0bmVzc30gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuQnJpZ2h0bmVzc1xuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuQnJpZ2h0bmVzcy5mcm9tT2JqZWN0ID0gZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlci5mcm9tT2JqZWN0O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljICA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZXh0ZW5kID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIEFkYXB0ZWQgZnJvbSA8YSBocmVmPVwiaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvY2FudmFzL2ltYWdlZmlsdGVycy9cIj5odG1sNXJvY2tzIGFydGljbGU8L2E+XG4gICAqIEBjbGFzcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGVcbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLkltYWdlLmZpbHRlcnMuQ29udm9sdXRlI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vaW1hZ2UtZmlsdGVyc3xJbWFnZUZpbHRlcnMgZGVtb31cbiAgICogQGV4YW1wbGUgPGNhcHRpb24+U2hhcnBlbiBmaWx0ZXI8L2NhcHRpb24+XG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuQ29udm9sdXRlKHtcbiAgICogICBtYXRyaXg6IFsgMCwgLTEsICAwLFxuICAgKiAgICAgICAgICAgIC0xLCAgNSwgLTEsXG4gICAqICAgICAgICAgICAgIDAsIC0xLCAgMCBdXG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICogY2FudmFzLnJlbmRlckFsbCgpO1xuICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5CbHVyIGZpbHRlcjwvY2FwdGlvbj5cbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGUoe1xuICAgKiAgIG1hdHJpeDogWyAxLzksIDEvOSwgMS85LFxuICAgKiAgICAgICAgICAgICAxLzksIDEvOSwgMS85LFxuICAgKiAgICAgICAgICAgICAxLzksIDEvOSwgMS85IF1cbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKiBjYW52YXMucmVuZGVyQWxsKCk7XG4gICAqIEBleGFtcGxlIDxjYXB0aW9uPkVtYm9zcyBmaWx0ZXI8L2NhcHRpb24+XG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuQ29udm9sdXRlKHtcbiAgICogICBtYXRyaXg6IFsgMSwgICAxLCAgMSxcbiAgICogICAgICAgICAgICAgMSwgMC43LCAtMSxcbiAgICogICAgICAgICAgICAtMSwgIC0xLCAtMSBdXG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICogY2FudmFzLnJlbmRlckFsbCgpO1xuICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5FbWJvc3MgZmlsdGVyIHdpdGggb3BhcXVlbmVzczwvY2FwdGlvbj5cbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGUoe1xuICAgKiAgIG9wYXF1ZTogdHJ1ZSxcbiAgICogICBtYXRyaXg6IFsgMSwgICAxLCAgMSxcbiAgICogICAgICAgICAgICAgMSwgMC43LCAtMSxcbiAgICogICAgICAgICAgICAtMSwgIC0xLCAtMSBdXG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICogY2FudmFzLnJlbmRlckFsbCgpO1xuICAgKi9cbiAgZmlsdGVycy5Db252b2x1dGUgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQ29udm9sdXRlLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnQ29udm9sdXRlJyxcblxuICAgIC8qXG4gICAgICogT3BhcXVlIHZhbHVlICh0cnVlL2ZhbHNlKVxuICAgICAqL1xuICAgIG9wYXF1ZTogZmFsc2UsXG5cbiAgICAvKlxuICAgICAqIG1hdHJpeCBmb3IgdGhlIGZpbHRlciwgbWF4IDl4OVxuICAgICAqL1xuICAgIG1hdHJpeDogWzAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDBdLFxuXG4gICAgLyoqXG4gICAgICogRnJhZ21lbnQgc291cmNlIGZvciB0aGUgYnJpZ2h0bmVzcyBwcm9ncmFtXG4gICAgICovXG4gICAgZnJhZ21lbnRTb3VyY2U6IHtcbiAgICAgIENvbnZvbHV0ZV8zXzE6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdU1hdHJpeFs5XTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVN0ZXBXO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcEg7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yID0gdmVjNCgwLCAwLCAwLCAwKTtcXG4nICtcbiAgICAgICAgICAnZm9yIChmbG9hdCBoID0gMC4wOyBoIDwgMy4wOyBoKz0xLjApIHtcXG4nICtcbiAgICAgICAgICAgICdmb3IgKGZsb2F0IHcgPSAwLjA7IHcgPCAzLjA7IHcrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgICAndmVjMiBtYXRyaXhQb3MgPSB2ZWMyKHVTdGVwVyAqICh3IC0gMSksIHVTdGVwSCAqIChoIC0gMSkpO1xcbicgK1xuICAgICAgICAgICAgICAnY29sb3IgKz0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQgKyBtYXRyaXhQb3MpICogdU1hdHJpeFtpbnQoaCAqIDMuMCArIHcpXTtcXG4nICtcbiAgICAgICAgICAgICd9XFxuJyArXG4gICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAgICd9JyxcbiAgICAgIENvbnZvbHV0ZV8zXzA6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdU1hdHJpeFs5XTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVN0ZXBXO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcEg7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yID0gdmVjNCgwLCAwLCAwLCAxKTtcXG4nICtcbiAgICAgICAgICAnZm9yIChmbG9hdCBoID0gMC4wOyBoIDwgMy4wOyBoKz0xLjApIHtcXG4nICtcbiAgICAgICAgICAgICdmb3IgKGZsb2F0IHcgPSAwLjA7IHcgPCAzLjA7IHcrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgICAndmVjMiBtYXRyaXhQb3MgPSB2ZWMyKHVTdGVwVyAqICh3IC0gMS4wKSwgdVN0ZXBIICogKGggLSAxLjApKTtcXG4nICtcbiAgICAgICAgICAgICAgJ2NvbG9yLnJnYiArPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCArIG1hdHJpeFBvcykucmdiICogdU1hdHJpeFtpbnQoaCAqIDMuMCArIHcpXTtcXG4nICtcbiAgICAgICAgICAgICd9XFxuJyArXG4gICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnZmxvYXQgYWxwaGEgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCkuYTtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvci5hID0gYWxwaGE7XFxuJyArXG4gICAgICAgICd9JyxcbiAgICAgIENvbnZvbHV0ZV81XzE6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdU1hdHJpeFsyNV07XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGZsb2F0IHVTdGVwVztcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVN0ZXBIO1xcbicgK1xuICAgICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgICAndmVjNCBjb2xvciA9IHZlYzQoMCwgMCwgMCwgMCk7XFxuJyArXG4gICAgICAgICAgJ2ZvciAoZmxvYXQgaCA9IDAuMDsgaCA8IDUuMDsgaCs9MS4wKSB7XFxuJyArXG4gICAgICAgICAgICAnZm9yIChmbG9hdCB3ID0gMC4wOyB3IDwgNS4wOyB3Kz0xLjApIHtcXG4nICtcbiAgICAgICAgICAgICAgJ3ZlYzIgbWF0cml4UG9zID0gdmVjMih1U3RlcFcgKiAodyAtIDIuMCksIHVTdGVwSCAqIChoIC0gMi4wKSk7XFxuJyArXG4gICAgICAgICAgICAgICdjb2xvciArPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCArIG1hdHJpeFBvcykgKiB1TWF0cml4W2ludChoICogNS4wICsgdyldO1xcbicgK1xuICAgICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICAgJ30nLFxuICAgICAgQ29udm9sdXRlXzVfMDogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1TWF0cml4WzI1XTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVN0ZXBXO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcEg7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yID0gdmVjNCgwLCAwLCAwLCAxKTtcXG4nICtcbiAgICAgICAgICAnZm9yIChmbG9hdCBoID0gMC4wOyBoIDwgNS4wOyBoKz0xLjApIHtcXG4nICtcbiAgICAgICAgICAgICdmb3IgKGZsb2F0IHcgPSAwLjA7IHcgPCA1LjA7IHcrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgICAndmVjMiBtYXRyaXhQb3MgPSB2ZWMyKHVTdGVwVyAqICh3IC0gMi4wKSwgdVN0ZXBIICogKGggLSAyLjApKTtcXG4nICtcbiAgICAgICAgICAgICAgJ2NvbG9yLnJnYiArPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCArIG1hdHJpeFBvcykucmdiICogdU1hdHJpeFtpbnQoaCAqIDUuMCArIHcpXTtcXG4nICtcbiAgICAgICAgICAgICd9XFxuJyArXG4gICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnZmxvYXQgYWxwaGEgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCkuYTtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvci5hID0gYWxwaGE7XFxuJyArXG4gICAgICAgICd9JyxcbiAgICAgIENvbnZvbHV0ZV83XzE6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdU1hdHJpeFs0OV07XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGZsb2F0IHVTdGVwVztcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVN0ZXBIO1xcbicgK1xuICAgICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgICAndmVjNCBjb2xvciA9IHZlYzQoMCwgMCwgMCwgMCk7XFxuJyArXG4gICAgICAgICAgJ2ZvciAoZmxvYXQgaCA9IDAuMDsgaCA8IDcuMDsgaCs9MS4wKSB7XFxuJyArXG4gICAgICAgICAgICAnZm9yIChmbG9hdCB3ID0gMC4wOyB3IDwgNy4wOyB3Kz0xLjApIHtcXG4nICtcbiAgICAgICAgICAgICAgJ3ZlYzIgbWF0cml4UG9zID0gdmVjMih1U3RlcFcgKiAodyAtIDMuMCksIHVTdGVwSCAqIChoIC0gMy4wKSk7XFxuJyArXG4gICAgICAgICAgICAgICdjb2xvciArPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCArIG1hdHJpeFBvcykgKiB1TWF0cml4W2ludChoICogNy4wICsgdyldO1xcbicgK1xuICAgICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICAgJ30nLFxuICAgICAgQ29udm9sdXRlXzdfMDogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1TWF0cml4WzQ5XTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVN0ZXBXO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcEg7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yID0gdmVjNCgwLCAwLCAwLCAxKTtcXG4nICtcbiAgICAgICAgICAnZm9yIChmbG9hdCBoID0gMC4wOyBoIDwgNy4wOyBoKz0xLjApIHtcXG4nICtcbiAgICAgICAgICAgICdmb3IgKGZsb2F0IHcgPSAwLjA7IHcgPCA3LjA7IHcrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgICAndmVjMiBtYXRyaXhQb3MgPSB2ZWMyKHVTdGVwVyAqICh3IC0gMy4wKSwgdVN0ZXBIICogKGggLSAzLjApKTtcXG4nICtcbiAgICAgICAgICAgICAgJ2NvbG9yLnJnYiArPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCArIG1hdHJpeFBvcykucmdiICogdU1hdHJpeFtpbnQoaCAqIDcuMCArIHcpXTtcXG4nICtcbiAgICAgICAgICAgICd9XFxuJyArXG4gICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnZmxvYXQgYWxwaGEgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCkuYTtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvci5hID0gYWxwaGE7XFxuJyArXG4gICAgICAgICd9JyxcbiAgICAgIENvbnZvbHV0ZV85XzE6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdU1hdHJpeFs4MV07XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGZsb2F0IHVTdGVwVztcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVN0ZXBIO1xcbicgK1xuICAgICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgICAndmVjNCBjb2xvciA9IHZlYzQoMCwgMCwgMCwgMCk7XFxuJyArXG4gICAgICAgICAgJ2ZvciAoZmxvYXQgaCA9IDAuMDsgaCA8IDkuMDsgaCs9MS4wKSB7XFxuJyArXG4gICAgICAgICAgICAnZm9yIChmbG9hdCB3ID0gMC4wOyB3IDwgOS4wOyB3Kz0xLjApIHtcXG4nICtcbiAgICAgICAgICAgICAgJ3ZlYzIgbWF0cml4UG9zID0gdmVjMih1U3RlcFcgKiAodyAtIDQuMCksIHVTdGVwSCAqIChoIC0gNC4wKSk7XFxuJyArXG4gICAgICAgICAgICAgICdjb2xvciArPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCArIG1hdHJpeFBvcykgKiB1TWF0cml4W2ludChoICogOS4wICsgdyldO1xcbicgK1xuICAgICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICAgJ30nLFxuICAgICAgQ29udm9sdXRlXzlfMDogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1TWF0cml4WzgxXTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVN0ZXBXO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcEg7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yID0gdmVjNCgwLCAwLCAwLCAxKTtcXG4nICtcbiAgICAgICAgICAnZm9yIChmbG9hdCBoID0gMC4wOyBoIDwgOS4wOyBoKz0xLjApIHtcXG4nICtcbiAgICAgICAgICAgICdmb3IgKGZsb2F0IHcgPSAwLjA7IHcgPCA5LjA7IHcrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgICAndmVjMiBtYXRyaXhQb3MgPSB2ZWMyKHVTdGVwVyAqICh3IC0gNC4wKSwgdVN0ZXBIICogKGggLSA0LjApKTtcXG4nICtcbiAgICAgICAgICAgICAgJ2NvbG9yLnJnYiArPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCArIG1hdHJpeFBvcykucmdiICogdU1hdHJpeFtpbnQoaCAqIDkuMCArIHcpXTtcXG4nICtcbiAgICAgICAgICAgICd9XFxuJyArXG4gICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnZmxvYXQgYWxwaGEgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCkuYTtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvci5hID0gYWxwaGE7XFxuJyArXG4gICAgICAgICd9JyxcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnMuQ29udm9sdXRlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm9wYXF1ZT1mYWxzZV0gT3BhcXVlIHZhbHVlICh0cnVlL2ZhbHNlKVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLm1hdHJpeF0gRmlsdGVyIG1hdHJpeFxuICAgICAqL1xuXG5cbiAgICAvKipcbiAgICAqIFJldHJpZXZlcyB0aGUgY2FjaGVkIHNoYWRlci5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gb3B0aW9ucy5jb250ZXh0IFRoZSBHTCBjb250ZXh0IHVzZWQgZm9yIHJlbmRlcmluZy5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnByb2dyYW1DYWNoZSBBIG1hcCBvZiBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbXMsIGtleWVkIGJ5IGZpbHRlciB0eXBlLlxuICAgICovXG4gICAgcmV0cmlldmVTaGFkZXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBzaXplID0gTWF0aC5zcXJ0KHRoaXMubWF0cml4Lmxlbmd0aCk7XG4gICAgICB2YXIgY2FjaGVLZXkgPSB0aGlzLnR5cGUgKyAnXycgKyBzaXplICsgJ18nICsgKHRoaXMub3BhcXVlID8gMSA6IDApO1xuICAgICAgdmFyIHNoYWRlclNvdXJjZSA9IHRoaXMuZnJhZ21lbnRTb3VyY2VbY2FjaGVLZXldO1xuICAgICAgaWYgKCFvcHRpb25zLnByb2dyYW1DYWNoZS5oYXNPd25Qcm9wZXJ0eShjYWNoZUtleSkpIHtcbiAgICAgICAgb3B0aW9ucy5wcm9ncmFtQ2FjaGVbY2FjaGVLZXldID0gdGhpcy5jcmVhdGVQcm9ncmFtKG9wdGlvbnMuY29udGV4dCwgc2hhZGVyU291cmNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25zLnByb2dyYW1DYWNoZVtjYWNoZUtleV07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoZSBCcmlnaHRuZXNzIG9wZXJhdGlvbiB0byBhIFVpbnQ4Q2xhbXBlZEFycmF5IHJlcHJlc2VudGluZyB0aGUgcGl4ZWxzIG9mIGFuIGltYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0ltYWdlRGF0YX0gb3B0aW9ucy5pbWFnZURhdGEgVGhlIFVpbnQ4Q2xhbXBlZEFycmF5IHRvIGJlIGZpbHRlcmVkLlxuICAgICAqL1xuICAgIGFwcGx5VG8yZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGltYWdlRGF0YSA9IG9wdGlvbnMuaW1hZ2VEYXRhLFxuICAgICAgICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YSxcbiAgICAgICAgICB3ZWlnaHRzID0gdGhpcy5tYXRyaXgsXG4gICAgICAgICAgc2lkZSA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KHdlaWdodHMubGVuZ3RoKSksXG4gICAgICAgICAgaGFsZlNpZGUgPSBNYXRoLmZsb29yKHNpZGUgLyAyKSxcbiAgICAgICAgICBzdyA9IGltYWdlRGF0YS53aWR0aCxcbiAgICAgICAgICBzaCA9IGltYWdlRGF0YS5oZWlnaHQsXG4gICAgICAgICAgb3V0cHV0ID0gb3B0aW9ucy5jdHguY3JlYXRlSW1hZ2VEYXRhKHN3LCBzaCksXG4gICAgICAgICAgZHN0ID0gb3V0cHV0LmRhdGEsXG4gICAgICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgZGVzdGluYXRpb24gaW1hZ2UgcGl4ZWxzXG4gICAgICAgICAgYWxwaGFGYWMgPSB0aGlzLm9wYXF1ZSA/IDEgOiAwLFxuICAgICAgICAgIHIsIGcsIGIsIGEsIGRzdE9mZixcbiAgICAgICAgICBzY3gsIHNjeSwgc3JjT2ZmLCB3dCxcbiAgICAgICAgICB4LCB5LCBjeCwgY3k7XG5cbiAgICAgIGZvciAoeSA9IDA7IHkgPCBzaDsgeSsrKSB7XG4gICAgICAgIGZvciAoeCA9IDA7IHggPCBzdzsgeCsrKSB7XG4gICAgICAgICAgZHN0T2ZmID0gKHkgKiBzdyArIHgpICogNDtcbiAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHdlaWdoZWQgc3VtIG9mIHRoZSBzb3VyY2UgaW1hZ2UgcGl4ZWxzIHRoYXRcbiAgICAgICAgICAvLyBmYWxsIHVuZGVyIHRoZSBjb252b2x1dGlvbiBtYXRyaXhcbiAgICAgICAgICByID0gMDsgZyA9IDA7IGIgPSAwOyBhID0gMDtcblxuICAgICAgICAgIGZvciAoY3kgPSAwOyBjeSA8IHNpZGU7IGN5KyspIHtcbiAgICAgICAgICAgIGZvciAoY3ggPSAwOyBjeCA8IHNpZGU7IGN4KyspIHtcbiAgICAgICAgICAgICAgc2N5ID0geSArIGN5IC0gaGFsZlNpZGU7XG4gICAgICAgICAgICAgIHNjeCA9IHggKyBjeCAtIGhhbGZTaWRlO1xuXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtZGVwdGhcbiAgICAgICAgICAgICAgaWYgKHNjeSA8IDAgfHwgc2N5ID49IHNoIHx8IHNjeCA8IDAgfHwgc2N4ID49IHN3KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzcmNPZmYgPSAoc2N5ICogc3cgKyBzY3gpICogNDtcbiAgICAgICAgICAgICAgd3QgPSB3ZWlnaHRzW2N5ICogc2lkZSArIGN4XTtcblxuICAgICAgICAgICAgICByICs9IGRhdGFbc3JjT2ZmXSAqIHd0O1xuICAgICAgICAgICAgICBnICs9IGRhdGFbc3JjT2ZmICsgMV0gKiB3dDtcbiAgICAgICAgICAgICAgYiArPSBkYXRhW3NyY09mZiArIDJdICogd3Q7XG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtZGVwdGhcbiAgICAgICAgICAgICAgaWYgKCFhbHBoYUZhYykge1xuICAgICAgICAgICAgICAgIGEgKz0gZGF0YVtzcmNPZmYgKyAzXSAqIHd0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGRzdFtkc3RPZmZdID0gcjtcbiAgICAgICAgICBkc3RbZHN0T2ZmICsgMV0gPSBnO1xuICAgICAgICAgIGRzdFtkc3RPZmYgKyAyXSA9IGI7XG4gICAgICAgICAgaWYgKCFhbHBoYUZhYykge1xuICAgICAgICAgICAgZHN0W2RzdE9mZiArIDNdID0gYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkc3RbZHN0T2ZmICsgM10gPSBkYXRhW2RzdE9mZiArIDNdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3B0aW9ucy5pbWFnZURhdGEgPSBvdXRwdXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBXZWJHTCB1bmlmb3JtIGxvY2F0aW9ucyBmb3IgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGlzIGZpbHRlcidzIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1TWF0cml4OiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VNYXRyaXgnKSxcbiAgICAgICAgdU9wYXF1ZTogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1T3BhcXVlJyksXG4gICAgICAgIHVIYWxmU2l6ZTogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1SGFsZlNpemUnKSxcbiAgICAgICAgdVNpemU6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndVNpemUnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIGdsLnVuaWZvcm0xZnYodW5pZm9ybUxvY2F0aW9ucy51TWF0cml4LCB0aGlzLm1hdHJpeCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kKHRoaXMuY2FsbFN1cGVyKCd0b09iamVjdCcpLCB7XG4gICAgICAgIG9wYXF1ZTogdGhpcy5vcGFxdWUsXG4gICAgICAgIG1hdHJpeDogdGhpcy5tYXRyaXhcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGV9IEluc3RhbmNlIG9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbnZvbHV0ZVxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuQ29udm9sdXRlLmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBHcmF5c2NhbGUgaW1hZ2UgZmlsdGVyIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5HcmF5c2NhbGVcbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9pbWFnZS1maWx0ZXJzfEltYWdlRmlsdGVycyBkZW1vfVxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkdyYXlzY2FsZSgpO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICovXG4gIGZpbHRlcnMuR3JheXNjYWxlID0gY3JlYXRlQ2xhc3MoZmlsdGVycy5CYXNlRmlsdGVyLCAvKiogQGxlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkdyYXlzY2FsZS5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHR5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ0dyYXlzY2FsZScsXG5cbiAgICBmcmFnbWVudFNvdXJjZToge1xuICAgICAgYXZlcmFnZTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgICAndmVjNCBjb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nICtcbiAgICAgICAgICAnZmxvYXQgYXZlcmFnZSA9IChjb2xvci5yICsgY29sb3IuYiArIGNvbG9yLmcpIC8gMy4wO1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSB2ZWM0KGF2ZXJhZ2UsIGF2ZXJhZ2UsIGF2ZXJhZ2UsIGNvbG9yLmEpO1xcbicgK1xuICAgICAgICAnfScsXG4gICAgICBsaWdodG5lc3M6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gaW50IHVNb2RlO1xcbicgK1xuICAgICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgICAndmVjNCBjb2wgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJyArXG4gICAgICAgICAgJ2Zsb2F0IGF2ZXJhZ2UgPSAobWF4KG1heChjb2wuciwgY29sLmcpLGNvbC5iKSArIG1pbihtaW4oY29sLnIsIGNvbC5nKSxjb2wuYikpIC8gMi4wO1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSB2ZWM0KGF2ZXJhZ2UsIGF2ZXJhZ2UsIGF2ZXJhZ2UsIGNvbC5hKTtcXG4nICtcbiAgICAgICAgJ30nLFxuICAgICAgbHVtaW5vc2l0eTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBpbnQgdU1vZGU7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbCA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nICtcbiAgICAgICAgICAnZmxvYXQgYXZlcmFnZSA9IDAuMjEgKiBjb2wuciArIDAuNzIgKiBjb2wuZyArIDAuMDcgKiBjb2wuYjtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gdmVjNChhdmVyYWdlLCBhdmVyYWdlLCBhdmVyYWdlLCBjb2wuYSk7XFxuJyArXG4gICAgICAgICd9JyxcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBHcmF5c2NhbGUgbW9kZSwgYmV0d2VlbiAnYXZlcmFnZScsICdsaWdodG5lc3MnLCAnbHVtaW5vc2l0eSdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbW9kZTogJ2F2ZXJhZ2UnLFxuXG4gICAgbWFpblBhcmFtZXRlcjogJ21vZGUnLFxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgdGhlIEdyYXlzY2FsZSBvcGVyYXRpb24gdG8gYSBVaW50OEFycmF5IHJlcHJlc2VudGluZyB0aGUgcGl4ZWxzIG9mIGFuIGltYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0ltYWdlRGF0YX0gb3B0aW9ucy5pbWFnZURhdGEgVGhlIFVpbnQ4QXJyYXkgdG8gYmUgZmlsdGVyZWQuXG4gICAgICovXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsXG4gICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLCBpLFxuICAgICAgICAgIGxlbiA9IGRhdGEubGVuZ3RoLCB2YWx1ZSxcbiAgICAgICAgICBtb2RlID0gdGhpcy5tb2RlO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgIGlmIChtb2RlID09PSAnYXZlcmFnZScpIHtcbiAgICAgICAgICB2YWx1ZSA9IChkYXRhW2ldICsgZGF0YVtpICsgMV0gKyBkYXRhW2kgKyAyXSkgLyAzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1vZGUgPT09ICdsaWdodG5lc3MnKSB7XG4gICAgICAgICAgdmFsdWUgPSAoTWF0aC5taW4oZGF0YVtpXSwgZGF0YVtpICsgMV0sIGRhdGFbaSArIDJdKSArXG4gICAgICAgICAgICBNYXRoLm1heChkYXRhW2ldLCBkYXRhW2kgKyAxXSwgZGF0YVtpICsgMl0pKSAvIDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobW9kZSA9PT0gJ2x1bWlub3NpdHknKSB7XG4gICAgICAgICAgdmFsdWUgPSAwLjIxICogZGF0YVtpXSArIDAuNzIgKiBkYXRhW2kgKyAxXSArIDAuMDcgKiBkYXRhW2kgKyAyXTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhW2ldID0gdmFsdWU7XG4gICAgICAgIGRhdGFbaSArIDFdID0gdmFsdWU7XG4gICAgICAgIGRhdGFbaSArIDJdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgY2FjaGVkIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBvcHRpb25zLmNvbnRleHQgVGhlIEdMIGNvbnRleHQgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnByb2dyYW1DYWNoZSBBIG1hcCBvZiBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbXMsIGtleWVkIGJ5IGZpbHRlciB0eXBlLlxuICAgICAqL1xuICAgIHJldHJpZXZlU2hhZGVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgY2FjaGVLZXkgPSB0aGlzLnR5cGUgKyAnXycgKyB0aGlzLm1vZGU7XG4gICAgICBpZiAoIW9wdGlvbnMucHJvZ3JhbUNhY2hlLmhhc093blByb3BlcnR5KGNhY2hlS2V5KSkge1xuICAgICAgICB2YXIgc2hhZGVyU291cmNlID0gdGhpcy5mcmFnbWVudFNvdXJjZVt0aGlzLm1vZGVdO1xuICAgICAgICBvcHRpb25zLnByb2dyYW1DYWNoZVtjYWNoZUtleV0gPSB0aGlzLmNyZWF0ZVByb2dyYW0ob3B0aW9ucy5jb250ZXh0LCBzaGFkZXJTb3VyY2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdGlvbnMucHJvZ3JhbUNhY2hlW2NhY2hlS2V5XTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFdlYkdMIHVuaWZvcm0gbG9jYXRpb25zIGZvciB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoaXMgZmlsdGVyJ3MgY29tcGlsZWQgc2hhZGVyIHByb2dyYW0uXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVNb2RlOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VNb2RlJyksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0ncyB1bmlmb3Jtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHN0cmluZyB1bmlmb3JtIG5hbWVzIHRvIFdlYkdMVW5pZm9ybUxvY2F0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBzZW5kVW5pZm9ybURhdGE6IGZ1bmN0aW9uKGdsLCB1bmlmb3JtTG9jYXRpb25zKSB7XG4gICAgICAvLyBkZWZhdWx0IGF2ZXJhZ2UgbW9kZS5cbiAgICAgIHZhciBtb2RlID0gMTtcbiAgICAgIGdsLnVuaWZvcm0xaSh1bmlmb3JtTG9jYXRpb25zLnVNb2RlLCBtb2RlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR3JheXNjYWxlIGZpbHRlciBpc05ldXRyYWxTdGF0ZSBpbXBsZW1lbnRhdGlvblxuICAgICAqIFRoZSBmaWx0ZXIgaXMgbmV2ZXIgbmV1dHJhbFxuICAgICAqIG9uIHRoZSBpbWFnZVxuICAgICAqKi9cbiAgICBpc05ldXRyYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5HcmF5c2NhbGV9IEluc3RhbmNlIG9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkdyYXlzY2FsZVxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuR3JheXNjYWxlLmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBJbnZlcnQgZmlsdGVyIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5JbnZlcnRcbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9pbWFnZS1maWx0ZXJzfEltYWdlRmlsdGVycyBkZW1vfVxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkludmVydCgpO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcykpO1xuICAgKi9cbiAgZmlsdGVycy5JbnZlcnQgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuSW52ZXJ0LnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnSW52ZXJ0JyxcblxuICAgIGZyYWdtZW50U291cmNlOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgJ3VuaWZvcm0gaW50IHVJbnZlcnQ7XFxuJyArXG4gICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICd2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQpO1xcbicgK1xuICAgICAgICAnaWYgKHVJbnZlcnQgPT0gMSkge1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSB2ZWM0KDEuMCAtIGNvbG9yLnIsMS4wIC1jb2xvci5nLDEuMCAtY29sb3IuYixjb2xvci5hKTtcXG4nICtcbiAgICAgICAgJ30gZWxzZSB7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgICAnfVxcbicgK1xuICAgICAgJ30nLFxuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIGludmVydC4gaWYgZmFsc2UsIGRvZXMgbm90aGluZ1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaW52ZXJ0XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBpbnZlcnQ6IHRydWUsXG5cbiAgICBtYWluUGFyYW1ldGVyOiAnaW52ZXJ0JyxcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoZSBJbnZlcnQgb3BlcmF0aW9uIHRvIGEgVWludDhBcnJheSByZXByZXNlbnRpbmcgdGhlIHBpeGVscyBvZiBhbiBpbWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtJbWFnZURhdGF9IG9wdGlvbnMuaW1hZ2VEYXRhIFRoZSBVaW50OEFycmF5IHRvIGJlIGZpbHRlcmVkLlxuICAgICAqL1xuICAgIGFwcGx5VG8yZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGltYWdlRGF0YSA9IG9wdGlvbnMuaW1hZ2VEYXRhLFxuICAgICAgICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YSwgaSxcbiAgICAgICAgICBsZW4gPSBkYXRhLmxlbmd0aDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgICAgICBkYXRhW2ldID0gMjU1IC0gZGF0YVtpXTtcbiAgICAgICAgZGF0YVtpICsgMV0gPSAyNTUgLSBkYXRhW2kgKyAxXTtcbiAgICAgICAgZGF0YVtpICsgMl0gPSAyNTUgLSBkYXRhW2kgKyAyXTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW52ZXJ0IGZpbHRlciBpc05ldXRyYWxTdGF0ZSBpbXBsZW1lbnRhdGlvblxuICAgICAqIFVzZWQgb25seSBpbiBpbWFnZSBhcHBseUZpbHRlcnMgdG8gZGlzY2FyZCBmaWx0ZXJzIHRoYXQgd2lsbCBub3QgaGF2ZSBhbiBlZmZlY3RcbiAgICAgKiBvbiB0aGUgaW1hZ2VcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqKi9cbiAgICBpc05ldXRyYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gIXRoaXMuaW52ZXJ0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gV2ViR0wgdW5pZm9ybSBsb2NhdGlvbnMgZm9yIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhpcyBmaWx0ZXIncyBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBnZXRVbmlmb3JtTG9jYXRpb25zOiBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdUludmVydDogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1SW52ZXJ0JyksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0ncyB1bmlmb3Jtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHN0cmluZyB1bmlmb3JtIG5hbWVzIHRvIFdlYkdMVW5pZm9ybUxvY2F0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBzZW5kVW5pZm9ybURhdGE6IGZ1bmN0aW9uKGdsLCB1bmlmb3JtTG9jYXRpb25zKSB7XG4gICAgICBnbC51bmlmb3JtMWkodW5pZm9ybUxvY2F0aW9ucy51SW52ZXJ0LCB0aGlzLmludmVydCk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5JbnZlcnR9IEluc3RhbmNlIG9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkludmVydFxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuSW52ZXJ0LmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyAgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGV4dGVuZCA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQsXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBOb2lzZSBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLk5vaXNlXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVyc1xuICAgKiBAZXh0ZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyXG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5JbWFnZS5maWx0ZXJzLk5vaXNlI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vaW1hZ2UtZmlsdGVyc3xJbWFnZUZpbHRlcnMgZGVtb31cbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Ob2lzZSh7XG4gICAqICAgbm9pc2U6IDcwMFxuICAgKiB9KTtcbiAgICogb2JqZWN0LmZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgKiBvYmplY3QuYXBwbHlGaWx0ZXJzKCk7XG4gICAqIGNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICovXG4gIGZpbHRlcnMuTm9pc2UgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuTm9pc2UucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdOb2lzZScsXG5cbiAgICAvKipcbiAgICAgKiBGcmFnbWVudCBzb3VyY2UgZm9yIHRoZSBub2lzZSBwcm9ncmFtXG4gICAgICovXG4gICAgZnJhZ21lbnRTb3VyY2U6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcEg7XFxuJyArXG4gICAgICAndW5pZm9ybSBmbG9hdCB1Tm9pc2U7XFxuJyArXG4gICAgICAndW5pZm9ybSBmbG9hdCB1U2VlZDtcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgJ2Zsb2F0IHJhbmQodmVjMiBjbywgZmxvYXQgc2VlZCwgZmxvYXQgdlNjYWxlKSB7XFxuJyArXG4gICAgICAgICdyZXR1cm4gZnJhY3Qoc2luKGRvdChjby54eSAqIHZTY2FsZSAsdmVjMigxMi45ODk4ICwgNzguMjMzKSkpICogNDM3NTguNTQ1MyAqIChzZWVkICsgMC4wMSkgLyAyLjApO1xcbicgK1xuICAgICAgJ31cXG4nICtcbiAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICd2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQpO1xcbicgK1xuICAgICAgICAnY29sb3IucmdiICs9ICgwLjUgLSByYW5kKHZUZXhDb29yZCwgdVNlZWQsIDAuMSAvIHVTdGVwSCkpICogdU5vaXNlO1xcbicgK1xuICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAnfScsXG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmliZSB0aGUgcHJvcGVydHkgdGhhdCBpcyB0aGUgZmlsdGVyIHBhcmFtZXRlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBtYWluUGFyYW1ldGVyOiAnbm9pc2UnLFxuXG4gICAgLyoqXG4gICAgICogTm9pc2UgdmFsdWUsIGZyb21cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbm9pc2VcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG5vaXNlOiAwLFxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgdGhlIEJyaWdodG5lc3Mgb3BlcmF0aW9uIHRvIGEgVWludDhDbGFtcGVkQXJyYXkgcmVwcmVzZW50aW5nIHRoZSBwaXhlbHMgb2YgYW4gaW1hZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7SW1hZ2VEYXRhfSBvcHRpb25zLmltYWdlRGF0YSBUaGUgVWludDhDbGFtcGVkQXJyYXkgdG8gYmUgZmlsdGVyZWQuXG4gICAgICovXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBpZiAodGhpcy5ub2lzZSA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsXG4gICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLCBpLCBsZW4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICBub2lzZSA9IHRoaXMubm9pc2UsIHJhbmQ7XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDQpIHtcblxuICAgICAgICByYW5kID0gKDAuNSAtIE1hdGgucmFuZG9tKCkpICogbm9pc2U7XG5cbiAgICAgICAgZGF0YVtpXSArPSByYW5kO1xuICAgICAgICBkYXRhW2kgKyAxXSArPSByYW5kO1xuICAgICAgICBkYXRhW2kgKyAyXSArPSByYW5kO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gV2ViR0wgdW5pZm9ybSBsb2NhdGlvbnMgZm9yIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhpcyBmaWx0ZXIncyBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBnZXRVbmlmb3JtTG9jYXRpb25zOiBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdU5vaXNlOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VOb2lzZScpLFxuICAgICAgICB1U2VlZDogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1U2VlZCcpLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VuZCBkYXRhIGZyb20gdGhpcyBmaWx0ZXIgdG8gaXRzIHNoYWRlciBwcm9ncmFtJ3MgdW5pZm9ybXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdW5pZm9ybUxvY2F0aW9ucyBBIG1hcCBvZiBzdHJpbmcgdW5pZm9ybSBuYW1lcyB0byBXZWJHTFVuaWZvcm1Mb2NhdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgc2VuZFVuaWZvcm1EYXRhOiBmdW5jdGlvbihnbCwgdW5pZm9ybUxvY2F0aW9ucykge1xuICAgICAgZ2wudW5pZm9ybTFmKHVuaWZvcm1Mb2NhdGlvbnMudU5vaXNlLCB0aGlzLm5vaXNlIC8gMjU1KTtcbiAgICAgIGdsLnVuaWZvcm0xZih1bmlmb3JtTG9jYXRpb25zLnVTZWVkLCBNYXRoLnJhbmRvbSgpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHRlbmQodGhpcy5jYWxsU3VwZXIoJ3RvT2JqZWN0JyksIHtcbiAgICAgICAgbm9pc2U6IHRoaXMubm9pc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5Ob2lzZX0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuTm9pc2VcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLk5vaXNlLmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBQaXhlbGF0ZSBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlBpeGVsYXRlXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVyc1xuICAgKiBAZXh0ZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyXG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlBpeGVsYXRlI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vaW1hZ2UtZmlsdGVyc3xJbWFnZUZpbHRlcnMgZGVtb31cbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5QaXhlbGF0ZSh7XG4gICAqICAgYmxvY2tzaXplOiA4XG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICovXG4gIGZpbHRlcnMuUGl4ZWxhdGUgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuUGl4ZWxhdGUucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdQaXhlbGF0ZScsXG5cbiAgICBibG9ja3NpemU6IDQsXG5cbiAgICBtYWluUGFyYW1ldGVyOiAnYmxvY2tzaXplJyxcblxuICAgIC8qKlxuICAgICAqIEZyYWdtZW50IHNvdXJjZSBmb3IgdGhlIFBpeGVsYXRlIHByb2dyYW1cbiAgICAgKi9cbiAgICBmcmFnbWVudFNvdXJjZTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICd1bmlmb3JtIGZsb2F0IHVCbG9ja3NpemU7XFxuJyArXG4gICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcFc7XFxuJyArXG4gICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcEg7XFxuJyArXG4gICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICdmbG9hdCBibG9ja1cgPSB1QmxvY2tzaXplICogdVN0ZXBXO1xcbicgK1xuICAgICAgICAnZmxvYXQgYmxvY2tIID0gdUJsb2Nrc2l6ZSAqIHVTdGVwVztcXG4nICtcbiAgICAgICAgJ2ludCBwb3NYID0gaW50KHZUZXhDb29yZC54IC8gYmxvY2tXKTtcXG4nICtcbiAgICAgICAgJ2ludCBwb3NZID0gaW50KHZUZXhDb29yZC55IC8gYmxvY2tIKTtcXG4nICtcbiAgICAgICAgJ2Zsb2F0IGZwb3NYID0gZmxvYXQocG9zWCk7XFxuJyArXG4gICAgICAgICdmbG9hdCBmcG9zWSA9IGZsb2F0KHBvc1kpO1xcbicgK1xuICAgICAgICAndmVjMiBzcXVhcmVDb29yZHMgPSB2ZWMyKGZwb3NYICogYmxvY2tXLCBmcG9zWSAqIGJsb2NrSCk7XFxuJyArXG4gICAgICAgICd2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCBzcXVhcmVDb29yZHMpO1xcbicgK1xuICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAnfScsXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGUgUGl4ZWxhdGUgb3BlcmF0aW9uIHRvIGEgVWludDhDbGFtcGVkQXJyYXkgcmVwcmVzZW50aW5nIHRoZSBwaXhlbHMgb2YgYW4gaW1hZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7SW1hZ2VEYXRhfSBvcHRpb25zLmltYWdlRGF0YSBUaGUgVWludDhDbGFtcGVkQXJyYXkgdG8gYmUgZmlsdGVyZWQuXG4gICAgICovXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsXG4gICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxuICAgICAgICAgIGlMZW4gPSBpbWFnZURhdGEuaGVpZ2h0LFxuICAgICAgICAgIGpMZW4gPSBpbWFnZURhdGEud2lkdGgsXG4gICAgICAgICAgaW5kZXgsIGksIGosIHIsIGcsIGIsIGEsXG4gICAgICAgICAgX2ksIF9qLCBfaUxlbiwgX2pMZW47XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBpTGVuOyBpICs9IHRoaXMuYmxvY2tzaXplKSB7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IHRoaXMuYmxvY2tzaXplKSB7XG5cbiAgICAgICAgICBpbmRleCA9IChpICogNCkgKiBqTGVuICsgKGogKiA0KTtcblxuICAgICAgICAgIHIgPSBkYXRhW2luZGV4XTtcbiAgICAgICAgICBnID0gZGF0YVtpbmRleCArIDFdO1xuICAgICAgICAgIGIgPSBkYXRhW2luZGV4ICsgMl07XG4gICAgICAgICAgYSA9IGRhdGFbaW5kZXggKyAzXTtcblxuICAgICAgICAgIF9pTGVuID0gTWF0aC5taW4oaSArIHRoaXMuYmxvY2tzaXplLCBpTGVuKTtcbiAgICAgICAgICBfakxlbiA9IE1hdGgubWluKGogKyB0aGlzLmJsb2Nrc2l6ZSwgakxlbik7XG4gICAgICAgICAgZm9yIChfaSA9IGk7IF9pIDwgX2lMZW47IF9pKyspIHtcbiAgICAgICAgICAgIGZvciAoX2ogPSBqOyBfaiA8IF9qTGVuOyBfaisrKSB7XG4gICAgICAgICAgICAgIGluZGV4ID0gKF9pICogNCkgKiBqTGVuICsgKF9qICogNCk7XG4gICAgICAgICAgICAgIGRhdGFbaW5kZXhdID0gcjtcbiAgICAgICAgICAgICAgZGF0YVtpbmRleCArIDFdID0gZztcbiAgICAgICAgICAgICAgZGF0YVtpbmRleCArIDJdID0gYjtcbiAgICAgICAgICAgICAgZGF0YVtpbmRleCArIDNdID0gYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGUgd2hlbiB0aGUgZmlsdGVyIGlzIG5vdCBnb25uYSBhcHBseSBjaGFuZ2VzIHRvIHRoZSBpbWFnZVxuICAgICAqKi9cbiAgICBpc05ldXRyYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5ibG9ja3NpemUgPT09IDE7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBXZWJHTCB1bmlmb3JtIGxvY2F0aW9ucyBmb3IgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGlzIGZpbHRlcidzIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1QmxvY2tzaXplOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VCbG9ja3NpemUnKSxcbiAgICAgICAgdVN0ZXBXOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VTdGVwVycpLFxuICAgICAgICB1U3RlcEg6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndVN0ZXBIJyksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0ncyB1bmlmb3Jtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHN0cmluZyB1bmlmb3JtIG5hbWVzIHRvIFdlYkdMVW5pZm9ybUxvY2F0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBzZW5kVW5pZm9ybURhdGE6IGZ1bmN0aW9uKGdsLCB1bmlmb3JtTG9jYXRpb25zKSB7XG4gICAgICBnbC51bmlmb3JtMWYodW5pZm9ybUxvY2F0aW9ucy51QmxvY2tzaXplLCB0aGlzLmJsb2Nrc2l6ZSk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5QaXhlbGF0ZX0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuUGl4ZWxhdGVcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlBpeGVsYXRlLmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBleHRlbmQgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kLFxuICAgICAgZmlsdGVycyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLFxuICAgICAgY3JlYXRlQ2xhc3MgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcztcblxuICAvKipcbiAgICogUmVtb3ZlIHdoaXRlIGZpbHRlciBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLkltYWdlLmZpbHRlcnMuUmVtb3ZlQ29sb3JcbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLkltYWdlLmZpbHRlcnMuUmVtb3ZlQ29sb3IjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9pbWFnZS1maWx0ZXJzfEltYWdlRmlsdGVycyBkZW1vfVxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLlJlbW92ZUNvbG9yKHtcbiAgICogICB0aHJlc2hvbGQ6IDAuMixcbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKiBjYW52YXMucmVuZGVyQWxsKCk7XG4gICAqL1xuICBmaWx0ZXJzLlJlbW92ZUNvbG9yID0gY3JlYXRlQ2xhc3MoZmlsdGVycy5CYXNlRmlsdGVyLCAvKiogQGxlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlJlbW92ZUNvbG9yLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnUmVtb3ZlQ29sb3InLFxuXG4gICAgLyoqXG4gICAgICogQ29sb3IgdG8gcmVtb3ZlLCBpbiBhbnkgZm9ybWF0IHVuZGVyc3Rvb2QgYnkgZmFicmljLkNvbG9yLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjb2xvcjogJyNGRkZGRkYnLFxuXG4gICAgLyoqXG4gICAgICogRnJhZ21lbnQgc291cmNlIGZvciB0aGUgYnJpZ2h0bmVzcyBwcm9ncmFtXG4gICAgICovXG4gICAgZnJhZ21lbnRTb3VyY2U6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAndW5pZm9ybSB2ZWM0IHVMb3c7XFxuJyArXG4gICAgICAndW5pZm9ybSB2ZWM0IHVIaWdoO1xcbicgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQpO1xcbicgK1xuICAgICAgICAnaWYoYWxsKGdyZWF0ZXJUaGFuKGdsX0ZyYWdDb2xvci5yZ2IsdUxvdy5yZ2IpKSAmJiBhbGwoZ3JlYXRlclRoYW4odUhpZ2gucmdiLGdsX0ZyYWdDb2xvci5yZ2IpKSkge1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IuYSA9IDAuMDtcXG4nICtcbiAgICAgICAgJ31cXG4nICtcbiAgICAgICd9JyxcblxuICAgIC8qKlxuICAgICAqIGRpc3RhbmNlIHRvIGFjdHVhbCBjb2xvciwgYXMgdmFsdWUgdXAgb3IgZG93biBmcm9tIGVhY2ggcixnLGJcbiAgICAgKiBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgKiovXG4gICAgZGlzdGFuY2U6IDAuMDIsXG5cbiAgICAvKipcbiAgICAgKiBGb3IgY29sb3IgdG8gcmVtb3ZlIGluc2lkZSBkaXN0YW5jZSwgdXNlIGFscGhhIGNoYW5uZWwgZm9yIGEgc21vb3RoZXIgZGVsZXRpb25cbiAgICAgKiBOT1QgSU1QTEVNRU5URUQgWUVUXG4gICAgICoqL1xuICAgIHVzZUFscGhhOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlJlbW92ZVdoaXRlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuY29sb3I9I1JSR0dCQl0gVGhyZXNob2xkIHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmRpc3RhbmNlPTEwXSBEaXN0YW5jZSB2YWx1ZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyBmaWx0ZXIgdG8gY2FudmFzIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY2FudmFzRWwgQ2FudmFzIGVsZW1lbnQgdG8gYXBwbHkgZmlsdGVyIHRvXG4gICAgICovXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsXG4gICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLCBpLFxuICAgICAgICAgIGRpc3RhbmNlID0gdGhpcy5kaXN0YW5jZSAqIDI1NSxcbiAgICAgICAgICByLCBnLCBiLFxuICAgICAgICAgIHNvdXJjZSA9IG5ldyBmYWJyaWMuQ29sb3IodGhpcy5jb2xvcikuZ2V0U291cmNlKCksXG4gICAgICAgICAgbG93QyA9IFtcbiAgICAgICAgICAgIHNvdXJjZVswXSAtIGRpc3RhbmNlLFxuICAgICAgICAgICAgc291cmNlWzFdIC0gZGlzdGFuY2UsXG4gICAgICAgICAgICBzb3VyY2VbMl0gLSBkaXN0YW5jZSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGhpZ2hDID0gW1xuICAgICAgICAgICAgc291cmNlWzBdICsgZGlzdGFuY2UsXG4gICAgICAgICAgICBzb3VyY2VbMV0gKyBkaXN0YW5jZSxcbiAgICAgICAgICAgIHNvdXJjZVsyXSArIGRpc3RhbmNlLFxuICAgICAgICAgIF07XG5cblxuICAgICAgZm9yIChpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgciA9IGRhdGFbaV07XG4gICAgICAgIGcgPSBkYXRhW2kgKyAxXTtcbiAgICAgICAgYiA9IGRhdGFbaSArIDJdO1xuXG4gICAgICAgIGlmIChyID4gbG93Q1swXSAmJlxuICAgICAgICAgICAgZyA+IGxvd0NbMV0gJiZcbiAgICAgICAgICAgIGIgPiBsb3dDWzJdICYmXG4gICAgICAgICAgICByIDwgaGlnaENbMF0gJiZcbiAgICAgICAgICAgIGcgPCBoaWdoQ1sxXSAmJlxuICAgICAgICAgICAgYiA8IGhpZ2hDWzJdKSB7XG4gICAgICAgICAgZGF0YVtpICsgM10gPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBXZWJHTCB1bmlmb3JtIGxvY2F0aW9ucyBmb3IgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGlzIGZpbHRlcidzIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1TG93OiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VMb3cnKSxcbiAgICAgICAgdUhpZ2g6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndUhpZ2gnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBuZXcgZmFicmljLkNvbG9yKHRoaXMuY29sb3IpLmdldFNvdXJjZSgpLFxuICAgICAgICAgIGRpc3RhbmNlID0gcGFyc2VGbG9hdCh0aGlzLmRpc3RhbmNlKSxcbiAgICAgICAgICBsb3dDID0gW1xuICAgICAgICAgICAgMCArIHNvdXJjZVswXSAvIDI1NSAtIGRpc3RhbmNlLFxuICAgICAgICAgICAgMCArIHNvdXJjZVsxXSAvIDI1NSAtIGRpc3RhbmNlLFxuICAgICAgICAgICAgMCArIHNvdXJjZVsyXSAvIDI1NSAtIGRpc3RhbmNlLFxuICAgICAgICAgICAgMVxuICAgICAgICAgIF0sXG4gICAgICAgICAgaGlnaEMgPSBbXG4gICAgICAgICAgICBzb3VyY2VbMF0gLyAyNTUgKyBkaXN0YW5jZSxcbiAgICAgICAgICAgIHNvdXJjZVsxXSAvIDI1NSArIGRpc3RhbmNlLFxuICAgICAgICAgICAgc291cmNlWzJdIC8gMjU1ICsgZGlzdGFuY2UsXG4gICAgICAgICAgICAxXG4gICAgICAgICAgXTtcbiAgICAgIGdsLnVuaWZvcm00ZnYodW5pZm9ybUxvY2F0aW9ucy51TG93LCBsb3dDKTtcbiAgICAgIGdsLnVuaWZvcm00ZnYodW5pZm9ybUxvY2F0aW9ucy51SGlnaCwgaGlnaEMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4dGVuZCh0aGlzLmNhbGxTdXBlcigndG9PYmplY3QnKSwge1xuICAgICAgICBjb2xvcjogdGhpcy5jb2xvcixcbiAgICAgICAgZGlzdGFuY2U6IHRoaXMuZGlzdGFuY2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZW1vdmVDb2xvcn0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuUmVtb3ZlV2hpdGVcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlJlbW92ZUNvbG9yLmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIHZhciBtYXRyaWNlcyA9IHtcbiAgICBCcm93bmllOiBbXG4gICAgICAwLjU5OTcwLDAuMzQ1NTMsLTAuMjcwODIsMCwwLjE4NixcbiAgICAgIC0wLjAzNzcwLDAuODYwOTUsMC4xNTA1OSwwLC0wLjE0NDksXG4gICAgICAwLjI0MTEzLC0wLjA3NDQxLDAuNDQ5NzIsMCwtMC4wMjk2NSxcbiAgICAgIDAsMCwwLDEsMFxuICAgIF0sXG4gICAgVmludGFnZTogW1xuICAgICAgMC42Mjc5MywwLjMyMDIxLC0wLjAzOTY1LDAsMC4wMzc4NCxcbiAgICAgIDAuMDI1NzgsMC42NDQxMSwwLjAzMjU5LDAsMC4wMjkyNixcbiAgICAgIDAuMDQ2NjAsLTAuMDg1MTIsMC41MjQxNiwwLDAuMDIwMjMsXG4gICAgICAwLDAsMCwxLDBcbiAgICBdLFxuICAgIEtvZGFjaHJvbWU6IFtcbiAgICAgIDEuMTI4NTUsLTAuMzk2NzMsLTAuMDM5OTIsMCwwLjI0OTkxLFxuICAgICAgLTAuMTY0MDQsMS4wODM1MiwtMC4wNTQ5OCwwLDAuMDk2OTgsXG4gICAgICAtMC4xNjc4NiwtMC41NjAzNCwxLjYwMTQ4LDAsMC4xMzk3MixcbiAgICAgIDAsMCwwLDEsMFxuICAgIF0sXG4gICAgVGVjaG5pY29sb3I6IFtcbiAgICAgIDEuOTEyNTIsLTAuODU0NTMsLTAuMDkxNTUsMCwwLjA0NjI0LFxuICAgICAgLTAuMzA4NzgsMS43NjU4OSwtMC4xMDYwMSwwLC0wLjI3NTg5LFxuICAgICAgLTAuMjMxMTAsLTAuNzUwMTgsMS44NDc1OSwwLDAuMTIxMzcsXG4gICAgICAwLDAsMCwxLDBcbiAgICBdLFxuICAgIFBvbGFyb2lkOiBbXG4gICAgICAxLjQzOCwtMC4wNjIsLTAuMDYyLDAsMCxcbiAgICAgIC0wLjEyMiwxLjM3OCwtMC4xMjIsMCwwLFxuICAgICAgLTAuMDE2LC0wLjAxNiwxLjQ4MywwLDAsXG4gICAgICAwLDAsMCwxLDBcbiAgICBdLFxuICAgIFNlcGlhOiBbXG4gICAgICAwLjM5MywgMC43NjksIDAuMTg5LCAwLCAwLFxuICAgICAgMC4zNDksIDAuNjg2LCAwLjE2OCwgMCwgMCxcbiAgICAgIDAuMjcyLCAwLjUzNCwgMC4xMzEsIDAsIDAsXG4gICAgICAwLCAwLCAwLCAxLCAwXG4gICAgXSxcbiAgICBCbGFja1doaXRlOiBbXG4gICAgICAxLjUsIDEuNSwgMS41LCAwLCAtMSxcbiAgICAgIDEuNSwgMS41LCAxLjUsIDAsIC0xLFxuICAgICAgMS41LCAxLjUsIDEuNSwgMCwgLTEsXG4gICAgICAwLCAwLCAwLCAxLCAwLFxuICAgIF1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gbWF0cmljZXMpIHtcbiAgICBmaWx0ZXJzW2tleV0gPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkNvbG9yTWF0cml4LCAvKiogQGxlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlNlcGlhLnByb3RvdHlwZSAqLyB7XG5cbiAgICAgIC8qKlxuICAgICAgICogRmlsdGVyIHR5cGVcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAgICAgKiBAZGVmYXVsdFxuICAgICAgICovXG4gICAgICB0eXBlOiBrZXksXG5cbiAgICAgIC8qKlxuICAgICAgICogQ29sb3JtYXRyaXggZm9yIHRoZSBlZmZlY3RcbiAgICAgICAqIGFycmF5IG9mIDIwIGZsb2F0cy4gTnVtYmVycyBpbiBwb3NpdGlvbnMgNCwgOSwgMTQsIDE5IGxvb3NlIG1lYW5pbmdcbiAgICAgICAqIG91dHNpZGUgdGhlIC0xLCAxIHJhbmdlLlxuICAgICAgICogQHBhcmFtIHtBcnJheX0gbWF0cml4IGFycmF5IG9mIDIwIG51bWJlcnMuXG4gICAgICAgKiBAZGVmYXVsdFxuICAgICAgICovXG4gICAgICBtYXRyaXg6IG1hdHJpY2VzW2tleV0sXG5cbiAgICAgIC8qKlxuICAgICAgICogTG9jayB0aGUgbWF0cml4IGV4cG9ydCBmb3IgdGhpcyBraW5kIG9mIHN0YXRpYywgcGFyYW1ldGVyIGxlc3MgZmlsdGVycy5cbiAgICAgICAqL1xuICAgICAgbWFpblBhcmFtZXRlcjogZmFsc2UsXG4gICAgICAvKipcbiAgICAgICAqIExvY2sgdGhlIGNvbG9ybWF0cml4IG9uIHRoZSBjb2xvciBwYXJ0LCBza2lwcGluZyBhbHBoYVxuICAgICAgICovXG4gICAgICBjb2xvcnNPbmx5OiB0cnVlLFxuXG4gICAgfSk7XG4gICAgZmFicmljLkltYWdlLmZpbHRlcnNba2V5XS5mcm9tT2JqZWN0ID0gZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlci5mcm9tT2JqZWN0O1xuICB9XG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMsXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBDb2xvciBCbGVuZCBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXIuQmxlbmRDb2xvclxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kQ29sb3Ioe1xuICAgKiAgY29sb3I6ICcjMDAwJyxcbiAgICogIG1vZGU6ICdtdWx0aXBseSdcbiAgICogfSk7XG4gICAqXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuQmxlbmRJbWFnZSh7XG4gICAqICBpbWFnZTogZmFicmljSW1hZ2VPYmplY3QsXG4gICAqICBtb2RlOiAnbXVsdGlwbHknLFxuICAgKiAgYWxwaGE6IDAuNVxuICAgKiB9KTtcbiAgICogb2JqZWN0LmZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgKiBvYmplY3QuYXBwbHlGaWx0ZXJzKCk7XG4gICAqIGNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICovXG5cbiAgZmlsdGVycy5CbGVuZENvbG9yID0gY3JlYXRlQ2xhc3MoZmlsdGVycy5CYXNlRmlsdGVyLCAvKiogQGxlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kLnByb3RvdHlwZSAqLyB7XG4gICAgdHlwZTogJ0JsZW5kQ29sb3InLFxuXG4gICAgLyoqXG4gICAgICogQ29sb3IgdG8gbWFrZSB0aGUgYmxlbmQgb3BlcmF0aW9uIHdpdGguIGRlZmF1bHQgdG8gYSByZWRkaXNoIGNvbG9yIHNpbmNlIGJsYWNrIG9yIHdoaXRlXG4gICAgICogZ2l2ZXMgYWx3YXlzIHN0cm9uZyByZXN1bHQuXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKiovXG4gICAgY29sb3I6ICcjRjk1QzYzJyxcblxuICAgIC8qKlxuICAgICAqIEJsZW5kIG1vZGUgZm9yIHRoZSBmaWx0ZXI6IG9uZSBvZiBtdWx0aXBseSwgYWRkLCBkaWZmLCBzY3JlZW4sIHN1YnRyYWN0LFxuICAgICAqIGRhcmtlbiwgbGlnaHRlbiwgb3ZlcmxheSwgZXhjbHVzaW9uLCB0aW50LlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICoqL1xuICAgIG1vZGU6ICdtdWx0aXBseScsXG5cbiAgICAvKipcbiAgICAgKiBhbHBoYSB2YWx1ZS4gcmVwcmVzZW50IHRoZSBzdHJlbmd0aCBvZiB0aGUgYmxlbmQgY29sb3Igb3BlcmF0aW9uLlxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICoqL1xuICAgIGFscGhhOiAxLFxuXG4gICAgLyoqXG4gICAgICogRnJhZ21lbnQgc291cmNlIGZvciB0aGUgTXVsdGlwbHkgcHJvZ3JhbVxuICAgICAqL1xuICAgIGZyYWdtZW50U291cmNlOiB7XG4gICAgICBtdWx0aXBseTogJ2dsX0ZyYWdDb2xvci5yZ2IgKj0gdUNvbG9yLnJnYjtcXG4nLFxuICAgICAgc2NyZWVuOiAnZ2xfRnJhZ0NvbG9yLnJnYiA9IDEuMCAtICgxLjAgLSBnbF9GcmFnQ29sb3IucmdiKSAqICgxLjAgLSB1Q29sb3IucmdiKTtcXG4nLFxuICAgICAgYWRkOiAnZ2xfRnJhZ0NvbG9yLnJnYiArPSB1Q29sb3IucmdiO1xcbicsXG4gICAgICBkaWZmOiAnZ2xfRnJhZ0NvbG9yLnJnYiA9IGFicyhnbF9GcmFnQ29sb3IucmdiIC0gdUNvbG9yLnJnYik7XFxuJyxcbiAgICAgIHN1YnRyYWN0OiAnZ2xfRnJhZ0NvbG9yLnJnYiAtPSB1Q29sb3IucmdiO1xcbicsXG4gICAgICBsaWdodGVuOiAnZ2xfRnJhZ0NvbG9yLnJnYiA9IG1heChnbF9GcmFnQ29sb3IucmdiLCB1Q29sb3IucmdiKTtcXG4nLFxuICAgICAgZGFya2VuOiAnZ2xfRnJhZ0NvbG9yLnJnYiA9IG1pbihnbF9GcmFnQ29sb3IucmdiLCB1Q29sb3IucmdiKTtcXG4nLFxuICAgICAgZXhjbHVzaW9uOiAnZ2xfRnJhZ0NvbG9yLnJnYiArPSB1Q29sb3IucmdiIC0gMi4wICogKHVDb2xvci5yZ2IgKiBnbF9GcmFnQ29sb3IucmdiKTtcXG4nLFxuICAgICAgb3ZlcmxheTogJ2lmICh1Q29sb3IuciA8IDAuNSkge1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IuciAqPSAyLjAgKiB1Q29sb3IucjtcXG4nICtcbiAgICAgICAgJ30gZWxzZSB7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvci5yID0gMS4wIC0gMi4wICogKDEuMCAtIGdsX0ZyYWdDb2xvci5yKSAqICgxLjAgLSB1Q29sb3Iucik7XFxuJyArXG4gICAgICAgICd9XFxuJyArXG4gICAgICAgICdpZiAodUNvbG9yLmcgPCAwLjUpIHtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yLmcgKj0gMi4wICogdUNvbG9yLmc7XFxuJyArXG4gICAgICAgICd9IGVsc2Uge1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IuZyA9IDEuMCAtIDIuMCAqICgxLjAgLSBnbF9GcmFnQ29sb3IuZykgKiAoMS4wIC0gdUNvbG9yLmcpO1xcbicgK1xuICAgICAgICAnfVxcbicgK1xuICAgICAgICAnaWYgKHVDb2xvci5iIDwgMC41KSB7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvci5iICo9IDIuMCAqIHVDb2xvci5iO1xcbicgK1xuICAgICAgICAnfSBlbHNlIHtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yLmIgPSAxLjAgLSAyLjAgKiAoMS4wIC0gZ2xfRnJhZ0NvbG9yLmIpICogKDEuMCAtIHVDb2xvci5iKTtcXG4nICtcbiAgICAgICAgJ31cXG4nLFxuICAgICAgdGludDogJ2dsX0ZyYWdDb2xvci5yZ2IgKj0gKDEuMCAtIHVDb2xvci5hKTtcXG4nICtcbiAgICAgICAgJ2dsX0ZyYWdDb2xvci5yZ2IgKz0gdUNvbG9yLnJnYjtcXG4nLFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBidWlsZCB0aGUgZnJhZ21lbnQgc291cmNlIGZvciB0aGUgZmlsdGVycywgam9pbmluZyB0aGUgY29tbW9uIHBhcnQgd2l0aFxuICAgICAqIHRoZSBzcGVjaWZpYyBvbmUuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1vZGUgdGhlIG1vZGUgb2YgdGhlIGZpbHRlciwgYSBrZXkgb2YgdGhpcy5mcmFnbWVudFNvdXJjZVxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIHNvdXJjZSB0byBiZSBjb21waWxlZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYnVpbGRTb3VyY2U6IGZ1bmN0aW9uKG1vZGUpIHtcbiAgICAgIHJldHVybiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHZlYzQgdUNvbG9yO1xcbicgK1xuICAgICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgICAndmVjNCBjb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAgICAgJ2lmIChjb2xvci5hID4gMC4wKSB7XFxuJyArXG4gICAgICAgICAgICB0aGlzLmZyYWdtZW50U291cmNlW21vZGVdICtcbiAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAnfSc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgY2FjaGVkIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBvcHRpb25zLmNvbnRleHQgVGhlIEdMIGNvbnRleHQgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnByb2dyYW1DYWNoZSBBIG1hcCBvZiBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbXMsIGtleWVkIGJ5IGZpbHRlciB0eXBlLlxuICAgICAqL1xuICAgIHJldHJpZXZlU2hhZGVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgY2FjaGVLZXkgPSB0aGlzLnR5cGUgKyAnXycgKyB0aGlzLm1vZGUsIHNoYWRlclNvdXJjZTtcbiAgICAgIGlmICghb3B0aW9ucy5wcm9ncmFtQ2FjaGUuaGFzT3duUHJvcGVydHkoY2FjaGVLZXkpKSB7XG4gICAgICAgIHNoYWRlclNvdXJjZSA9IHRoaXMuYnVpbGRTb3VyY2UodGhpcy5tb2RlKTtcbiAgICAgICAgb3B0aW9ucy5wcm9ncmFtQ2FjaGVbY2FjaGVLZXldID0gdGhpcy5jcmVhdGVQcm9ncmFtKG9wdGlvbnMuY29udGV4dCwgc2hhZGVyU291cmNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25zLnByb2dyYW1DYWNoZVtjYWNoZUtleV07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoZSBCbGVuZCBvcGVyYXRpb24gdG8gYSBVaW50OENsYW1wZWRBcnJheSByZXByZXNlbnRpbmcgdGhlIHBpeGVscyBvZiBhbiBpbWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtJbWFnZURhdGF9IG9wdGlvbnMuaW1hZ2VEYXRhIFRoZSBVaW50OENsYW1wZWRBcnJheSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgKi9cbiAgICBhcHBseVRvMmQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBpbWFnZURhdGEgPSBvcHRpb25zLmltYWdlRGF0YSxcbiAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsIGlMZW4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICB0ciwgdGcsIHRiLFxuICAgICAgICAgIHIsIGcsIGIsXG4gICAgICAgICAgc291cmNlLCBhbHBoYTEgPSAxIC0gdGhpcy5hbHBoYTtcblxuICAgICAgc291cmNlID0gbmV3IGZhYnJpYy5Db2xvcih0aGlzLmNvbG9yKS5nZXRTb3VyY2UoKTtcbiAgICAgIHRyID0gc291cmNlWzBdICogdGhpcy5hbHBoYTtcbiAgICAgIHRnID0gc291cmNlWzFdICogdGhpcy5hbHBoYTtcbiAgICAgIHRiID0gc291cmNlWzJdICogdGhpcy5hbHBoYTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpTGVuOyBpICs9IDQpIHtcblxuICAgICAgICByID0gZGF0YVtpXTtcbiAgICAgICAgZyA9IGRhdGFbaSArIDFdO1xuICAgICAgICBiID0gZGF0YVtpICsgMl07XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICAgICAgICBjYXNlICdtdWx0aXBseSc6XG4gICAgICAgICAgICBkYXRhW2ldID0gciAqIHRyIC8gMjU1O1xuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSBnICogdGcgLyAyNTU7XG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IGIgKiB0YiAvIDI1NTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3NjcmVlbic6XG4gICAgICAgICAgICBkYXRhW2ldID0gMjU1IC0gKDI1NSAtIHIpICogKDI1NSAtIHRyKSAvIDI1NTtcbiAgICAgICAgICAgIGRhdGFbaSArIDFdID0gMjU1IC0gKDI1NSAtIGcpICogKDI1NSAtIHRnKSAvIDI1NTtcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gMjU1IC0gKDI1NSAtIGIpICogKDI1NSAtIHRiKSAvIDI1NTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2FkZCc6XG4gICAgICAgICAgICBkYXRhW2ldID0gciArIHRyO1xuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSBnICsgdGc7XG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IGIgKyB0YjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2RpZmYnOlxuICAgICAgICAgIGNhc2UgJ2RpZmZlcmVuY2UnOlxuICAgICAgICAgICAgZGF0YVtpXSA9IE1hdGguYWJzKHIgLSB0cik7XG4gICAgICAgICAgICBkYXRhW2kgKyAxXSA9IE1hdGguYWJzKGcgLSB0Zyk7XG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IE1hdGguYWJzKGIgLSB0Yik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdzdWJ0cmFjdCc6XG4gICAgICAgICAgICBkYXRhW2ldID0gciAtIHRyO1xuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSBnIC0gdGc7XG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IGIgLSB0YjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Rhcmtlbic6XG4gICAgICAgICAgICBkYXRhW2ldID0gTWF0aC5taW4ociwgdHIpO1xuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSBNYXRoLm1pbihnLCB0Zyk7XG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IE1hdGgubWluKGIsIHRiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2xpZ2h0ZW4nOlxuICAgICAgICAgICAgZGF0YVtpXSA9IE1hdGgubWF4KHIsIHRyKTtcbiAgICAgICAgICAgIGRhdGFbaSArIDFdID0gTWF0aC5tYXgoZywgdGcpO1xuICAgICAgICAgICAgZGF0YVtpICsgMl0gPSBNYXRoLm1heChiLCB0Yik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdvdmVybGF5JzpcbiAgICAgICAgICAgIGRhdGFbaV0gPSB0ciA8IDEyOCA/ICgyICogciAqIHRyIC8gMjU1KSA6ICgyNTUgLSAyICogKDI1NSAtIHIpICogKDI1NSAtIHRyKSAvIDI1NSk7XG4gICAgICAgICAgICBkYXRhW2kgKyAxXSA9IHRnIDwgMTI4ID8gKDIgKiBnICogdGcgLyAyNTUpIDogKDI1NSAtIDIgKiAoMjU1IC0gZykgKiAoMjU1IC0gdGcpIC8gMjU1KTtcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gdGIgPCAxMjggPyAoMiAqIGIgKiB0YiAvIDI1NSkgOiAoMjU1IC0gMiAqICgyNTUgLSBiKSAqICgyNTUgLSB0YikgLyAyNTUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZXhjbHVzaW9uJzpcbiAgICAgICAgICAgIGRhdGFbaV0gPSB0ciArIHIgLSAoKDIgKiB0ciAqIHIpIC8gMjU1KTtcbiAgICAgICAgICAgIGRhdGFbaSArIDFdID0gdGcgKyBnIC0gKCgyICogdGcgKiBnKSAvIDI1NSk7XG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IHRiICsgYiAtICgoMiAqIHRiICogYikgLyAyNTUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGludCc6XG4gICAgICAgICAgICBkYXRhW2ldID0gdHIgKyByICogYWxwaGExO1xuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSB0ZyArIGcgKiBhbHBoYTE7XG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IHRiICsgYiAqIGFscGhhMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gV2ViR0wgdW5pZm9ybSBsb2NhdGlvbnMgZm9yIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhpcyBmaWx0ZXIncyBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBnZXRVbmlmb3JtTG9jYXRpb25zOiBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdUNvbG9yOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VDb2xvcicpLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VuZCBkYXRhIGZyb20gdGhpcyBmaWx0ZXIgdG8gaXRzIHNoYWRlciBwcm9ncmFtJ3MgdW5pZm9ybXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdW5pZm9ybUxvY2F0aW9ucyBBIG1hcCBvZiBzdHJpbmcgdW5pZm9ybSBuYW1lcyB0byBXZWJHTFVuaWZvcm1Mb2NhdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgc2VuZFVuaWZvcm1EYXRhOiBmdW5jdGlvbihnbCwgdW5pZm9ybUxvY2F0aW9ucykge1xuICAgICAgdmFyIHNvdXJjZSA9IG5ldyBmYWJyaWMuQ29sb3IodGhpcy5jb2xvcikuZ2V0U291cmNlKCk7XG4gICAgICBzb3VyY2VbMF0gPSB0aGlzLmFscGhhICogc291cmNlWzBdIC8gMjU1O1xuICAgICAgc291cmNlWzFdID0gdGhpcy5hbHBoYSAqIHNvdXJjZVsxXSAvIDI1NTtcbiAgICAgIHNvdXJjZVsyXSA9IHRoaXMuYWxwaGEgKiBzb3VyY2VbMl0gLyAyNTU7XG4gICAgICBzb3VyY2VbM10gPSB0aGlzLmFscGhhO1xuICAgICAgZ2wudW5pZm9ybTRmdih1bmlmb3JtTG9jYXRpb25zLnVDb2xvciwgc291cmNlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgY29sb3I6IHRoaXMuY29sb3IsXG4gICAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgICAgYWxwaGE6IHRoaXMuYWxwaGFcbiAgICAgIH07XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIHRvIGJlIGludm9rZWQgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kQ29sb3J9IEluc3RhbmNlIG9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kQ29sb3JcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kQ29sb3IuZnJvbU9iamVjdCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXIuZnJvbU9iamVjdDtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljLFxuICAgICAgZmlsdGVycyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLFxuICAgICAgY3JlYXRlQ2xhc3MgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcztcblxuICAvKipcbiAgICogSW1hZ2UgQmxlbmQgZmlsdGVyIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuSW1hZ2UuZmlsdGVyLkJsZW5kSW1hZ2VcbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CbGVuZENvbG9yKHtcbiAgICogIGNvbG9yOiAnIzAwMCcsXG4gICAqICBtb2RlOiAnbXVsdGlwbHknXG4gICAqIH0pO1xuICAgKlxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kSW1hZ2Uoe1xuICAgKiAgaW1hZ2U6IGZhYnJpY0ltYWdlT2JqZWN0LFxuICAgKiAgbW9kZTogJ211bHRpcGx5JyxcbiAgICogIGFscGhhOiAwLjVcbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKiBjYW52YXMucmVuZGVyQWxsKCk7XG4gICAqL1xuXG4gIGZpbHRlcnMuQmxlbmRJbWFnZSA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQmFzZUZpbHRlciwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CbGVuZEltYWdlLnByb3RvdHlwZSAqLyB7XG4gICAgdHlwZTogJ0JsZW5kSW1hZ2UnLFxuXG4gICAgLyoqXG4gICAgICogQ29sb3IgdG8gbWFrZSB0aGUgYmxlbmQgb3BlcmF0aW9uIHdpdGguIGRlZmF1bHQgdG8gYSByZWRkaXNoIGNvbG9yIHNpbmNlIGJsYWNrIG9yIHdoaXRlXG4gICAgICogZ2l2ZXMgYWx3YXlzIHN0cm9uZyByZXN1bHQuXG4gICAgICoqL1xuICAgIGltYWdlOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogQmxlbmQgbW9kZSBmb3IgdGhlIGZpbHRlciAob25lIG9mIFwibXVsdGlwbHlcIiwgXCJtYXNrXCIpXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKiovXG4gICAgbW9kZTogJ211bHRpcGx5JyxcblxuICAgIC8qKlxuICAgICAqIGFscGhhIHZhbHVlLiByZXByZXNlbnQgdGhlIHN0cmVuZ3RoIG9mIHRoZSBibGVuZCBpbWFnZSBvcGVyYXRpb24uXG4gICAgICogbm90IGltcGxlbWVudGVkLlxuICAgICAqKi9cbiAgICBhbHBoYTogMSxcblxuICAgIHZlcnRleFNvdXJjZTogJ2F0dHJpYnV0ZSB2ZWMyIGFQb3NpdGlvbjtcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQyO1xcbicgK1xuICAgICAgJ3VuaWZvcm0gbWF0MyB1VHJhbnNmb3JtTWF0cml4O1xcbicgK1xuICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgJ3ZUZXhDb29yZCA9IGFQb3NpdGlvbjtcXG4nICtcbiAgICAgICAgJ3ZUZXhDb29yZDIgPSAodVRyYW5zZm9ybU1hdHJpeCAqIHZlYzMoYVBvc2l0aW9uLCAxLjApKS54eTtcXG4nICtcbiAgICAgICAgJ2dsX1Bvc2l0aW9uID0gdmVjNChhUG9zaXRpb24gKiAyLjAgLSAxLjAsIDAuMCwgMS4wKTtcXG4nICtcbiAgICAgICd9JyxcblxuICAgIC8qKlxuICAgICAqIEZyYWdtZW50IHNvdXJjZSBmb3IgdGhlIE11bHRpcGx5IHByb2dyYW1cbiAgICAgKi9cbiAgICBmcmFnbWVudFNvdXJjZToge1xuICAgICAgbXVsdGlwbHk6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVJbWFnZTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gdmVjNCB1Q29sb3I7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDI7XFxuJyArXG4gICAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJyArXG4gICAgICAgICAgJ3ZlYzQgY29sb3IyID0gdGV4dHVyZTJEKHVJbWFnZSwgdlRleENvb3JkMik7XFxuJyArXG4gICAgICAgICAgJ2NvbG9yLnJnYmEgKj0gY29sb3IyLnJnYmE7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgICAnfScsXG4gICAgICBtYXNrOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1SW1hZ2U7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHZlYzQgdUNvbG9yO1xcbicgK1xuICAgICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQyO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQpO1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yMiA9IHRleHR1cmUyRCh1SW1hZ2UsIHZUZXhDb29yZDIpO1xcbicgK1xuICAgICAgICAgICdjb2xvci5hID0gY29sb3IyLmE7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgICAnfScsXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgY2FjaGVkIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBvcHRpb25zLmNvbnRleHQgVGhlIEdMIGNvbnRleHQgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnByb2dyYW1DYWNoZSBBIG1hcCBvZiBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbXMsIGtleWVkIGJ5IGZpbHRlciB0eXBlLlxuICAgICAqL1xuICAgIHJldHJpZXZlU2hhZGVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgY2FjaGVLZXkgPSB0aGlzLnR5cGUgKyAnXycgKyB0aGlzLm1vZGU7XG4gICAgICB2YXIgc2hhZGVyU291cmNlID0gdGhpcy5mcmFnbWVudFNvdXJjZVt0aGlzLm1vZGVdO1xuICAgICAgaWYgKCFvcHRpb25zLnByb2dyYW1DYWNoZS5oYXNPd25Qcm9wZXJ0eShjYWNoZUtleSkpIHtcbiAgICAgICAgb3B0aW9ucy5wcm9ncmFtQ2FjaGVbY2FjaGVLZXldID0gdGhpcy5jcmVhdGVQcm9ncmFtKG9wdGlvbnMuY29udGV4dCwgc2hhZGVyU291cmNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25zLnByb2dyYW1DYWNoZVtjYWNoZUtleV07XG4gICAgfSxcblxuICAgIGFwcGx5VG9XZWJHTDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgLy8gbG9hZCB0ZXh0dXJlIHRvIGJsZW5kLlxuICAgICAgdmFyIGdsID0gb3B0aW9ucy5jb250ZXh0LFxuICAgICAgICAgIHRleHR1cmUgPSB0aGlzLmNyZWF0ZVRleHR1cmUob3B0aW9ucy5maWx0ZXJCYWNrZW5kLCB0aGlzLmltYWdlKTtcbiAgICAgIHRoaXMuYmluZEFkZGl0aW9uYWxUZXh0dXJlKGdsLCB0ZXh0dXJlLCBnbC5URVhUVVJFMSk7XG4gICAgICB0aGlzLmNhbGxTdXBlcignYXBwbHlUb1dlYkdMJywgb3B0aW9ucyk7XG4gICAgICB0aGlzLnVuYmluZEFkZGl0aW9uYWxUZXh0dXJlKGdsLCBnbC5URVhUVVJFMSk7XG4gICAgfSxcblxuICAgIGNyZWF0ZVRleHR1cmU6IGZ1bmN0aW9uKGJhY2tlbmQsIGltYWdlKSB7XG4gICAgICByZXR1cm4gYmFja2VuZC5nZXRDYWNoZWRUZXh0dXJlKGltYWdlLmNhY2hlS2V5LCBpbWFnZS5fZWxlbWVudCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBhIHRyYW5zZm9ybU1hdHJpeCB0byBhZGFwdCB0aGUgaW1hZ2UgdG8gYmxlbmQgb3ZlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IG9wdGlvbnMuY29udGV4dCBUaGUgR0wgY29udGV4dCB1c2VkIGZvciByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMucHJvZ3JhbUNhY2hlIEEgbWFwIG9mIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtcywga2V5ZWQgYnkgZmlsdGVyIHR5cGUuXG4gICAgICovXG4gICAgY2FsY3VsYXRlTWF0cml4OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbWFnZSA9IHRoaXMuaW1hZ2UsXG4gICAgICAgICAgd2lkdGggPSBpbWFnZS5fZWxlbWVudC53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBpbWFnZS5fZWxlbWVudC5oZWlnaHQ7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAxIC8gaW1hZ2Uuc2NhbGVYLCAwLCAwLFxuICAgICAgICAwLCAxIC8gaW1hZ2Uuc2NhbGVZLCAwLFxuICAgICAgICAtaW1hZ2UubGVmdCAvIHdpZHRoLCAtaW1hZ2UudG9wIC8gaGVpZ2h0LCAxXG4gICAgICBdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGUgQmxlbmQgb3BlcmF0aW9uIHRvIGEgVWludDhDbGFtcGVkQXJyYXkgcmVwcmVzZW50aW5nIHRoZSBwaXhlbHMgb2YgYW4gaW1hZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7SW1hZ2VEYXRhfSBvcHRpb25zLmltYWdlRGF0YSBUaGUgVWludDhDbGFtcGVkQXJyYXkgdG8gYmUgZmlsdGVyZWQuXG4gICAgICovXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsXG4gICAgICAgICAgcmVzb3VyY2VzID0gb3B0aW9ucy5maWx0ZXJCYWNrZW5kLnJlc291cmNlcyxcbiAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsIGlMZW4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICB3aWR0aCA9IGltYWdlRGF0YS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBpbWFnZURhdGEuaGVpZ2h0LFxuICAgICAgICAgIHRyLCB0ZywgdGIsIHRhLFxuICAgICAgICAgIHIsIGcsIGIsIGEsXG4gICAgICAgICAgY2FudmFzMSwgY29udGV4dCwgaW1hZ2UgPSB0aGlzLmltYWdlLCBibGVuZERhdGE7XG5cbiAgICAgIGlmICghcmVzb3VyY2VzLmJsZW5kSW1hZ2UpIHtcbiAgICAgICAgcmVzb3VyY2VzLmJsZW5kSW1hZ2UgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgICB9XG4gICAgICBjYW52YXMxID0gcmVzb3VyY2VzLmJsZW5kSW1hZ2U7XG4gICAgICBjb250ZXh0ID0gY2FudmFzMS5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgaWYgKGNhbnZhczEud2lkdGggIT09IHdpZHRoIHx8IGNhbnZhczEuaGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgY2FudmFzMS53aWR0aCA9IHdpZHRoO1xuICAgICAgICBjYW52YXMxLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQuc2V0VHJhbnNmb3JtKGltYWdlLnNjYWxlWCwgMCwgMCwgaW1hZ2Uuc2NhbGVZLCBpbWFnZS5sZWZ0LCBpbWFnZS50b3ApO1xuICAgICAgY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UuX2VsZW1lbnQsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgYmxlbmREYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaUxlbjsgaSArPSA0KSB7XG5cbiAgICAgICAgciA9IGRhdGFbaV07XG4gICAgICAgIGcgPSBkYXRhW2kgKyAxXTtcbiAgICAgICAgYiA9IGRhdGFbaSArIDJdO1xuICAgICAgICBhID0gZGF0YVtpICsgM107XG5cbiAgICAgICAgdHIgPSBibGVuZERhdGFbaV07XG4gICAgICAgIHRnID0gYmxlbmREYXRhW2kgKyAxXTtcbiAgICAgICAgdGIgPSBibGVuZERhdGFbaSArIDJdO1xuICAgICAgICB0YSA9IGJsZW5kRGF0YVtpICsgM107XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICAgICAgICBjYXNlICdtdWx0aXBseSc6XG4gICAgICAgICAgICBkYXRhW2ldID0gciAqIHRyIC8gMjU1O1xuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSBnICogdGcgLyAyNTU7XG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IGIgKiB0YiAvIDI1NTtcbiAgICAgICAgICAgIGRhdGFbaSArIDNdID0gYSAqIHRhIC8gMjU1O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbWFzayc6XG4gICAgICAgICAgICBkYXRhW2kgKyAzXSA9IHRhO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFdlYkdMIHVuaWZvcm0gbG9jYXRpb25zIGZvciB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoaXMgZmlsdGVyJ3MgY29tcGlsZWQgc2hhZGVyIHByb2dyYW0uXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVUcmFuc2Zvcm1NYXRyaXg6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndVRyYW5zZm9ybU1hdHJpeCcpLFxuICAgICAgICB1SW1hZ2U6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndUltYWdlJyksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0ncyB1bmlmb3Jtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHN0cmluZyB1bmlmb3JtIG5hbWVzIHRvIFdlYkdMVW5pZm9ybUxvY2F0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBzZW5kVW5pZm9ybURhdGE6IGZ1bmN0aW9uKGdsLCB1bmlmb3JtTG9jYXRpb25zKSB7XG4gICAgICB2YXIgbWF0cml4ID0gdGhpcy5jYWxjdWxhdGVNYXRyaXgoKTtcbiAgICAgIGdsLnVuaWZvcm0xaSh1bmlmb3JtTG9jYXRpb25zLnVJbWFnZSwgMSk7IC8vIHRleHR1cmUgdW5pdCAxLlxuICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdih1bmlmb3JtTG9jYXRpb25zLnVUcmFuc2Zvcm1NYXRyaXgsIGZhbHNlLCBtYXRyaXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICBpbWFnZTogdGhpcy5pbWFnZSAmJiB0aGlzLmltYWdlLnRvT2JqZWN0KCksXG4gICAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgICAgYWxwaGE6IHRoaXMuYWxwaGFcbiAgICAgIH07XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5CbGVuZEltYWdlfSBJbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CbGVuZEltYWdlXG4gICAqL1xuICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CbGVuZEltYWdlLmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgZmFicmljLkltYWdlLmZyb21PYmplY3Qob2JqZWN0LmltYWdlLCBmdW5jdGlvbihpbWFnZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUob2JqZWN0KTtcbiAgICAgIG9wdGlvbnMuaW1hZ2UgPSBpbWFnZTtcbiAgICAgIGNhbGxiYWNrKG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CbGVuZEltYWdlKG9wdGlvbnMpKTtcbiAgICB9KTtcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyAgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSwgcG93ID0gTWF0aC5wb3csIGZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgIHNxcnQgPSBNYXRoLnNxcnQsIGFicyA9IE1hdGguYWJzLCByb3VuZCA9IE1hdGgucm91bmQsIHNpbiA9IE1hdGguc2luLFxuICAgICAgY2VpbCA9IE1hdGguY2VpbCxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIFJlc2l6ZSBpbWFnZSBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlJlc2l6ZVxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuUmVzaXplKCk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycyhjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSk7XG4gICAqL1xuICBmaWx0ZXJzLlJlc2l6ZSA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQmFzZUZpbHRlciwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZXNpemUucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdSZXNpemUnLFxuXG4gICAgLyoqXG4gICAgICogUmVzaXplIHR5cGVcbiAgICAgKiBmb3Igd2ViZ2wgcmVzaXplVHlwZSBpcyBqdXN0IGxhbmN6b3MsIGZvciBjYW52YXMyZCBjYW4gYmU6XG4gICAgICogYmlsaW5lYXIsIGhlcm1pdGUsIHNsaWNlSGFjaywgbGFuY3pvcy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcmVzaXplVHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcmVzaXplVHlwZTogJ2hlcm1pdGUnLFxuXG4gICAgLyoqXG4gICAgICogU2NhbGUgZmFjdG9yIGZvciByZXNpemluZywgeCBheGlzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlWFxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2NhbGVYOiAxLFxuXG4gICAgLyoqXG4gICAgICogU2NhbGUgZmFjdG9yIGZvciByZXNpemluZywgeSBheGlzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlWVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2NhbGVZOiAxLFxuXG4gICAgLyoqXG4gICAgICogTGFuY3pvc0xvYmVzIHBhcmFtZXRlciBmb3IgbGFuY3pvcyBmaWx0ZXIsIHZhbGlkIGZvciByZXNpemVUeXBlIGxhbmN6b3NcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGFuY3pvc0xvYmVzXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBsYW5jem9zTG9iZXM6IDMsXG5cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBXZWJHTCB1bmlmb3JtIGxvY2F0aW9ucyBmb3IgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGlzIGZpbHRlcidzIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1RGVsdGE6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndURlbHRhJyksXG4gICAgICAgIHVUYXBzOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VUYXBzJyksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0ncyB1bmlmb3Jtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHN0cmluZyB1bmlmb3JtIG5hbWVzIHRvIFdlYkdMVW5pZm9ybUxvY2F0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBzZW5kVW5pZm9ybURhdGE6IGZ1bmN0aW9uKGdsLCB1bmlmb3JtTG9jYXRpb25zKSB7XG4gICAgICBnbC51bmlmb3JtMmZ2KHVuaWZvcm1Mb2NhdGlvbnMudURlbHRhLCB0aGlzLmhvcml6b250YWwgPyBbMSAvIHRoaXMud2lkdGgsIDBdIDogWzAsIDEgLyB0aGlzLmhlaWdodF0pO1xuICAgICAgZ2wudW5pZm9ybTFmdih1bmlmb3JtTG9jYXRpb25zLnVUYXBzLCB0aGlzLnRhcHMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGNhY2hlZCBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gb3B0aW9ucy5jb250ZXh0IFRoZSBHTCBjb250ZXh0IHVzZWQgZm9yIHJlbmRlcmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5wcm9ncmFtQ2FjaGUgQSBtYXAgb2YgY29tcGlsZWQgc2hhZGVyIHByb2dyYW1zLCBrZXllZCBieSBmaWx0ZXIgdHlwZS5cbiAgICAgKi9cbiAgICByZXRyaWV2ZVNoYWRlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGZpbHRlcldpbmRvdyA9IHRoaXMuZ2V0RmlsdGVyV2luZG93KCksIGNhY2hlS2V5ID0gdGhpcy50eXBlICsgJ18nICsgZmlsdGVyV2luZG93O1xuICAgICAgaWYgKCFvcHRpb25zLnByb2dyYW1DYWNoZS5oYXNPd25Qcm9wZXJ0eShjYWNoZUtleSkpIHtcbiAgICAgICAgdmFyIGZyYWdtZW50U2hhZGVyID0gdGhpcy5nZW5lcmF0ZVNoYWRlcihmaWx0ZXJXaW5kb3cpO1xuICAgICAgICBvcHRpb25zLnByb2dyYW1DYWNoZVtjYWNoZUtleV0gPSB0aGlzLmNyZWF0ZVByb2dyYW0ob3B0aW9ucy5jb250ZXh0LCBmcmFnbWVudFNoYWRlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3B0aW9ucy5wcm9ncmFtQ2FjaGVbY2FjaGVLZXldO1xuICAgIH0sXG5cbiAgICBnZXRGaWx0ZXJXaW5kb3c6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjYWxlID0gdGhpcy50ZW1wU2NhbGU7XG4gICAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMubGFuY3pvc0xvYmVzIC8gc2NhbGUpO1xuICAgIH0sXG5cbiAgICBnZXRUYXBzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsb2JlRnVuY3Rpb24gPSB0aGlzLmxhbmN6b3NDcmVhdGUodGhpcy5sYW5jem9zTG9iZXMpLCBzY2FsZSA9IHRoaXMudGVtcFNjYWxlLFxuICAgICAgICAgIGZpbHRlcldpbmRvdyA9IHRoaXMuZ2V0RmlsdGVyV2luZG93KCksIHRhcHMgPSBuZXcgQXJyYXkoZmlsdGVyV2luZG93KTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGZpbHRlcldpbmRvdzsgaSsrKSB7XG4gICAgICAgIHRhcHNbaSAtIDFdID0gbG9iZUZ1bmN0aW9uKGkgKiBzY2FsZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFwcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgdmVydGV4IGFuZCBzaGFkZXIgc291cmNlcyBmcm9tIHRoZSBuZWNlc3Nhcnkgc3RlcHMgbnVtYmVyc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmaWx0ZXJXaW5kb3dcbiAgICAgKi9cbiAgICBnZW5lcmF0ZVNoYWRlcjogZnVuY3Rpb24oZmlsdGVyV2luZG93KSB7XG4gICAgICB2YXIgb2Zmc2V0cyA9IG5ldyBBcnJheShmaWx0ZXJXaW5kb3cpLFxuICAgICAgICAgIGZyYWdtZW50U2hhZGVyID0gdGhpcy5mcmFnbWVudFNvdXJjZVRPUCwgZmlsdGVyV2luZG93O1xuXG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBmaWx0ZXJXaW5kb3c7IGkrKykge1xuICAgICAgICBvZmZzZXRzW2kgLSAxXSA9IGkgKyAnLjAgKiB1RGVsdGEnO1xuICAgICAgfVxuXG4gICAgICBmcmFnbWVudFNoYWRlciArPSAndW5pZm9ybSBmbG9hdCB1VGFwc1snICsgZmlsdGVyV2luZG93ICsgJ107XFxuJztcbiAgICAgIGZyYWdtZW50U2hhZGVyICs9ICd2b2lkIG1haW4oKSB7XFxuJztcbiAgICAgIGZyYWdtZW50U2hhZGVyICs9ICcgIHZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJztcbiAgICAgIGZyYWdtZW50U2hhZGVyICs9ICcgIGZsb2F0IHN1bSA9IDEuMDtcXG4nO1xuXG4gICAgICBvZmZzZXRzLmZvckVhY2goZnVuY3Rpb24ob2Zmc2V0LCBpKSB7XG4gICAgICAgIGZyYWdtZW50U2hhZGVyICs9ICcgIGNvbG9yICs9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkICsgJyArIG9mZnNldCArICcpICogdVRhcHNbJyArIGkgKyAnXTtcXG4nO1xuICAgICAgICBmcmFnbWVudFNoYWRlciArPSAnICBjb2xvciArPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCAtICcgKyBvZmZzZXQgKyAnKSAqIHVUYXBzWycgKyBpICsgJ107XFxuJztcbiAgICAgICAgZnJhZ21lbnRTaGFkZXIgKz0gJyAgc3VtICs9IDIuMCAqIHVUYXBzWycgKyBpICsgJ107XFxuJztcbiAgICAgIH0pO1xuICAgICAgZnJhZ21lbnRTaGFkZXIgKz0gJyAgZ2xfRnJhZ0NvbG9yID0gY29sb3IgLyBzdW07XFxuJztcbiAgICAgIGZyYWdtZW50U2hhZGVyICs9ICd9JztcbiAgICAgIHJldHVybiBmcmFnbWVudFNoYWRlcjtcbiAgICB9LFxuXG4gICAgZnJhZ21lbnRTb3VyY2VUT1A6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAndW5pZm9ybSB2ZWMyIHVEZWx0YTtcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicsXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGUgcmVzaXplIGZpbHRlciB0byB0aGUgaW1hZ2VcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gdXNlIFdlYkdMIG9yIENhbnZhczJEIGJhc2VkIG9uIHRoZSBvcHRpb25zLndlYmdsIGZsYWcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnBhc3NlcyBUaGUgbnVtYmVyIG9mIGZpbHRlcnMgcmVtYWluaW5nIHRvIGJlIGV4ZWN1dGVkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLndlYmdsIFdoZXRoZXIgdG8gdXNlIHdlYmdsIHRvIHJlbmRlciB0aGUgZmlsdGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xUZXh0dXJlfSBvcHRpb25zLnNvdXJjZVRleHR1cmUgVGhlIHRleHR1cmUgc2V0dXAgYXMgdGhlIHNvdXJjZSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgKiBAcGFyYW0ge1dlYkdMVGV4dHVyZX0gb3B0aW9ucy50YXJnZXRUZXh0dXJlIFRoZSB0ZXh0dXJlIHdoZXJlIGZpbHRlcmVkIG91dHB1dCBzaG91bGQgYmUgZHJhd24uXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IG9wdGlvbnMuY29udGV4dCBUaGUgR0wgY29udGV4dCB1c2VkIGZvciByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMucHJvZ3JhbUNhY2hlIEEgbWFwIG9mIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtcywga2V5ZWQgYnkgZmlsdGVyIHR5cGUuXG4gICAgICovXG4gICAgYXBwbHlUbzogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMud2ViZ2wpIHtcbiAgICAgICAgb3B0aW9ucy5wYXNzZXMrKztcbiAgICAgICAgdGhpcy53aWR0aCA9IG9wdGlvbnMuc291cmNlV2lkdGg7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbCA9IHRydWU7XG4gICAgICAgIHRoaXMuZFcgPSBNYXRoLnJvdW5kKHRoaXMud2lkdGggKiB0aGlzLnNjYWxlWCk7XG4gICAgICAgIHRoaXMuZEggPSBvcHRpb25zLnNvdXJjZUhlaWdodDtcbiAgICAgICAgdGhpcy50ZW1wU2NhbGUgPSB0aGlzLmRXIC8gdGhpcy53aWR0aDtcbiAgICAgICAgdGhpcy50YXBzID0gdGhpcy5nZXRUYXBzKCk7XG4gICAgICAgIG9wdGlvbnMuZGVzdGluYXRpb25XaWR0aCA9IHRoaXMuZFc7XG4gICAgICAgIHRoaXMuX3NldHVwRnJhbWVCdWZmZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYXBwbHlUb1dlYkdMKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9zd2FwVGV4dHVyZXMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuc291cmNlV2lkdGggPSBvcHRpb25zLmRlc3RpbmF0aW9uV2lkdGg7XG5cbiAgICAgICAgdGhpcy5oZWlnaHQgPSBvcHRpb25zLnNvdXJjZUhlaWdodDtcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZEggPSBNYXRoLnJvdW5kKHRoaXMuaGVpZ2h0ICogdGhpcy5zY2FsZVkpO1xuICAgICAgICB0aGlzLnRlbXBTY2FsZSA9IHRoaXMuZEggLyB0aGlzLmhlaWdodDtcbiAgICAgICAgdGhpcy50YXBzID0gdGhpcy5nZXRUYXBzKCk7XG4gICAgICAgIG9wdGlvbnMuZGVzdGluYXRpb25IZWlnaHQgPSB0aGlzLmRIO1xuICAgICAgICB0aGlzLl9zZXR1cEZyYW1lQnVmZmVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFwcGx5VG9XZWJHTChvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fc3dhcFRleHR1cmVzKG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zLnNvdXJjZUhlaWdodCA9IG9wdGlvbnMuZGVzdGluYXRpb25IZWlnaHQ7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5hcHBseVRvMmQob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGlzTmV1dHJhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNjYWxlWCA9PT0gMSAmJiB0aGlzLnNjYWxlWSA9PT0gMTtcbiAgICB9LFxuXG4gICAgbGFuY3pvc0NyZWF0ZTogZnVuY3Rpb24obG9iZXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICAgIGlmICh4ID49IGxvYmVzIHx8IHggPD0gLWxvYmVzKSB7XG4gICAgICAgICAgcmV0dXJuIDAuMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeCA8IDEuMTkyMDkyOTBFLTA3ICYmIHggPiAtMS4xOTIwOTI5MEUtMDcpIHtcbiAgICAgICAgICByZXR1cm4gMS4wO1xuICAgICAgICB9XG4gICAgICAgIHggKj0gTWF0aC5QSTtcbiAgICAgICAgdmFyIHh4ID0geCAvIGxvYmVzO1xuICAgICAgICByZXR1cm4gKHNpbih4KSAvIHgpICogc2luKHh4KSAvIHh4O1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyBmaWx0ZXIgdG8gY2FudmFzIGVsZW1lbnRcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnMuUmVzaXplLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjYW52YXNFbCBDYW52YXMgZWxlbWVudCB0byBhcHBseSBmaWx0ZXIgdG9cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGVYXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlWVxuICAgICAqL1xuICAgIGFwcGx5VG8yZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGltYWdlRGF0YSA9IG9wdGlvbnMuaW1hZ2VEYXRhLFxuICAgICAgICAgIHNjYWxlWCA9IHRoaXMuc2NhbGVYLFxuICAgICAgICAgIHNjYWxlWSA9IHRoaXMuc2NhbGVZO1xuXG4gICAgICB0aGlzLnJjcFNjYWxlWCA9IDEgLyBzY2FsZVg7XG4gICAgICB0aGlzLnJjcFNjYWxlWSA9IDEgLyBzY2FsZVk7XG5cbiAgICAgIHZhciBvVyA9IGltYWdlRGF0YS53aWR0aCwgb0ggPSBpbWFnZURhdGEuaGVpZ2h0LFxuICAgICAgICAgIGRXID0gcm91bmQob1cgKiBzY2FsZVgpLCBkSCA9IHJvdW5kKG9IICogc2NhbGVZKSxcbiAgICAgICAgICBuZXdEYXRhO1xuXG4gICAgICBpZiAodGhpcy5yZXNpemVUeXBlID09PSAnc2xpY2VIYWNrJykge1xuICAgICAgICBuZXdEYXRhID0gdGhpcy5zbGljZUJ5VHdvKG9wdGlvbnMsIG9XLCBvSCwgZFcsIGRIKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMucmVzaXplVHlwZSA9PT0gJ2hlcm1pdGUnKSB7XG4gICAgICAgIG5ld0RhdGEgPSB0aGlzLmhlcm1pdGVGYXN0UmVzaXplKG9wdGlvbnMsIG9XLCBvSCwgZFcsIGRIKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMucmVzaXplVHlwZSA9PT0gJ2JpbGluZWFyJykge1xuICAgICAgICBuZXdEYXRhID0gdGhpcy5iaWxpbmVhckZpbHRlcmluZyhvcHRpb25zLCBvVywgb0gsIGRXLCBkSCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0aGlzLnJlc2l6ZVR5cGUgPT09ICdsYW5jem9zJykge1xuICAgICAgICBuZXdEYXRhID0gdGhpcy5sYW5jem9zUmVzaXplKG9wdGlvbnMsIG9XLCBvSCwgZFcsIGRIKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMuaW1hZ2VEYXRhID0gbmV3RGF0YTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHNsaWNlQnlUd29cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY2FudmFzRWwgQ2FudmFzIGVsZW1lbnQgdG8gYXBwbHkgZmlsdGVyIHRvXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9XIE9yaWdpbmFsIFdpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9IIE9yaWdpbmFsIEhlaWdodFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkVyBEZXN0aW5hdGlvbiBXaWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkSCBEZXN0aW5hdGlvbiBIZWlnaHRcbiAgICAgKiBAcmV0dXJucyB7SW1hZ2VEYXRhfVxuICAgICAqL1xuICAgIHNsaWNlQnlUd286IGZ1bmN0aW9uKG9wdGlvbnMsIG9XLCBvSCwgZFcsIGRIKSB7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsXG4gICAgICAgICAgbXVsdCA9IDAuNSwgZG9uZVcgPSBmYWxzZSwgZG9uZUggPSBmYWxzZSwgc3RlcFcgPSBvVyAqIG11bHQsXG4gICAgICAgICAgc3RlcEggPSBvSCAqIG11bHQsIHJlc291cmNlcyA9IGZhYnJpYy5maWx0ZXJCYWNrZW5kLnJlc291cmNlcyxcbiAgICAgICAgICB0bXBDYW52YXMsIGN0eCwgc1ggPSAwLCBzWSA9IDAsIGRYID0gb1csIGRZID0gMDtcbiAgICAgIGlmICghcmVzb3VyY2VzLnNsaWNlQnlUd28pIHtcbiAgICAgICAgcmVzb3VyY2VzLnNsaWNlQnlUd28gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgIH1cbiAgICAgIHRtcENhbnZhcyA9IHJlc291cmNlcy5zbGljZUJ5VHdvO1xuICAgICAgaWYgKHRtcENhbnZhcy53aWR0aCA8IG9XICogMS41IHx8IHRtcENhbnZhcy5oZWlnaHQgPCBvSCkge1xuICAgICAgICB0bXBDYW52YXMud2lkdGggPSBvVyAqIDEuNTtcbiAgICAgICAgdG1wQ2FudmFzLmhlaWdodCA9IG9IO1xuICAgICAgfVxuICAgICAgY3R4ID0gdG1wQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIG9XICogMS41LCBvSCk7XG4gICAgICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG5cbiAgICAgIGRXID0gZmxvb3IoZFcpO1xuICAgICAgZEggPSBmbG9vcihkSCk7XG5cbiAgICAgIHdoaWxlICghZG9uZVcgfHwgIWRvbmVIKSB7XG4gICAgICAgIG9XID0gc3RlcFc7XG4gICAgICAgIG9IID0gc3RlcEg7XG4gICAgICAgIGlmIChkVyA8IGZsb29yKHN0ZXBXICogbXVsdCkpIHtcbiAgICAgICAgICBzdGVwVyA9IGZsb29yKHN0ZXBXICogbXVsdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3RlcFcgPSBkVztcbiAgICAgICAgICBkb25lVyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRIIDwgZmxvb3Ioc3RlcEggKiBtdWx0KSkge1xuICAgICAgICAgIHN0ZXBIID0gZmxvb3Ioc3RlcEggKiBtdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzdGVwSCA9IGRIO1xuICAgICAgICAgIGRvbmVIID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZHJhd0ltYWdlKHRtcENhbnZhcywgc1gsIHNZLCBvVywgb0gsIGRYLCBkWSwgc3RlcFcsIHN0ZXBIKTtcbiAgICAgICAgc1ggPSBkWDtcbiAgICAgICAgc1kgPSBkWTtcbiAgICAgICAgZFkgKz0gc3RlcEg7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3R4LmdldEltYWdlRGF0YShzWCwgc1ksIGRXLCBkSCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciBsYW5jem9zUmVzaXplXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNhbnZhc0VsIENhbnZhcyBlbGVtZW50IHRvIGFwcGx5IGZpbHRlciB0b1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvVyBPcmlnaW5hbCBXaWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvSCBPcmlnaW5hbCBIZWlnaHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZFcgRGVzdGluYXRpb24gV2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZEggRGVzdGluYXRpb24gSGVpZ2h0XG4gICAgICogQHJldHVybnMge0ltYWdlRGF0YX1cbiAgICAgKi9cbiAgICBsYW5jem9zUmVzaXplOiBmdW5jdGlvbihvcHRpb25zLCBvVywgb0gsIGRXLCBkSCkge1xuXG4gICAgICBmdW5jdGlvbiBwcm9jZXNzKHUpIHtcbiAgICAgICAgdmFyIHYsIGksIHdlaWdodCwgaWR4LCBhLCByZWQsIGdyZWVuLFxuICAgICAgICAgICAgYmx1ZSwgYWxwaGEsIGZYLCBmWTtcbiAgICAgICAgY2VudGVyLnggPSAodSArIDAuNSkgKiByYXRpb1g7XG4gICAgICAgIGljZW50ZXIueCA9IGZsb29yKGNlbnRlci54KTtcbiAgICAgICAgZm9yICh2ID0gMDsgdiA8IGRIOyB2KyspIHtcbiAgICAgICAgICBjZW50ZXIueSA9ICh2ICsgMC41KSAqIHJhdGlvWTtcbiAgICAgICAgICBpY2VudGVyLnkgPSBmbG9vcihjZW50ZXIueSk7XG4gICAgICAgICAgYSA9IDA7IHJlZCA9IDA7IGdyZWVuID0gMDsgYmx1ZSA9IDA7IGFscGhhID0gMDtcbiAgICAgICAgICBmb3IgKGkgPSBpY2VudGVyLnggLSByYW5nZTJYOyBpIDw9IGljZW50ZXIueCArIHJhbmdlMlg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPCAwIHx8IGkgPj0gb1cpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmWCA9IGZsb29yKDEwMDAgKiBhYnMoaSAtIGNlbnRlci54KSk7XG4gICAgICAgICAgICBpZiAoIWNhY2hlTGFuY1tmWF0pIHtcbiAgICAgICAgICAgICAgY2FjaGVMYW5jW2ZYXSA9IHsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGogPSBpY2VudGVyLnkgLSByYW5nZTJZOyBqIDw9IGljZW50ZXIueSArIHJhbmdlMlk7IGorKykge1xuICAgICAgICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBvSCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZZID0gZmxvb3IoMTAwMCAqIGFicyhqIC0gY2VudGVyLnkpKTtcbiAgICAgICAgICAgICAgaWYgKCFjYWNoZUxhbmNbZlhdW2ZZXSkge1xuICAgICAgICAgICAgICAgIGNhY2hlTGFuY1tmWF1bZlldID0gbGFuY3pvcyhzcXJ0KHBvdyhmWCAqIHJjcFJhdGlvWCwgMikgKyBwb3coZlkgKiByY3BSYXRpb1ksIDIpKSAvIDEwMDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdlaWdodCA9IGNhY2hlTGFuY1tmWF1bZlldO1xuICAgICAgICAgICAgICBpZiAod2VpZ2h0ID4gMCkge1xuICAgICAgICAgICAgICAgIGlkeCA9IChqICogb1cgKyBpKSAqIDQ7XG4gICAgICAgICAgICAgICAgYSArPSB3ZWlnaHQ7XG4gICAgICAgICAgICAgICAgcmVkICs9IHdlaWdodCAqIHNyY0RhdGFbaWR4XTtcbiAgICAgICAgICAgICAgICBncmVlbiArPSB3ZWlnaHQgKiBzcmNEYXRhW2lkeCArIDFdO1xuICAgICAgICAgICAgICAgIGJsdWUgKz0gd2VpZ2h0ICogc3JjRGF0YVtpZHggKyAyXTtcbiAgICAgICAgICAgICAgICBhbHBoYSArPSB3ZWlnaHQgKiBzcmNEYXRhW2lkeCArIDNdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlkeCA9ICh2ICogZFcgKyB1KSAqIDQ7XG4gICAgICAgICAgZGVzdERhdGFbaWR4XSA9IHJlZCAvIGE7XG4gICAgICAgICAgZGVzdERhdGFbaWR4ICsgMV0gPSBncmVlbiAvIGE7XG4gICAgICAgICAgZGVzdERhdGFbaWR4ICsgMl0gPSBibHVlIC8gYTtcbiAgICAgICAgICBkZXN0RGF0YVtpZHggKyAzXSA9IGFscGhhIC8gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgrK3UgPCBkVykge1xuICAgICAgICAgIHJldHVybiBwcm9jZXNzKHUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBkZXN0SW1nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzcmNEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEuZGF0YSxcbiAgICAgICAgICBkZXN0SW1nID0gb3B0aW9ucy5jdHguY3JlYXRlSW1hZ2VEYXRhKGRXLCBkSCksXG4gICAgICAgICAgZGVzdERhdGEgPSBkZXN0SW1nLmRhdGEsXG4gICAgICAgICAgbGFuY3pvcyA9IHRoaXMubGFuY3pvc0NyZWF0ZSh0aGlzLmxhbmN6b3NMb2JlcyksXG4gICAgICAgICAgcmF0aW9YID0gdGhpcy5yY3BTY2FsZVgsIHJhdGlvWSA9IHRoaXMucmNwU2NhbGVZLFxuICAgICAgICAgIHJjcFJhdGlvWCA9IDIgLyB0aGlzLnJjcFNjYWxlWCwgcmNwUmF0aW9ZID0gMiAvIHRoaXMucmNwU2NhbGVZLFxuICAgICAgICAgIHJhbmdlMlggPSBjZWlsKHJhdGlvWCAqIHRoaXMubGFuY3pvc0xvYmVzIC8gMiksXG4gICAgICAgICAgcmFuZ2UyWSA9IGNlaWwocmF0aW9ZICogdGhpcy5sYW5jem9zTG9iZXMgLyAyKSxcbiAgICAgICAgICBjYWNoZUxhbmMgPSB7IH0sIGNlbnRlciA9IHsgfSwgaWNlbnRlciA9IHsgfTtcblxuICAgICAgcmV0dXJuIHByb2Nlc3MoMCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGJpbGluZWFyRmlsdGVyaW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNhbnZhc0VsIENhbnZhcyBlbGVtZW50IHRvIGFwcGx5IGZpbHRlciB0b1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvVyBPcmlnaW5hbCBXaWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvSCBPcmlnaW5hbCBIZWlnaHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZFcgRGVzdGluYXRpb24gV2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZEggRGVzdGluYXRpb24gSGVpZ2h0XG4gICAgICogQHJldHVybnMge0ltYWdlRGF0YX1cbiAgICAgKi9cbiAgICBiaWxpbmVhckZpbHRlcmluZzogZnVuY3Rpb24ob3B0aW9ucywgb1csIG9ILCBkVywgZEgpIHtcbiAgICAgIHZhciBhLCBiLCBjLCBkLCB4LCB5LCBpLCBqLCB4RGlmZiwgeURpZmYsIGNobmwsXG4gICAgICAgICAgY29sb3IsIG9mZnNldCA9IDAsIG9yaWdQaXgsIHJhdGlvWCA9IHRoaXMucmNwU2NhbGVYLFxuICAgICAgICAgIHJhdGlvWSA9IHRoaXMucmNwU2NhbGVZLFxuICAgICAgICAgIHc0ID0gNCAqIChvVyAtIDEpLCBpbWcgPSBvcHRpb25zLmltYWdlRGF0YSxcbiAgICAgICAgICBwaXhlbHMgPSBpbWcuZGF0YSwgZGVzdEltYWdlID0gb3B0aW9ucy5jdHguY3JlYXRlSW1hZ2VEYXRhKGRXLCBkSCksXG4gICAgICAgICAgZGVzdFBpeGVscyA9IGRlc3RJbWFnZS5kYXRhO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGRIOyBpKyspIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGRXOyBqKyspIHtcbiAgICAgICAgICB4ID0gZmxvb3IocmF0aW9YICogaik7XG4gICAgICAgICAgeSA9IGZsb29yKHJhdGlvWSAqIGkpO1xuICAgICAgICAgIHhEaWZmID0gcmF0aW9YICogaiAtIHg7XG4gICAgICAgICAgeURpZmYgPSByYXRpb1kgKiBpIC0geTtcbiAgICAgICAgICBvcmlnUGl4ID0gNCAqICh5ICogb1cgKyB4KTtcblxuICAgICAgICAgIGZvciAoY2hubCA9IDA7IGNobmwgPCA0OyBjaG5sKyspIHtcbiAgICAgICAgICAgIGEgPSBwaXhlbHNbb3JpZ1BpeCArIGNobmxdO1xuICAgICAgICAgICAgYiA9IHBpeGVsc1tvcmlnUGl4ICsgNCArIGNobmxdO1xuICAgICAgICAgICAgYyA9IHBpeGVsc1tvcmlnUGl4ICsgdzQgKyBjaG5sXTtcbiAgICAgICAgICAgIGQgPSBwaXhlbHNbb3JpZ1BpeCArIHc0ICsgNCArIGNobmxdO1xuICAgICAgICAgICAgY29sb3IgPSBhICogKDEgLSB4RGlmZikgKiAoMSAtIHlEaWZmKSArIGIgKiB4RGlmZiAqICgxIC0geURpZmYpICtcbiAgICAgICAgICAgICAgICAgICAgYyAqIHlEaWZmICogKDEgLSB4RGlmZikgKyBkICogeERpZmYgKiB5RGlmZjtcbiAgICAgICAgICAgIGRlc3RQaXhlbHNbb2Zmc2V0KytdID0gY29sb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVzdEltYWdlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBoZXJtaXRlRmFzdFJlc2l6ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjYW52YXNFbCBDYW52YXMgZWxlbWVudCB0byBhcHBseSBmaWx0ZXIgdG9cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb1cgT3JpZ2luYWwgV2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb0ggT3JpZ2luYWwgSGVpZ2h0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRXIERlc3RpbmF0aW9uIFdpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRIIERlc3RpbmF0aW9uIEhlaWdodFxuICAgICAqIEByZXR1cm5zIHtJbWFnZURhdGF9XG4gICAgICovXG4gICAgaGVybWl0ZUZhc3RSZXNpemU6IGZ1bmN0aW9uKG9wdGlvbnMsIG9XLCBvSCwgZFcsIGRIKSB7XG4gICAgICB2YXIgcmF0aW9XID0gdGhpcy5yY3BTY2FsZVgsIHJhdGlvSCA9IHRoaXMucmNwU2NhbGVZLFxuICAgICAgICAgIHJhdGlvV0hhbGYgPSBjZWlsKHJhdGlvVyAvIDIpLFxuICAgICAgICAgIHJhdGlvSEhhbGYgPSBjZWlsKHJhdGlvSCAvIDIpLFxuICAgICAgICAgIGltZyA9IG9wdGlvbnMuaW1hZ2VEYXRhLCBkYXRhID0gaW1nLmRhdGEsXG4gICAgICAgICAgaW1nMiA9IG9wdGlvbnMuY3R4LmNyZWF0ZUltYWdlRGF0YShkVywgZEgpLCBkYXRhMiA9IGltZzIuZGF0YTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZEg7IGorKykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRXOyBpKyspIHtcbiAgICAgICAgICB2YXIgeDIgPSAoaSArIGogKiBkVykgKiA0LCB3ZWlnaHQgPSAwLCB3ZWlnaHRzID0gMCwgd2VpZ2h0c0FscGhhID0gMCxcbiAgICAgICAgICAgICAgZ3hSID0gMCwgZ3hHID0gMCwgZ3hCID0gMCwgZ3hBID0gMCwgY2VudGVyWSA9IChqICsgMC41KSAqIHJhdGlvSDtcbiAgICAgICAgICBmb3IgKHZhciB5eSA9IGZsb29yKGogKiByYXRpb0gpOyB5eSA8IChqICsgMSkgKiByYXRpb0g7IHl5KyspIHtcbiAgICAgICAgICAgIHZhciBkeSA9IGFicyhjZW50ZXJZIC0gKHl5ICsgMC41KSkgLyByYXRpb0hIYWxmLFxuICAgICAgICAgICAgICAgIGNlbnRlclggPSAoaSArIDAuNSkgKiByYXRpb1csIHcwID0gZHkgKiBkeTtcbiAgICAgICAgICAgIGZvciAodmFyIHh4ID0gZmxvb3IoaSAqIHJhdGlvVyk7IHh4IDwgKGkgKyAxKSAqIHJhdGlvVzsgeHgrKykge1xuICAgICAgICAgICAgICB2YXIgZHggPSBhYnMoY2VudGVyWCAtICh4eCArIDAuNSkpIC8gcmF0aW9XSGFsZixcbiAgICAgICAgICAgICAgICAgIHcgPSBzcXJ0KHcwICsgZHggKiBkeCk7XG4gICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1kZXB0aCAqL1xuICAgICAgICAgICAgICBpZiAodyA+IDEgJiYgdyA8IC0xKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy9oZXJtaXRlIGZpbHRlclxuICAgICAgICAgICAgICB3ZWlnaHQgPSAyICogdyAqIHcgKiB3IC0gMyAqIHcgKiB3ICsgMTtcbiAgICAgICAgICAgICAgaWYgKHdlaWdodCA+IDApIHtcbiAgICAgICAgICAgICAgICBkeCA9IDQgKiAoeHggKyB5eSAqIG9XKTtcbiAgICAgICAgICAgICAgICAvL2FscGhhXG4gICAgICAgICAgICAgICAgZ3hBICs9IHdlaWdodCAqIGRhdGFbZHggKyAzXTtcbiAgICAgICAgICAgICAgICB3ZWlnaHRzQWxwaGEgKz0gd2VpZ2h0O1xuICAgICAgICAgICAgICAgIC8vY29sb3JzXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFbZHggKyAzXSA8IDI1NSkge1xuICAgICAgICAgICAgICAgICAgd2VpZ2h0ID0gd2VpZ2h0ICogZGF0YVtkeCArIDNdIC8gMjUwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBneFIgKz0gd2VpZ2h0ICogZGF0YVtkeF07XG4gICAgICAgICAgICAgICAgZ3hHICs9IHdlaWdodCAqIGRhdGFbZHggKyAxXTtcbiAgICAgICAgICAgICAgICBneEIgKz0gd2VpZ2h0ICogZGF0YVtkeCArIDJdO1xuICAgICAgICAgICAgICAgIHdlaWdodHMgKz0gd2VpZ2h0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbWF4LWRlcHRoICovXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGEyW3gyXSA9IGd4UiAvIHdlaWdodHM7XG4gICAgICAgICAgZGF0YTJbeDIgKyAxXSA9IGd4RyAvIHdlaWdodHM7XG4gICAgICAgICAgZGF0YTJbeDIgKyAyXSA9IGd4QiAvIHdlaWdodHM7XG4gICAgICAgICAgZGF0YTJbeDIgKyAzXSA9IGd4QSAvIHdlaWdodHNBbHBoYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGltZzI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgIHNjYWxlWDogdGhpcy5zY2FsZVgsXG4gICAgICAgIHNjYWxlWTogdGhpcy5zY2FsZVksXG4gICAgICAgIHJlc2l6ZVR5cGU6IHRoaXMucmVzaXplVHlwZSxcbiAgICAgICAgbGFuY3pvc0xvYmVzOiB0aGlzLmxhbmN6b3NMb2Jlc1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZpbHRlciBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gdG8gYmUgaW52b2tlZCBhZnRlciBmaWx0ZXIgY3JlYXRpb25cbiAgICogQHJldHVybiB7ZmFicmljLkltYWdlLmZpbHRlcnMuUmVzaXplfSBJbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZXNpemVcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlJlc2l6ZS5mcm9tT2JqZWN0ID0gZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlci5mcm9tT2JqZWN0O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljICA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZmlsdGVycyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLFxuICAgICAgY3JlYXRlQ2xhc3MgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcztcblxuICAvKipcbiAgICogQ29udHJhc3QgZmlsdGVyIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db250cmFzdFxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db250cmFzdCNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuQ29udHJhc3Qoe1xuICAgKiAgIGNvbnRyYXN0OiAwLjI1XG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICovXG4gIGZpbHRlcnMuQ29udHJhc3QgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQ29udHJhc3QucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdDb250cmFzdCcsXG5cbiAgICBmcmFnbWVudFNvdXJjZTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICd1bmlmb3JtIGZsb2F0IHVDb250cmFzdDtcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJyArXG4gICAgICAgICdmbG9hdCBjb250cmFzdEYgPSAxLjAxNSAqICh1Q29udHJhc3QgKyAxLjApIC8gKDEuMCAqICgxLjAxNSAtIHVDb250cmFzdCkpO1xcbicgK1xuICAgICAgICAnY29sb3IucmdiID0gY29udHJhc3RGICogKGNvbG9yLnJnYiAtIDAuNSkgKyAwLjU7XFxuJyArXG4gICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICd9JyxcblxuICAgIC8qKlxuICAgICAqIGNvbnRyYXN0IHZhbHVlLCByYW5nZSBmcm9tIC0xIHRvIDEuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbnRyYXN0XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIGNvbnRyYXN0OiAwLFxuXG4gICAgbWFpblBhcmFtZXRlcjogJ2NvbnRyYXN0JyxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbnRyYXN0LnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuY29udHJhc3Q9MF0gVmFsdWUgdG8gY29udHJhc3QgdGhlIGltYWdlIHVwICgtMS4uLjEpXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgICogQXBwbHkgdGhlIENvbnRyYXN0IG9wZXJhdGlvbiB0byBhIFVpbnQ4QXJyYXkgcmVwcmVzZW50aW5nIHRoZSBwaXhlbHMgb2YgYW4gaW1hZ2UuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICAqIEBwYXJhbSB7SW1hZ2VEYXRhfSBvcHRpb25zLmltYWdlRGF0YSBUaGUgVWludDhBcnJheSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgICovXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBpZiAodGhpcy5jb250cmFzdCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsIGksIGxlbixcbiAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsIGxlbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIGNvbnRyYXN0ID0gTWF0aC5mbG9vcih0aGlzLmNvbnRyYXN0ICogMjU1KSxcbiAgICAgICAgICBjb250cmFzdEYgPSAyNTkgKiAoY29udHJhc3QgKyAyNTUpIC8gKDI1NSAqICgyNTkgLSBjb250cmFzdCkpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgZGF0YVtpXSA9IGNvbnRyYXN0RiAqIChkYXRhW2ldIC0gMTI4KSArIDEyODtcbiAgICAgICAgZGF0YVtpICsgMV0gPSBjb250cmFzdEYgKiAoZGF0YVtpICsgMV0gLSAxMjgpICsgMTI4O1xuICAgICAgICBkYXRhW2kgKyAyXSA9IGNvbnRyYXN0RiAqIChkYXRhW2kgKyAyXSAtIDEyOCkgKyAxMjg7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBXZWJHTCB1bmlmb3JtIGxvY2F0aW9ucyBmb3IgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGlzIGZpbHRlcidzIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1Q29udHJhc3Q6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndUNvbnRyYXN0JyksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0ncyB1bmlmb3Jtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHN0cmluZyB1bmlmb3JtIG5hbWVzIHRvIFdlYkdMVW5pZm9ybUxvY2F0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBzZW5kVW5pZm9ybURhdGE6IGZ1bmN0aW9uKGdsLCB1bmlmb3JtTG9jYXRpb25zKSB7XG4gICAgICBnbC51bmlmb3JtMWYodW5pZm9ybUxvY2F0aW9ucy51Q29udHJhc3QsIHRoaXMuY29udHJhc3QpO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZpbHRlciBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gdG8gYmUgaW52b2tlZCBhZnRlciBmaWx0ZXIgY3JlYXRpb25cbiAgICogQHJldHVybiB7ZmFicmljLkltYWdlLmZpbHRlcnMuQ29udHJhc3R9IEluc3RhbmNlIG9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbnRyYXN0XG4gICAqL1xuICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db250cmFzdC5mcm9tT2JqZWN0ID0gZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlci5mcm9tT2JqZWN0O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljICA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZmlsdGVycyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLFxuICAgICAgY3JlYXRlQ2xhc3MgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcztcblxuICAvKipcbiAgICogU2F0dXJhdGUgZmlsdGVyIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5TYXR1cmF0aW9uXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVyc1xuICAgKiBAZXh0ZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyXG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlNhdHVyYXRpb24jaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9pbWFnZS1maWx0ZXJzfEltYWdlRmlsdGVycyBkZW1vfVxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLlNhdHVyYXRpb24oe1xuICAgKiAgIHNhdHVyYXRpb246IDFcbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKi9cbiAgZmlsdGVycy5TYXR1cmF0aW9uID0gY3JlYXRlQ2xhc3MoZmlsdGVycy5CYXNlRmlsdGVyLCAvKiogQGxlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlNhdHVyYXRpb24ucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdTYXR1cmF0aW9uJyxcblxuICAgIGZyYWdtZW50U291cmNlOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgJ3VuaWZvcm0gZmxvYXQgdVNhdHVyYXRpb247XFxuJyArXG4gICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICd2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQpO1xcbicgK1xuICAgICAgICAnZmxvYXQgcmdNYXggPSBtYXgoY29sb3IuciwgY29sb3IuZyk7XFxuJyArXG4gICAgICAgICdmbG9hdCByZ2JNYXggPSBtYXgocmdNYXgsIGNvbG9yLmIpO1xcbicgK1xuICAgICAgICAnY29sb3IuciArPSByZ2JNYXggIT0gY29sb3IuciA/IChyZ2JNYXggLSBjb2xvci5yKSAqIHVTYXR1cmF0aW9uIDogMC4wMDtcXG4nICtcbiAgICAgICAgJ2NvbG9yLmcgKz0gcmdiTWF4ICE9IGNvbG9yLmcgPyAocmdiTWF4IC0gY29sb3IuZykgKiB1U2F0dXJhdGlvbiA6IDAuMDA7XFxuJyArXG4gICAgICAgICdjb2xvci5iICs9IHJnYk1heCAhPSBjb2xvci5iID8gKHJnYk1heCAtIGNvbG9yLmIpICogdVNhdHVyYXRpb24gOiAwLjAwO1xcbicgK1xuICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAnfScsXG5cbiAgICAvKipcbiAgICAgKiBTYXR1cmF0aW9uIHZhbHVlLCBmcm9tIC0xIHRvIDEuXG4gICAgICogSW5jcmVhc2VzL2RlY3JlYXNlcyB0aGUgY29sb3Igc2F0dXJhdGlvbi5cbiAgICAgKiBBIHZhbHVlIG9mIDAgaGFzIG5vIGVmZmVjdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2F0dXJhdGlvblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2F0dXJhdGlvbjogMCxcblxuICAgIG1haW5QYXJhbWV0ZXI6ICdzYXR1cmF0aW9uJyxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlNhdHVyYXRlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuc2F0dXJhdGU9MF0gVmFsdWUgdG8gc2F0dXJhdGUgdGhlIGltYWdlICgtMS4uLjEpXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGUgU2F0dXJhdGlvbiBvcGVyYXRpb24gdG8gYSBVaW50OENsYW1wZWRBcnJheSByZXByZXNlbnRpbmcgdGhlIHBpeGVscyBvZiBhbiBpbWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtJbWFnZURhdGF9IG9wdGlvbnMuaW1hZ2VEYXRhIFRoZSBVaW50OENsYW1wZWRBcnJheSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgKi9cbiAgICBhcHBseVRvMmQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICh0aGlzLnNhdHVyYXRpb24gPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGltYWdlRGF0YSA9IG9wdGlvbnMuaW1hZ2VEYXRhLFxuICAgICAgICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YSwgbGVuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgYWRqdXN0ID0gLXRoaXMuc2F0dXJhdGlvbiwgaSwgbWF4O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgoZGF0YVtpXSwgZGF0YVtpICsgMV0sIGRhdGFbaSArIDJdKTtcbiAgICAgICAgZGF0YVtpXSArPSBtYXggIT09IGRhdGFbaV0gPyAobWF4IC0gZGF0YVtpXSkgKiBhZGp1c3QgOiAwO1xuICAgICAgICBkYXRhW2kgKyAxXSArPSBtYXggIT09IGRhdGFbaSArIDFdID8gKG1heCAtIGRhdGFbaSArIDFdKSAqIGFkanVzdCA6IDA7XG4gICAgICAgIGRhdGFbaSArIDJdICs9IG1heCAhPT0gZGF0YVtpICsgMl0gPyAobWF4IC0gZGF0YVtpICsgMl0pICogYWRqdXN0IDogMDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFdlYkdMIHVuaWZvcm0gbG9jYXRpb25zIGZvciB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoaXMgZmlsdGVyJ3MgY29tcGlsZWQgc2hhZGVyIHByb2dyYW0uXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVTYXR1cmF0aW9uOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VTYXR1cmF0aW9uJyksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0ncyB1bmlmb3Jtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHN0cmluZyB1bmlmb3JtIG5hbWVzIHRvIFdlYkdMVW5pZm9ybUxvY2F0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBzZW5kVW5pZm9ybURhdGE6IGZ1bmN0aW9uKGdsLCB1bmlmb3JtTG9jYXRpb25zKSB7XG4gICAgICBnbC51bmlmb3JtMWYodW5pZm9ybUxvY2F0aW9ucy51U2F0dXJhdGlvbiwgLXRoaXMuc2F0dXJhdGlvbik7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5TYXR1cmF0aW9ufSBJbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5TYXR1cmF0ZVxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuU2F0dXJhdGlvbi5mcm9tT2JqZWN0ID0gZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlci5mcm9tT2JqZWN0O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljICA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZmlsdGVycyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLFxuICAgICAgY3JlYXRlQ2xhc3MgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcztcblxuICAvKipcbiAgICogVmlicmFuY2UgZmlsdGVyIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5WaWJyYW5jZVxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuSW1hZ2UuZmlsdGVycy5WaWJyYW5jZSNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuVmlicmFuY2Uoe1xuICAgKiAgIHZpYnJhbmNlOiAxXG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICovXG4gIGZpbHRlcnMuVmlicmFuY2UgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuVmlicmFuY2UucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdWaWJyYW5jZScsXG5cbiAgICBmcmFnbWVudFNvdXJjZTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICd1bmlmb3JtIGZsb2F0IHVWaWJyYW5jZTtcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJyArXG4gICAgICAgICdmbG9hdCBtYXggPSBtYXgoY29sb3IuciwgbWF4KGNvbG9yLmcsIGNvbG9yLmIpKTtcXG4nICtcbiAgICAgICAgJ2Zsb2F0IGF2ZyA9IChjb2xvci5yICsgY29sb3IuZyArIGNvbG9yLmIpIC8gMy4wO1xcbicgK1xuICAgICAgICAnZmxvYXQgYW10ID0gKGFicyhtYXggLSBhdmcpICogMi4wKSAqIHVWaWJyYW5jZTtcXG4nICtcbiAgICAgICAgJ2NvbG9yLnIgKz0gbWF4ICE9IGNvbG9yLnIgPyAobWF4IC0gY29sb3IucikgKiBhbXQgOiAwLjAwO1xcbicgK1xuICAgICAgICAnY29sb3IuZyArPSBtYXggIT0gY29sb3IuZyA/IChtYXggLSBjb2xvci5nKSAqIGFtdCA6IDAuMDA7XFxuJyArXG4gICAgICAgICdjb2xvci5iICs9IG1heCAhPSBjb2xvci5iID8gKG1heCAtIGNvbG9yLmIpICogYW10IDogMC4wMDtcXG4nICtcbiAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgJ30nLFxuXG4gICAgLyoqXG4gICAgICogVmlicmFuY2UgdmFsdWUsIGZyb20gLTEgdG8gMS5cbiAgICAgKiBJbmNyZWFzZXMvZGVjcmVhc2VzIHRoZSBzYXR1cmF0aW9uIG9mIG1vcmUgbXV0ZWQgY29sb3JzIHdpdGggbGVzcyBlZmZlY3Qgb24gc2F0dXJhdGVkIGNvbG9ycy5cbiAgICAgKiBBIHZhbHVlIG9mIDAgaGFzIG5vIGVmZmVjdC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmlicmFuY2VcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHZpYnJhbmNlOiAwLFxuXG4gICAgbWFpblBhcmFtZXRlcjogJ3ZpYnJhbmNlJyxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlZpYnJhbmNlLnByb3RvdHlwZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMudmlicmFuY2U9MF0gVmlicmFuY2UgdmFsdWUgZm9yIHRoZSBpbWFnZSAoYmV0d2VlbiAtMSBhbmQgMSlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoZSBWaWJyYW5jZSBvcGVyYXRpb24gdG8gYSBVaW50OENsYW1wZWRBcnJheSByZXByZXNlbnRpbmcgdGhlIHBpeGVscyBvZiBhbiBpbWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtJbWFnZURhdGF9IG9wdGlvbnMuaW1hZ2VEYXRhIFRoZSBVaW50OENsYW1wZWRBcnJheSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgKi9cbiAgICBhcHBseVRvMmQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICh0aGlzLnZpYnJhbmNlID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpbWFnZURhdGEgPSBvcHRpb25zLmltYWdlRGF0YSxcbiAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsIGxlbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIGFkanVzdCA9IC10aGlzLnZpYnJhbmNlLCBpLCBtYXgsIGF2ZywgYW10O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgoZGF0YVtpXSwgZGF0YVtpICsgMV0sIGRhdGFbaSArIDJdKTtcbiAgICAgICAgYXZnID0gKGRhdGFbaV0gKyBkYXRhW2kgKyAxXSArIGRhdGFbaSArIDJdKSAvIDM7XG4gICAgICAgIGFtdCA9ICgoTWF0aC5hYnMobWF4IC0gYXZnKSAqIDIgLyAyNTUpICogYWRqdXN0KTtcbiAgICAgICAgZGF0YVtpXSArPSBtYXggIT09IGRhdGFbaV0gPyAobWF4IC0gZGF0YVtpXSkgKiBhbXQgOiAwO1xuICAgICAgICBkYXRhW2kgKyAxXSArPSBtYXggIT09IGRhdGFbaSArIDFdID8gKG1heCAtIGRhdGFbaSArIDFdKSAqIGFtdCA6IDA7XG4gICAgICAgIGRhdGFbaSArIDJdICs9IG1heCAhPT0gZGF0YVtpICsgMl0gPyAobWF4IC0gZGF0YVtpICsgMl0pICogYW10IDogMDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFdlYkdMIHVuaWZvcm0gbG9jYXRpb25zIGZvciB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoaXMgZmlsdGVyJ3MgY29tcGlsZWQgc2hhZGVyIHByb2dyYW0uXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVWaWJyYW5jZTogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1VmlicmFuY2UnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIGdsLnVuaWZvcm0xZih1bmlmb3JtTG9jYXRpb25zLnVWaWJyYW5jZSwgLXRoaXMudmlicmFuY2UpO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZpbHRlciBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gdG8gYmUgaW52b2tlZCBhZnRlciBmaWx0ZXIgY3JlYXRpb25cbiAgICogQHJldHVybiB7ZmFicmljLkltYWdlLmZpbHRlcnMuVmlicmFuY2V9IEluc3RhbmNlIG9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlZpYnJhbmNlXG4gICAqL1xuICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5WaWJyYW5jZS5mcm9tT2JqZWN0ID0gZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlci5mcm9tT2JqZWN0O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljICA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZmlsdGVycyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLFxuICAgICAgY3JlYXRlQ2xhc3MgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcztcblxuICAvKipcbiAgICogQmx1ciBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsdXJcbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLkltYWdlLmZpbHRlcnMuQmx1ciNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuQmx1cih7XG4gICAqICAgYmx1cjogMC41XG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICogY2FudmFzLnJlbmRlckFsbCgpO1xuICAgKi9cbiAgZmlsdGVycy5CbHVyID0gY3JlYXRlQ2xhc3MoZmlsdGVycy5CYXNlRmlsdGVyLCAvKiogQGxlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsdXIucHJvdG90eXBlICovIHtcblxuICAgIHR5cGU6ICdCbHVyJyxcblxuICAgIC8qXG4nZ2xfRnJhZ0NvbG9yID0gdmVjNCgwLjApOycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyAtNyAqIHVEZWx0YSkqMC4wMDQ0Mjk5MTIxMDU1MTEzMjY1OycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyAtNiAqIHVEZWx0YSkqMC4wMDg5NTc4MTIxMTc5NDsnLFxuJ2dsX0ZyYWdDb2xvciArPSB0ZXh0dXJlMkQodGV4dHVyZSwgdlRleENvb3JkICsgLTUgKiB1RGVsdGEpKjAuMDIxNTk2Mzg2NjA1MzsnLFxuJ2dsX0ZyYWdDb2xvciArPSB0ZXh0dXJlMkQodGV4dHVyZSwgdlRleENvb3JkICsgLTQgKiB1RGVsdGEpKjAuMDQ0MzY4MzMzODcxODsnLFxuJ2dsX0ZyYWdDb2xvciArPSB0ZXh0dXJlMkQodGV4dHVyZSwgdlRleENvb3JkICsgLTMgKiB1RGVsdGEpKjAuMDc3Njc0NDIxOTkzMzsnLFxuJ2dsX0ZyYWdDb2xvciArPSB0ZXh0dXJlMkQodGV4dHVyZSwgdlRleENvb3JkICsgLTIgKiB1RGVsdGEpKjAuMTE1ODc2NjIxMTA1OycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyAtMSAqIHVEZWx0YSkqMC4xNDczMDgwNTYxMjE7JyxcbidnbF9GcmFnQ29sb3IgKz0gdGV4dHVyZTJEKHRleHR1cmUsIHZUZXhDb29yZCAgICAgICAgICAgICAgKSowLjE1OTU3NjkxMjE2MTsnLFxuJ2dsX0ZyYWdDb2xvciArPSB0ZXh0dXJlMkQodGV4dHVyZSwgdlRleENvb3JkICsgMSAqIHVEZWx0YSkqMC4xNDczMDgwNTYxMjE7JyxcbidnbF9GcmFnQ29sb3IgKz0gdGV4dHVyZTJEKHRleHR1cmUsIHZUZXhDb29yZCArIDIgKiB1RGVsdGEpKjAuMTE1ODc2NjIxMTA1OycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyAzICogdURlbHRhKSowLjA3NzY3NDQyMTk5MzM7JyxcbidnbF9GcmFnQ29sb3IgKz0gdGV4dHVyZTJEKHRleHR1cmUsIHZUZXhDb29yZCArIDQgKiB1RGVsdGEpKjAuMDQ0MzY4MzMzODcxODsnLFxuJ2dsX0ZyYWdDb2xvciArPSB0ZXh0dXJlMkQodGV4dHVyZSwgdlRleENvb3JkICsgNSAqIHVEZWx0YSkqMC4wMjE1OTYzODY2MDUzOycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyA2ICogdURlbHRhKSowLjAwODk1NzgxMjExNzk0OycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyA3ICogdURlbHRhKSowLjAwNDQyOTkxMjEwNTUxMTMyNjU7JyxcbiovXG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgZnJhZ21lbnRTb3VyY2U6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAndW5pZm9ybSB2ZWMyIHVEZWx0YTtcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgJ2NvbnN0IGZsb2F0IG5TYW1wbGVzID0gMTUuMDtcXG4nICtcbiAgICAgICd2ZWMzIHYzb2Zmc2V0ID0gdmVjMygxMi45ODk4LCA3OC4yMzMsIDE1MS43MTgyKTtcXG4nICtcbiAgICAgICdmbG9hdCByYW5kb20odmVjMyBzY2FsZSkge1xcbicgK1xuICAgICAgICAvKiB1c2UgdGhlIGZyYWdtZW50IHBvc2l0aW9uIGZvciBhIGRpZmZlcmVudCBzZWVkIHBlci1waXhlbCAqL1xuICAgICAgICAncmV0dXJuIGZyYWN0KHNpbihkb3QoZ2xfRnJhZ0Nvb3JkLnh5eiwgc2NhbGUpKSAqIDQzNzU4LjU0NTMpO1xcbicgK1xuICAgICAgJ31cXG4nICtcbiAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICd2ZWM0IGNvbG9yID0gdmVjNCgwLjApO1xcbicgK1xuICAgICAgICAnZmxvYXQgdG90YWwgPSAwLjA7XFxuJyArXG4gICAgICAgICdmbG9hdCBvZmZzZXQgPSByYW5kb20odjNvZmZzZXQpO1xcbicgK1xuICAgICAgICAnZm9yIChmbG9hdCB0ID0gLW5TYW1wbGVzOyB0IDw9IG5TYW1wbGVzOyB0KyspIHtcXG4nICtcbiAgICAgICAgICAnZmxvYXQgcGVyY2VudCA9ICh0ICsgb2Zmc2V0IC0gMC41KSAvIG5TYW1wbGVzO1xcbicgK1xuICAgICAgICAgICdmbG9hdCB3ZWlnaHQgPSAxLjAgLSBhYnMocGVyY2VudCk7XFxuJyArXG4gICAgICAgICAgJ2NvbG9yICs9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkICsgdURlbHRhICogcGVyY2VudCkgKiB3ZWlnaHQ7XFxuJyArXG4gICAgICAgICAgJ3RvdGFsICs9IHdlaWdodDtcXG4nICtcbiAgICAgICAgJ31cXG4nICtcbiAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yIC8gdG90YWw7XFxuJyArXG4gICAgICAnfScsXG4gICAgLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cbiAgICAvKipcbiAgICAgKiBibHVyIHZhbHVlLCBpbiBwZXJjZW50YWdlIG9mIGltYWdlIGRpbWVuc2lvbnMuXG4gICAgICogc3BlY2lmaWMgdG8ga2VlcCB0aGUgaW1hZ2UgYmx1ciBjb25zdGFudCBhdCBkaWZmZXJlbnQgcmVzb2x1dGlvbnNcbiAgICAgKiByYW5nZSBiZXR3ZWVuIDAgYW5kIDEuXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBibHVyOiAwLFxuXG4gICAgbWFpblBhcmFtZXRlcjogJ2JsdXInLFxuXG4gICAgYXBwbHlUbzogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMud2ViZ2wpIHtcbiAgICAgICAgLy8gdGhpcyBhc3BlY3RSYXRpbyBpcyB1c2VkIHRvIGdpdmUgdGhlIHNhbWUgYmx1ciB0byB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbFxuICAgICAgICB0aGlzLmFzcGVjdFJhdGlvID0gb3B0aW9ucy5zb3VyY2VXaWR0aCAvIG9wdGlvbnMuc291cmNlSGVpZ2h0O1xuICAgICAgICBvcHRpb25zLnBhc3NlcysrO1xuICAgICAgICB0aGlzLl9zZXR1cEZyYW1lQnVmZmVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmhvcml6b250YWwgPSB0cnVlO1xuICAgICAgICB0aGlzLmFwcGx5VG9XZWJHTChvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fc3dhcFRleHR1cmVzKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9zZXR1cEZyYW1lQnVmZmVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmhvcml6b250YWwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hcHBseVRvV2ViR0wob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3N3YXBUZXh0dXJlcyhvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmFwcGx5VG8yZChvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAvLyBwYWludCBjYW52YXNFbCB3aXRoIGN1cnJlbnQgaW1hZ2UgZGF0YS5cbiAgICAgIC8vb3B0aW9ucy5jdHgucHV0SW1hZ2VEYXRhKG9wdGlvbnMuaW1hZ2VEYXRhLCAwLCAwKTtcbiAgICAgIG9wdGlvbnMuaW1hZ2VEYXRhID0gdGhpcy5zaW1wbGVCbHVyKG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICBzaW1wbGVCbHVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgcmVzb3VyY2VzID0gb3B0aW9ucy5maWx0ZXJCYWNrZW5kLnJlc291cmNlcywgY2FudmFzMSwgY2FudmFzMixcbiAgICAgICAgICB3aWR0aCA9IG9wdGlvbnMuaW1hZ2VEYXRhLndpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IG9wdGlvbnMuaW1hZ2VEYXRhLmhlaWdodDtcblxuICAgICAgaWYgKCFyZXNvdXJjZXMuYmx1ckxheWVyMSkge1xuICAgICAgICByZXNvdXJjZXMuYmx1ckxheWVyMSA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgICAgcmVzb3VyY2VzLmJsdXJMYXllcjIgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgICB9XG4gICAgICBjYW52YXMxID0gcmVzb3VyY2VzLmJsdXJMYXllcjE7XG4gICAgICBjYW52YXMyID0gcmVzb3VyY2VzLmJsdXJMYXllcjI7XG4gICAgICBpZiAoY2FudmFzMS53aWR0aCAhPT0gd2lkdGggfHwgY2FudmFzMS5oZWlnaHQgIT09IGhlaWdodCkge1xuICAgICAgICBjYW52YXMyLndpZHRoID0gY2FudmFzMS53aWR0aCA9IHdpZHRoO1xuICAgICAgICBjYW52YXMyLmhlaWdodCA9IGNhbnZhczEuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgfVxuICAgICAgdmFyIGN0eDEgPSBjYW52YXMxLmdldENvbnRleHQoJzJkJyksXG4gICAgICAgICAgY3R4MiA9IGNhbnZhczIuZ2V0Q29udGV4dCgnMmQnKSxcbiAgICAgICAgICBuU2FtcGxlcyA9IDE1LFxuICAgICAgICAgIHJhbmRvbSwgcGVyY2VudCwgaiwgaSxcbiAgICAgICAgICBibHVyID0gdGhpcy5ibHVyICogMC4wNiAqIDAuNTtcblxuICAgICAgLy8gbG9hZCBmaXJzdCBjYW52YXNcbiAgICAgIGN0eDEucHV0SW1hZ2VEYXRhKG9wdGlvbnMuaW1hZ2VEYXRhLCAwLCAwKTtcbiAgICAgIGN0eDIuY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICBmb3IgKGkgPSAtblNhbXBsZXM7IGkgPD0gblNhbXBsZXM7IGkrKykge1xuICAgICAgICByYW5kb20gPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgLyA0O1xuICAgICAgICBwZXJjZW50ID0gaSAvIG5TYW1wbGVzO1xuICAgICAgICBqID0gYmx1ciAqIHBlcmNlbnQgKiB3aWR0aCArIHJhbmRvbTtcbiAgICAgICAgY3R4Mi5nbG9iYWxBbHBoYSA9IDEgLSBNYXRoLmFicyhwZXJjZW50KTtcbiAgICAgICAgY3R4Mi5kcmF3SW1hZ2UoY2FudmFzMSwgaiwgcmFuZG9tKTtcbiAgICAgICAgY3R4MS5kcmF3SW1hZ2UoY2FudmFzMiwgMCwgMCk7XG4gICAgICAgIGN0eDIuZ2xvYmFsQWxwaGEgPSAxO1xuICAgICAgICBjdHgyLmNsZWFyUmVjdCgwLCAwLCBjYW52YXMyLndpZHRoLCBjYW52YXMyLmhlaWdodCk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAtblNhbXBsZXM7IGkgPD0gblNhbXBsZXM7IGkrKykge1xuICAgICAgICByYW5kb20gPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgLyA0O1xuICAgICAgICBwZXJjZW50ID0gaSAvIG5TYW1wbGVzO1xuICAgICAgICBqID0gYmx1ciAqIHBlcmNlbnQgKiBoZWlnaHQgKyByYW5kb207XG4gICAgICAgIGN0eDIuZ2xvYmFsQWxwaGEgPSAxIC0gTWF0aC5hYnMocGVyY2VudCk7XG4gICAgICAgIGN0eDIuZHJhd0ltYWdlKGNhbnZhczEsIHJhbmRvbSwgaik7XG4gICAgICAgIGN0eDEuZHJhd0ltYWdlKGNhbnZhczIsIDAsIDApO1xuICAgICAgICBjdHgyLmdsb2JhbEFscGhhID0gMTtcbiAgICAgICAgY3R4Mi5jbGVhclJlY3QoMCwgMCwgY2FudmFzMi53aWR0aCwgY2FudmFzMi5oZWlnaHQpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5jdHguZHJhd0ltYWdlKGNhbnZhczEsIDAsIDApO1xuICAgICAgdmFyIG5ld0ltYWdlRGF0YSA9IG9wdGlvbnMuY3R4LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMxLndpZHRoLCBjYW52YXMxLmhlaWdodCk7XG4gICAgICBjdHgxLmdsb2JhbEFscGhhID0gMTtcbiAgICAgIGN0eDEuY2xlYXJSZWN0KDAsIDAsIGNhbnZhczEud2lkdGgsIGNhbnZhczEuaGVpZ2h0KTtcbiAgICAgIHJldHVybiBuZXdJbWFnZURhdGE7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBXZWJHTCB1bmlmb3JtIGxvY2F0aW9ucyBmb3IgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGlzIGZpbHRlcidzIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkZWx0YTogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1RGVsdGEnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIHZhciBkZWx0YSA9IHRoaXMuY2hvb3NlUmlnaHREZWx0YSgpO1xuICAgICAgZ2wudW5pZm9ybTJmdih1bmlmb3JtTG9jYXRpb25zLmRlbHRhLCBkZWx0YSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNob29zZSByaWdodCB2YWx1ZSBvZiBpbWFnZSBwZXJjZW50YWdlIHRvIGJsdXIgd2l0aFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gYSBudW1lcmljIGFycmF5IHdpdGggZGVsdGEgdmFsdWVzXG4gICAgICovXG4gICAgY2hvb3NlUmlnaHREZWx0YTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYmx1clNjYWxlID0gMSwgZGVsdGEgPSBbMCwgMF0sIGJsdXI7XG4gICAgICBpZiAodGhpcy5ob3Jpem9udGFsKSB7XG4gICAgICAgIGlmICh0aGlzLmFzcGVjdFJhdGlvID4gMSkge1xuICAgICAgICAgIC8vIGltYWdlIGlzIHdpZGUsIGkgd2FudCB0byBzaHJpbmsgcmFkaXVzIGhvcml6b250YWxcbiAgICAgICAgICBibHVyU2NhbGUgPSAxIC8gdGhpcy5hc3BlY3RSYXRpbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmFzcGVjdFJhdGlvIDwgMSkge1xuICAgICAgICAgIC8vIGltYWdlIGlzIHRhbGwsIGkgd2FudCB0byBzaHJpbmsgcmFkaXVzIHZlcnRpY2FsXG4gICAgICAgICAgYmx1clNjYWxlID0gdGhpcy5hc3BlY3RSYXRpbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmx1ciA9IGJsdXJTY2FsZSAqIHRoaXMuYmx1ciAqIDAuMTI7XG4gICAgICBpZiAodGhpcy5ob3Jpem9udGFsKSB7XG4gICAgICAgIGRlbHRhWzBdID0gYmx1cjtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBkZWx0YVsxXSA9IGJsdXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVsdGE7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplIGEgSlNPTiBkZWZpbml0aW9uIG9mIGEgQmx1ckZpbHRlciBpbnRvIGEgY29uY3JldGUgaW5zdGFuY2UuXG4gICAqL1xuICBmaWx0ZXJzLkJsdXIuZnJvbU9iamVjdCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXIuZnJvbU9iamVjdDtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyAgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIEdhbW1hIGZpbHRlciBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLkltYWdlLmZpbHRlcnMuR2FtbWFcbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLkltYWdlLmZpbHRlcnMuR2FtbWEjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9pbWFnZS1maWx0ZXJzfEltYWdlRmlsdGVycyBkZW1vfVxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkdhbW1hKHtcbiAgICogICBnYW1tYTogWzEsIDAuNSwgMi4xXVxuICAgKiB9KTtcbiAgICogb2JqZWN0LmZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgKiBvYmplY3QuYXBwbHlGaWx0ZXJzKCk7XG4gICAqL1xuICBmaWx0ZXJzLkdhbW1hID0gY3JlYXRlQ2xhc3MoZmlsdGVycy5CYXNlRmlsdGVyLCAvKiogQGxlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkdhbW1hLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnR2FtbWEnLFxuXG4gICAgZnJhZ21lbnRTb3VyY2U6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAndW5pZm9ybSB2ZWMzIHVHYW1tYTtcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJyArXG4gICAgICAgICd2ZWMzIGNvcnJlY3Rpb24gPSAoMS4wIC8gdUdhbW1hKTtcXG4nICtcbiAgICAgICAgJ2NvbG9yLnIgPSBwb3coY29sb3IuciwgY29ycmVjdGlvbi5yKTtcXG4nICtcbiAgICAgICAgJ2NvbG9yLmcgPSBwb3coY29sb3IuZywgY29ycmVjdGlvbi5nKTtcXG4nICtcbiAgICAgICAgJ2NvbG9yLmIgPSBwb3coY29sb3IuYiwgY29ycmVjdGlvbi5iKTtcXG4nICtcbiAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgICAnZ2xfRnJhZ0NvbG9yLnJnYiAqPSBjb2xvci5hO1xcbicgK1xuICAgICAgJ30nLFxuXG4gICAgLyoqXG4gICAgICogR2FtbWEgYXJyYXkgdmFsdWUsIGZyb20gMC4wMSB0byAyLjIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gZ2FtbWFcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGdhbW1hOiBbMSwgMSwgMV0sXG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmliZSB0aGUgcHJvcGVydHkgdGhhdCBpcyB0aGUgZmlsdGVyIHBhcmFtZXRlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBtYWluUGFyYW1ldGVyOiAnZ2FtbWEnLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdGhpcy5nYW1tYSA9IFsxLCAxLCAxXTtcbiAgICAgIGZpbHRlcnMuQmFzZUZpbHRlci5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGUgR2FtbWEgb3BlcmF0aW9uIHRvIGEgVWludDhBcnJheSByZXByZXNlbnRpbmcgdGhlIHBpeGVscyBvZiBhbiBpbWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtJbWFnZURhdGF9IG9wdGlvbnMuaW1hZ2VEYXRhIFRoZSBVaW50OEFycmF5IHRvIGJlIGZpbHRlcmVkLlxuICAgICAqL1xuICAgIGFwcGx5VG8yZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGltYWdlRGF0YSA9IG9wdGlvbnMuaW1hZ2VEYXRhLCBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgZ2FtbWEgPSB0aGlzLmdhbW1hLCBsZW4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICBySW52ID0gMSAvIGdhbW1hWzBdLCBnSW52ID0gMSAvIGdhbW1hWzFdLFxuICAgICAgICAgIGJJbnYgPSAxIC8gZ2FtbWFbMl0sIGk7XG5cbiAgICAgIGlmICghdGhpcy5yVmFscykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgdGhpcy5yVmFscyA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICB0aGlzLmdWYWxzID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHRoaXMuYlZhbHMgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGlzIGlzIGFuIG9wdGltaXphdGlvbiAtIHByZS1jb21wdXRlIGEgbG9vay11cCB0YWJsZSBmb3IgZWFjaCBjb2xvciBjaGFubmVsXG4gICAgICAvLyBpbnN0ZWFkIG9mIHBlcmZvcm1pbmcgdGhlc2UgcG93IGNhbGxzIGZvciBlYWNoIHBpeGVsIGluIHRoZSBpbWFnZS5cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IDI1NjsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRoaXMuclZhbHNbaV0gPSBNYXRoLnBvdyhpIC8gMjU1LCBySW52KSAqIDI1NTtcbiAgICAgICAgdGhpcy5nVmFsc1tpXSA9IE1hdGgucG93KGkgLyAyNTUsIGdJbnYpICogMjU1O1xuICAgICAgICB0aGlzLmJWYWxzW2ldID0gTWF0aC5wb3coaSAvIDI1NSwgYkludikgKiAyNTU7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgIGRhdGFbaV0gPSB0aGlzLnJWYWxzW2RhdGFbaV1dO1xuICAgICAgICBkYXRhW2kgKyAxXSA9IHRoaXMuZ1ZhbHNbZGF0YVtpICsgMV1dO1xuICAgICAgICBkYXRhW2kgKyAyXSA9IHRoaXMuYlZhbHNbZGF0YVtpICsgMl1dO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gV2ViR0wgdW5pZm9ybSBsb2NhdGlvbnMgZm9yIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhpcyBmaWx0ZXIncyBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBnZXRVbmlmb3JtTG9jYXRpb25zOiBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdUdhbW1hOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VHYW1tYScpLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VuZCBkYXRhIGZyb20gdGhpcyBmaWx0ZXIgdG8gaXRzIHNoYWRlciBwcm9ncmFtJ3MgdW5pZm9ybXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdW5pZm9ybUxvY2F0aW9ucyBBIG1hcCBvZiBzdHJpbmcgdW5pZm9ybSBuYW1lcyB0byBXZWJHTFVuaWZvcm1Mb2NhdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgc2VuZFVuaWZvcm1EYXRhOiBmdW5jdGlvbihnbCwgdW5pZm9ybUxvY2F0aW9ucykge1xuICAgICAgZ2wudW5pZm9ybTNmdih1bmlmb3JtTG9jYXRpb25zLnVHYW1tYSwgdGhpcy5nYW1tYSk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5HYW1tYX0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuR2FtbWFcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkdhbW1hLmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBBIGNvbnRhaW5lciBjbGFzcyB0aGF0IGtub3dzIGhvdyB0byBhcHBseSBhIHNlcXVlbmNlIG9mIGZpbHRlcnMgdG8gYW4gaW5wdXQgaW1hZ2UuXG4gICAqL1xuICBmaWx0ZXJzLkNvbXBvc2VkID0gY3JlYXRlQ2xhc3MoZmlsdGVycy5CYXNlRmlsdGVyLCAvKiogQGxlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbXBvc2VkLnByb3RvdHlwZSAqLyB7XG5cbiAgICB0eXBlOiAnQ29tcG9zZWQnLFxuXG4gICAgLyoqXG4gICAgICogQSBub24gc3BhcnNlIGFycmF5IG9mIGZpbHRlcnMgdG8gYXBwbHlcbiAgICAgKi9cbiAgICBzdWJGaWx0ZXJzOiBbXSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdpbml0aWFsaXplJywgb3B0aW9ucyk7XG4gICAgICAvLyBjcmVhdGUgYSBuZXcgYXJyYXkgaW5zdGVhZCBtdXRhdGluZyB0aGUgcHJvdG90eXBlIHdpdGggcHVzaFxuICAgICAgdGhpcy5zdWJGaWx0ZXJzID0gdGhpcy5zdWJGaWx0ZXJzLnNsaWNlKDApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGlzIGNvbnRhaW5lcidzIGZpbHRlcnMgdG8gdGhlIGlucHV0IGltYWdlIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5wYXNzZXMgVGhlIG51bWJlciBvZiBmaWx0ZXJzIHJlbWFpbmluZyB0byBiZSBhcHBsaWVkLlxuICAgICAqL1xuICAgIGFwcGx5VG86IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMucGFzc2VzICs9IHRoaXMuc3ViRmlsdGVycy5sZW5ndGggLSAxO1xuICAgICAgdGhpcy5zdWJGaWx0ZXJzLmZvckVhY2goZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICAgIGZpbHRlci5hcHBseVRvKG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZSB0aGlzIGZpbHRlciBpbnRvIEpTT04uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhpcyBmaWx0ZXIuXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQodGhpcy5jYWxsU3VwZXIoJ3RvT2JqZWN0JyksIHtcbiAgICAgICAgc3ViRmlsdGVyczogdGhpcy5zdWJGaWx0ZXJzLm1hcChmdW5jdGlvbihmaWx0ZXIpIHsgcmV0dXJuIGZpbHRlci50b09iamVjdCgpOyB9KSxcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBpc05ldXRyYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gIXRoaXMuc3ViRmlsdGVycy5zb21lKGZ1bmN0aW9uKGZpbHRlcikgeyByZXR1cm4gIWZpbHRlci5pc05ldXRyYWxTdGF0ZSgpOyB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBEZXNlcmlhbGl6ZSBhIEpTT04gZGVmaW5pdGlvbiBvZiBhIENvbXBvc2VkRmlsdGVyIGludG8gYSBjb25jcmV0ZSBpbnN0YW5jZS5cbiAgICovXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbXBvc2VkLmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGZpbHRlcnMgPSBvYmplY3Quc3ViRmlsdGVycyB8fCBbXSxcbiAgICAgICAgc3ViRmlsdGVycyA9IGZpbHRlcnMubWFwKGZ1bmN0aW9uKGZpbHRlcikge1xuICAgICAgICAgIHJldHVybiBuZXcgZmFicmljLkltYWdlLmZpbHRlcnNbZmlsdGVyLnR5cGVdKGZpbHRlcik7XG4gICAgICAgIH0pLFxuICAgICAgICBpbnN0YW5jZSA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db21wb3NlZCh7IHN1YkZpbHRlcnM6IHN1YkZpbHRlcnMgfSk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soaW5zdGFuY2UpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBIdWVSb3RhdGlvbiBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkh1ZVJvdGF0aW9uXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVyc1xuICAgKiBAZXh0ZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyXG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkh1ZVJvdGF0aW9uI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vaW1hZ2UtZmlsdGVyc3xJbWFnZUZpbHRlcnMgZGVtb31cbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5IdWVSb3RhdGlvbih7XG4gICAqICAgcm90YXRpb246IC0wLjVcbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKi9cbiAgZmlsdGVycy5IdWVSb3RhdGlvbiA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQ29sb3JNYXRyaXgsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuSHVlUm90YXRpb24ucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdIdWVSb3RhdGlvbicsXG5cbiAgICAvKipcbiAgICAgKiBIdWVSb3RhdGlvbiB2YWx1ZSwgZnJvbSAtMSB0byAxLlxuICAgICAqIHRoZSB1bml0IGlzIHJhZGlhbnNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbXlQYXJhbWV0ZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHJvdGF0aW9uOiAwLFxuXG4gICAgLyoqXG4gICAgICogRGVzY3JpYmUgdGhlIHByb3BlcnR5IHRoYXQgaXMgdGhlIGZpbHRlciBwYXJhbWV0ZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbWFpblBhcmFtZXRlcjogJ3JvdGF0aW9uJyxcblxuICAgIGNhbGN1bGF0ZU1hdHJpeDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmFkID0gdGhpcy5yb3RhdGlvbiAqIE1hdGguUEksIGNvcyA9IGZhYnJpYy51dGlsLmNvcyhyYWQpLCBzaW4gPSBmYWJyaWMudXRpbC5zaW4ocmFkKSxcbiAgICAgICAgICBhVGhpcmQgPSAxIC8gMywgYVRoaXJkU3F0U2luID0gTWF0aC5zcXJ0KGFUaGlyZCkgKiBzaW4sIE9uZU1pbnVzQ29zID0gMSAtIGNvcztcbiAgICAgIHRoaXMubWF0cml4ID0gW1xuICAgICAgICAxLCAwLCAwLCAwLCAwLFxuICAgICAgICAwLCAxLCAwLCAwLCAwLFxuICAgICAgICAwLCAwLCAxLCAwLCAwLFxuICAgICAgICAwLCAwLCAwLCAxLCAwXG4gICAgICBdO1xuICAgICAgdGhpcy5tYXRyaXhbMF0gPSBjb3MgKyBPbmVNaW51c0NvcyAvIDM7XG4gICAgICB0aGlzLm1hdHJpeFsxXSA9IGFUaGlyZCAqIE9uZU1pbnVzQ29zIC0gYVRoaXJkU3F0U2luO1xuICAgICAgdGhpcy5tYXRyaXhbMl0gPSBhVGhpcmQgKiBPbmVNaW51c0NvcyArIGFUaGlyZFNxdFNpbjtcbiAgICAgIHRoaXMubWF0cml4WzVdID0gYVRoaXJkICogT25lTWludXNDb3MgKyBhVGhpcmRTcXRTaW47XG4gICAgICB0aGlzLm1hdHJpeFs2XSA9IGNvcyArIGFUaGlyZCAqIE9uZU1pbnVzQ29zO1xuICAgICAgdGhpcy5tYXRyaXhbN10gPSBhVGhpcmQgKiBPbmVNaW51c0NvcyAtIGFUaGlyZFNxdFNpbjtcbiAgICAgIHRoaXMubWF0cml4WzEwXSA9IGFUaGlyZCAqIE9uZU1pbnVzQ29zIC0gYVRoaXJkU3F0U2luO1xuICAgICAgdGhpcy5tYXRyaXhbMTFdID0gYVRoaXJkICogT25lTWludXNDb3MgKyBhVGhpcmRTcXRTaW47XG4gICAgICB0aGlzLm1hdHJpeFsxMl0gPSBjb3MgKyBhVGhpcmQgKiBPbmVNaW51c0NvcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSHVlUm90YXRpb24gaXNOZXV0cmFsU3RhdGUgaW1wbGVtZW50YXRpb25cbiAgICAgKiBVc2VkIG9ubHkgaW4gaW1hZ2UgYXBwbHlGaWx0ZXJzIHRvIGRpc2NhcmQgZmlsdGVycyB0aGF0IHdpbGwgbm90IGhhdmUgYW4gZWZmZWN0XG4gICAgICogb24gdGhlIGltYWdlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiovXG4gICAgaXNOZXV0cmFsU3RhdGU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuY2FsY3VsYXRlTWF0cml4KCk7XG4gICAgICByZXR1cm4gZmlsdGVycy5CYXNlRmlsdGVyLnByb3RvdHlwZS5pc05ldXRyYWxTdGF0ZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGlzIGZpbHRlciB0byB0aGUgaW5wdXQgaW1hZ2UgZGF0YSBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0byB1c2UgV2ViR0wgb3IgQ2FudmFzMkQgYmFzZWQgb24gdGhlIG9wdGlvbnMud2ViZ2wgZmxhZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGFzc2VzIFRoZSBudW1iZXIgb2YgZmlsdGVycyByZW1haW5pbmcgdG8gYmUgZXhlY3V0ZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMud2ViZ2wgV2hldGhlciB0byB1c2Ugd2ViZ2wgdG8gcmVuZGVyIHRoZSBmaWx0ZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFRleHR1cmV9IG9wdGlvbnMuc291cmNlVGV4dHVyZSBUaGUgdGV4dHVyZSBzZXR1cCBhcyB0aGUgc291cmNlIHRvIGJlIGZpbHRlcmVkLlxuICAgICAqIEBwYXJhbSB7V2ViR0xUZXh0dXJlfSBvcHRpb25zLnRhcmdldFRleHR1cmUgVGhlIHRleHR1cmUgd2hlcmUgZmlsdGVyZWQgb3V0cHV0IHNob3VsZCBiZSBkcmF3bi5cbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gb3B0aW9ucy5jb250ZXh0IFRoZSBHTCBjb250ZXh0IHVzZWQgZm9yIHJlbmRlcmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5wcm9ncmFtQ2FjaGUgQSBtYXAgb2YgY29tcGlsZWQgc2hhZGVyIHByb2dyYW1zLCBrZXllZCBieSBmaWx0ZXIgdHlwZS5cbiAgICAgKi9cbiAgICBhcHBseVRvOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZU1hdHJpeCgpO1xuICAgICAgZmlsdGVycy5CYXNlRmlsdGVyLnByb3RvdHlwZS5hcHBseVRvLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfSxcblxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIHRvIGJlIGludm9rZWQgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLkh1ZVJvdGF0aW9ufSBJbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5IdWVSb3RhdGlvblxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuSHVlUm90YXRpb24uZnJvbU9iamVjdCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXIuZnJvbU9iamVjdDtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgY2xvbmUgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmU7XG5cbiAgaWYgKGZhYnJpYy5UZXh0KSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5UZXh0IGlzIGFscmVhZHkgZGVmaW5lZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBhZGRpdGlvbmFsUHJvcHMgPVxuICAgICgnZm9udEZhbWlseSBmb250V2VpZ2h0IGZvbnRTaXplIHRleHQgdW5kZXJsaW5lIG92ZXJsaW5lIGxpbmV0aHJvdWdoJyArXG4gICAgJyB0ZXh0QWxpZ24gZm9udFN0eWxlIGxpbmVIZWlnaHQgdGV4dEJhY2tncm91bmRDb2xvciBjaGFyU3BhY2luZyBzdHlsZXMnICtcbiAgICAnIGRpcmVjdGlvbiBwYXRoIHBhdGhTdGFydE9mZnNldCBwYXRoU2lkZSBwYXRoQWxpZ24nKS5zcGxpdCgnICcpO1xuXG4gIC8qKlxuICAgKiBUZXh0IGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuVGV4dFxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuT2JqZWN0XG4gICAqIEByZXR1cm4ge2ZhYnJpYy5UZXh0fSB0aGlzQXJnXG4gICAqIEB0dXRvcmlhbCB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9mYWJyaWMtaW50cm8tcGFydC0yI3RleHR9XG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5UZXh0I2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuVGV4dCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5PYmplY3QsIC8qKiBAbGVuZHMgZmFicmljLlRleHQucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgd2hpY2ggd2hlbiBzZXQgY2F1c2Ugb2JqZWN0IHRvIGNoYW5nZSBkaW1lbnNpb25zXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9kaW1lbnNpb25BZmZlY3RpbmdQcm9wczogW1xuICAgICAgJ2ZvbnRTaXplJyxcbiAgICAgICdmb250V2VpZ2h0JyxcbiAgICAgICdmb250RmFtaWx5JyxcbiAgICAgICdmb250U3R5bGUnLFxuICAgICAgJ2xpbmVIZWlnaHQnLFxuICAgICAgJ3RleHQnLFxuICAgICAgJ2NoYXJTcGFjaW5nJyxcbiAgICAgICd0ZXh0QWxpZ24nLFxuICAgICAgJ3N0eWxlcycsXG4gICAgICAncGF0aCcsXG4gICAgICAncGF0aFN0YXJ0T2Zmc2V0JyxcbiAgICAgICdwYXRoU2lkZScsXG4gICAgICAncGF0aEFsaWduJ1xuICAgIF0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZU5ld2xpbmU6IC9cXHI/XFxuLyxcblxuICAgIC8qKlxuICAgICAqIFVzZSB0aGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBmaWx0ZXIgZm9yIHdoaXRlc3BhY2VzIHRoYXQgaXMgbm90IGEgbmV3IGxpbmUuXG4gICAgICogTW9zdGx5IHVzZWQgd2hlbiB0ZXh0IGlzICdqdXN0aWZ5JyBhbGlnbmVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlU3BhY2VzQW5kVGFiczogL1sgXFx0XFxyXS9nLFxuXG4gICAgLyoqXG4gICAgICogVXNlIHRoaXMgcmVndWxhciBleHByZXNzaW9uIHRvIGZpbHRlciBmb3Igd2hpdGVzcGFjZSB0aGF0IGlzIG5vdCBhIG5ldyBsaW5lLlxuICAgICAqIE1vc3RseSB1c2VkIHdoZW4gdGV4dCBpcyAnanVzdGlmeScgYWxpZ25lZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZVNwYWNlQW5kVGFiOiAvWyBcXHRcXHJdLyxcblxuICAgIC8qKlxuICAgICAqIFVzZSB0aGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBmaWx0ZXIgY29uc2VjdXRpdmUgZ3JvdXBzIG9mIG5vbiBzcGFjZXMuXG4gICAgICogTW9zdGx5IHVzZWQgd2hlbiB0ZXh0IGlzICdqdXN0aWZ5JyBhbGlnbmVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlV29yZHM6IC9cXFMrL2csXG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogICAgICAgICAgICAgICAgICd0ZXh0JyxcblxuICAgIC8qKlxuICAgICAqIEZvbnQgc2l6ZSAoaW4gcGl4ZWxzKVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZm9udFNpemU6ICAgICAgICAgICAgIDQwLFxuXG4gICAgLyoqXG4gICAgICogRm9udCB3ZWlnaHQgKGUuZy4gYm9sZCwgbm9ybWFsLCA0MDAsIDYwMCwgODAwKVxuICAgICAqIEB0eXBlIHsoTnVtYmVyfFN0cmluZyl9XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBmb250V2VpZ2h0OiAgICAgICAgICAgJ25vcm1hbCcsXG5cbiAgICAvKipcbiAgICAgKiBGb250IGZhbWlseVxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZm9udEZhbWlseTogICAgICAgICAgICdUaW1lcyBOZXcgUm9tYW4nLFxuXG4gICAgLyoqXG4gICAgICogVGV4dCBkZWNvcmF0aW9uIHVuZGVybGluZS5cbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB1bmRlcmxpbmU6ICAgICAgIGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogVGV4dCBkZWNvcmF0aW9uIG92ZXJsaW5lLlxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG92ZXJsaW5lOiAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFRleHQgZGVjb3JhdGlvbiBsaW5ldGhyb3VnaC5cbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBsaW5ldGhyb3VnaDogICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBUZXh0IGFsaWdubWVudC4gUG9zc2libGUgdmFsdWVzOiBcImxlZnRcIiwgXCJjZW50ZXJcIiwgXCJyaWdodFwiLCBcImp1c3RpZnlcIixcbiAgICAgKiBcImp1c3RpZnktbGVmdFwiLCBcImp1c3RpZnktY2VudGVyXCIgb3IgXCJqdXN0aWZ5LXJpZ2h0XCIuXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0ZXh0QWxpZ246ICAgICAgICAgICAgJ2xlZnQnLFxuXG4gICAgLyoqXG4gICAgICogRm9udCBzdHlsZSAuIFBvc3NpYmxlIHZhbHVlczogXCJcIiwgXCJub3JtYWxcIiwgXCJpdGFsaWNcIiBvciBcIm9ibGlxdWVcIi5cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGZvbnRTdHlsZTogICAgICAgICAgICAnbm9ybWFsJyxcblxuICAgIC8qKlxuICAgICAqIExpbmUgaGVpZ2h0XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBsaW5lSGVpZ2h0OiAgICAgICAgICAgMS4xNixcblxuICAgIC8qKlxuICAgICAqIFN1cGVyc2NyaXB0IHNjaGVtYSBvYmplY3QgKG1pbmltdW0gb3ZlcmxhcClcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc3VwZXJzY3JpcHQ6IHtcbiAgICAgIHNpemU6ICAgICAgMC42MCwgLy8gZm9udFNpemUgZmFjdG9yXG4gICAgICBiYXNlbGluZTogLTAuMzUgIC8vIGJhc2VsaW5lLXNoaWZ0IGZhY3RvciAodXB3YXJkcylcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaXB0IHNjaGVtYSBvYmplY3QgKG1pbmltdW0gb3ZlcmxhcClcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc3Vic2NyaXB0OiB7XG4gICAgICBzaXplOiAgICAgIDAuNjAsIC8vIGZvbnRTaXplIGZhY3RvclxuICAgICAgYmFzZWxpbmU6ICAwLjExICAvLyBiYXNlbGluZS1zaGlmdCBmYWN0b3IgKGRvd253YXJkcylcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQmFja2dyb3VuZCBjb2xvciBvZiB0ZXh0IGxpbmVzXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0ZXh0QmFja2dyb3VuZENvbG9yOiAgJycsXG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIHByb3BlcnRpZXMgdG8gY29uc2lkZXIgd2hlbiBjaGVja2luZyBpZlxuICAgICAqIHN0YXRlIG9mIGFuIG9iamVjdCBpcyBjaGFuZ2VkICh7QGxpbmsgZmFicmljLk9iamVjdCNoYXNTdGF0ZUNoYW5nZWR9KVxuICAgICAqIGFzIHdlbGwgYXMgZm9yIGhpc3RvcnkgKHVuZG8vcmVkbykgcHVycG9zZXNcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqL1xuICAgIHN0YXRlUHJvcGVydGllczogZmFicmljLk9iamVjdC5wcm90b3R5cGUuc3RhdGVQcm9wZXJ0aWVzLmNvbmNhdChhZGRpdGlvbmFsUHJvcHMpLFxuXG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBwcm9wZXJ0aWVzIHRvIGNvbnNpZGVyIHdoZW4gY2hlY2tpbmcgaWYgY2FjaGUgbmVlZHMgcmVmcmVzaFxuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICovXG4gICAgY2FjaGVQcm9wZXJ0aWVzOiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5jYWNoZVByb3BlcnRpZXMuY29uY2F0KGFkZGl0aW9uYWxQcm9wcyksXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGRlZmluZWQsIGFuIG9iamVjdCBpcyByZW5kZXJlZCB2aWEgc3Ryb2tlIGFuZCB0aGlzIHByb3BlcnR5IHNwZWNpZmllcyBpdHMgY29sb3IuXG4gICAgICogPGI+QmFja3dhcmRzIGluY29tcGF0aWJpbGl0eSBub3RlOjwvYj4gVGhpcyBwcm9wZXJ0eSB3YXMgbmFtZWQgXCJzdHJva2VTdHlsZVwiIHVudGlsIHYxLjEuNlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc3Ryb2tlOiAgICAgICAgICAgICAgIG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBTaGFkb3cgb2JqZWN0IHJlcHJlc2VudGluZyBzaGFkb3cgb2YgdGhpcyBzaGFwZS5cbiAgICAgKiA8Yj5CYWNrd2FyZHMgaW5jb21wYXRpYmlsaXR5IG5vdGU6PC9iPiBUaGlzIHByb3BlcnR5IHdhcyBuYW1lZCBcInRleHRTaGFkb3dcIiAoU3RyaW5nKSB1bnRpbCB2MS4yLjExXG4gICAgICogQHR5cGUgZmFicmljLlNoYWRvd1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2hhZG93OiAgICAgICAgICAgICAgIG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBmYWJyaWMuUGF0aCB0aGF0IHRoZSB0ZXh0IHNob3VsZCBmb2xsb3cuXG4gICAgICogc2luY2UgNC42LjAgdGhlIHBhdGggd2lsbCBiZSBkcmF3biBhdXRvbWF0aWNhbGx5LlxuICAgICAqIGlmIHlvdSB3YW50IHRvIG1ha2UgdGhlIHBhdGggdmlzaWJsZSwgZ2l2ZSBpdCBhIHN0cm9rZSBhbmQgc3Ryb2tlV2lkdGggb3IgZmlsbCB2YWx1ZVxuICAgICAqIGlmIHlvdSB3YW50IGl0IHRvIGJlIGhpZGRlbiwgYXNzaWduIHZpc2libGUgPSBmYWxzZSB0byB0aGUgcGF0aC5cbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgaW4gQkVUQSwgYW5kIFNWRyBpbXBvcnQvZXhwb3J0IGlzIG5vdCB5ZXQgc3VwcG9ydGVkLlxuICAgICAqIEB0eXBlIGZhYnJpYy5QYXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgdGV4dFBhdGggPSBuZXcgZmFicmljLlRleHQoJ1RleHQgb24gYSBwYXRoJywge1xuICAgICAqICAgICB0b3A6IDE1MCxcbiAgICAgKiAgICAgbGVmdDogMTUwLFxuICAgICAqICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAqICAgICBjaGFyU3BhY2luZzogLTUwLFxuICAgICAqICAgICBwYXRoOiBuZXcgZmFicmljLlBhdGgoJ00gMCAwIEMgNTAgLTEwMCAxNTAgLTEwMCAyMDAgMCcsIHtcbiAgICAgKiAgICAgICAgIHN0cm9rZVdpZHRoOiAxLFxuICAgICAqICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgKiAgICAgfSksXG4gICAgICogICAgIHBhdGhTaWRlOiAnbGVmdCcsXG4gICAgICogICAgIHBhdGhTdGFydE9mZnNldDogMFxuICAgICAqIH0pO1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcGF0aDogICAgICAgICAgICAgICBudWxsLFxuXG4gICAgLyoqXG4gICAgICogT2Zmc2V0IGFtb3VudCBmb3IgdGV4dCBwYXRoIHN0YXJ0aW5nIHBvc2l0aW9uXG4gICAgICogT25seSB1c2VkIHdoZW4gdGV4dCBoYXMgYSBwYXRoXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBwYXRoU3RhcnRPZmZzZXQ6ICAgICAgICAgICAgICAgMCxcblxuICAgIC8qKlxuICAgICAqIFdoaWNoIHNpZGUgb2YgdGhlIHBhdGggdGhlIHRleHQgc2hvdWxkIGJlIGRyYXduIG9uLlxuICAgICAqIE9ubHkgdXNlZCB3aGVuIHRleHQgaGFzIGEgcGF0aFxuICAgICAqIEB0eXBlIHtTdHJpbmd9ICdsZWZ0fHJpZ2h0J1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcGF0aFNpZGU6ICAgICAgICAgICAgICAgJ2xlZnQnLFxuXG4gICAgLyoqXG4gICAgICogSG93IHRleHQgaXMgYWxpZ25lZCB0byB0aGUgcGF0aC4gVGhpcyBwcm9wZXJ0eSBkZXRlcm1pbmVzXG4gICAgICogdGhlIHBlcnBlbmRpY3VsYXIgcG9zaXRpb24gb2YgZWFjaCBjaGFyYWN0ZXIgcmVsYXRpdmUgdG8gdGhlIHBhdGguXG4gICAgICogKG9uZSBvZiBcImJhc2VsaW5lXCIsIFwiY2VudGVyXCIsIFwiYXNjZW5kZXJcIiwgXCJkZXNjZW5kZXJcIilcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgaW4gQkVUQSwgYW5kIGl0cyBiZWhhdmlvciBtYXkgY2hhbmdlXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBwYXRoQWxpZ246ICAgICAgICAgICAgICAgJ2Jhc2VsaW5lJyxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2ZvbnRTaXplRnJhY3Rpb246IDAuMjIyLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvZmZzZXRzOiB7XG4gICAgICB1bmRlcmxpbmU6IDAuMTAsXG4gICAgICBsaW5ldGhyb3VnaDogLTAuMzE1LFxuICAgICAgb3ZlcmxpbmU6IC0wLjg4XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRleHQgTGluZSBwcm9wb3J0aW9uIHRvIGZvbnQgU2l6ZSAoaW4gcGl4ZWxzKVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgX2ZvbnRTaXplTXVsdDogICAgICAgICAgICAgMS4xMyxcblxuICAgIC8qKlxuICAgICAqIGFkZGl0aW9uYWwgc3BhY2UgYmV0d2VlbiBjaGFyYWN0ZXJzXG4gICAgICogZXhwcmVzc2VkIGluIHRob3VzYW5kcyBvZiBlbSB1bml0XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjaGFyU3BhY2luZzogICAgICAgICAgICAgMCxcblxuICAgIC8qKlxuICAgICAqIE9iamVjdCBjb250YWluaW5nIGNoYXJhY3RlciBzdHlsZXMgLSB0b3AtbGV2ZWwgcHJvcGVydGllcyAtPiBsaW5lIG51bWJlcnMsXG4gICAgICogMm5kLWxldmVsIHByb3BlcnRpZXMgLSBjaGFyYWN0ZXIgbnVtYmVyc1xuICAgICAqIEB0eXBlIE9iamVjdFxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc3R5bGVzOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogUmVmZXJlbmNlIHRvIGEgY29udGV4dCB0byBtZWFzdXJlIHRleHQgY2hhciBvciBjb3VwbGUgb2YgY2hhcnNcbiAgICAgKiB0aGUgY2FjaGVDb250ZXh0IG9mIHRoZSBjYW52YXMgd2lsbCBiZSB1c2VkIG9yIGEgZnJlc2hseSBjcmVhdGVkIG9uZSBpZiB0aGUgb2JqZWN0IGlzIG5vdCBvbiBjYW52YXNcbiAgICAgKiBvbmNlIGNyZWF0ZWQgaXQgd2lsbCBiZSByZWZlcmVuY2VkIG9uIGZhYnJpYy5fbWVhc3VyaW5nQ29udGV4dCB0byBhdm9pZCBjcmVhdGluZyBhIGNhbnZhcyBmb3IgZXZlcnlcbiAgICAgKiB0ZXh0IG9iamVjdCBjcmVhdGVkLlxuICAgICAqIEB0eXBlIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBfbWVhc3VyaW5nQ29udGV4dDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIEJhc2VsaW5lIHNoaWZ0LCBzdHlsZXMgb25seSwga2VlcCBhdCAwIGZvciB0aGUgbWFpbiB0ZXh0IG9iamVjdFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBkZWx0YVk6IDAsXG5cbiAgICAvKipcbiAgICAgKiBXQVJOSU5HOiBFWFBFUklNRU5UQUwuIE5PVCBTVVBQT1JURUQgWUVUXG4gICAgICogZGV0ZXJtaW5lIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHRleHQuXG4gICAgICogVGhpcyBoYXMgdG8gYmUgc2V0IG1hbnVhbGx5IHRvZ2V0aGVyIHdpdGggdGV4dEFsaWduIGFuZCBvcmlnaW5YIGZvciBwcm9wZXJcbiAgICAgKiBleHBlcmllbmNlLlxuICAgICAqIHNvbWUgaW50ZXJlc3RpbmcgbGluayBmb3IgdGhlIGZ1dHVyZVxuICAgICAqIGh0dHBzOi8vd3d3LnczLm9yZy9JbnRlcm5hdGlvbmFsL3F1ZXN0aW9ucy9xYS1iaWRpLXVuaWNvZGUtY29udHJvbHNcbiAgICAgKiBAc2luY2UgNC41LjBcbiAgICAgKiBAdHlwZSB7U3RyaW5nfSAnbHRyfHJ0bCdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGRpcmVjdGlvbjogJ2x0cicsXG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBwcm9wZXJ0aWVzIHRoYXQgZGVmaW5lIGEgc3R5bGUgdW5pdCAob2YgJ3N0eWxlcycpLlxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIF9zdHlsZVByb3BlcnRpZXM6IFtcbiAgICAgICdzdHJva2UnLFxuICAgICAgJ3N0cm9rZVdpZHRoJyxcbiAgICAgICdmaWxsJyxcbiAgICAgICdmb250RmFtaWx5JyxcbiAgICAgICdmb250U2l6ZScsXG4gICAgICAnZm9udFdlaWdodCcsXG4gICAgICAnZm9udFN0eWxlJyxcbiAgICAgICd1bmRlcmxpbmUnLFxuICAgICAgJ292ZXJsaW5lJyxcbiAgICAgICdsaW5ldGhyb3VnaCcsXG4gICAgICAnZGVsdGFZJyxcbiAgICAgICd0ZXh0QmFja2dyb3VuZENvbG9yJyxcbiAgICBdLFxuXG4gICAgLyoqXG4gICAgICogY29udGFpbnMgY2hhcmFjdGVycyBib3VuZGluZyBib3hlc1xuICAgICAqL1xuICAgIF9fY2hhckJvdW5kczogW10sXG5cbiAgICAvKipcbiAgICAgKiB1c2UgdGhpcyBzaXplIHdoZW4gbWVhc3VyaW5nIHRleHQuIFRvIGF2b2lkIElFMTEgcm91bmRpbmcgZXJyb3JzXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqIEByZWFkb25seVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgQ0FDSEVfRk9OVF9TSVpFOiA0MDAsXG5cbiAgICAvKipcbiAgICAgKiBjb250YWlucyB0aGUgbWluIHRleHQgd2lkdGggdG8gYXZvaWQgZ2V0dGluZyAwXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIE1JTl9URVhUX1dJRFRIOiAyLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUZXh0IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuVGV4dH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKHRleHQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuc3R5bGVzID0gb3B0aW9ucyA/IChvcHRpb25zLnN0eWxlcyB8fCB7IH0pIDogeyB9O1xuICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgIHRoaXMuX19za2lwRGltZW5zaW9uID0gdHJ1ZTtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdpbml0aWFsaXplJywgb3B0aW9ucyk7XG4gICAgICBpZiAodGhpcy5wYXRoKSB7XG4gICAgICAgIHRoaXMuc2V0UGF0aEluZm8oKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19za2lwRGltZW5zaW9uID0gZmFsc2U7XG4gICAgICB0aGlzLmluaXREaW1lbnNpb25zKCk7XG4gICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgICAgdGhpcy5zZXR1cFN0YXRlKHsgcHJvcGVydHlTZXQ6ICdfZGltZW5zaW9uQWZmZWN0aW5nUHJvcHMnIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJZiB0ZXh0IGhhcyBhIHBhdGgsIGl0IHdpbGwgYWRkIHRoZSBleHRyYSBpbmZvcm1hdGlvbiBuZWVkZWRcbiAgICAgKiBmb3IgcGF0aCBhbmQgdGV4dCBjYWxjdWxhdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuVGV4dH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIHNldFBhdGhJbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwYXRoID0gdGhpcy5wYXRoO1xuICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgcGF0aC5zZWdtZW50c0luZm8gPSBmYWJyaWMudXRpbC5nZXRQYXRoU2VnbWVudHNJbmZvKHBhdGgucGF0aCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIGNvbnRleHQgZm9yIG1lYXN1cmVtZW50IG9mIHRleHQgc3RyaW5nLlxuICAgICAqIGlmIGNyZWF0ZWQgaXQgZ2V0cyBzdG9yZWQgZm9yIHJldXNlXG4gICAgICogdGhpcyBpcyBmb3IgaW50ZXJuYWwgdXNlLCBwbGVhc2UgZG8gbm90IHVzZSBpdFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGV4dCBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHJldHVybiB7ZmFicmljLlRleHR9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBnZXRNZWFzdXJpbmdDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIHdlIGRpZCBub3QgcmV0dXJuIHdlIGhhdmUgdG8gbWVhc3VyZSBzb21ldGhpbmcuXG4gICAgICBpZiAoIWZhYnJpYy5fbWVhc3VyaW5nQ29udGV4dCkge1xuICAgICAgICBmYWJyaWMuX21lYXN1cmluZ0NvbnRleHQgPSB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5jb250ZXh0Q2FjaGUgfHxcbiAgICAgICAgICBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCkuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWJyaWMuX21lYXN1cmluZ0NvbnRleHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogRGl2aWRlcyB0ZXh0IGludG8gbGluZXMgb2YgdGV4dCBhbmQgbGluZXMgb2YgZ3JhcGhlbWVzLlxuICAgICAqL1xuICAgIF9zcGxpdFRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5ld0xpbmVzID0gdGhpcy5fc3BsaXRUZXh0SW50b0xpbmVzKHRoaXMudGV4dCk7XG4gICAgICB0aGlzLnRleHRMaW5lcyA9IG5ld0xpbmVzLmxpbmVzO1xuICAgICAgdGhpcy5fdGV4dExpbmVzID0gbmV3TGluZXMuZ3JhcGhlbWVMaW5lcztcbiAgICAgIHRoaXMuX3Vud3JhcHBlZFRleHRMaW5lcyA9IG5ld0xpbmVzLl91bndyYXBwZWRMaW5lcztcbiAgICAgIHRoaXMuX3RleHQgPSBuZXdMaW5lcy5ncmFwaGVtZVRleHQ7XG4gICAgICByZXR1cm4gbmV3TGluZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgb3IgdXBkYXRlIHRleHQgZGltZW5zaW9ucy5cbiAgICAgKiBVcGRhdGVzIHRoaXMud2lkdGggYW5kIHRoaXMuaGVpZ2h0IHdpdGggdGhlIHByb3BlciB2YWx1ZXMuXG4gICAgICogRG9lcyBub3QgcmV0dXJuIGRpbWVuc2lvbnMuXG4gICAgICovXG4gICAgaW5pdERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX19za2lwRGltZW5zaW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NwbGl0VGV4dCgpO1xuICAgICAgdGhpcy5fY2xlYXJDYWNoZSgpO1xuICAgICAgaWYgKHRoaXMucGF0aCkge1xuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5wYXRoLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMucGF0aC5oZWlnaHQ7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuY2FsY1RleHRXaWR0aCgpIHx8IHRoaXMuY3Vyc29yV2lkdGggfHwgdGhpcy5NSU5fVEVYVF9XSURUSDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmNhbGNUZXh0SGVpZ2h0KCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50ZXh0QWxpZ24uaW5kZXhPZignanVzdGlmeScpICE9PSAtMSkge1xuICAgICAgICAvLyBvbmNlIHRleHQgaXMgbWVhc3VyZWQgd2UgbmVlZCB0byBtYWtlIHNwYWNlIGZhdHRlciB0byBtYWtlIGp1c3RpZmllZCB0ZXh0LlxuICAgICAgICB0aGlzLmVubGFyZ2VTcGFjZXMoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2F2ZVN0YXRlKHsgcHJvcGVydHlTZXQ6ICdfZGltZW5zaW9uQWZmZWN0aW5nUHJvcHMnIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFbmxhcmdlIHNwYWNlIGJveGVzIGFuZCBzaGlmdCB0aGUgb3RoZXJzXG4gICAgICovXG4gICAgZW5sYXJnZVNwYWNlczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGlmZlNwYWNlLCBjdXJyZW50TGluZVdpZHRoLCBudW1iZXJPZlNwYWNlcywgYWNjdW11bGF0ZWRTcGFjZSwgbGluZSwgY2hhckJvdW5kLCBzcGFjZXM7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fdGV4dExpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLnRleHRBbGlnbiAhPT0gJ2p1c3RpZnknICYmIChpID09PSBsZW4gLSAxIHx8IHRoaXMuaXNFbmRPZldyYXBwaW5nKGkpKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGFjY3VtdWxhdGVkU3BhY2UgPSAwO1xuICAgICAgICBsaW5lID0gdGhpcy5fdGV4dExpbmVzW2ldO1xuICAgICAgICBjdXJyZW50TGluZVdpZHRoID0gdGhpcy5nZXRMaW5lV2lkdGgoaSk7XG4gICAgICAgIGlmIChjdXJyZW50TGluZVdpZHRoIDwgdGhpcy53aWR0aCAmJiAoc3BhY2VzID0gdGhpcy50ZXh0TGluZXNbaV0ubWF0Y2godGhpcy5fcmVTcGFjZXNBbmRUYWJzKSkpIHtcbiAgICAgICAgICBudW1iZXJPZlNwYWNlcyA9IHNwYWNlcy5sZW5ndGg7XG4gICAgICAgICAgZGlmZlNwYWNlID0gKHRoaXMud2lkdGggLSBjdXJyZW50TGluZVdpZHRoKSAvIG51bWJlck9mU3BhY2VzO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBqbGVuID0gbGluZS5sZW5ndGg7IGogPD0gamxlbjsgaisrKSB7XG4gICAgICAgICAgICBjaGFyQm91bmQgPSB0aGlzLl9fY2hhckJvdW5kc1tpXVtqXTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZVNwYWNlQW5kVGFiLnRlc3QobGluZVtqXSkpIHtcbiAgICAgICAgICAgICAgY2hhckJvdW5kLndpZHRoICs9IGRpZmZTcGFjZTtcbiAgICAgICAgICAgICAgY2hhckJvdW5kLmtlcm5lZFdpZHRoICs9IGRpZmZTcGFjZTtcbiAgICAgICAgICAgICAgY2hhckJvdW5kLmxlZnQgKz0gYWNjdW11bGF0ZWRTcGFjZTtcbiAgICAgICAgICAgICAgYWNjdW11bGF0ZWRTcGFjZSArPSBkaWZmU3BhY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgY2hhckJvdW5kLmxlZnQgKz0gYWNjdW11bGF0ZWRTcGFjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGV0ZWN0IGlmIHRoZSB0ZXh0IGxpbmUgaXMgZW5kZWQgd2l0aCBhbiBoYXJkIGJyZWFrXG4gICAgICogdGV4dCBhbmQgaXRleHQgZG8gbm90IGhhdmUgd3JhcHBpbmcsIHJldHVybiBmYWxzZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNFbmRPZldyYXBwaW5nOiBmdW5jdGlvbihsaW5lSW5kZXgpIHtcbiAgICAgIHJldHVybiBsaW5lSW5kZXggPT09IHRoaXMuX3RleHRMaW5lcy5sZW5ndGggLSAxO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3QgaWYgYSBsaW5lIGhhcyBhIGxpbmVicmVhayBhbmQgc28gd2UgbmVlZCB0byBhY2NvdW50IGZvciBpdCB3aGVuIG1vdmluZ1xuICAgICAqIGFuZCBjb3VudGluZyBzdHlsZS5cbiAgICAgKiBJdCByZXR1cm4gYWx3YXlzIGZvciB0ZXh0IGFuZCBJdGV4dC5cbiAgICAgKiBAcmV0dXJuIE51bWJlclxuICAgICAqL1xuICAgIG1pc3NpbmdOZXdsaW5lT2Zmc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRleHQgb2JqZWN0XG4gICAgICovXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICcjPGZhYnJpYy5UZXh0ICgnICsgdGhpcy5jb21wbGV4aXR5KCkgK1xuICAgICAgICAnKTogeyBcInRleHRcIjogXCInICsgdGhpcy50ZXh0ICsgJ1wiLCBcImZvbnRGYW1pbHlcIjogXCInICsgdGhpcy5mb250RmFtaWx5ICsgJ1wiIH0+JztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBkaW1lbnNpb24gYW5kIHRoZSB6b29tIGxldmVsIG5lZWRlZCB0byBjcmVhdGUgYSBjYWNoZSBjYW52YXNcbiAgICAgKiBiaWcgZW5vdWdoIHRvIGhvc3QgdGhlIG9iamVjdCB0byBiZSBjYWNoZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGltLnggd2lkdGggb2Ygb2JqZWN0IHRvIGJlIGNhY2hlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkaW0ueSBoZWlnaHQgb2Ygb2JqZWN0IHRvIGJlIGNhY2hlZFxuICAgICAqIEByZXR1cm4ge09iamVjdH0ud2lkdGggd2lkdGggb2YgY2FudmFzXG4gICAgICogQHJldHVybiB7T2JqZWN0fS5oZWlnaHQgaGVpZ2h0IG9mIGNhbnZhc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0uem9vbVggem9vbVggem9vbSB2YWx1ZSB0byB1bnNjYWxlIHRoZSBjYW52YXMgYmVmb3JlIGRyYXdpbmcgY2FjaGVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9Lnpvb21ZIHpvb21ZIHpvb20gdmFsdWUgdG8gdW5zY2FsZSB0aGUgY2FudmFzIGJlZm9yZSBkcmF3aW5nIGNhY2hlXG4gICAgICovXG4gICAgX2dldENhY2hlQ2FudmFzRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGltcyA9IHRoaXMuY2FsbFN1cGVyKCdfZ2V0Q2FjaGVDYW52YXNEaW1lbnNpb25zJyk7XG4gICAgICB2YXIgZm9udFNpemUgPSB0aGlzLmZvbnRTaXplO1xuICAgICAgZGltcy53aWR0aCArPSBmb250U2l6ZSAqIGRpbXMuem9vbVg7XG4gICAgICBkaW1zLmhlaWdodCArPSBmb250U2l6ZSAqIGRpbXMuem9vbVk7XG4gICAgICByZXR1cm4gZGltcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgIHBhdGggJiYgIXBhdGguaXNOb3RWaXNpYmxlKCkgJiYgcGF0aC5fcmVuZGVyKGN0eCk7XG4gICAgICB0aGlzLl9zZXRUZXh0U3R5bGVzKGN0eCk7XG4gICAgICB0aGlzLl9yZW5kZXJUZXh0TGluZXNCYWNrZ3JvdW5kKGN0eCk7XG4gICAgICB0aGlzLl9yZW5kZXJUZXh0RGVjb3JhdGlvbihjdHgsICd1bmRlcmxpbmUnKTtcbiAgICAgIHRoaXMuX3JlbmRlclRleHQoY3R4KTtcbiAgICAgIHRoaXMuX3JlbmRlclRleHREZWNvcmF0aW9uKGN0eCwgJ292ZXJsaW5lJyk7XG4gICAgICB0aGlzLl9yZW5kZXJUZXh0RGVjb3JhdGlvbihjdHgsICdsaW5ldGhyb3VnaCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyVGV4dDogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAodGhpcy5wYWludEZpcnN0ID09PSAnc3Ryb2tlJykge1xuICAgICAgICB0aGlzLl9yZW5kZXJUZXh0U3Ryb2tlKGN0eCk7XG4gICAgICAgIHRoaXMuX3JlbmRlclRleHRGaWxsKGN0eCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyVGV4dEZpbGwoY3R4KTtcbiAgICAgICAgdGhpcy5fcmVuZGVyVGV4dFN0cm9rZShjdHgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZvbnQgcGFyYW1ldGVyIG9mIHRoZSBjb250ZXh0IHdpdGggdGhlIG9iamVjdCBwcm9wZXJ0aWVzIG9yIHdpdGggY2hhclN0eWxlXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjaGFyU3R5bGVdIG9iamVjdCB3aXRoIGZvbnQgc3R5bGUgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY2hhclN0eWxlLmZvbnRGYW1pbHldIEZvbnQgRmFtaWx5XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjaGFyU3R5bGUuZm9udFNpemVdIEZvbnQgc2l6ZSBpbiBwaXhlbHMuICggd2l0aG91dCBweCBzdWZmaXggKVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY2hhclN0eWxlLmZvbnRXZWlnaHRdIEZvbnQgd2VpZ2h0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjaGFyU3R5bGUuZm9udFN0eWxlXSBGb250IHN0eWxlIChpdGFsaWN8bm9ybWFsKVxuICAgICAqL1xuICAgIF9zZXRUZXh0U3R5bGVzOiBmdW5jdGlvbihjdHgsIGNoYXJTdHlsZSwgZm9yTWVhc3VyaW5nKSB7XG4gICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ2FscGhhYmV0aWNhbCc7XG4gICAgICBpZiAodGhpcy5wYXRoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5wYXRoQWxpZ24pIHtcbiAgICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYXNjZW5kZXInOlxuICAgICAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZGVzY2VuZGVyJzpcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdHguZm9udCA9IHRoaXMuX2dldEZvbnREZWNsYXJhdGlvbihjaGFyU3R5bGUsIGZvck1lYXN1cmluZyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbGN1bGF0ZSBhbmQgcmV0dXJuIHRoZSB0ZXh0IFdpZHRoIG1lYXN1cmluZyBlYWNoIGxpbmUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBNYXhpbXVtIHdpZHRoIG9mIGZhYnJpYy5UZXh0IG9iamVjdFxuICAgICAqL1xuICAgIGNhbGNUZXh0V2lkdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG1heFdpZHRoID0gdGhpcy5nZXRMaW5lV2lkdGgoMCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAxLCBsZW4gPSB0aGlzLl90ZXh0TGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGN1cnJlbnRMaW5lV2lkdGggPSB0aGlzLmdldExpbmVXaWR0aChpKTtcbiAgICAgICAgaWYgKGN1cnJlbnRMaW5lV2lkdGggPiBtYXhXaWR0aCkge1xuICAgICAgICAgIG1heFdpZHRoID0gY3VycmVudExpbmVXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1heFdpZHRoO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgTWV0aG9kIG5hbWUgKFwiZmlsbFRleHRcIiBvciBcInN0cm9rZVRleHRcIilcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGxpbmUgVGV4dCB0byByZW5kZXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGVmdCBMZWZ0IHBvc2l0aW9uIG9mIHRleHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdG9wIFRvcCBwb3NpdGlvbiBvZiB0ZXh0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCBJbmRleCBvZiBhIGxpbmUgaW4gYSB0ZXh0XG4gICAgICovXG4gICAgX3JlbmRlclRleHRMaW5lOiBmdW5jdGlvbihtZXRob2QsIGN0eCwgbGluZSwgbGVmdCwgdG9wLCBsaW5lSW5kZXgpIHtcbiAgICAgIHRoaXMuX3JlbmRlckNoYXJzKG1ldGhvZCwgY3R4LCBsaW5lLCBsZWZ0LCB0b3AsIGxpbmVJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgdGhlIHRleHQgYmFja2dyb3VuZCBmb3IgbGluZXMsIHRha2luZyBjYXJlIG9mIHN0eWxlXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlclRleHRMaW5lc0JhY2tncm91bmQ6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgaWYgKCF0aGlzLnRleHRCYWNrZ3JvdW5kQ29sb3IgJiYgIXRoaXMuc3R5bGVIYXMoJ3RleHRCYWNrZ3JvdW5kQ29sb3InKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaGVpZ2h0T2ZMaW5lLFxuICAgICAgICAgIGxpbmVMZWZ0T2Zmc2V0LCBvcmlnaW5hbEZpbGwgPSBjdHguZmlsbFN0eWxlLFxuICAgICAgICAgIGxpbmUsIGxhc3RDb2xvcixcbiAgICAgICAgICBsZWZ0T2Zmc2V0ID0gdGhpcy5fZ2V0TGVmdE9mZnNldCgpLFxuICAgICAgICAgIGxpbmVUb3BPZmZzZXQgPSB0aGlzLl9nZXRUb3BPZmZzZXQoKSxcbiAgICAgICAgICBib3hTdGFydCA9IDAsIGJveFdpZHRoID0gMCwgY2hhckJveCwgY3VycmVudENvbG9yLCBwYXRoID0gdGhpcy5wYXRoLFxuICAgICAgICAgIGRyYXdTdGFydDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX3RleHRMaW5lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBoZWlnaHRPZkxpbmUgPSB0aGlzLmdldEhlaWdodE9mTGluZShpKTtcbiAgICAgICAgaWYgKCF0aGlzLnRleHRCYWNrZ3JvdW5kQ29sb3IgJiYgIXRoaXMuc3R5bGVIYXMoJ3RleHRCYWNrZ3JvdW5kQ29sb3InLCBpKSkge1xuICAgICAgICAgIGxpbmVUb3BPZmZzZXQgKz0gaGVpZ2h0T2ZMaW5lO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxpbmUgPSB0aGlzLl90ZXh0TGluZXNbaV07XG4gICAgICAgIGxpbmVMZWZ0T2Zmc2V0ID0gdGhpcy5fZ2V0TGluZUxlZnRPZmZzZXQoaSk7XG4gICAgICAgIGJveFdpZHRoID0gMDtcbiAgICAgICAgYm94U3RhcnQgPSAwO1xuICAgICAgICBsYXN0Q29sb3IgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGksIDAsICd0ZXh0QmFja2dyb3VuZENvbG9yJyk7XG4gICAgICAgIGZvciAodmFyIGogPSAwLCBqbGVuID0gbGluZS5sZW5ndGg7IGogPCBqbGVuOyBqKyspIHtcbiAgICAgICAgICBjaGFyQm94ID0gdGhpcy5fX2NoYXJCb3VuZHNbaV1bal07XG4gICAgICAgICAgY3VycmVudENvbG9yID0gdGhpcy5nZXRWYWx1ZU9mUHJvcGVydHlBdChpLCBqLCAndGV4dEJhY2tncm91bmRDb2xvcicpO1xuICAgICAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShjaGFyQm94LnJlbmRlckxlZnQsIGNoYXJCb3gucmVuZGVyVG9wKTtcbiAgICAgICAgICAgIGN0eC5yb3RhdGUoY2hhckJveC5hbmdsZSk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY3VycmVudENvbG9yO1xuICAgICAgICAgICAgY3VycmVudENvbG9yICYmIGN0eC5maWxsUmVjdChcbiAgICAgICAgICAgICAgLWNoYXJCb3gud2lkdGggLyAyLFxuICAgICAgICAgICAgICAtaGVpZ2h0T2ZMaW5lIC8gdGhpcy5saW5lSGVpZ2h0ICogKDEgLSB0aGlzLl9mb250U2l6ZUZyYWN0aW9uKSxcbiAgICAgICAgICAgICAgY2hhckJveC53aWR0aCxcbiAgICAgICAgICAgICAgaGVpZ2h0T2ZMaW5lIC8gdGhpcy5saW5lSGVpZ2h0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoY3VycmVudENvbG9yICE9PSBsYXN0Q29sb3IpIHtcbiAgICAgICAgICAgIGRyYXdTdGFydCA9IGxlZnRPZmZzZXQgKyBsaW5lTGVmdE9mZnNldCArIGJveFN0YXJ0O1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICAgICAgICBkcmF3U3RhcnQgPSB0aGlzLndpZHRoIC0gZHJhd1N0YXJ0IC0gYm94V2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFzdENvbG9yO1xuICAgICAgICAgICAgbGFzdENvbG9yICYmIGN0eC5maWxsUmVjdChcbiAgICAgICAgICAgICAgZHJhd1N0YXJ0LFxuICAgICAgICAgICAgICBsaW5lVG9wT2Zmc2V0LFxuICAgICAgICAgICAgICBib3hXaWR0aCxcbiAgICAgICAgICAgICAgaGVpZ2h0T2ZMaW5lIC8gdGhpcy5saW5lSGVpZ2h0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYm94U3RhcnQgPSBjaGFyQm94LmxlZnQ7XG4gICAgICAgICAgICBib3hXaWR0aCA9IGNoYXJCb3gud2lkdGg7XG4gICAgICAgICAgICBsYXN0Q29sb3IgPSBjdXJyZW50Q29sb3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYm94V2lkdGggKz0gY2hhckJveC5rZXJuZWRXaWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRDb2xvciAmJiAhcGF0aCkge1xuICAgICAgICAgIGRyYXdTdGFydCA9IGxlZnRPZmZzZXQgKyBsaW5lTGVmdE9mZnNldCArIGJveFN0YXJ0O1xuICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICAgIGRyYXdTdGFydCA9IHRoaXMud2lkdGggLSBkcmF3U3RhcnQgLSBib3hXaWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGN1cnJlbnRDb2xvcjtcbiAgICAgICAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgICAgICBkcmF3U3RhcnQsXG4gICAgICAgICAgICBsaW5lVG9wT2Zmc2V0LFxuICAgICAgICAgICAgYm94V2lkdGgsXG4gICAgICAgICAgICBoZWlnaHRPZkxpbmUgLyB0aGlzLmxpbmVIZWlnaHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGxpbmVUb3BPZmZzZXQgKz0gaGVpZ2h0T2ZMaW5lO1xuICAgICAgfVxuICAgICAgY3R4LmZpbGxTdHlsZSA9IG9yaWdpbmFsRmlsbDtcbiAgICAgIC8vIGlmIHRoZXJlIGlzIHRleHQgYmFja2dyb3VuZCBjb2xvciBub1xuICAgICAgLy8gb3RoZXIgc2hhZG93cyBzaG91bGQgYmUgY2FzdGVkXG4gICAgICB0aGlzLl9yZW1vdmVTaGFkb3coY3R4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGVjbCBzdHlsZSBkZWNsYXJhdGlvbiBmb3IgY2FjaGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGVjbC5mb250RmFtaWx5IGZvbnRGYW1pbHlcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGVjbC5mb250U3R5bGUgZm9udFN0eWxlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRlY2wuZm9udFdlaWdodCBmb250V2VpZ2h0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSByZWZlcmVuY2UgdG8gY2FjaGVcbiAgICAgKi9cbiAgICBnZXRGb250Q2FjaGU6IGZ1bmN0aW9uKGRlY2wpIHtcbiAgICAgIHZhciBmb250RmFtaWx5ID0gZGVjbC5mb250RmFtaWx5LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoIWZhYnJpYy5jaGFyV2lkdGhzQ2FjaGVbZm9udEZhbWlseV0pIHtcbiAgICAgICAgZmFicmljLmNoYXJXaWR0aHNDYWNoZVtmb250RmFtaWx5XSA9IHsgfTtcbiAgICAgIH1cbiAgICAgIHZhciBjYWNoZSA9IGZhYnJpYy5jaGFyV2lkdGhzQ2FjaGVbZm9udEZhbWlseV0sXG4gICAgICAgICAgY2FjaGVQcm9wID0gZGVjbC5mb250U3R5bGUudG9Mb3dlckNhc2UoKSArICdfJyArIChkZWNsLmZvbnRXZWlnaHQgKyAnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICghY2FjaGVbY2FjaGVQcm9wXSkge1xuICAgICAgICBjYWNoZVtjYWNoZVByb3BdID0geyB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhY2hlW2NhY2hlUHJvcF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIG1lYXN1cmUgYW5kIHJldHVybiB0aGUgd2lkdGggb2YgYSBzaW5nbGUgY2hhcmFjdGVyLlxuICAgICAqIHBvc3NpYmx5IG92ZXJyaWRkZW4gdG8gYWNjb21tb2RhdGUgZGlmZmVyZW50IG1lYXN1cmUgbG9naWMgb3JcbiAgICAgKiB0byBob29rIHNvbWUgZXh0ZXJuYWwgbGliIGZvciBjaGFyYWN0ZXIgbWVhc3VyZW1lbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBfY2hhciwgY2hhciB0byBiZSBtZWFzdXJlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjaGFyU3R5bGUgc3R5bGUgb2YgY2hhciB0byBiZSBtZWFzdXJlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbcHJldmlvdXNDaGFyXSBwcmV2aW91cyBjaGFyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcmV2Q2hhclN0eWxlXSBzdHlsZSBvZiBwcmV2aW91cyBjaGFyXG4gICAgICovXG4gICAgX21lYXN1cmVDaGFyOiBmdW5jdGlvbihfY2hhciwgY2hhclN0eWxlLCBwcmV2aW91c0NoYXIsIHByZXZDaGFyU3R5bGUpIHtcbiAgICAgIC8vIGZpcnN0IGkgdHJ5IHRvIHJldHVybiBmcm9tIGNhY2hlXG4gICAgICB2YXIgZm9udENhY2hlID0gdGhpcy5nZXRGb250Q2FjaGUoY2hhclN0eWxlKSwgZm9udERlY2xhcmF0aW9uID0gdGhpcy5fZ2V0Rm9udERlY2xhcmF0aW9uKGNoYXJTdHlsZSksXG4gICAgICAgICAgcHJldmlvdXNGb250RGVjbGFyYXRpb24gPSB0aGlzLl9nZXRGb250RGVjbGFyYXRpb24ocHJldkNoYXJTdHlsZSksIGNvdXBsZSA9IHByZXZpb3VzQ2hhciArIF9jaGFyLFxuICAgICAgICAgIHN0eWxlc0FyZUVxdWFsID0gZm9udERlY2xhcmF0aW9uID09PSBwcmV2aW91c0ZvbnREZWNsYXJhdGlvbiwgd2lkdGgsIGNvdXBsZVdpZHRoLCBwcmV2aW91c1dpZHRoLFxuICAgICAgICAgIGZvbnRNdWx0aXBsaWVyID0gY2hhclN0eWxlLmZvbnRTaXplIC8gdGhpcy5DQUNIRV9GT05UX1NJWkUsIGtlcm5lZFdpZHRoO1xuXG4gICAgICBpZiAocHJldmlvdXNDaGFyICYmIGZvbnRDYWNoZVtwcmV2aW91c0NoYXJdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJldmlvdXNXaWR0aCA9IGZvbnRDYWNoZVtwcmV2aW91c0NoYXJdO1xuICAgICAgfVxuICAgICAgaWYgKGZvbnRDYWNoZVtfY2hhcl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXJuZWRXaWR0aCA9IHdpZHRoID0gZm9udENhY2hlW19jaGFyXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHlsZXNBcmVFcXVhbCAmJiBmb250Q2FjaGVbY291cGxlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvdXBsZVdpZHRoID0gZm9udENhY2hlW2NvdXBsZV07XG4gICAgICAgIGtlcm5lZFdpZHRoID0gY291cGxlV2lkdGggLSBwcmV2aW91c1dpZHRoO1xuICAgICAgfVxuICAgICAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQgfHwgcHJldmlvdXNXaWR0aCA9PT0gdW5kZWZpbmVkIHx8IGNvdXBsZVdpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuZ2V0TWVhc3VyaW5nQ29udGV4dCgpO1xuICAgICAgICAvLyBzZW5kIGEgVFJVRSB0byBzcGVjaWZ5IG1lYXN1cmluZyBmb250IHNpemUgQ0FDSEVfRk9OVF9TSVpFXG4gICAgICAgIHRoaXMuX3NldFRleHRTdHlsZXMoY3R4LCBjaGFyU3R5bGUsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2VybmVkV2lkdGggPSB3aWR0aCA9IGN0eC5tZWFzdXJlVGV4dChfY2hhcikud2lkdGg7XG4gICAgICAgIGZvbnRDYWNoZVtfY2hhcl0gPSB3aWR0aDtcbiAgICAgIH1cbiAgICAgIGlmIChwcmV2aW91c1dpZHRoID09PSB1bmRlZmluZWQgJiYgc3R5bGVzQXJlRXF1YWwgJiYgcHJldmlvdXNDaGFyKSB7XG4gICAgICAgIHByZXZpb3VzV2lkdGggPSBjdHgubWVhc3VyZVRleHQocHJldmlvdXNDaGFyKS53aWR0aDtcbiAgICAgICAgZm9udENhY2hlW3ByZXZpb3VzQ2hhcl0gPSBwcmV2aW91c1dpZHRoO1xuICAgICAgfVxuICAgICAgaWYgKHN0eWxlc0FyZUVxdWFsICYmIGNvdXBsZVdpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gd2UgY2FuIG1lYXN1cmUgdGhlIGtlcm5pbmcgY291cGxlIGFuZCBzdWJ0cmFjdCB0aGUgd2lkdGggb2YgdGhlIHByZXZpb3VzIGNoYXJhY3RlclxuICAgICAgICBjb3VwbGVXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChjb3VwbGUpLndpZHRoO1xuICAgICAgICBmb250Q2FjaGVbY291cGxlXSA9IGNvdXBsZVdpZHRoO1xuICAgICAgICBrZXJuZWRXaWR0aCA9IGNvdXBsZVdpZHRoIC0gcHJldmlvdXNXaWR0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IHdpZHRoOiB3aWR0aCAqIGZvbnRNdWx0aXBsaWVyLCBrZXJuZWRXaWR0aDoga2VybmVkV2lkdGggKiBmb250TXVsdGlwbGllciB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBoZWlnaHQgb2YgY2hhcmFjdGVyIGF0IGdpdmVuIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmUgdGhlIGxpbmUgaW5kZXggbnVtYmVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IF9jaGFyIHRoZSBjaGFyYWN0ZXIgaW5kZXggbnVtYmVyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBmb250U2l6ZSBvZiB0aGUgY2hhcmFjdGVyXG4gICAgICovXG4gICAgZ2V0SGVpZ2h0T2ZDaGFyOiBmdW5jdGlvbihsaW5lLCBfY2hhcikge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQobGluZSwgX2NoYXIsICdmb250U2l6ZScpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBtZWFzdXJlIGEgdGV4dCBsaW5lIG1lYXN1cmluZyBhbGwgY2hhcmFjdGVycy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4IGxpbmUgbnVtYmVyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBMaW5lIHdpZHRoXG4gICAgICovXG4gICAgbWVhc3VyZUxpbmU6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgdmFyIGxpbmVJbmZvID0gdGhpcy5fbWVhc3VyZUxpbmUobGluZUluZGV4KTtcbiAgICAgIGlmICh0aGlzLmNoYXJTcGFjaW5nICE9PSAwKSB7XG4gICAgICAgIGxpbmVJbmZvLndpZHRoIC09IHRoaXMuX2dldFdpZHRoT2ZDaGFyU3BhY2luZygpO1xuICAgICAgfVxuICAgICAgaWYgKGxpbmVJbmZvLndpZHRoIDwgMCkge1xuICAgICAgICBsaW5lSW5mby53aWR0aCA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGluZUluZm87XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIG1lYXN1cmUgZXZlcnkgZ3JhcGhlbWUgb2YgYSBsaW5lLCBwb3B1bGF0aW5nIF9fY2hhckJvdW5kc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdC53aWR0aCB0b3RhbCB3aWR0aCBvZiBjaGFyYWN0ZXJzXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3Qud2lkdGhPZlNwYWNlcyBsZW5ndGggb2YgY2hhcnMgdGhhdCBtYXRjaCB0aGlzLl9yZVNwYWNlc0FuZFRhYnNcbiAgICAgKi9cbiAgICBfbWVhc3VyZUxpbmU6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgdmFyIHdpZHRoID0gMCwgaSwgZ3JhcGhlbWUsIGxpbmUgPSB0aGlzLl90ZXh0TGluZXNbbGluZUluZGV4XSwgcHJldkdyYXBoZW1lLFxuICAgICAgICAgIGdyYXBoZW1lSW5mbywgbnVtT2ZTcGFjZXMgPSAwLCBsaW5lQm91bmRzID0gbmV3IEFycmF5KGxpbmUubGVuZ3RoKSxcbiAgICAgICAgICBwb3NpdGlvbkluUGF0aCA9IDAsIHN0YXJ0aW5nUG9pbnQsIHRvdGFsUGF0aExlbmd0aCwgcGF0aCA9IHRoaXMucGF0aCxcbiAgICAgICAgICByZXZlcnNlID0gdGhpcy5wYXRoU2lkZSA9PT0gJ3JpZ2h0JztcblxuICAgICAgdGhpcy5fX2NoYXJCb3VuZHNbbGluZUluZGV4XSA9IGxpbmVCb3VuZHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGluZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBncmFwaGVtZSA9IGxpbmVbaV07XG4gICAgICAgIGdyYXBoZW1lSW5mbyA9IHRoaXMuX2dldEdyYXBoZW1lQm94KGdyYXBoZW1lLCBsaW5lSW5kZXgsIGksIHByZXZHcmFwaGVtZSk7XG4gICAgICAgIGxpbmVCb3VuZHNbaV0gPSBncmFwaGVtZUluZm87XG4gICAgICAgIHdpZHRoICs9IGdyYXBoZW1lSW5mby5rZXJuZWRXaWR0aDtcbiAgICAgICAgcHJldkdyYXBoZW1lID0gZ3JhcGhlbWU7XG4gICAgICB9XG4gICAgICAvLyB0aGlzIGxhdGVzdCBib3VuZCBib3ggcmVwcmVzZW50IHRoZSBsYXN0IGNoYXJhY3RlciBvZiB0aGUgbGluZVxuICAgICAgLy8gdG8gc2ltcGxpZnkgY3Vyc29yIGhhbmRsaW5nIGluIGludGVyYWN0aXZlIG1vZGUuXG4gICAgICBsaW5lQm91bmRzW2ldID0ge1xuICAgICAgICBsZWZ0OiBncmFwaGVtZUluZm8gPyBncmFwaGVtZUluZm8ubGVmdCArIGdyYXBoZW1lSW5mby53aWR0aCA6IDAsXG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBrZXJuZWRXaWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmZvbnRTaXplXG4gICAgICB9O1xuICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgdG90YWxQYXRoTGVuZ3RoID0gcGF0aC5zZWdtZW50c0luZm9bcGF0aC5zZWdtZW50c0luZm8ubGVuZ3RoIC0gMV0ubGVuZ3RoO1xuICAgICAgICBzdGFydGluZ1BvaW50ID0gZmFicmljLnV0aWwuZ2V0UG9pbnRPblBhdGgocGF0aC5wYXRoLCAwLCBwYXRoLnNlZ21lbnRzSW5mbyk7XG4gICAgICAgIHN0YXJ0aW5nUG9pbnQueCArPSBwYXRoLnBhdGhPZmZzZXQueDtcbiAgICAgICAgc3RhcnRpbmdQb2ludC55ICs9IHBhdGgucGF0aE9mZnNldC55O1xuICAgICAgICBzd2l0Y2ggKHRoaXMudGV4dEFsaWduKSB7XG4gICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICBwb3NpdGlvbkluUGF0aCA9IHJldmVyc2UgPyAodG90YWxQYXRoTGVuZ3RoIC0gd2lkdGgpIDogMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgICBwb3NpdGlvbkluUGF0aCA9ICh0b3RhbFBhdGhMZW5ndGggLSB3aWR0aCkgLyAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgcG9zaXRpb25JblBhdGggPSByZXZlcnNlID8gMCA6ICh0b3RhbFBhdGhMZW5ndGggLSB3aWR0aCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvL3RvZG8gLSBhZGQgc3VwcG9ydCBmb3IganVzdGlmeVxuICAgICAgICB9XG4gICAgICAgIHBvc2l0aW9uSW5QYXRoICs9IHRoaXMucGF0aFN0YXJ0T2Zmc2V0ICogKHJldmVyc2UgPyAtMSA6IDEpO1xuICAgICAgICBmb3IgKGkgPSByZXZlcnNlID8gbGluZS5sZW5ndGggLSAxIDogMDtcbiAgICAgICAgICByZXZlcnNlID8gaSA+PSAwIDogaSA8IGxpbmUubGVuZ3RoO1xuICAgICAgICAgIHJldmVyc2UgPyBpLS0gOiBpKyspIHtcbiAgICAgICAgICBncmFwaGVtZUluZm8gPSBsaW5lQm91bmRzW2ldO1xuICAgICAgICAgIGlmIChwb3NpdGlvbkluUGF0aCA+IHRvdGFsUGF0aExlbmd0aCkge1xuICAgICAgICAgICAgcG9zaXRpb25JblBhdGggJT0gdG90YWxQYXRoTGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChwb3NpdGlvbkluUGF0aCA8IDApIHtcbiAgICAgICAgICAgIHBvc2l0aW9uSW5QYXRoICs9IHRvdGFsUGF0aExlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gaXQgd291bGQgcHJvYmFibHkgbXVjaCBmYXN0ZXIgdG8gc2VuZCBhbGwgdGhlIGdyYXBoZW1lIHBvc2l0aW9uIGZvciBhIGxpbmVcbiAgICAgICAgICAvLyBhbmQgY2FsY3VsYXRlIHBhdGggcG9zaXRpb24vYW5nbGUgYXQgb25jZS5cbiAgICAgICAgICB0aGlzLl9zZXRHcmFwaGVtZU9uUGF0aChwb3NpdGlvbkluUGF0aCwgZ3JhcGhlbWVJbmZvLCBzdGFydGluZ1BvaW50KTtcbiAgICAgICAgICBwb3NpdGlvbkluUGF0aCArPSBncmFwaGVtZUluZm8ua2VybmVkV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7IHdpZHRoOiB3aWR0aCwgbnVtT2ZTcGFjZXM6IG51bU9mU3BhY2VzIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgYW5nbGUgIGFuZCB0aGUgbGVmdCx0b3AgcG9zaXRpb24gb2YgdGhlIGNoYXIgdGhhdCBmb2xsb3cgYSBwYXRoLlxuICAgICAqIEl0IGFwcGVuZHMgaXQgdG8gZ3JhcGhlbWVJbmZvIHRvIGJlIHJldXNlZCBsYXRlciBhdCByZW5kZXJpbmdcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbkluUGF0aCB0byBiZSBtZWFzdXJlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBncmFwaGVtZUluZm8gY3VycmVudCBncmFwaGVtZSBib3ggaW5mb3JtYXRpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhcnRpbmdQb2ludCBwb3NpdGlvbiBvZiB0aGUgcG9pbnRcbiAgICAgKi9cbiAgICBfc2V0R3JhcGhlbWVPblBhdGg6IGZ1bmN0aW9uKHBvc2l0aW9uSW5QYXRoLCBncmFwaGVtZUluZm8sIHN0YXJ0aW5nUG9pbnQpIHtcbiAgICAgIHZhciBjZW50ZXJQb3NpdGlvbiA9IHBvc2l0aW9uSW5QYXRoICsgZ3JhcGhlbWVJbmZvLmtlcm5lZFdpZHRoIC8gMixcbiAgICAgICAgICBwYXRoID0gdGhpcy5wYXRoO1xuXG4gICAgICAvLyB3ZSBhcmUgYXQgY3VycmVudFBvc2l0aW9uT25QYXRoLiB3ZSB3YW50IHRvIGtub3cgd2hhdCBwb2ludCBvbiB0aGUgcGF0aCBpcy5cbiAgICAgIHZhciBpbmZvID0gZmFicmljLnV0aWwuZ2V0UG9pbnRPblBhdGgocGF0aC5wYXRoLCBjZW50ZXJQb3NpdGlvbiwgcGF0aC5zZWdtZW50c0luZm8pO1xuICAgICAgZ3JhcGhlbWVJbmZvLnJlbmRlckxlZnQgPSBpbmZvLnggLSBzdGFydGluZ1BvaW50Lng7XG4gICAgICBncmFwaGVtZUluZm8ucmVuZGVyVG9wID0gaW5mby55IC0gc3RhcnRpbmdQb2ludC55O1xuICAgICAgZ3JhcGhlbWVJbmZvLmFuZ2xlID0gaW5mby5hbmdsZSArICh0aGlzLnBhdGhTaWRlID09PSAgJ3JpZ2h0JyA/IE1hdGguUEkgOiAwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWVhc3VyZSBhbmQgcmV0dXJuIHRoZSBpbmZvIG9mIGEgc2luZ2xlIGdyYXBoZW1lLlxuICAgICAqIG5lZWRzIHRoZSB0aGUgaW5mbyBvZiBwcmV2aW91cyBncmFwaGVtZXMgYWxyZWFkeSBmaWxsZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBncmFwaGVtZSB0byBiZSBtZWFzdXJlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXggaW5kZXggb2YgdGhlIGxpbmUgd2hlcmUgdGhlIGNoYXIgaXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2hhckluZGV4IHBvc2l0aW9uIGluIHRoZSBsaW5lXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtwcmV2R3JhcGhlbWVdIGNoYXJhY3RlciBwcmVjZWRpbmcgdGhlIG9uZSB0byBiZSBtZWFzdXJlZFxuICAgICAqL1xuICAgIF9nZXRHcmFwaGVtZUJveDogZnVuY3Rpb24oZ3JhcGhlbWUsIGxpbmVJbmRleCwgY2hhckluZGV4LCBwcmV2R3JhcGhlbWUsIHNraXBMZWZ0KSB7XG4gICAgICB2YXIgc3R5bGUgPSB0aGlzLmdldENvbXBsZXRlU3R5bGVEZWNsYXJhdGlvbihsaW5lSW5kZXgsIGNoYXJJbmRleCksXG4gICAgICAgICAgcHJldlN0eWxlID0gcHJldkdyYXBoZW1lID8gdGhpcy5nZXRDb21wbGV0ZVN0eWxlRGVjbGFyYXRpb24obGluZUluZGV4LCBjaGFySW5kZXggLSAxKSA6IHsgfSxcbiAgICAgICAgICBpbmZvID0gdGhpcy5fbWVhc3VyZUNoYXIoZ3JhcGhlbWUsIHN0eWxlLCBwcmV2R3JhcGhlbWUsIHByZXZTdHlsZSksXG4gICAgICAgICAga2VybmVkV2lkdGggPSBpbmZvLmtlcm5lZFdpZHRoLFxuICAgICAgICAgIHdpZHRoID0gaW5mby53aWR0aCwgY2hhclNwYWNpbmc7XG5cbiAgICAgIGlmICh0aGlzLmNoYXJTcGFjaW5nICE9PSAwKSB7XG4gICAgICAgIGNoYXJTcGFjaW5nID0gdGhpcy5fZ2V0V2lkdGhPZkNoYXJTcGFjaW5nKCk7XG4gICAgICAgIHdpZHRoICs9IGNoYXJTcGFjaW5nO1xuICAgICAgICBrZXJuZWRXaWR0aCArPSBjaGFyU3BhY2luZztcbiAgICAgIH1cblxuICAgICAgdmFyIGJveCA9IHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBoZWlnaHQ6IHN0eWxlLmZvbnRTaXplLFxuICAgICAgICBrZXJuZWRXaWR0aDoga2VybmVkV2lkdGgsXG4gICAgICAgIGRlbHRhWTogc3R5bGUuZGVsdGFZLFxuICAgICAgfTtcbiAgICAgIGlmIChjaGFySW5kZXggPiAwICYmICFza2lwTGVmdCkge1xuICAgICAgICB2YXIgcHJldmlvdXNCb3ggPSB0aGlzLl9fY2hhckJvdW5kc1tsaW5lSW5kZXhdW2NoYXJJbmRleCAtIDFdO1xuICAgICAgICBib3gubGVmdCA9IHByZXZpb3VzQm94LmxlZnQgKyBwcmV2aW91c0JveC53aWR0aCArIGluZm8ua2VybmVkV2lkdGggLSBpbmZvLndpZHRoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJveDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIGhlaWdodCBvZiBsaW5lIGF0ICdsaW5lSW5kZXgnXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCBpbmRleCBvZiBsaW5lIHRvIGNhbGN1bGF0ZVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXRIZWlnaHRPZkxpbmU6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgaWYgKHRoaXMuX19saW5lSGVpZ2h0c1tsaW5lSW5kZXhdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fbGluZUhlaWdodHNbbGluZUluZGV4XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxpbmUgPSB0aGlzLl90ZXh0TGluZXNbbGluZUluZGV4XSxcbiAgICAgICAgICAvLyBjaGFyIDAgaXMgbWVhc3VyZWQgYmVmb3JlIHRoZSBsaW5lIGN5Y2xlIGJlY2F1c2UgaXQgbm5lZHMgdG8gY2hhclxuICAgICAgICAgIC8vIGVtcHR5bGluZXNcbiAgICAgICAgICBtYXhIZWlnaHQgPSB0aGlzLmdldEhlaWdodE9mQ2hhcihsaW5lSW5kZXgsIDApO1xuICAgICAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IGxpbmUubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbWF4SGVpZ2h0ID0gTWF0aC5tYXgodGhpcy5nZXRIZWlnaHRPZkNoYXIobGluZUluZGV4LCBpKSwgbWF4SGVpZ2h0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX19saW5lSGVpZ2h0c1tsaW5lSW5kZXhdID0gbWF4SGVpZ2h0ICogdGhpcy5saW5lSGVpZ2h0ICogdGhpcy5fZm9udFNpemVNdWx0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGV4dCBib3ggaGVpZ2h0XG4gICAgICovXG4gICAgY2FsY1RleHRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxpbmVIZWlnaHQsIGhlaWdodCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fdGV4dExpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGxpbmVIZWlnaHQgPSB0aGlzLmdldEhlaWdodE9mTGluZShpKTtcbiAgICAgICAgaGVpZ2h0ICs9IChpID09PSBsZW4gLSAxID8gbGluZUhlaWdodCAvIHRoaXMubGluZUhlaWdodCA6IGxpbmVIZWlnaHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IExlZnQgb2Zmc2V0XG4gICAgICovXG4gICAgX2dldExlZnRPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aW9uID09PSAnbHRyJyA/IC10aGlzLndpZHRoIC8gMiA6IHRoaXMud2lkdGggLyAyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4ge051bWJlcn0gVG9wIG9mZnNldFxuICAgICAqL1xuICAgIF9nZXRUb3BPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC10aGlzLmhlaWdodCAvIDI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgTWV0aG9kIG5hbWUgKFwiZmlsbFRleHRcIiBvciBcInN0cm9rZVRleHRcIilcbiAgICAgKi9cbiAgICBfcmVuZGVyVGV4dENvbW1vbjogZnVuY3Rpb24oY3R4LCBtZXRob2QpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICB2YXIgbGluZUhlaWdodHMgPSAwLCBsZWZ0ID0gdGhpcy5fZ2V0TGVmdE9mZnNldCgpLCB0b3AgPSB0aGlzLl9nZXRUb3BPZmZzZXQoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl90ZXh0TGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGhlaWdodE9mTGluZSA9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGkpLFxuICAgICAgICAgICAgbWF4SGVpZ2h0ID0gaGVpZ2h0T2ZMaW5lIC8gdGhpcy5saW5lSGVpZ2h0LFxuICAgICAgICAgICAgbGVmdE9mZnNldCA9IHRoaXMuX2dldExpbmVMZWZ0T2Zmc2V0KGkpO1xuICAgICAgICB0aGlzLl9yZW5kZXJUZXh0TGluZShcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgY3R4LFxuICAgICAgICAgIHRoaXMuX3RleHRMaW5lc1tpXSxcbiAgICAgICAgICBsZWZ0ICsgbGVmdE9mZnNldCxcbiAgICAgICAgICB0b3AgKyBsaW5lSGVpZ2h0cyArIG1heEhlaWdodCxcbiAgICAgICAgICBpXG4gICAgICAgICk7XG4gICAgICAgIGxpbmVIZWlnaHRzICs9IGhlaWdodE9mTGluZTtcbiAgICAgIH1cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXJUZXh0RmlsbDogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAoIXRoaXMuZmlsbCAmJiAhdGhpcy5zdHlsZUhhcygnZmlsbCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVuZGVyVGV4dENvbW1vbihjdHgsICdmaWxsVGV4dCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyVGV4dFN0cm9rZTogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAoKCF0aGlzLnN0cm9rZSB8fCB0aGlzLnN0cm9rZVdpZHRoID09PSAwKSAmJiB0aGlzLmlzRW1wdHlTdHlsZXMoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNoYWRvdyAmJiAhdGhpcy5zaGFkb3cuYWZmZWN0U3Ryb2tlKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVNoYWRvdyhjdHgpO1xuICAgICAgfVxuXG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgdGhpcy5fc2V0TGluZURhc2goY3R4LCB0aGlzLnN0cm9rZURhc2hBcnJheSk7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICB0aGlzLl9yZW5kZXJUZXh0Q29tbW9uKGN0eCwgJ3N0cm9rZVRleHQnKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBmaWxsVGV4dCBvciBzdHJva2VUZXh0LlxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBsaW5lIENvbnRlbnQgb2YgdGhlIGxpbmUsIHNwbGl0dGVkIGluIGFuIGFycmF5IGJ5IGdyYXBoZW1lXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxlZnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdG9wXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgICAqL1xuICAgIF9yZW5kZXJDaGFyczogZnVuY3Rpb24obWV0aG9kLCBjdHgsIGxpbmUsIGxlZnQsIHRvcCwgbGluZUluZGV4KSB7XG4gICAgICAvLyBzZXQgcHJvcGVyIGxpbmUgb2Zmc2V0XG4gICAgICB2YXIgbGluZUhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGxpbmVJbmRleCksXG4gICAgICAgICAgaXNKdXN0aWZ5ID0gdGhpcy50ZXh0QWxpZ24uaW5kZXhPZignanVzdGlmeScpICE9PSAtMSxcbiAgICAgICAgICBhY3R1YWxTdHlsZSxcbiAgICAgICAgICBuZXh0U3R5bGUsXG4gICAgICAgICAgY2hhcnNUb1JlbmRlciA9ICcnLFxuICAgICAgICAgIGNoYXJCb3gsXG4gICAgICAgICAgYm94V2lkdGggPSAwLFxuICAgICAgICAgIHRpbWVUb1JlbmRlcixcbiAgICAgICAgICBwYXRoID0gdGhpcy5wYXRoLFxuICAgICAgICAgIHNob3J0Q3V0ID0gIWlzSnVzdGlmeSAmJiB0aGlzLmNoYXJTcGFjaW5nID09PSAwICYmIHRoaXMuaXNFbXB0eVN0eWxlcyhsaW5lSW5kZXgpICYmICFwYXRoLFxuICAgICAgICAgIGlzTHRyID0gdGhpcy5kaXJlY3Rpb24gPT09ICdsdHInLCBzaWduID0gdGhpcy5kaXJlY3Rpb24gPT09ICdsdHInID8gMSA6IC0xLFxuICAgICAgICAgIGRyYXdpbmdMZWZ0LCBjdXJyZW50RGlyZWN0aW9uID0gY3R4LmNhbnZhcy5nZXRBdHRyaWJ1dGUoJ2RpcicpO1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGlmIChjdXJyZW50RGlyZWN0aW9uICE9PSB0aGlzLmRpcmVjdGlvbikge1xuICAgICAgICBjdHguY2FudmFzLnNldEF0dHJpYnV0ZSgnZGlyJywgaXNMdHIgPyAnbHRyJyA6ICdydGwnKTtcbiAgICAgICAgY3R4LmRpcmVjdGlvbiA9IGlzTHRyID8gJ2x0cicgOiAncnRsJztcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IGlzTHRyID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgIH1cbiAgICAgIHRvcCAtPSBsaW5lSGVpZ2h0ICogdGhpcy5fZm9udFNpemVGcmFjdGlvbiAvIHRoaXMubGluZUhlaWdodDtcbiAgICAgIGlmIChzaG9ydEN1dCkge1xuICAgICAgICAvLyByZW5kZXIgYWxsIHRoZSBsaW5lIGluIG9uZSBwYXNzIHdpdGhvdXQgY2hlY2tpbmdcbiAgICAgICAgLy8gZHJhd2luZ0xlZnQgPSBpc0x0ciA/IGxlZnQgOiBsZWZ0IC0gdGhpcy5nZXRMaW5lV2lkdGgobGluZUluZGV4KTtcbiAgICAgICAgdGhpcy5fcmVuZGVyQ2hhcihtZXRob2QsIGN0eCwgbGluZUluZGV4LCAwLCBsaW5lLmpvaW4oJycpLCBsZWZ0LCB0b3AsIGxpbmVIZWlnaHQpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGluZS5sZW5ndGggLSAxOyBpIDw9IGxlbjsgaSsrKSB7XG4gICAgICAgIHRpbWVUb1JlbmRlciA9IGkgPT09IGxlbiB8fCB0aGlzLmNoYXJTcGFjaW5nIHx8IHBhdGg7XG4gICAgICAgIGNoYXJzVG9SZW5kZXIgKz0gbGluZVtpXTtcbiAgICAgICAgY2hhckJveCA9IHRoaXMuX19jaGFyQm91bmRzW2xpbmVJbmRleF1baV07XG4gICAgICAgIGlmIChib3hXaWR0aCA9PT0gMCkge1xuICAgICAgICAgIGxlZnQgKz0gc2lnbiAqIChjaGFyQm94Lmtlcm5lZFdpZHRoIC0gY2hhckJveC53aWR0aCk7XG4gICAgICAgICAgYm94V2lkdGggKz0gY2hhckJveC53aWR0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBib3hXaWR0aCArPSBjaGFyQm94Lmtlcm5lZFdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0p1c3RpZnkgJiYgIXRpbWVUb1JlbmRlcikge1xuICAgICAgICAgIGlmICh0aGlzLl9yZVNwYWNlQW5kVGFiLnRlc3QobGluZVtpXSkpIHtcbiAgICAgICAgICAgIHRpbWVUb1JlbmRlciA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGltZVRvUmVuZGVyKSB7XG4gICAgICAgICAgLy8gaWYgd2UgaGF2ZSBjaGFyU3BhY2luZywgd2UgcmVuZGVyIGNoYXIgYnkgY2hhclxuICAgICAgICAgIGFjdHVhbFN0eWxlID0gYWN0dWFsU3R5bGUgfHwgdGhpcy5nZXRDb21wbGV0ZVN0eWxlRGVjbGFyYXRpb24obGluZUluZGV4LCBpKTtcbiAgICAgICAgICBuZXh0U3R5bGUgPSB0aGlzLmdldENvbXBsZXRlU3R5bGVEZWNsYXJhdGlvbihsaW5lSW5kZXgsIGkgKyAxKTtcbiAgICAgICAgICB0aW1lVG9SZW5kZXIgPSBmYWJyaWMudXRpbC5oYXNTdHlsZUNoYW5nZWQoYWN0dWFsU3R5bGUsIG5leHRTdHlsZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lVG9SZW5kZXIpIHtcbiAgICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoY2hhckJveC5yZW5kZXJMZWZ0LCBjaGFyQm94LnJlbmRlclRvcCk7XG4gICAgICAgICAgICBjdHgucm90YXRlKGNoYXJCb3guYW5nbGUpO1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyQ2hhcihtZXRob2QsIGN0eCwgbGluZUluZGV4LCBpLCBjaGFyc1RvUmVuZGVyLCAtYm94V2lkdGggLyAyLCAwLCBsaW5lSGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZHJhd2luZ0xlZnQgPSBsZWZ0O1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyQ2hhcihtZXRob2QsIGN0eCwgbGluZUluZGV4LCBpLCBjaGFyc1RvUmVuZGVyLCBkcmF3aW5nTGVmdCwgdG9wLCBsaW5lSGVpZ2h0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hhcnNUb1JlbmRlciA9ICcnO1xuICAgICAgICAgIGFjdHVhbFN0eWxlID0gbmV4dFN0eWxlO1xuICAgICAgICAgIGxlZnQgKz0gc2lnbiAqIGJveFdpZHRoO1xuICAgICAgICAgIGJveFdpZHRoID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiB0cnkgdG8gcGF0Y2ggdGhlIG1pc3NpbmcgZ3JhZGllbnRUcmFuc2Zvcm0gb24gY2FudmFzIGdyYWRpZW50cy5cbiAgICAgKiB0cmFuc2Zvcm1pbmcgYSBjb250ZXh0IHRvIHRyYW5zZm9ybSB0aGUgZ3JhZGllbnQsIGlzIGdvaW5nIHRvIHRyYW5zZm9ybSB0aGUgc3Ryb2tlIHRvby5cbiAgICAgKiB3ZSB3YW50IHRvIHRyYW5zZm9ybSB0aGUgZ3JhZGllbnQgYnV0IG5vdCB0aGUgc3Ryb2tlIG9wZXJhdGlvbiwgc28gd2UgY3JlYXRlXG4gICAgICogYSB0cmFuc2Zvcm1lZCBncmFkaWVudCBvbiBhIHBhdHRlcm4gYW5kIHRoZW4gd2UgdXNlIHRoZSBwYXR0ZXJuIGluc3RlYWQgb2YgdGhlIGdyYWRpZW50LlxuICAgICAqIHRoaXMgbWV0aG9kIGhhcyBkcmF3YmFja3M6IGlzIHNsb3csIGlzIGluIGxvdyByZXNvbHV0aW9uLCBuZWVkcyBhIHBhdGNoIGZvciB3aGVuIHRoZSBzaXplXG4gICAgICogaXMgbGltaXRlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLkdyYWRpZW50fSBmaWxsZXIgYSBmYWJyaWMgZ3JhZGllbnQgaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtDYW52YXNQYXR0ZXJufSBhIHBhdHRlcm4gdG8gdXNlIGFzIGZpbGwvc3Ryb2tlIHN0eWxlXG4gICAgICovXG4gICAgX2FwcGx5UGF0dGVybkdyYWRpZW50VHJhbnNmb3JtVGV4dDogZnVuY3Rpb24oZmlsbGVyKSB7XG4gICAgICB2YXIgcENhbnZhcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKSwgcEN0eCxcbiAgICAgICAgICAvLyBUT0RPOiB2ZXJpZnkgY29tcGF0aWJpbGl0eSB3aXRoIHN0cm9rZVVuaWZvcm1cbiAgICAgICAgICB3aWR0aCA9IHRoaXMud2lkdGggKyB0aGlzLnN0cm9rZVdpZHRoLCBoZWlnaHQgPSB0aGlzLmhlaWdodCArIHRoaXMuc3Ryb2tlV2lkdGg7XG4gICAgICBwQ2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICBwQ2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIHBDdHggPSBwQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBwQ3R4LmJlZ2luUGF0aCgpOyBwQ3R4Lm1vdmVUbygwLCAwKTsgcEN0eC5saW5lVG8od2lkdGgsIDApOyBwQ3R4LmxpbmVUbyh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHBDdHgubGluZVRvKDAsIGhlaWdodCk7IHBDdHguY2xvc2VQYXRoKCk7XG4gICAgICBwQ3R4LnRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgICAgcEN0eC5maWxsU3R5bGUgPSBmaWxsZXIudG9MaXZlKHBDdHgpO1xuICAgICAgdGhpcy5fYXBwbHlQYXR0ZXJuR3JhZGllbnRUcmFuc2Zvcm0ocEN0eCwgZmlsbGVyKTtcbiAgICAgIHBDdHguZmlsbCgpO1xuICAgICAgcmV0dXJuIHBDdHguY3JlYXRlUGF0dGVybihwQ2FudmFzLCAnbm8tcmVwZWF0Jyk7XG4gICAgfSxcblxuICAgIGhhbmRsZUZpbGxlcjogZnVuY3Rpb24oY3R4LCBwcm9wZXJ0eSwgZmlsbGVyKSB7XG4gICAgICB2YXIgb2Zmc2V0WCwgb2Zmc2V0WTtcbiAgICAgIGlmIChmaWxsZXIudG9MaXZlKSB7XG4gICAgICAgIGlmIChmaWxsZXIuZ3JhZGllbnRVbml0cyA9PT0gJ3BlcmNlbnRhZ2UnIHx8IGZpbGxlci5ncmFkaWVudFRyYW5zZm9ybSB8fCBmaWxsZXIucGF0dGVyblRyYW5zZm9ybSkge1xuICAgICAgICAgIC8vIG5lZWQgdG8gdHJhbnNmb3JtIGdyYWRpZW50IGluIGEgcGF0dGVybi5cbiAgICAgICAgICAvLyB0aGlzIGlzIGEgc2xvdyBwcm9jZXNzLiBJZiB5b3UgYXJlIGhpdHRpbmcgdGhpcyBjb2RlcGF0aCwgYW5kIHRoZSBvYmplY3RcbiAgICAgICAgICAvLyBpcyBub3QgdXNpbmcgY2FjaGluZywgeW91IHNob3VsZCBjb25zaWRlciBzd2l0Y2hpbmcgaXQgb24uXG4gICAgICAgICAgLy8gd2UgbmVlZCBhIGNhbnZhcyBhcyBiaWcgYXMgdGhlIGN1cnJlbnQgb2JqZWN0IGNhY2hpbmcgY2FudmFzLlxuICAgICAgICAgIG9mZnNldFggPSAtdGhpcy53aWR0aCAvIDI7XG4gICAgICAgICAgb2Zmc2V0WSA9IC10aGlzLmhlaWdodCAvIDI7XG4gICAgICAgICAgY3R4LnRyYW5zbGF0ZShvZmZzZXRYLCBvZmZzZXRZKTtcbiAgICAgICAgICBjdHhbcHJvcGVydHldID0gdGhpcy5fYXBwbHlQYXR0ZXJuR3JhZGllbnRUcmFuc2Zvcm1UZXh0KGZpbGxlcik7XG4gICAgICAgICAgcmV0dXJuIHsgb2Zmc2V0WDogb2Zmc2V0WCwgb2Zmc2V0WTogb2Zmc2V0WSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8vIGlzIGEgc2ltcGxlIGdyYWRpZW50IG9yIHBhdHRlcm5cbiAgICAgICAgICBjdHhbcHJvcGVydHldID0gZmlsbGVyLnRvTGl2ZShjdHgsIHRoaXMpO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9hcHBseVBhdHRlcm5HcmFkaWVudFRyYW5zZm9ybShjdHgsIGZpbGxlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBpcyBhIGNvbG9yXG4gICAgICAgIGN0eFtwcm9wZXJ0eV0gPSBmaWxsZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBvZmZzZXRYOiAwLCBvZmZzZXRZOiAwIH07XG4gICAgfSxcblxuICAgIF9zZXRTdHJva2VTdHlsZXM6IGZ1bmN0aW9uKGN0eCwgZGVjbCkge1xuICAgICAgY3R4LmxpbmVXaWR0aCA9IGRlY2wuc3Ryb2tlV2lkdGg7XG4gICAgICBjdHgubGluZUNhcCA9IHRoaXMuc3Ryb2tlTGluZUNhcDtcbiAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IHRoaXMuc3Ryb2tlRGFzaE9mZnNldDtcbiAgICAgIGN0eC5saW5lSm9pbiA9IHRoaXMuc3Ryb2tlTGluZUpvaW47XG4gICAgICBjdHgubWl0ZXJMaW1pdCA9IHRoaXMuc3Ryb2tlTWl0ZXJMaW1pdDtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZUZpbGxlcihjdHgsICdzdHJva2VTdHlsZScsIGRlY2wuc3Ryb2tlKTtcbiAgICB9LFxuXG4gICAgX3NldEZpbGxTdHlsZXM6IGZ1bmN0aW9uKGN0eCwgZGVjbCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlRmlsbGVyKGN0eCwgJ2ZpbGxTdHlsZScsIGRlY2wuZmlsbCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYXJJbmRleFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBfY2hhclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZWZ0IExlZnQgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0b3AgVG9wIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUhlaWdodCBIZWlnaHQgb2YgdGhlIGxpbmVcbiAgICAgKi9cbiAgICBfcmVuZGVyQ2hhcjogZnVuY3Rpb24obWV0aG9kLCBjdHgsIGxpbmVJbmRleCwgY2hhckluZGV4LCBfY2hhciwgbGVmdCwgdG9wKSB7XG4gICAgICB2YXIgZGVjbCA9IHRoaXMuX2dldFN0eWxlRGVjbGFyYXRpb24obGluZUluZGV4LCBjaGFySW5kZXgpLFxuICAgICAgICAgIGZ1bGxEZWNsID0gdGhpcy5nZXRDb21wbGV0ZVN0eWxlRGVjbGFyYXRpb24obGluZUluZGV4LCBjaGFySW5kZXgpLFxuICAgICAgICAgIHNob3VsZEZpbGwgPSBtZXRob2QgPT09ICdmaWxsVGV4dCcgJiYgZnVsbERlY2wuZmlsbCxcbiAgICAgICAgICBzaG91bGRTdHJva2UgPSBtZXRob2QgPT09ICdzdHJva2VUZXh0JyAmJiBmdWxsRGVjbC5zdHJva2UgJiYgZnVsbERlY2wuc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgZmlsbE9mZnNldHMsIHN0cm9rZU9mZnNldHM7XG5cbiAgICAgIGlmICghc2hvdWxkU3Ryb2tlICYmICFzaG91bGRGaWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGN0eC5zYXZlKCk7XG5cbiAgICAgIHNob3VsZEZpbGwgJiYgKGZpbGxPZmZzZXRzID0gdGhpcy5fc2V0RmlsbFN0eWxlcyhjdHgsIGZ1bGxEZWNsKSk7XG4gICAgICBzaG91bGRTdHJva2UgJiYgKHN0cm9rZU9mZnNldHMgPSB0aGlzLl9zZXRTdHJva2VTdHlsZXMoY3R4LCBmdWxsRGVjbCkpO1xuXG4gICAgICBjdHguZm9udCA9IHRoaXMuX2dldEZvbnREZWNsYXJhdGlvbihmdWxsRGVjbCk7XG5cblxuICAgICAgaWYgKGRlY2wgJiYgZGVjbC50ZXh0QmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVNoYWRvdyhjdHgpO1xuICAgICAgfVxuICAgICAgaWYgKGRlY2wgJiYgZGVjbC5kZWx0YVkpIHtcbiAgICAgICAgdG9wICs9IGRlY2wuZGVsdGFZO1xuICAgICAgfVxuICAgICAgc2hvdWxkRmlsbCAmJiBjdHguZmlsbFRleHQoX2NoYXIsIGxlZnQgLSBmaWxsT2Zmc2V0cy5vZmZzZXRYLCB0b3AgLSBmaWxsT2Zmc2V0cy5vZmZzZXRZKTtcbiAgICAgIHNob3VsZFN0cm9rZSAmJiBjdHguc3Ryb2tlVGV4dChfY2hhciwgbGVmdCAtIHN0cm9rZU9mZnNldHMub2Zmc2V0WCwgdG9wIC0gc3Ryb2tlT2Zmc2V0cy5vZmZzZXRZKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFR1cm5zIHRoZSBjaGFyYWN0ZXIgaW50byBhICdzdXBlcmlvciBmaWd1cmUnIChpLmUuICdzdXBlcnNjcmlwdCcpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0IHNlbGVjdGlvbiBzdGFydFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmQgc2VsZWN0aW9uIGVuZFxuICAgICAqIEByZXR1cm5zIHtmYWJyaWMuVGV4dH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzZXRTdXBlcnNjcmlwdDogZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NldFNjcmlwdChzdGFydCwgZW5kLCB0aGlzLnN1cGVyc2NyaXB0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHVybnMgdGhlIGNoYXJhY3RlciBpbnRvIGFuICdpbmZlcmlvciBmaWd1cmUnIChpLmUuICdzdWJzY3JpcHQnKVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydCBzZWxlY3Rpb24gc3RhcnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5kIHNlbGVjdGlvbiBlbmRcbiAgICAgKiBAcmV0dXJucyB7ZmFicmljLlRleHR9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0U3Vic2NyaXB0OiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2V0U2NyaXB0KHN0YXJ0LCBlbmQsIHRoaXMuc3Vic2NyaXB0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyAnc2NoZW1hJyBhdCBnaXZlbiBwb3NpdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0IHNlbGVjdGlvbiBzdGFydFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmQgc2VsZWN0aW9uIGVuZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2hlbWFcbiAgICAgKiBAcmV0dXJucyB7ZmFicmljLlRleHR9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgX3NldFNjcmlwdDogZnVuY3Rpb24oc3RhcnQsIGVuZCwgc2NoZW1hKSB7XG4gICAgICB2YXIgbG9jID0gdGhpcy5nZXQyREN1cnNvckxvY2F0aW9uKHN0YXJ0LCB0cnVlKSxcbiAgICAgICAgICBmb250U2l6ZSA9IHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQobG9jLmxpbmVJbmRleCwgbG9jLmNoYXJJbmRleCwgJ2ZvbnRTaXplJyksXG4gICAgICAgICAgZHkgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGxvYy5saW5lSW5kZXgsIGxvYy5jaGFySW5kZXgsICdkZWx0YVknKSxcbiAgICAgICAgICBzdHlsZSA9IHsgZm9udFNpemU6IGZvbnRTaXplICogc2NoZW1hLnNpemUsIGRlbHRhWTogZHkgKyBmb250U2l6ZSAqIHNjaGVtYS5iYXNlbGluZSB9O1xuICAgICAgdGhpcy5zZXRTZWxlY3Rpb25TdHlsZXMoc3R5bGUsIHN0YXJ0LCBlbmQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCBpbmRleCB0ZXh0IGxpbmVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IExpbmUgbGVmdCBvZmZzZXRcbiAgICAgKi9cbiAgICBfZ2V0TGluZUxlZnRPZmZzZXQ6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgdmFyIGxpbmVXaWR0aCA9IHRoaXMuZ2V0TGluZVdpZHRoKGxpbmVJbmRleCksXG4gICAgICAgICAgbGluZURpZmYgPSB0aGlzLndpZHRoIC0gbGluZVdpZHRoLCB0ZXh0QWxpZ24gPSB0aGlzLnRleHRBbGlnbiwgZGlyZWN0aW9uID0gdGhpcy5kaXJlY3Rpb24sXG4gICAgICAgICAgaXNFbmRPZldyYXBwaW5nLCBsZWZ0T2Zmc2V0ID0gMCwgaXNFbmRPZldyYXBwaW5nID0gdGhpcy5pc0VuZE9mV3JhcHBpbmcobGluZUluZGV4KTtcbiAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdqdXN0aWZ5J1xuICAgICAgICB8fCAodGV4dEFsaWduID09PSAnanVzdGlmeS1jZW50ZXInICYmICFpc0VuZE9mV3JhcHBpbmcpXG4gICAgICAgIHx8ICh0ZXh0QWxpZ24gPT09ICdqdXN0aWZ5LXJpZ2h0JyAmJiAhaXNFbmRPZldyYXBwaW5nKVxuICAgICAgICB8fCAodGV4dEFsaWduID09PSAnanVzdGlmeS1sZWZ0JyAmJiAhaXNFbmRPZldyYXBwaW5nKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKHRleHRBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgbGVmdE9mZnNldCA9IGxpbmVEaWZmIC8gMjtcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgbGVmdE9mZnNldCA9IGxpbmVEaWZmO1xuICAgICAgfVxuICAgICAgaWYgKHRleHRBbGlnbiA9PT0gJ2p1c3RpZnktY2VudGVyJykge1xuICAgICAgICBsZWZ0T2Zmc2V0ID0gbGluZURpZmYgLyAyO1xuICAgICAgfVxuICAgICAgaWYgKHRleHRBbGlnbiA9PT0gJ2p1c3RpZnktcmlnaHQnKSB7XG4gICAgICAgIGxlZnRPZmZzZXQgPSBsaW5lRGlmZjtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgIGxlZnRPZmZzZXQgLT0gbGluZURpZmY7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGVmdE9mZnNldDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2xlYXJDYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9fbGluZVdpZHRocyA9IFtdO1xuICAgICAgdGhpcy5fX2xpbmVIZWlnaHRzID0gW107XG4gICAgICB0aGlzLl9fY2hhckJvdW5kcyA9IFtdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zaG91bGRDbGVhckRpbWVuc2lvbkNhY2hlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzaG91bGRDbGVhciA9IHRoaXMuX2ZvcmNlQ2xlYXJDYWNoZTtcbiAgICAgIHNob3VsZENsZWFyIHx8IChzaG91bGRDbGVhciA9IHRoaXMuaGFzU3RhdGVDaGFuZ2VkKCdfZGltZW5zaW9uQWZmZWN0aW5nUHJvcHMnKSk7XG4gICAgICBpZiAoc2hvdWxkQ2xlYXIpIHtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2ZvcmNlQ2xlYXJDYWNoZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNob3VsZENsZWFyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZWFzdXJlIGEgc2luZ2xlIGxpbmUgZ2l2ZW4gaXRzIGluZGV4LiBVc2VkIHRvIGNhbGN1bGF0ZSB0aGUgaW5pdGlhbFxuICAgICAqIHRleHQgYm91bmRpbmcgYm94LiBUaGUgdmFsdWVzIGFyZSBjYWxjdWxhdGVkIGFuZCBzdG9yZWQgaW4gX19saW5lV2lkdGhzIGNhY2hlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCBsaW5lIG51bWJlclxuICAgICAqIEByZXR1cm4ge051bWJlcn0gTGluZSB3aWR0aFxuICAgICAqL1xuICAgIGdldExpbmVXaWR0aDogZnVuY3Rpb24obGluZUluZGV4KSB7XG4gICAgICBpZiAodGhpcy5fX2xpbmVXaWR0aHNbbGluZUluZGV4XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fbGluZVdpZHRoc1tsaW5lSW5kZXhdO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGluZUluZm8gPSB0aGlzLm1lYXN1cmVMaW5lKGxpbmVJbmRleCk7XG4gICAgICB2YXIgd2lkdGggPSBsaW5lSW5mby53aWR0aDtcbiAgICAgIHRoaXMuX19saW5lV2lkdGhzW2xpbmVJbmRleF0gPSB3aWR0aDtcbiAgICAgIHJldHVybiB3aWR0aDtcbiAgICB9LFxuXG4gICAgX2dldFdpZHRoT2ZDaGFyU3BhY2luZzogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5jaGFyU3BhY2luZyAhPT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb250U2l6ZSAqIHRoaXMuY2hhclNwYWNpbmcgLyAxMDAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgdmFsdWUgb2YgcHJvcGVydHkgYXQgZ2l2ZW4gY2hhcmFjdGVyIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCB0aGUgbGluZSBudW1iZXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2hhckluZGV4IHRoZSBjaGFyYWN0ZXIgbnVtYmVyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IHRoZSBwcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybnMgdGhlIHZhbHVlIG9mICdwcm9wZXJ0eSdcbiAgICAgKi9cbiAgICBnZXRWYWx1ZU9mUHJvcGVydHlBdDogZnVuY3Rpb24obGluZUluZGV4LCBjaGFySW5kZXgsIHByb3BlcnR5KSB7XG4gICAgICB2YXIgY2hhclN0eWxlID0gdGhpcy5fZ2V0U3R5bGVEZWNsYXJhdGlvbihsaW5lSW5kZXgsIGNoYXJJbmRleCk7XG4gICAgICBpZiAoY2hhclN0eWxlICYmIHR5cGVvZiBjaGFyU3R5bGVbcHJvcGVydHldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gY2hhclN0eWxlW3Byb3BlcnR5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlclRleHREZWNvcmF0aW9uOiBmdW5jdGlvbihjdHgsIHR5cGUpIHtcbiAgICAgIGlmICghdGhpc1t0eXBlXSAmJiAhdGhpcy5zdHlsZUhhcyh0eXBlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaGVpZ2h0T2ZMaW5lLCBzaXplLCBfc2l6ZSxcbiAgICAgICAgICBsaW5lTGVmdE9mZnNldCwgZHksIF9keSxcbiAgICAgICAgICBsaW5lLCBsYXN0RGVjb3JhdGlvbixcbiAgICAgICAgICBsZWZ0T2Zmc2V0ID0gdGhpcy5fZ2V0TGVmdE9mZnNldCgpLFxuICAgICAgICAgIHRvcE9mZnNldCA9IHRoaXMuX2dldFRvcE9mZnNldCgpLCB0b3AsXG4gICAgICAgICAgYm94U3RhcnQsIGJveFdpZHRoLCBjaGFyQm94LCBjdXJyZW50RGVjb3JhdGlvbixcbiAgICAgICAgICBtYXhIZWlnaHQsIGN1cnJlbnRGaWxsLCBsYXN0RmlsbCwgcGF0aCA9IHRoaXMucGF0aCxcbiAgICAgICAgICBjaGFyU3BhY2luZyA9IHRoaXMuX2dldFdpZHRoT2ZDaGFyU3BhY2luZygpLFxuICAgICAgICAgIG9mZnNldFkgPSB0aGlzLm9mZnNldHNbdHlwZV07XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl90ZXh0TGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaGVpZ2h0T2ZMaW5lID0gdGhpcy5nZXRIZWlnaHRPZkxpbmUoaSk7XG4gICAgICAgIGlmICghdGhpc1t0eXBlXSAmJiAhdGhpcy5zdHlsZUhhcyh0eXBlLCBpKSkge1xuICAgICAgICAgIHRvcE9mZnNldCArPSBoZWlnaHRPZkxpbmU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGluZSA9IHRoaXMuX3RleHRMaW5lc1tpXTtcbiAgICAgICAgbWF4SGVpZ2h0ID0gaGVpZ2h0T2ZMaW5lIC8gdGhpcy5saW5lSGVpZ2h0O1xuICAgICAgICBsaW5lTGVmdE9mZnNldCA9IHRoaXMuX2dldExpbmVMZWZ0T2Zmc2V0KGkpO1xuICAgICAgICBib3hTdGFydCA9IDA7XG4gICAgICAgIGJveFdpZHRoID0gMDtcbiAgICAgICAgbGFzdERlY29yYXRpb24gPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGksIDAsIHR5cGUpO1xuICAgICAgICBsYXN0RmlsbCA9IHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQoaSwgMCwgJ2ZpbGwnKTtcbiAgICAgICAgdG9wID0gdG9wT2Zmc2V0ICsgbWF4SGVpZ2h0ICogKDEgLSB0aGlzLl9mb250U2l6ZUZyYWN0aW9uKTtcbiAgICAgICAgc2l6ZSA9IHRoaXMuZ2V0SGVpZ2h0T2ZDaGFyKGksIDApO1xuICAgICAgICBkeSA9IHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQoaSwgMCwgJ2RlbHRhWScpO1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgamxlbiA9IGxpbmUubGVuZ3RoOyBqIDwgamxlbjsgaisrKSB7XG4gICAgICAgICAgY2hhckJveCA9IHRoaXMuX19jaGFyQm91bmRzW2ldW2pdO1xuICAgICAgICAgIGN1cnJlbnREZWNvcmF0aW9uID0gdGhpcy5nZXRWYWx1ZU9mUHJvcGVydHlBdChpLCBqLCB0eXBlKTtcbiAgICAgICAgICBjdXJyZW50RmlsbCA9IHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQoaSwgaiwgJ2ZpbGwnKTtcbiAgICAgICAgICBfc2l6ZSA9IHRoaXMuZ2V0SGVpZ2h0T2ZDaGFyKGksIGopO1xuICAgICAgICAgIF9keSA9IHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQoaSwgaiwgJ2RlbHRhWScpO1xuICAgICAgICAgIGlmIChwYXRoICYmIGN1cnJlbnREZWNvcmF0aW9uICYmIGN1cnJlbnRGaWxsKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxhc3RGaWxsO1xuICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShjaGFyQm94LnJlbmRlckxlZnQsIGNoYXJCb3gucmVuZGVyVG9wKTtcbiAgICAgICAgICAgIGN0eC5yb3RhdGUoY2hhckJveC5hbmdsZSk7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgICAgICAgIC1jaGFyQm94Lmtlcm5lZFdpZHRoIC8gMixcbiAgICAgICAgICAgICAgb2Zmc2V0WSAqIF9zaXplICsgX2R5LFxuICAgICAgICAgICAgICBjaGFyQm94Lmtlcm5lZFdpZHRoLFxuICAgICAgICAgICAgICB0aGlzLmZvbnRTaXplIC8gMTVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIChjdXJyZW50RGVjb3JhdGlvbiAhPT0gbGFzdERlY29yYXRpb24gfHwgY3VycmVudEZpbGwgIT09IGxhc3RGaWxsIHx8IF9zaXplICE9PSBzaXplIHx8IF9keSAhPT0gZHkpXG4gICAgICAgICAgICAmJiBib3hXaWR0aCA+IDBcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBkcmF3U3RhcnQgPSBsZWZ0T2Zmc2V0ICsgbGluZUxlZnRPZmZzZXQgKyBib3hTdGFydDtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICAgICAgZHJhd1N0YXJ0ID0gdGhpcy53aWR0aCAtIGRyYXdTdGFydCAtIGJveFdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxhc3REZWNvcmF0aW9uICYmIGxhc3RGaWxsKSB7XG4gICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYXN0RmlsbDtcbiAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KFxuICAgICAgICAgICAgICAgIGRyYXdTdGFydCxcbiAgICAgICAgICAgICAgICB0b3AgKyBvZmZzZXRZICogc2l6ZSArIGR5LFxuICAgICAgICAgICAgICAgIGJveFdpZHRoLFxuICAgICAgICAgICAgICAgIHRoaXMuZm9udFNpemUgLyAxNVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYm94U3RhcnQgPSBjaGFyQm94LmxlZnQ7XG4gICAgICAgICAgICBib3hXaWR0aCA9IGNoYXJCb3gud2lkdGg7XG4gICAgICAgICAgICBsYXN0RGVjb3JhdGlvbiA9IGN1cnJlbnREZWNvcmF0aW9uO1xuICAgICAgICAgICAgbGFzdEZpbGwgPSBjdXJyZW50RmlsbDtcbiAgICAgICAgICAgIHNpemUgPSBfc2l6ZTtcbiAgICAgICAgICAgIGR5ID0gX2R5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJveFdpZHRoICs9IGNoYXJCb3gua2VybmVkV2lkdGg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBkcmF3U3RhcnQgPSBsZWZ0T2Zmc2V0ICsgbGluZUxlZnRPZmZzZXQgKyBib3hTdGFydDtcbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICAgIGRyYXdTdGFydCA9IHRoaXMud2lkdGggLSBkcmF3U3RhcnQgLSBib3hXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBjdHguZmlsbFN0eWxlID0gY3VycmVudEZpbGw7XG4gICAgICAgIGN1cnJlbnREZWNvcmF0aW9uICYmIGN1cnJlbnRGaWxsICYmIGN0eC5maWxsUmVjdChcbiAgICAgICAgICBkcmF3U3RhcnQsXG4gICAgICAgICAgdG9wICsgb2Zmc2V0WSAqIHNpemUgKyBkeSxcbiAgICAgICAgICBib3hXaWR0aCAtIGNoYXJTcGFjaW5nLFxuICAgICAgICAgIHRoaXMuZm9udFNpemUgLyAxNVxuICAgICAgICApO1xuICAgICAgICB0b3BPZmZzZXQgKz0gaGVpZ2h0T2ZMaW5lO1xuICAgICAgfVxuICAgICAgLy8gaWYgdGhlcmUgaXMgdGV4dCBiYWNrZ3JvdW5kIGNvbG9yIG5vXG4gICAgICAvLyBvdGhlciBzaGFkb3dzIHNob3VsZCBiZSBjYXN0ZWRcbiAgICAgIHRoaXMuX3JlbW92ZVNoYWRvdyhjdHgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gZm9udCBkZWNsYXJhdGlvbiBzdHJpbmcgZm9yIGNhbnZhcyBjb250ZXh0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdHlsZU9iamVjdF0gb2JqZWN0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gZm9udCBkZWNsYXJhdGlvbiBmb3JtYXR0ZWQgZm9yIGNhbnZhcyBjb250ZXh0LlxuICAgICAqL1xuICAgIF9nZXRGb250RGVjbGFyYXRpb246IGZ1bmN0aW9uKHN0eWxlT2JqZWN0LCBmb3JNZWFzdXJpbmcpIHtcbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlT2JqZWN0IHx8IHRoaXMsIGZhbWlseSA9IHRoaXMuZm9udEZhbWlseSxcbiAgICAgICAgICBmb250SXNHZW5lcmljID0gZmFicmljLlRleHQuZ2VuZXJpY0ZvbnRzLmluZGV4T2YoZmFtaWx5LnRvTG93ZXJDYXNlKCkpID4gLTE7XG4gICAgICB2YXIgZm9udEZhbWlseSA9IGZhbWlseSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICBmYW1pbHkuaW5kZXhPZignXFwnJykgPiAtMSB8fCBmYW1pbHkuaW5kZXhPZignLCcpID4gLTEgfHxcbiAgICAgIGZhbWlseS5pbmRleE9mKCdcIicpID4gLTEgfHwgZm9udElzR2VuZXJpY1xuICAgICAgICA/IHN0eWxlLmZvbnRGYW1pbHkgOiAnXCInICsgc3R5bGUuZm9udEZhbWlseSArICdcIic7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAvLyBub2RlLWNhbnZhcyBuZWVkcyBcIndlaWdodCBzdHlsZVwiLCB3aGlsZSBicm93c2VycyBuZWVkIFwic3R5bGUgd2VpZ2h0XCJcbiAgICAgICAgLy8gdmVyaWZ5IGlmIHRoaXMgY2FuIGJlIGZpeGVkIGluIEpTRE9NXG4gICAgICAgIChmYWJyaWMuaXNMaWtlbHlOb2RlID8gc3R5bGUuZm9udFdlaWdodCA6IHN0eWxlLmZvbnRTdHlsZSksXG4gICAgICAgIChmYWJyaWMuaXNMaWtlbHlOb2RlID8gc3R5bGUuZm9udFN0eWxlIDogc3R5bGUuZm9udFdlaWdodCksXG4gICAgICAgIGZvck1lYXN1cmluZyA/IHRoaXMuQ0FDSEVfRk9OVF9TSVpFICsgJ3B4JyA6IHN0eWxlLmZvbnRTaXplICsgJ3B4JyxcbiAgICAgICAgZm9udEZhbWlseVxuICAgICAgXS5qb2luKCcgJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgdGV4dCBpbnN0YW5jZSBvbiBhIHNwZWNpZmllZCBjb250ZXh0XG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIHJlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICAvLyBkbyBub3QgcmVuZGVyIGlmIG9iamVjdCBpcyBub3QgdmlzaWJsZVxuICAgICAgaWYgKCF0aGlzLnZpc2libGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLnNraXBPZmZzY3JlZW4gJiYgIXRoaXMuZ3JvdXAgJiYgIXRoaXMuaXNPblNjcmVlbigpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9zaG91bGRDbGVhckRpbWVuc2lvbkNhY2hlKCkpIHtcbiAgICAgICAgdGhpcy5pbml0RGltZW5zaW9ucygpO1xuICAgICAgfVxuICAgICAgdGhpcy5jYWxsU3VwZXIoJ3JlbmRlcicsIGN0eCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRleHQgYXMgYW4gYXJyYXkgb2YgbGluZXMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgdGV4dCB0byBzcGxpdFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gTGluZXMgaW4gdGhlIHRleHRcbiAgICAgKi9cbiAgICBfc3BsaXRUZXh0SW50b0xpbmVzOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICB2YXIgbGluZXMgPSB0ZXh0LnNwbGl0KHRoaXMuX3JlTmV3bGluZSksXG4gICAgICAgICAgbmV3TGluZXMgPSBuZXcgQXJyYXkobGluZXMubGVuZ3RoKSxcbiAgICAgICAgICBuZXdMaW5lID0gWydcXG4nXSxcbiAgICAgICAgICBuZXdUZXh0ID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5ld0xpbmVzW2ldID0gZmFicmljLnV0aWwuc3RyaW5nLmdyYXBoZW1lU3BsaXQobGluZXNbaV0pO1xuICAgICAgICBuZXdUZXh0ID0gbmV3VGV4dC5jb25jYXQobmV3TGluZXNbaV0sIG5ld0xpbmUpO1xuICAgICAgfVxuICAgICAgbmV3VGV4dC5wb3AoKTtcbiAgICAgIHJldHVybiB7IF91bndyYXBwZWRMaW5lczogbmV3TGluZXMsIGxpbmVzOiBsaW5lcywgZ3JhcGhlbWVUZXh0OiBuZXdUZXh0LCBncmFwaGVtZUxpbmVzOiBuZXdMaW5lcyB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICB2YXIgYWxsUHJvcGVydGllcyA9IGFkZGl0aW9uYWxQcm9wcy5jb25jYXQocHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgICB2YXIgb2JqID0gdGhpcy5jYWxsU3VwZXIoJ3RvT2JqZWN0JywgYWxsUHJvcGVydGllcyk7XG4gICAgICBvYmouc3R5bGVzID0gZmFicmljLnV0aWwuc3R5bGVzVG9BcnJheSh0aGlzLnN0eWxlcywgdGhpcy50ZXh0KTtcbiAgICAgIGlmIChvYmoucGF0aCkge1xuICAgICAgICBvYmoucGF0aCA9IHRoaXMucGF0aC50b09iamVjdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBwcm9wZXJ0eSB0byBhIGdpdmVuIHZhbHVlLiBXaGVuIGNoYW5naW5nIHBvc2l0aW9uL2RpbWVuc2lvbiAtcmVsYXRlZCBwcm9wZXJ0aWVzIChsZWZ0LCB0b3AsIHNjYWxlLCBhbmdsZSwgZXRjLikgYHNldGAgZG9lcyBub3QgdXBkYXRlIHBvc2l0aW9uIG9mIG9iamVjdCdzIGJvcmRlcnMvY29udHJvbHMuIElmIHlvdSBuZWVkIHRvIHVwZGF0ZSB0aG9zZSwgY2FsbCBgc2V0Q29vcmRzKClgLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0ga2V5IFByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IChpZiBvYmplY3QsIGl0ZXJhdGUgb3ZlciB0aGUgb2JqZWN0IHByb3BlcnRpZXMpXG4gICAgICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IHZhbHVlIFByb3BlcnR5IHZhbHVlIChpZiBmdW5jdGlvbiwgdGhlIHZhbHVlIGlzIHBhc3NlZCBpbnRvIGl0IGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIHVzZWQgYXMgYSBuZXcgb25lKVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignc2V0Jywga2V5LCB2YWx1ZSk7XG4gICAgICB2YXIgbmVlZHNEaW1zID0gZmFsc2U7XG4gICAgICB2YXIgaXNBZGRpbmdQYXRoID0gZmFsc2U7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIgX2tleSBpbiBrZXkpIHtcbiAgICAgICAgICBpZiAoX2tleSA9PT0gJ3BhdGgnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFBhdGhJbmZvKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5lZWRzRGltcyA9IG5lZWRzRGltcyB8fCB0aGlzLl9kaW1lbnNpb25BZmZlY3RpbmdQcm9wcy5pbmRleE9mKF9rZXkpICE9PSAtMTtcbiAgICAgICAgICBpc0FkZGluZ1BhdGggPSBpc0FkZGluZ1BhdGggfHwgX2tleSA9PT0gJ3BhdGgnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbmVlZHNEaW1zID0gdGhpcy5fZGltZW5zaW9uQWZmZWN0aW5nUHJvcHMuaW5kZXhPZihrZXkpICE9PSAtMTtcbiAgICAgICAgaXNBZGRpbmdQYXRoID0ga2V5ID09PSAncGF0aCc7XG4gICAgICB9XG4gICAgICBpZiAoaXNBZGRpbmdQYXRoKSB7XG4gICAgICAgIHRoaXMuc2V0UGF0aEluZm8oKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkc0RpbXMpIHtcbiAgICAgICAgdGhpcy5pbml0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29tcGxleGl0eSBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge051bWJlcn0gY29tcGxleGl0eVxuICAgICAqL1xuICAgIGNvbXBsZXhpdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICB9KTtcblxuICAvKiBfRlJPTV9TVkdfU1RBUlRfICovXG4gIC8qKlxuICAgKiBMaXN0IG9mIGF0dHJpYnV0ZSBuYW1lcyB0byBhY2NvdW50IGZvciB3aGVuIHBhcnNpbmcgU1ZHIGVsZW1lbnQgKHVzZWQgYnkge0BsaW5rIGZhYnJpYy5UZXh0LmZyb21FbGVtZW50fSlcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlRleHRcbiAgICogQHNlZTogaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3RleHQuaHRtbCNUZXh0RWxlbWVudFxuICAgKi9cbiAgZmFicmljLlRleHQuQVRUUklCVVRFX05BTUVTID0gZmFicmljLlNIQVJFRF9BVFRSSUJVVEVTLmNvbmNhdChcbiAgICAneCB5IGR4IGR5IGZvbnQtZmFtaWx5IGZvbnQtc3R5bGUgZm9udC13ZWlnaHQgZm9udC1zaXplIGxldHRlci1zcGFjaW5nIHRleHQtZGVjb3JhdGlvbiB0ZXh0LWFuY2hvcicuc3BsaXQoJyAnKSk7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgU1ZHIGZvbnQgc2l6ZVxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuVGV4dFxuICAgKi9cbiAgZmFicmljLlRleHQuREVGQVVMVF9TVkdfRk9OVF9TSVpFID0gMTY7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmFicmljLlRleHQgaW5zdGFuY2UgZnJvbSBhbiBTVkcgZWxlbWVudCAoPGI+bm90IHlldCBpbXBsZW1lbnRlZDwvYj4pXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5UZXh0XG4gICAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uIGludm9rZWQgYWZ0ZXIgcGFyc2luZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICBmYWJyaWMuVGV4dC5mcm9tRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZEF0dHJpYnV0ZXMgPSBmYWJyaWMucGFyc2VBdHRyaWJ1dGVzKGVsZW1lbnQsIGZhYnJpYy5UZXh0LkFUVFJJQlVURV9OQU1FUyksXG4gICAgICAgIHBhcnNlZEFuY2hvciA9IHBhcnNlZEF0dHJpYnV0ZXMudGV4dEFuY2hvciB8fCAnbGVmdCc7XG4gICAgb3B0aW9ucyA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoKG9wdGlvbnMgPyBjbG9uZShvcHRpb25zKSA6IHsgfSksIHBhcnNlZEF0dHJpYnV0ZXMpO1xuXG4gICAgb3B0aW9ucy50b3AgPSBvcHRpb25zLnRvcCB8fCAwO1xuICAgIG9wdGlvbnMubGVmdCA9IG9wdGlvbnMubGVmdCB8fCAwO1xuICAgIGlmIChwYXJzZWRBdHRyaWJ1dGVzLnRleHREZWNvcmF0aW9uKSB7XG4gICAgICB2YXIgdGV4dERlY29yYXRpb24gPSBwYXJzZWRBdHRyaWJ1dGVzLnRleHREZWNvcmF0aW9uO1xuICAgICAgaWYgKHRleHREZWNvcmF0aW9uLmluZGV4T2YoJ3VuZGVybGluZScpICE9PSAtMSkge1xuICAgICAgICBvcHRpb25zLnVuZGVybGluZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGV4dERlY29yYXRpb24uaW5kZXhPZignb3ZlcmxpbmUnKSAhPT0gLTEpIHtcbiAgICAgICAgb3B0aW9ucy5vdmVybGluZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGV4dERlY29yYXRpb24uaW5kZXhPZignbGluZS10aHJvdWdoJykgIT09IC0xKSB7XG4gICAgICAgIG9wdGlvbnMubGluZXRocm91Z2ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgZGVsZXRlIG9wdGlvbnMudGV4dERlY29yYXRpb247XG4gICAgfVxuICAgIGlmICgnZHgnIGluIHBhcnNlZEF0dHJpYnV0ZXMpIHtcbiAgICAgIG9wdGlvbnMubGVmdCArPSBwYXJzZWRBdHRyaWJ1dGVzLmR4O1xuICAgIH1cbiAgICBpZiAoJ2R5JyBpbiBwYXJzZWRBdHRyaWJ1dGVzKSB7XG4gICAgICBvcHRpb25zLnRvcCArPSBwYXJzZWRBdHRyaWJ1dGVzLmR5O1xuICAgIH1cbiAgICBpZiAoISgnZm9udFNpemUnIGluIG9wdGlvbnMpKSB7XG4gICAgICBvcHRpb25zLmZvbnRTaXplID0gZmFicmljLlRleHQuREVGQVVMVF9TVkdfRk9OVF9TSVpFO1xuICAgIH1cblxuICAgIHZhciB0ZXh0Q29udGVudCA9ICcnO1xuXG4gICAgLy8gVGhlIFhNTCBpcyBub3QgcHJvcGVybHkgcGFyc2VkIGluIElFOSBzbyBhIHdvcmthcm91bmQgdG8gZ2V0XG4gICAgLy8gdGV4dENvbnRlbnQgaXMgdGhyb3VnaCBmaXJzdENoaWxkLmRhdGEuIEFub3RoZXIgd29ya2Fyb3VuZCB3b3VsZCBiZVxuICAgIC8vIHRvIGNvbnZlcnQgWE1MIGxvYWRlZCBmcm9tIGEgZmlsZSB0byBiZSBjb252ZXJ0ZWQgdXNpbmcgRE9NUGFyc2VyIChzYW1lIHdheSBsb2FkU1ZHRnJvbVN0cmluZygpIGRvZXMpXG4gICAgaWYgKCEoJ3RleHRDb250ZW50JyBpbiBlbGVtZW50KSkge1xuICAgICAgaWYgKCdmaXJzdENoaWxkJyBpbiBlbGVtZW50ICYmIGVsZW1lbnQuZmlyc3RDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoJ2RhdGEnIGluIGVsZW1lbnQuZmlyc3RDaGlsZCAmJiBlbGVtZW50LmZpcnN0Q2hpbGQuZGF0YSAhPT0gbnVsbCkge1xuICAgICAgICAgIHRleHRDb250ZW50ID0gZWxlbWVudC5maXJzdENoaWxkLmRhdGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0ZXh0Q29udGVudCA9IGVsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgfVxuXG4gICAgdGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudC5yZXBsYWNlKC9eXFxzK3xcXHMrJHxcXG4rL2csICcnKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgdmFyIG9yaWdpbmFsU3Ryb2tlV2lkdGggPSBvcHRpb25zLnN0cm9rZVdpZHRoO1xuICAgIG9wdGlvbnMuc3Ryb2tlV2lkdGggPSAwO1xuXG4gICAgdmFyIHRleHQgPSBuZXcgZmFicmljLlRleHQodGV4dENvbnRlbnQsIG9wdGlvbnMpLFxuICAgICAgICB0ZXh0SGVpZ2h0U2NhbGVGYWN0b3IgPSB0ZXh0LmdldFNjYWxlZEhlaWdodCgpIC8gdGV4dC5oZWlnaHQsXG4gICAgICAgIGxpbmVIZWlnaHREaWZmID0gKHRleHQuaGVpZ2h0ICsgdGV4dC5zdHJva2VXaWR0aCkgKiB0ZXh0LmxpbmVIZWlnaHQgLSB0ZXh0LmhlaWdodCxcbiAgICAgICAgc2NhbGVkRGlmZiA9IGxpbmVIZWlnaHREaWZmICogdGV4dEhlaWdodFNjYWxlRmFjdG9yLFxuICAgICAgICB0ZXh0SGVpZ2h0ID0gdGV4dC5nZXRTY2FsZWRIZWlnaHQoKSArIHNjYWxlZERpZmYsXG4gICAgICAgIG9mZlggPSAwO1xuICAgIC8qXG4gICAgICBBZGp1c3QgcG9zaXRpb25pbmc6XG4gICAgICAgIHgveSBhdHRyaWJ1dGVzIGluIFNWRyBjb3JyZXNwb25kIHRvIHRoZSBib3R0b20tbGVmdCBjb3JuZXIgb2YgdGV4dCBib3VuZGluZyBib3hcbiAgICAgICAgZmFicmljIG91dHB1dCBieSBkZWZhdWx0IGF0IHRvcCwgbGVmdC5cbiAgICAqL1xuICAgIGlmIChwYXJzZWRBbmNob3IgPT09ICdjZW50ZXInKSB7XG4gICAgICBvZmZYID0gdGV4dC5nZXRTY2FsZWRXaWR0aCgpIC8gMjtcbiAgICB9XG4gICAgaWYgKHBhcnNlZEFuY2hvciA9PT0gJ3JpZ2h0Jykge1xuICAgICAgb2ZmWCA9IHRleHQuZ2V0U2NhbGVkV2lkdGgoKTtcbiAgICB9XG4gICAgdGV4dC5zZXQoe1xuICAgICAgbGVmdDogdGV4dC5sZWZ0IC0gb2ZmWCxcbiAgICAgIHRvcDogdGV4dC50b3AgLSAodGV4dEhlaWdodCAtIHRleHQuZm9udFNpemUgKiAoMC4wNyArIHRleHQuX2ZvbnRTaXplRnJhY3Rpb24pKSAvIHRleHQubGluZUhlaWdodCxcbiAgICAgIHN0cm9rZVdpZHRoOiB0eXBlb2Ygb3JpZ2luYWxTdHJva2VXaWR0aCAhPT0gJ3VuZGVmaW5lZCcgPyBvcmlnaW5hbFN0cm9rZVdpZHRoIDogMSxcbiAgICB9KTtcbiAgICBjYWxsYmFjayh0ZXh0KTtcbiAgfTtcbiAgLyogX0ZST01fU1ZHX0VORF8gKi9cblxuICAvKipcbiAgICogUmV0dXJucyBmYWJyaWMuVGV4dCBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuVGV4dFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IHBsYWluIGpzIE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGZhYnJpYy5UZXh0IGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5UZXh0LmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9iamVjdENvcHkgPSBjbG9uZShvYmplY3QpLCBwYXRoID0gb2JqZWN0LnBhdGg7XG4gICAgZGVsZXRlIG9iamVjdENvcHkucGF0aDtcbiAgICByZXR1cm4gZmFicmljLk9iamVjdC5fZnJvbU9iamVjdCgnVGV4dCcsIG9iamVjdENvcHksIGZ1bmN0aW9uKHRleHRJbnN0YW5jZSkge1xuICAgICAgdGV4dEluc3RhbmNlLnN0eWxlcyA9IGZhYnJpYy51dGlsLnN0eWxlc0Zyb21BcnJheShvYmplY3Quc3R5bGVzLCBvYmplY3QudGV4dCk7XG4gICAgICBpZiAocGF0aCkge1xuICAgICAgICBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0KCdQYXRoJywgcGF0aCwgZnVuY3Rpb24ocGF0aEluc3RhbmNlKSB7XG4gICAgICAgICAgdGV4dEluc3RhbmNlLnNldCgncGF0aCcsIHBhdGhJbnN0YW5jZSk7XG4gICAgICAgICAgY2FsbGJhY2sodGV4dEluc3RhbmNlKTtcbiAgICAgICAgfSwgJ3BhdGgnKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjYWxsYmFjayh0ZXh0SW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH0sICd0ZXh0Jyk7XG4gIH07XG5cbiAgZmFicmljLlRleHQuZ2VuZXJpY0ZvbnRzID0gWydzYW5zLXNlcmlmJywgJ3NlcmlmJywgJ2N1cnNpdmUnLCAnZmFudGFzeScsICdtb25vc3BhY2UnXTtcblxuICBmYWJyaWMudXRpbC5jcmVhdGVBY2Nlc3NvcnMgJiYgZmFicmljLnV0aWwuY3JlYXRlQWNjZXNzb3JzKGZhYnJpYy5UZXh0KTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbigpIHtcbiAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuVGV4dC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLlRleHQucHJvdG90eXBlICovIHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgb2JqZWN0IGhhcyBubyBzdHlsaW5nIG9yIG5vIHN0eWxpbmcgaW4gYSBsaW5lXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCAsIGxpbmVJbmRleCBpcyBvbiB3cmFwcGVkIGxpbmVzLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNFbXB0eVN0eWxlczogZnVuY3Rpb24obGluZUluZGV4KSB7XG4gICAgICBpZiAoIXRoaXMuc3R5bGVzKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsaW5lSW5kZXggIT09ICd1bmRlZmluZWQnICYmICF0aGlzLnN0eWxlc1tsaW5lSW5kZXhdKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG9iaiA9IHR5cGVvZiBsaW5lSW5kZXggPT09ICd1bmRlZmluZWQnID8gdGhpcy5zdHlsZXMgOiB7IGxpbmU6IHRoaXMuc3R5bGVzW2xpbmVJbmRleF0gfTtcbiAgICAgIGZvciAodmFyIHAxIGluIG9iaikge1xuICAgICAgICBmb3IgKHZhciBwMiBpbiBvYmpbcDFdKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgICAgZm9yICh2YXIgcDMgaW4gb2JqW3AxXVtwMl0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgb2JqZWN0IGhhcyBhIHN0eWxlIHByb3BlcnR5IG9yIGhhcyBpdCBpbmEgc3BlY2lmaWVkIGxpbmVcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gZGV0ZWN0IGlmIGEgdGV4dCB3aWxsIHVzZSBhIHBhcnRpY3VsYXIgcHJvcGVydHkgb3Igbm90LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSB0byBjaGVjayBmb3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4IHRvIGNoZWNrIHRoZSBzdHlsZSBvblxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgc3R5bGVIYXM6IGZ1bmN0aW9uKHByb3BlcnR5LCBsaW5lSW5kZXgpIHtcbiAgICAgIGlmICghdGhpcy5zdHlsZXMgfHwgIXByb3BlcnR5IHx8IHByb3BlcnR5ID09PSAnJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxpbmVJbmRleCAhPT0gJ3VuZGVmaW5lZCcgJiYgIXRoaXMuc3R5bGVzW2xpbmVJbmRleF0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIG9iaiA9IHR5cGVvZiBsaW5lSW5kZXggPT09ICd1bmRlZmluZWQnID8gdGhpcy5zdHlsZXMgOiB7IDA6IHRoaXMuc3R5bGVzW2xpbmVJbmRleF0gfTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZm9yICh2YXIgcDEgaW4gb2JqKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBmb3IgKHZhciBwMiBpbiBvYmpbcDFdKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvYmpbcDFdW3AyXVtwcm9wZXJ0eV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgY2hhcmFjdGVycyBpbiBhIHRleHQgaGF2ZSBhIHZhbHVlIGZvciBhIHByb3BlcnR5XG4gICAgICogd2hvc2UgdmFsdWUgbWF0Y2hlcyB0aGUgdGV4dGJveCdzIHZhbHVlIGZvciB0aGF0IHByb3BlcnR5LiAgSWYgc28sXG4gICAgICogdGhlIGNoYXJhY3Rlci1sZXZlbCBwcm9wZXJ0eSBpcyBkZWxldGVkLiAgSWYgdGhlIGNoYXJhY3RlclxuICAgICAqIGhhcyBubyBvdGhlciBwcm9wZXJ0aWVzLCB0aGVuIGl0IGlzIGFsc28gZGVsZXRlZC4gIEZpbmFsbHksXG4gICAgICogaWYgdGhlIGxpbmUgY29udGFpbmluZyB0aGF0IGNoYXJhY3RlciBoYXMgbm8gb3RoZXIgY2hhcmFjdGVyc1xuICAgICAqIHRoZW4gaXQgYWxzbyBpcyBkZWxldGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFRoZSBwcm9wZXJ0eSB0byBjb21wYXJlIGJldHdlZW4gY2hhcmFjdGVycyBhbmQgdGV4dC5cbiAgICAgKi9cbiAgICBjbGVhblN0eWxlOiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgaWYgKCF0aGlzLnN0eWxlcyB8fCAhcHJvcGVydHkgfHwgcHJvcGVydHkgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBvYmogPSB0aGlzLnN0eWxlcywgc3R5bGVzQ291bnQgPSAwLCBsZXR0ZXJDb3VudCwgc3R5bGVQcm9wZXJ0eVZhbHVlLFxuICAgICAgICAgIGFsbFN0eWxlT2JqZWN0UHJvcGVydGllc01hdGNoID0gdHJ1ZSwgZ3JhcGhlbWVDb3VudCA9IDAsIHN0eWxlT2JqZWN0O1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBmb3IgKHZhciBwMSBpbiBvYmopIHtcbiAgICAgICAgbGV0dGVyQ291bnQgPSAwO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgZm9yICh2YXIgcDIgaW4gb2JqW3AxXSkge1xuICAgICAgICAgIHZhciBzdHlsZU9iamVjdCA9IG9ialtwMV1bcDJdLFxuICAgICAgICAgICAgICBzdHlsZVByb3BlcnR5SGFzQmVlblNldCA9IHN0eWxlT2JqZWN0Lmhhc093blByb3BlcnR5KHByb3BlcnR5KTtcblxuICAgICAgICAgIHN0eWxlc0NvdW50Kys7XG5cbiAgICAgICAgICBpZiAoc3R5bGVQcm9wZXJ0eUhhc0JlZW5TZXQpIHtcbiAgICAgICAgICAgIGlmICghc3R5bGVQcm9wZXJ0eVZhbHVlKSB7XG4gICAgICAgICAgICAgIHN0eWxlUHJvcGVydHlWYWx1ZSA9IHN0eWxlT2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN0eWxlT2JqZWN0W3Byb3BlcnR5XSAhPT0gc3R5bGVQcm9wZXJ0eVZhbHVlKSB7XG4gICAgICAgICAgICAgIGFsbFN0eWxlT2JqZWN0UHJvcGVydGllc01hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzdHlsZU9iamVjdFtwcm9wZXJ0eV0gPT09IHRoaXNbcHJvcGVydHldKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBzdHlsZU9iamVjdFtwcm9wZXJ0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYWxsU3R5bGVPYmplY3RQcm9wZXJ0aWVzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoc3R5bGVPYmplY3QpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgbGV0dGVyQ291bnQrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgb2JqW3AxXVtwMl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxldHRlckNvdW50ID09PSAwKSB7XG4gICAgICAgICAgZGVsZXRlIG9ialtwMV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGlmIGV2ZXJ5IGdyYXBoZW1lIGhhcyB0aGUgc2FtZSBzdHlsZSBzZXQgdGhlblxuICAgICAgLy8gZGVsZXRlIHRob3NlIHN0eWxlcyBhbmQgc2V0IGl0IG9uIHRoZSBwYXJlbnRcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fdGV4dExpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGdyYXBoZW1lQ291bnQgKz0gdGhpcy5fdGV4dExpbmVzW2ldLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChhbGxTdHlsZU9iamVjdFByb3BlcnRpZXNNYXRjaCAmJiBzdHlsZXNDb3VudCA9PT0gZ3JhcGhlbWVDb3VudCkge1xuICAgICAgICB0aGlzW3Byb3BlcnR5XSA9IHN0eWxlUHJvcGVydHlWYWx1ZTtcbiAgICAgICAgdGhpcy5yZW1vdmVTdHlsZShwcm9wZXJ0eSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHN0eWxlIHByb3BlcnR5IG9yIHByb3BlcnRpZXMgZnJvbSBhbGwgaW5kaXZpZHVhbCBjaGFyYWN0ZXIgc3R5bGVzXG4gICAgICogaW4gYSB0ZXh0IG9iamVjdC4gIERlbGV0ZXMgdGhlIGNoYXJhY3RlciBzdHlsZSBvYmplY3QgaWYgaXQgY29udGFpbnMgbm8gb3RoZXIgc3R5bGVcbiAgICAgKiBwcm9wcy4gIERlbGV0ZXMgYSBsaW5lIHN0eWxlIG9iamVjdCBpZiBpdCBjb250YWlucyBubyBvdGhlciBjaGFyYWN0ZXIgc3R5bGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BzIFRoZSBwcm9wZXJ0eSB0byByZW1vdmUgZnJvbSBjaGFyYWN0ZXIgc3R5bGVzLlxuICAgICAqL1xuICAgIHJlbW92ZVN0eWxlOiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgaWYgKCF0aGlzLnN0eWxlcyB8fCAhcHJvcGVydHkgfHwgcHJvcGVydHkgPT09ICcnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBvYmogPSB0aGlzLnN0eWxlcywgbGluZSwgbGluZU51bSwgY2hhck51bTtcbiAgICAgIGZvciAobGluZU51bSBpbiBvYmopIHtcbiAgICAgICAgbGluZSA9IG9ialtsaW5lTnVtXTtcbiAgICAgICAgZm9yIChjaGFyTnVtIGluIGxpbmUpIHtcbiAgICAgICAgICBkZWxldGUgbGluZVtjaGFyTnVtXVtwcm9wZXJ0eV07XG4gICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGxpbmVbY2hhck51bV0pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZGVsZXRlIGxpbmVbY2hhck51bV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhsaW5lKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBkZWxldGUgb2JqW2xpbmVOdW1dO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2V4dGVuZFN0eWxlczogZnVuY3Rpb24oaW5kZXgsIHN0eWxlcykge1xuICAgICAgdmFyIGxvYyA9IHRoaXMuZ2V0MkRDdXJzb3JMb2NhdGlvbihpbmRleCk7XG5cbiAgICAgIGlmICghdGhpcy5fZ2V0TGluZVN0eWxlKGxvYy5saW5lSW5kZXgpKSB7XG4gICAgICAgIHRoaXMuX3NldExpbmVTdHlsZShsb2MubGluZUluZGV4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9nZXRTdHlsZURlY2xhcmF0aW9uKGxvYy5saW5lSW5kZXgsIGxvYy5jaGFySW5kZXgpKSB7XG4gICAgICAgIHRoaXMuX3NldFN0eWxlRGVjbGFyYXRpb24obG9jLmxpbmVJbmRleCwgbG9jLmNoYXJJbmRleCwge30pO1xuICAgICAgfVxuXG4gICAgICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKHRoaXMuX2dldFN0eWxlRGVjbGFyYXRpb24obG9jLmxpbmVJbmRleCwgbG9jLmNoYXJJbmRleCksIHN0eWxlcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgMmQgcmVwcmVzZW50YXRpb24gKGxpbmVJbmRleCBhbmQgY2hhckluZGV4KSBvZiBjdXJzb3IgKG9yIHNlbGVjdGlvbiBzdGFydClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3NlbGVjdGlvblN0YXJ0XSBPcHRpb25hbCBpbmRleC4gV2hlbiBub3QgZ2l2ZW4sIGN1cnJlbnQgc2VsZWN0aW9uU3RhcnQgaXMgdXNlZC5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtza2lwV3JhcHBpbmddIGNvbnNpZGVyIHRoZSBsb2NhdGlvbiBmb3IgdW53cmFwcGVkIGxpbmVzLiB1c2VmdWwgdG8gbWFuYWdlIHN0eWxlcy5cbiAgICAgKi9cbiAgICBnZXQyREN1cnNvckxvY2F0aW9uOiBmdW5jdGlvbihzZWxlY3Rpb25TdGFydCwgc2tpcFdyYXBwaW5nKSB7XG4gICAgICBpZiAodHlwZW9mIHNlbGVjdGlvblN0YXJ0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxlY3Rpb25TdGFydCA9IHRoaXMuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICB9XG4gICAgICB2YXIgbGluZXMgPSBza2lwV3JhcHBpbmcgPyB0aGlzLl91bndyYXBwZWRUZXh0TGluZXMgOiB0aGlzLl90ZXh0TGluZXMsXG4gICAgICAgICAgbGVuID0gbGluZXMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoc2VsZWN0aW9uU3RhcnQgPD0gbGluZXNbaV0ubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxpbmVJbmRleDogaSxcbiAgICAgICAgICAgIGNoYXJJbmRleDogc2VsZWN0aW9uU3RhcnRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHNlbGVjdGlvblN0YXJ0IC09IGxpbmVzW2ldLmxlbmd0aCArIHRoaXMubWlzc2luZ05ld2xpbmVPZmZzZXQoaSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lSW5kZXg6IGkgLSAxLFxuICAgICAgICBjaGFySW5kZXg6IGxpbmVzW2kgLSAxXS5sZW5ndGggPCBzZWxlY3Rpb25TdGFydCA/IGxpbmVzW2kgLSAxXS5sZW5ndGggOiBzZWxlY3Rpb25TdGFydFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyBzdHlsZSBvZiBhIGN1cnJlbnQgc2VsZWN0aW9uL2N1cnNvciAoYXQgdGhlIHN0YXJ0IHBvc2l0aW9uKVxuICAgICAqIGlmIHN0YXJ0SW5kZXggb3IgZW5kSW5kZXggYXJlIG5vdCBwcm92aWRlZCwgc2VsZWN0aW9uU3RhcnQgb3Igc2VsZWN0aW9uRW5kIHdpbGwgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3N0YXJ0SW5kZXhdIFN0YXJ0IGluZGV4IHRvIGdldCBzdHlsZXMgYXRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2VuZEluZGV4XSBFbmQgaW5kZXggdG8gZ2V0IHN0eWxlcyBhdCwgaWYgbm90IHNwZWNpZmllZCBzZWxlY3Rpb25FbmQgb3Igc3RhcnRJbmRleCArIDFcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjb21wbGV0ZV0gZ2V0IGZ1bGwgc3R5bGUgb3Igbm90XG4gICAgICogQHJldHVybiB7QXJyYXl9IHN0eWxlcyBhbiBhcnJheSB3aXRoIG9uZSwgemVybyBvciBtb3JlIFN0eWxlIG9iamVjdHNcbiAgICAgKi9cbiAgICBnZXRTZWxlY3Rpb25TdHlsZXM6IGZ1bmN0aW9uKHN0YXJ0SW5kZXgsIGVuZEluZGV4LCBjb21wbGV0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBzdGFydEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzdGFydEluZGV4ID0gdGhpcy5zZWxlY3Rpb25TdGFydCB8fCAwO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBlbmRJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZW5kSW5kZXggPSB0aGlzLnNlbGVjdGlvbkVuZCB8fCBzdGFydEluZGV4O1xuICAgICAgfVxuICAgICAgdmFyIHN0eWxlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgICAgIHN0eWxlcy5wdXNoKHRoaXMuZ2V0U3R5bGVBdFBvc2l0aW9uKGksIGNvbXBsZXRlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3R5bGVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHN0eWxlIG9mIGEgY3VycmVudCBzZWxlY3Rpb24vY3Vyc29yIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uICB0byBnZXQgc3R5bGVzIGF0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29tcGxldGVdIGZ1bGwgc3R5bGUgaWYgdHJ1ZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gc3R5bGUgU3R5bGUgb2JqZWN0IGF0IGEgc3BlY2lmaWVkIGluZGV4XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRTdHlsZUF0UG9zaXRpb246IGZ1bmN0aW9uKHBvc2l0aW9uLCBjb21wbGV0ZSkge1xuICAgICAgdmFyIGxvYyA9IHRoaXMuZ2V0MkRDdXJzb3JMb2NhdGlvbihwb3NpdGlvbiksXG4gICAgICAgICAgc3R5bGUgPSBjb21wbGV0ZSA/IHRoaXMuZ2V0Q29tcGxldGVTdHlsZURlY2xhcmF0aW9uKGxvYy5saW5lSW5kZXgsIGxvYy5jaGFySW5kZXgpIDpcbiAgICAgICAgICAgIHRoaXMuX2dldFN0eWxlRGVjbGFyYXRpb24obG9jLmxpbmVJbmRleCwgbG9jLmNoYXJJbmRleCk7XG4gICAgICByZXR1cm4gc3R5bGUgfHwge307XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgc3R5bGUgb2YgYSBjdXJyZW50IHNlbGVjdGlvbiwgaWYgbm8gc2VsZWN0aW9uIGV4aXN0LCBkbyBub3Qgc2V0IGFueXRoaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3R5bGVzXSBTdHlsZXMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtzdGFydEluZGV4XSBTdGFydCBpbmRleCB0byBnZXQgc3R5bGVzIGF0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtlbmRJbmRleF0gRW5kIGluZGV4IHRvIGdldCBzdHlsZXMgYXQsIGlmIG5vdCBzcGVjaWZpZWQgc2VsZWN0aW9uRW5kIG9yIHN0YXJ0SW5kZXggKyAxXG4gICAgICogQHJldHVybiB7ZmFicmljLklUZXh0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldFNlbGVjdGlvblN0eWxlczogZnVuY3Rpb24oc3R5bGVzLCBzdGFydEluZGV4LCBlbmRJbmRleCkge1xuICAgICAgaWYgKHR5cGVvZiBzdGFydEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzdGFydEluZGV4ID0gdGhpcy5zZWxlY3Rpb25TdGFydCB8fCAwO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBlbmRJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZW5kSW5kZXggPSB0aGlzLnNlbGVjdGlvbkVuZCB8fCBzdGFydEluZGV4O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7XG4gICAgICAgIHRoaXMuX2V4dGVuZFN0eWxlcyhpLCBzdHlsZXMpO1xuICAgICAgfVxuICAgICAgLyogbm90IGluY2x1ZGVkIGluIF9leHRlbmRTdHlsZXMgdG8gYXZvaWQgY2xlYXJpbmcgY2FjaGUgbW9yZSB0aGFuIG9uY2UgKi9cbiAgICAgIHRoaXMuX2ZvcmNlQ2xlYXJDYWNoZSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2V0IHRoZSByZWZlcmVuY2UsIG5vdCBhIGNsb25lLCBvZiB0aGUgc3R5bGUgb2JqZWN0IGZvciBhIGdpdmVuIGNoYXJhY3RlclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2hhckluZGV4XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBzdHlsZSBvYmplY3RcbiAgICAgKi9cbiAgICBfZ2V0U3R5bGVEZWNsYXJhdGlvbjogZnVuY3Rpb24obGluZUluZGV4LCBjaGFySW5kZXgpIHtcbiAgICAgIHZhciBsaW5lU3R5bGUgPSB0aGlzLnN0eWxlcyAmJiB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdO1xuICAgICAgaWYgKCFsaW5lU3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGluZVN0eWxlW2NoYXJJbmRleF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiBhIG5ldyBvYmplY3QgdGhhdCBjb250YWlucyBhbGwgdGhlIHN0eWxlIHByb3BlcnR5IGZvciBhIGNoYXJhY3RlclxuICAgICAqIHRoZSBvYmplY3QgcmV0dXJuZWQgaXMgbmV3bHkgY3JlYXRlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXggb2YgdGhlIGxpbmUgd2hlcmUgdGhlIGNoYXJhY3RlciBpc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFySW5kZXggcG9zaXRpb24gb2YgdGhlIGNoYXJhY3RlciBvbiB0aGUgbGluZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gc3R5bGUgb2JqZWN0XG4gICAgICovXG4gICAgZ2V0Q29tcGxldGVTdHlsZURlY2xhcmF0aW9uOiBmdW5jdGlvbihsaW5lSW5kZXgsIGNoYXJJbmRleCkge1xuICAgICAgdmFyIHN0eWxlID0gdGhpcy5fZ2V0U3R5bGVEZWNsYXJhdGlvbihsaW5lSW5kZXgsIGNoYXJJbmRleCkgfHwgeyB9LFxuICAgICAgICAgIHN0eWxlT2JqZWN0ID0geyB9LCBwcm9wO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zdHlsZVByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcHJvcCA9IHRoaXMuX3N0eWxlUHJvcGVydGllc1tpXTtcbiAgICAgICAgc3R5bGVPYmplY3RbcHJvcF0gPSB0eXBlb2Ygc3R5bGVbcHJvcF0gPT09ICd1bmRlZmluZWQnID8gdGhpc1twcm9wXSA6IHN0eWxlW3Byb3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlT2JqZWN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYXJJbmRleFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldFN0eWxlRGVjbGFyYXRpb246IGZ1bmN0aW9uKGxpbmVJbmRleCwgY2hhckluZGV4LCBzdHlsZSkge1xuICAgICAgdGhpcy5zdHlsZXNbbGluZUluZGV4XVtjaGFySW5kZXhdID0gc3R5bGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFySW5kZXhcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9kZWxldGVTdHlsZURlY2xhcmF0aW9uOiBmdW5jdGlvbihsaW5lSW5kZXgsIGNoYXJJbmRleCkge1xuICAgICAgZGVsZXRlIHRoaXMuc3R5bGVzW2xpbmVJbmRleF1bY2hhckluZGV4XTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IGlmIHRoZSBsaW5lIGV4aXN0cyBvciBub3RcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRMaW5lU3R5bGU6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgcmV0dXJuICEhdGhpcy5zdHlsZXNbbGluZUluZGV4XTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBsaW5lIHN0eWxlIHRvIGFuIGVtcHR5IG9iamVjdCBzbyB0aGF0IGlzIGluaXRpYWxpemVkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldExpbmVTdHlsZTogZnVuY3Rpb24obGluZUluZGV4KSB7XG4gICAgICB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdID0ge307XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9kZWxldGVMaW5lU3R5bGU6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgZGVsZXRlIHRoaXMuc3R5bGVzW2xpbmVJbmRleF07XG4gICAgfVxuICB9KTtcbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIGZ1bmN0aW9uIHBhcnNlRGVjb3JhdGlvbihvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0LnRleHREZWNvcmF0aW9uKSB7XG4gICAgICBvYmplY3QudGV4dERlY29yYXRpb24uaW5kZXhPZigndW5kZXJsaW5lJykgPiAtMSAmJiAob2JqZWN0LnVuZGVybGluZSA9IHRydWUpO1xuICAgICAgb2JqZWN0LnRleHREZWNvcmF0aW9uLmluZGV4T2YoJ2xpbmUtdGhyb3VnaCcpID4gLTEgJiYgKG9iamVjdC5saW5ldGhyb3VnaCA9IHRydWUpO1xuICAgICAgb2JqZWN0LnRleHREZWNvcmF0aW9uLmluZGV4T2YoJ292ZXJsaW5lJykgPiAtMSAmJiAob2JqZWN0Lm92ZXJsaW5lID0gdHJ1ZSk7XG4gICAgICBkZWxldGUgb2JqZWN0LnRleHREZWNvcmF0aW9uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJVGV4dCBjbGFzcyAoaW50cm9kdWNlZCBpbiA8Yj52MS40PC9iPikgRXZlbnRzIGFyZSBhbHNvIGZpcmVkIHdpdGggXCJ0ZXh0OlwiXG4gICAqIHByZWZpeCB3aGVuIG9ic2VydmluZyBjYW52YXMuXG4gICAqIEBjbGFzcyBmYWJyaWMuSVRleHRcbiAgICogQGV4dGVuZHMgZmFicmljLlRleHRcbiAgICogQG1peGVzIGZhYnJpYy5PYnNlcnZhYmxlXG4gICAqXG4gICAqIEBmaXJlcyBjaGFuZ2VkXG4gICAqIEBmaXJlcyBzZWxlY3Rpb246Y2hhbmdlZFxuICAgKiBAZmlyZXMgZWRpdGluZzplbnRlcmVkXG4gICAqIEBmaXJlcyBlZGl0aW5nOmV4aXRlZFxuICAgKlxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSVRleHR9IHRoaXNBcmdcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLklUZXh0I2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqXG4gICAqIDxwPlN1cHBvcnRlZCBrZXkgY29tYmluYXRpb25zOjwvcD5cbiAgICogPHByZT5cbiAgICogICBNb3ZlIGN1cnNvcjogICAgICAgICAgICAgICAgICAgIGxlZnQsIHJpZ2h0LCB1cCwgZG93blxuICAgKiAgIFNlbGVjdCBjaGFyYWN0ZXI6ICAgICAgICAgICAgICAgc2hpZnQgKyBsZWZ0LCBzaGlmdCArIHJpZ2h0XG4gICAqICAgU2VsZWN0IHRleHQgdmVydGljYWxseTogICAgICAgICBzaGlmdCArIHVwLCBzaGlmdCArIGRvd25cbiAgICogICBNb3ZlIGN1cnNvciBieSB3b3JkOiAgICAgICAgICAgIGFsdCArIGxlZnQsIGFsdCArIHJpZ2h0XG4gICAqICAgU2VsZWN0IHdvcmRzOiAgICAgICAgICAgICAgICAgICBzaGlmdCArIGFsdCArIGxlZnQsIHNoaWZ0ICsgYWx0ICsgcmlnaHRcbiAgICogICBNb3ZlIGN1cnNvciB0byBsaW5lIHN0YXJ0L2VuZDogIGNtZCArIGxlZnQsIGNtZCArIHJpZ2h0IG9yIGhvbWUsIGVuZFxuICAgKiAgIFNlbGVjdCB0aWxsIHN0YXJ0L2VuZCBvZiBsaW5lOiAgY21kICsgc2hpZnQgKyBsZWZ0LCBjbWQgKyBzaGlmdCArIHJpZ2h0IG9yIHNoaWZ0ICsgaG9tZSwgc2hpZnQgKyBlbmRcbiAgICogICBKdW1wIHRvIHN0YXJ0L2VuZCBvZiB0ZXh0OiAgICAgIGNtZCArIHVwLCBjbWQgKyBkb3duXG4gICAqICAgU2VsZWN0IHRpbGwgc3RhcnQvZW5kIG9mIHRleHQ6ICBjbWQgKyBzaGlmdCArIHVwLCBjbWQgKyBzaGlmdCArIGRvd24gb3Igc2hpZnQgKyBwZ1VwLCBzaGlmdCArIHBnRG93blxuICAgKiAgIERlbGV0ZSBjaGFyYWN0ZXI6ICAgICAgICAgICAgICAgYmFja3NwYWNlXG4gICAqICAgRGVsZXRlIHdvcmQ6ICAgICAgICAgICAgICAgICAgICBhbHQgKyBiYWNrc3BhY2VcbiAgICogICBEZWxldGUgbGluZTogICAgICAgICAgICAgICAgICAgIGNtZCArIGJhY2tzcGFjZVxuICAgKiAgIEZvcndhcmQgZGVsZXRlOiAgICAgICAgICAgICAgICAgZGVsZXRlXG4gICAqICAgQ29weSB0ZXh0OiAgICAgICAgICAgICAgICAgICAgICBjdHJsL2NtZCArIGNcbiAgICogICBQYXN0ZSB0ZXh0OiAgICAgICAgICAgICAgICAgICAgIGN0cmwvY21kICsgdlxuICAgKiAgIEN1dCB0ZXh0OiAgICAgICAgICAgICAgICAgICAgICAgY3RybC9jbWQgKyB4XG4gICAqICAgU2VsZWN0IGVudGlyZSB0ZXh0OiAgICAgICAgICAgICBjdHJsL2NtZCArIGFcbiAgICogICBRdWl0IGVkaXRpbmcgICAgICAgICAgICAgICAgICAgIHRhYiBvciBlc2NcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIDxwPlN1cHBvcnRlZCBtb3VzZS90b3VjaCBjb21iaW5hdGlvbjwvcD5cbiAgICogPHByZT5cbiAgICogICBQb3NpdGlvbiBjdXJzb3I6ICAgICAgICAgICAgICAgIGNsaWNrL3RvdWNoXG4gICAqICAgQ3JlYXRlIHNlbGVjdGlvbjogICAgICAgICAgICAgICBjbGljay90b3VjaCAmIGRyYWdcbiAgICogICBDcmVhdGUgc2VsZWN0aW9uOiAgICAgICAgICAgICAgIGNsaWNrICYgc2hpZnQgKyBjbGlja1xuICAgKiAgIFNlbGVjdCB3b3JkOiAgICAgICAgICAgICAgICAgICAgZG91YmxlIGNsaWNrXG4gICAqICAgU2VsZWN0IGxpbmU6ICAgICAgICAgICAgICAgICAgICB0cmlwbGUgY2xpY2tcbiAgICogPC9wcmU+XG4gICAqL1xuICBmYWJyaWMuSVRleHQgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuVGV4dCwgZmFicmljLk9ic2VydmFibGUsIC8qKiBAbGVuZHMgZmFicmljLklUZXh0LnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ2ktdGV4dCcsXG5cbiAgICAvKipcbiAgICAgKiBJbmRleCB3aGVyZSB0ZXh0IHNlbGVjdGlvbiBzdGFydHMgKG9yIHdoZXJlIGN1cnNvciBpcyB3aGVuIHRoZXJlIGlzIG5vIHNlbGVjdGlvbilcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNlbGVjdGlvblN0YXJ0OiAwLFxuXG4gICAgLyoqXG4gICAgICogSW5kZXggd2hlcmUgdGV4dCBzZWxlY3Rpb24gZW5kc1xuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2VsZWN0aW9uRW5kOiAwLFxuXG4gICAgLyoqXG4gICAgICogQ29sb3Igb2YgdGV4dCBzZWxlY3Rpb25cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNlbGVjdGlvbkNvbG9yOiAncmdiYSgxNywxMTksMjU1LDAuMyknLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGV4dCBpcyBpbiBlZGl0aW5nIG1vZGVcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBpc0VkaXRpbmc6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgYSB0ZXh0IGNhbiBiZSBlZGl0ZWRcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBlZGl0YWJsZTogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEJvcmRlciBjb2xvciBvZiB0ZXh0IG9iamVjdCB3aGlsZSBpdCdzIGluIGVkaXRpbmcgbW9kZVxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZWRpdGluZ0JvcmRlckNvbG9yOiAncmdiYSgxMDIsMTUzLDI1NSwwLjI1KScsXG5cbiAgICAvKipcbiAgICAgKiBXaWR0aCBvZiBjdXJzb3IgKGluIHB4KVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY3Vyc29yV2lkdGg6IDIsXG5cbiAgICAvKipcbiAgICAgKiBDb2xvciBvZiB0ZXh0IGN1cnNvciBjb2xvciBpbiBlZGl0aW5nIG1vZGUuXG4gICAgICogaWYgbm90IHNldCAoZGVmYXVsdCkgd2lsbCB0YWtlIGNvbG9yIGZyb20gdGhlIHRleHQuXG4gICAgICogaWYgc2V0IHRvIGEgY29sb3IgdmFsdWUgdGhhdCBmYWJyaWMgY2FuIHVuZGVyc3RhbmQsIGl0IHdpbGxcbiAgICAgKiBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIGNvbG9yIG9mIHRoZSB0ZXh0IGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY3Vyc29yQ29sb3I6ICcnLFxuXG4gICAgLyoqXG4gICAgICogRGVsYXkgYmV0d2VlbiBjdXJzb3IgYmxpbmsgKGluIG1zKVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY3Vyc29yRGVsYXk6IDEwMDAsXG5cbiAgICAvKipcbiAgICAgKiBEdXJhdGlvbiBvZiBjdXJzb3IgZmFkZWluIChpbiBtcylcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGN1cnNvckR1cmF0aW9uOiA2MDAsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciBpbnRlcm5hbCB0ZXh0IGNoYXIgd2lkdGhzIGNhbiBiZSBjYWNoZWRcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjYWNoaW5nOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRE9NIGNvbnRhaW5lciB0byBhcHBlbmQgdGhlIGhpZGRlblRleHRhcmVhLlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGF0dGFjaGluZyB0byB0aGUgZG9jdW1lbnQuYm9keS5cbiAgICAgKiBVc2VmdWwgdG8gcmVkdWNlIGxhZ2dpc2ggcmVkcmF3IG9mIHRoZSBmdWxsIGRvY3VtZW50LmJvZHkgdHJlZSBhbmRcbiAgICAgKiBhbHNvIHdpdGggbW9kYWxzIGV2ZW50IGNhcHR1cmluZyB0aGF0IHdvbid0IGxldCB0aGUgdGV4dGFyZWEgdGFrZSBmb2N1cy5cbiAgICAgKiBAdHlwZSBIVE1MRWxlbWVudFxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgaGlkZGVuVGV4dGFyZWFDb250YWluZXI6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZVNwYWNlOiAvXFxzfFxcbi8sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jdXJyZW50Q3Vyc29yT3BhY2l0eTogMCxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NlbGVjdGlvbkRpcmVjdGlvbjogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2Fib3J0Q3Vyc29yQW5pbWF0aW9uOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX193aWR0aE9mU3BhY2U6IFtdLFxuXG4gICAgLyoqXG4gICAgICogSGVscHMgZGV0ZXJtaW5pbmcgd2hlbiB0aGUgdGV4dCBpcyBpbiBjb21wb3NpdGlvbiwgc28gdGhhdCB0aGUgY3Vyc29yXG4gICAgICogcmVuZGVyaW5nIGlzIGFsdGVyZWQuXG4gICAgICovXG4gICAgaW5Db21wb3NpdGlvbk1vZGU6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUZXh0IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuSVRleHR9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbih0ZXh0LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignaW5pdGlhbGl6ZScsIHRleHQsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5pbml0QmVoYXZpb3IoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBzZWxlY3Rpb24gc3RhcnQgKGxlZnQgYm91bmRhcnkgb2YgYSBzZWxlY3Rpb24pXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IEluZGV4IHRvIHNldCBzZWxlY3Rpb24gc3RhcnQgdG9cbiAgICAgKi9cbiAgICBzZXRTZWxlY3Rpb25TdGFydDogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIGluZGV4ID0gTWF0aC5tYXgoaW5kZXgsIDApO1xuICAgICAgdGhpcy5fdXBkYXRlQW5kRmlyZSgnc2VsZWN0aW9uU3RhcnQnLCBpbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgc2VsZWN0aW9uIGVuZCAocmlnaHQgYm91bmRhcnkgb2YgYSBzZWxlY3Rpb24pXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IEluZGV4IHRvIHNldCBzZWxlY3Rpb24gZW5kIHRvXG4gICAgICovXG4gICAgc2V0U2VsZWN0aW9uRW5kOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdGhpcy50ZXh0Lmxlbmd0aCk7XG4gICAgICB0aGlzLl91cGRhdGVBbmRGaXJlKCdzZWxlY3Rpb25FbmQnLCBpbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5ICdzZWxlY3Rpb25TdGFydCcgb3IgJ3NlbGVjdGlvbkVuZCdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggbmV3IHBvc2l0aW9uIG9mIHByb3BlcnR5XG4gICAgICovXG4gICAgX3VwZGF0ZUFuZEZpcmU6IGZ1bmN0aW9uKHByb3BlcnR5LCBpbmRleCkge1xuICAgICAgaWYgKHRoaXNbcHJvcGVydHldICE9PSBpbmRleCkge1xuICAgICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlZCgpO1xuICAgICAgICB0aGlzW3Byb3BlcnR5XSA9IGluZGV4O1xuICAgICAgfVxuICAgICAgdGhpcy5fdXBkYXRlVGV4dGFyZWEoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgdGhlIGV2ZW4gb2Ygc2VsZWN0aW9uIGNoYW5nZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9maXJlU2VsZWN0aW9uQ2hhbmdlZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmZpcmUoJ3NlbGVjdGlvbjpjaGFuZ2VkJyk7XG4gICAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5maXJlKCd0ZXh0OnNlbGVjdGlvbjpjaGFuZ2VkJywgeyB0YXJnZXQ6IHRoaXMgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGV4dCBkaW1lbnNpb25zLiBSZW5kZXIgYWxsIHRleHQgb24gZ2l2ZW4gY29udGV4dFxuICAgICAqIG9yIG9uIGEgb2Zmc2NyZWVuIGNhbnZhcyB0byBnZXQgdGhlIHRleHQgd2lkdGggd2l0aCBtZWFzdXJlVGV4dC5cbiAgICAgKiBVcGRhdGVzIHRoaXMud2lkdGggYW5kIHRoaXMuaGVpZ2h0IHdpdGggdGhlIHByb3BlciB2YWx1ZXMuXG4gICAgICogRG9lcyBub3QgcmV0dXJuIGRpbWVuc2lvbnMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpbml0RGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmlzRWRpdGluZyAmJiB0aGlzLmluaXREZWxheWVkQ3Vyc29yKCk7XG4gICAgICB0aGlzLmNsZWFyQ29udGV4dFRvcCgpO1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXREaW1lbnNpb25zJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIHJlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB0aGlzLmNsZWFyQ29udGV4dFRvcCgpO1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ3JlbmRlcicsIGN0eCk7XG4gICAgICAvLyBjbGVhciB0aGUgY3Vyc29yT2Zmc2V0Q2FjaGUsIHNvIHdlIGVuc3VyZSB0byBjYWxjdWxhdGUgb25jZSBwZXIgcmVuZGVyQ3Vyc29yXG4gICAgICAvLyB0aGUgY29ycmVjdCBwb3NpdGlvbiBidXQgbm90IGF0IGV2ZXJ5IGN1cnNvciBhbmltYXRpb24uXG4gICAgICB0aGlzLmN1cnNvck9mZnNldENhY2hlID0geyB9O1xuICAgICAgdGhpcy5yZW5kZXJDdXJzb3JPclNlbGVjdGlvbigpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdfcmVuZGVyJywgY3R4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJlcGFyZSBhbmQgY2xlYW4gdGhlIGNvbnRleHRUb3BcbiAgICAgKi9cbiAgICBjbGVhckNvbnRleHRUb3A6IGZ1bmN0aW9uKHNraXBSZXN0b3JlKSB7XG4gICAgICBpZiAoIXRoaXMuaXNFZGl0aW5nIHx8ICF0aGlzLmNhbnZhcyB8fCAhdGhpcy5jYW52YXMuY29udGV4dFRvcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY3R4ID0gdGhpcy5jYW52YXMuY29udGV4dFRvcCwgdiA9IHRoaXMuY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtO1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC50cmFuc2Zvcm0odlswXSwgdlsxXSwgdlsyXSwgdlszXSwgdls0XSwgdls1XSk7XG4gICAgICB0aGlzLnRyYW5zZm9ybShjdHgpO1xuICAgICAgdGhpcy5fY2xlYXJUZXh0QXJlYShjdHgpO1xuICAgICAgc2tpcFJlc3RvcmUgfHwgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgY3Vyc29yIG9yIHNlbGVjdGlvbiAoZGVwZW5kaW5nIG9uIHdoYXQgZXhpc3RzKVxuICAgICAqIGl0IGRvZXMgb24gdGhlIGNvbnRleHRUb3AuIElmIGNvbnRleHRUb3AgaXMgbm90IGF2YWlsYWJsZSwgZG8gbm90aGluZy5cbiAgICAgKi9cbiAgICByZW5kZXJDdXJzb3JPclNlbGVjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuaXNFZGl0aW5nIHx8ICF0aGlzLmNhbnZhcyB8fCAhdGhpcy5jYW52YXMuY29udGV4dFRvcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgYm91bmRhcmllcyA9IHRoaXMuX2dldEN1cnNvckJvdW5kYXJpZXMoKSxcbiAgICAgICAgICBjdHggPSB0aGlzLmNhbnZhcy5jb250ZXh0VG9wO1xuICAgICAgdGhpcy5jbGVhckNvbnRleHRUb3AodHJ1ZSk7XG4gICAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCA9PT0gdGhpcy5zZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJDdXJzb3IoYm91bmRhcmllcywgY3R4KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlclNlbGVjdGlvbihib3VuZGFyaWVzLCBjdHgpO1xuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgX2NsZWFyVGV4dEFyZWE6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgLy8gd2UgYWRkIDQgcGl4ZWwsIHRvIGJlIHN1cmUgdG8gZG8gbm90IGxlYXZlIGFueSBwaXhlbCBvdXRcbiAgICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGggKyA0LCBoZWlnaHQgPSB0aGlzLmhlaWdodCArIDQ7XG4gICAgICBjdHguY2xlYXJSZWN0KC13aWR0aCAvIDIsIC1oZWlnaHQgLyAyLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjdXJzb3IgYm91bmRhcmllcyAobGVmdCwgdG9wLCBsZWZ0T2Zmc2V0LCB0b3BPZmZzZXQpXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBjaGFycyBBcnJheSBvZiBjaGFyYWN0ZXJzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVPZkJvdW5kYXJpZXNcbiAgICAgKi9cbiAgICBfZ2V0Q3Vyc29yQm91bmRhcmllczogZnVuY3Rpb24ocG9zaXRpb24pIHtcblxuICAgICAgLy8gbGVmdC90b3AgYXJlIGxlZnQvdG9wIG9mIGVudGlyZSB0ZXh0IGJveFxuICAgICAgLy8gbGVmdE9mZnNldC90b3BPZmZzZXQgYXJlIG9mZnNldCBmcm9tIHRoYXQgbGVmdC90b3AgcG9pbnQgb2YgYSB0ZXh0IGJveFxuXG4gICAgICBpZiAodHlwZW9mIHBvc2l0aW9uID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwb3NpdGlvbiA9IHRoaXMuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZWZ0ID0gdGhpcy5fZ2V0TGVmdE9mZnNldCgpLFxuICAgICAgICAgIHRvcCA9IHRoaXMuX2dldFRvcE9mZnNldCgpLFxuICAgICAgICAgIG9mZnNldHMgPSB0aGlzLl9nZXRDdXJzb3JCb3VuZGFyaWVzT2Zmc2V0cyhwb3NpdGlvbik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgbGVmdE9mZnNldDogb2Zmc2V0cy5sZWZ0LFxuICAgICAgICB0b3BPZmZzZXQ6IG9mZnNldHMudG9wXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRDdXJzb3JCb3VuZGFyaWVzT2Zmc2V0czogZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgIGlmICh0aGlzLmN1cnNvck9mZnNldENhY2hlICYmICd0b3AnIGluIHRoaXMuY3Vyc29yT2Zmc2V0Q2FjaGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3Vyc29yT2Zmc2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICB2YXIgbGluZUxlZnRPZmZzZXQsXG4gICAgICAgICAgbGluZUluZGV4LFxuICAgICAgICAgIGNoYXJJbmRleCxcbiAgICAgICAgICB0b3BPZmZzZXQgPSAwLFxuICAgICAgICAgIGxlZnRPZmZzZXQgPSAwLFxuICAgICAgICAgIGJvdW5kYXJpZXMsXG4gICAgICAgICAgY3Vyc29yUG9zaXRpb24gPSB0aGlzLmdldDJEQ3Vyc29yTG9jYXRpb24ocG9zaXRpb24pO1xuICAgICAgY2hhckluZGV4ID0gY3Vyc29yUG9zaXRpb24uY2hhckluZGV4O1xuICAgICAgbGluZUluZGV4ID0gY3Vyc29yUG9zaXRpb24ubGluZUluZGV4O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lSW5kZXg7IGkrKykge1xuICAgICAgICB0b3BPZmZzZXQgKz0gdGhpcy5nZXRIZWlnaHRPZkxpbmUoaSk7XG4gICAgICB9XG4gICAgICBsaW5lTGVmdE9mZnNldCA9IHRoaXMuX2dldExpbmVMZWZ0T2Zmc2V0KGxpbmVJbmRleCk7XG4gICAgICB2YXIgYm91bmQgPSB0aGlzLl9fY2hhckJvdW5kc1tsaW5lSW5kZXhdW2NoYXJJbmRleF07XG4gICAgICBib3VuZCAmJiAobGVmdE9mZnNldCA9IGJvdW5kLmxlZnQpO1xuICAgICAgaWYgKHRoaXMuY2hhclNwYWNpbmcgIT09IDAgJiYgY2hhckluZGV4ID09PSB0aGlzLl90ZXh0TGluZXNbbGluZUluZGV4XS5sZW5ndGgpIHtcbiAgICAgICAgbGVmdE9mZnNldCAtPSB0aGlzLl9nZXRXaWR0aE9mQ2hhclNwYWNpbmcoKTtcbiAgICAgIH1cbiAgICAgIGJvdW5kYXJpZXMgPSB7XG4gICAgICAgIHRvcDogdG9wT2Zmc2V0LFxuICAgICAgICBsZWZ0OiBsaW5lTGVmdE9mZnNldCArIChsZWZ0T2Zmc2V0ID4gMCA/IGxlZnRPZmZzZXQgOiAwKSxcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgIGJvdW5kYXJpZXMubGVmdCAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0Q2FjaGUgPSBib3VuZGFyaWVzO1xuICAgICAgcmV0dXJuIHRoaXMuY3Vyc29yT2Zmc2V0Q2FjaGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgY3Vyc29yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGJvdW5kYXJpZXNcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IHRyYW5zZm9ybWVkIGNvbnRleHQgdG8gZHJhdyBvblxuICAgICAqL1xuICAgIHJlbmRlckN1cnNvcjogZnVuY3Rpb24oYm91bmRhcmllcywgY3R4KSB7XG4gICAgICB2YXIgY3Vyc29yTG9jYXRpb24gPSB0aGlzLmdldDJEQ3Vyc29yTG9jYXRpb24oKSxcbiAgICAgICAgICBsaW5lSW5kZXggPSBjdXJzb3JMb2NhdGlvbi5saW5lSW5kZXgsXG4gICAgICAgICAgY2hhckluZGV4ID0gY3Vyc29yTG9jYXRpb24uY2hhckluZGV4ID4gMCA/IGN1cnNvckxvY2F0aW9uLmNoYXJJbmRleCAtIDEgOiAwLFxuICAgICAgICAgIGNoYXJIZWlnaHQgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGxpbmVJbmRleCwgY2hhckluZGV4LCAnZm9udFNpemUnKSxcbiAgICAgICAgICBtdWx0aXBsaWVyID0gdGhpcy5zY2FsZVggKiB0aGlzLmNhbnZhcy5nZXRab29tKCksXG4gICAgICAgICAgY3Vyc29yV2lkdGggPSB0aGlzLmN1cnNvcldpZHRoIC8gbXVsdGlwbGllcixcbiAgICAgICAgICB0b3BPZmZzZXQgPSBib3VuZGFyaWVzLnRvcE9mZnNldCxcbiAgICAgICAgICBkeSA9IHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQobGluZUluZGV4LCBjaGFySW5kZXgsICdkZWx0YVknKTtcbiAgICAgIHRvcE9mZnNldCArPSAoMSAtIHRoaXMuX2ZvbnRTaXplRnJhY3Rpb24pICogdGhpcy5nZXRIZWlnaHRPZkxpbmUobGluZUluZGV4KSAvIHRoaXMubGluZUhlaWdodFxuICAgICAgICAtIGNoYXJIZWlnaHQgKiAoMSAtIHRoaXMuX2ZvbnRTaXplRnJhY3Rpb24pO1xuXG4gICAgICBpZiAodGhpcy5pbkNvbXBvc2l0aW9uTW9kZSkge1xuICAgICAgICB0aGlzLnJlbmRlclNlbGVjdGlvbihib3VuZGFyaWVzLCBjdHgpO1xuICAgICAgfVxuICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY3Vyc29yQ29sb3IgfHwgdGhpcy5nZXRWYWx1ZU9mUHJvcGVydHlBdChsaW5lSW5kZXgsIGNoYXJJbmRleCwgJ2ZpbGwnKTtcbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuX19pc01vdXNlZG93biA/IDEgOiB0aGlzLl9jdXJyZW50Q3Vyc29yT3BhY2l0eTtcbiAgICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgYm91bmRhcmllcy5sZWZ0ICsgYm91bmRhcmllcy5sZWZ0T2Zmc2V0IC0gY3Vyc29yV2lkdGggLyAyLFxuICAgICAgICB0b3BPZmZzZXQgKyBib3VuZGFyaWVzLnRvcCArIGR5LFxuICAgICAgICBjdXJzb3JXaWR0aCxcbiAgICAgICAgY2hhckhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgdGV4dCBzZWxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYm91bmRhcmllcyBPYmplY3Qgd2l0aCBsZWZ0L3RvcC9sZWZ0T2Zmc2V0L3RvcE9mZnNldFxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggdHJhbnNmb3JtZWQgY29udGV4dCB0byBkcmF3IG9uXG4gICAgICovXG4gICAgcmVuZGVyU2VsZWN0aW9uOiBmdW5jdGlvbihib3VuZGFyaWVzLCBjdHgpIHtcblxuICAgICAgdmFyIHNlbGVjdGlvblN0YXJ0ID0gdGhpcy5pbkNvbXBvc2l0aW9uTW9kZSA/IHRoaXMuaGlkZGVuVGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQgOiB0aGlzLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgIHNlbGVjdGlvbkVuZCA9IHRoaXMuaW5Db21wb3NpdGlvbk1vZGUgPyB0aGlzLmhpZGRlblRleHRhcmVhLnNlbGVjdGlvbkVuZCA6IHRoaXMuc2VsZWN0aW9uRW5kLFxuICAgICAgICAgIGlzSnVzdGlmeSA9IHRoaXMudGV4dEFsaWduLmluZGV4T2YoJ2p1c3RpZnknKSAhPT0gLTEsXG4gICAgICAgICAgc3RhcnQgPSB0aGlzLmdldDJEQ3Vyc29yTG9jYXRpb24oc2VsZWN0aW9uU3RhcnQpLFxuICAgICAgICAgIGVuZCA9IHRoaXMuZ2V0MkRDdXJzb3JMb2NhdGlvbihzZWxlY3Rpb25FbmQpLFxuICAgICAgICAgIHN0YXJ0TGluZSA9IHN0YXJ0LmxpbmVJbmRleCxcbiAgICAgICAgICBlbmRMaW5lID0gZW5kLmxpbmVJbmRleCxcbiAgICAgICAgICBzdGFydENoYXIgPSBzdGFydC5jaGFySW5kZXggPCAwID8gMCA6IHN0YXJ0LmNoYXJJbmRleCxcbiAgICAgICAgICBlbmRDaGFyID0gZW5kLmNoYXJJbmRleCA8IDAgPyAwIDogZW5kLmNoYXJJbmRleDtcblxuICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0TGluZTsgaSA8PSBlbmRMaW5lOyBpKyspIHtcbiAgICAgICAgdmFyIGxpbmVPZmZzZXQgPSB0aGlzLl9nZXRMaW5lTGVmdE9mZnNldChpKSB8fCAwLFxuICAgICAgICAgICAgbGluZUhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGkpLFxuICAgICAgICAgICAgcmVhbExpbmVIZWlnaHQgPSAwLCBib3hTdGFydCA9IDAsIGJveEVuZCA9IDA7XG5cbiAgICAgICAgaWYgKGkgPT09IHN0YXJ0TGluZSkge1xuICAgICAgICAgIGJveFN0YXJ0ID0gdGhpcy5fX2NoYXJCb3VuZHNbc3RhcnRMaW5lXVtzdGFydENoYXJdLmxlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPj0gc3RhcnRMaW5lICYmIGkgPCBlbmRMaW5lKSB7XG4gICAgICAgICAgYm94RW5kID0gaXNKdXN0aWZ5ICYmICF0aGlzLmlzRW5kT2ZXcmFwcGluZyhpKSA/IHRoaXMud2lkdGggOiB0aGlzLmdldExpbmVXaWR0aChpKSB8fCA1OyAvLyBXVEYgaXMgdGhpcyA1P1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGkgPT09IGVuZExpbmUpIHtcbiAgICAgICAgICBpZiAoZW5kQ2hhciA9PT0gMCkge1xuICAgICAgICAgICAgYm94RW5kID0gdGhpcy5fX2NoYXJCb3VuZHNbZW5kTGluZV1bZW5kQ2hhcl0ubGVmdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY2hhclNwYWNpbmcgPSB0aGlzLl9nZXRXaWR0aE9mQ2hhclNwYWNpbmcoKTtcbiAgICAgICAgICAgIGJveEVuZCA9IHRoaXMuX19jaGFyQm91bmRzW2VuZExpbmVdW2VuZENoYXIgLSAxXS5sZWZ0XG4gICAgICAgICAgICAgICsgdGhpcy5fX2NoYXJCb3VuZHNbZW5kTGluZV1bZW5kQ2hhciAtIDFdLndpZHRoIC0gY2hhclNwYWNpbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlYWxMaW5lSGVpZ2h0ID0gbGluZUhlaWdodDtcbiAgICAgICAgaWYgKHRoaXMubGluZUhlaWdodCA8IDEgfHwgKGkgPT09IGVuZExpbmUgJiYgdGhpcy5saW5lSGVpZ2h0ID4gMSkpIHtcbiAgICAgICAgICBsaW5lSGVpZ2h0IC89IHRoaXMubGluZUhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZHJhd1N0YXJ0ID0gYm91bmRhcmllcy5sZWZ0ICsgbGluZU9mZnNldCArIGJveFN0YXJ0LFxuICAgICAgICAgICAgZHJhd1dpZHRoID0gYm94RW5kIC0gYm94U3RhcnQsXG4gICAgICAgICAgICBkcmF3SGVpZ2h0ID0gbGluZUhlaWdodCwgZXh0cmFUb3AgPSAwO1xuICAgICAgICBpZiAodGhpcy5pbkNvbXBvc2l0aW9uTW9kZSkge1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbXBvc2l0aW9uQ29sb3IgfHwgJ2JsYWNrJztcbiAgICAgICAgICBkcmF3SGVpZ2h0ID0gMTtcbiAgICAgICAgICBleHRyYVRvcCA9IGxpbmVIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuc2VsZWN0aW9uQ29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICAgIGRyYXdTdGFydCA9IHRoaXMud2lkdGggLSBkcmF3U3RhcnQgLSBkcmF3V2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmZpbGxSZWN0KFxuICAgICAgICAgIGRyYXdTdGFydCxcbiAgICAgICAgICBib3VuZGFyaWVzLnRvcCArIGJvdW5kYXJpZXMudG9wT2Zmc2V0ICsgZXh0cmFUb3AsXG4gICAgICAgICAgZHJhd1dpZHRoLFxuICAgICAgICAgIGRyYXdIZWlnaHQpO1xuICAgICAgICBib3VuZGFyaWVzLnRvcE9mZnNldCArPSByZWFsTGluZUhlaWdodDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGlnaCBsZXZlbCBmdW5jdGlvbiB0byBrbm93IHRoZSBoZWlnaHQgb2YgdGhlIGN1cnNvci5cbiAgICAgKiB0aGUgY3VycmVudENoYXIgaXMgdGhlIG9uZSB0aGF0IHByZWNlZGVzIHRoZSBjdXJzb3JcbiAgICAgKiBSZXR1cm5zIGZvbnRTaXplIG9mIGNoYXIgYXQgdGhlIGN1cnJlbnQgY3Vyc29yXG4gICAgICogVW51c2VkIGZyb20gdGhlIGxpYnJhcnksIGlzIGZvciB0aGUgZW5kIHVzZXJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IENoYXJhY3RlciBmb250IHNpemVcbiAgICAgKi9cbiAgICBnZXRDdXJyZW50Q2hhckZvbnRTaXplOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjcCA9IHRoaXMuX2dldEN1cnJlbnRDaGFySW5kZXgoKTtcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGNwLmwsIGNwLmMsICdmb250U2l6ZScpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIaWdoIGxldmVsIGZ1bmN0aW9uIHRvIGtub3cgdGhlIGNvbG9yIG9mIHRoZSBjdXJzb3IuXG4gICAgICogdGhlIGN1cnJlbnRDaGFyIGlzIHRoZSBvbmUgdGhhdCBwcmVjZWRlcyB0aGUgY3Vyc29yXG4gICAgICogUmV0dXJucyBjb2xvciAoZmlsbCkgb2YgY2hhciBhdCB0aGUgY3VycmVudCBjdXJzb3JcbiAgICAgKiBpZiB0aGUgdGV4dCBvYmplY3QgaGFzIGEgcGF0dGVybiBvciBncmFkaWVudCBmb3IgZmlsbGVyLCBpdCB3aWxsIHJldHVybiB0aGF0LlxuICAgICAqIFVudXNlZCBieSB0aGUgbGlicmFyeSwgaXMgZm9yIHRoZSBlbmQgdXNlclxuICAgICAqIEByZXR1cm4ge1N0cmluZyB8IGZhYnJpYy5HcmFkaWVudCB8IGZhYnJpYy5QYXR0ZXJufSBDaGFyYWN0ZXIgY29sb3IgKGZpbGwpXG4gICAgICovXG4gICAgZ2V0Q3VycmVudENoYXJDb2xvcjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3AgPSB0aGlzLl9nZXRDdXJyZW50Q2hhckluZGV4KCk7XG4gICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZU9mUHJvcGVydHlBdChjcC5sLCBjcC5jLCAnZmlsbCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJzb3IgcG9zaXRpb24gZm9yIHRoZSBnZXRDdXJyZW50Li4gZnVuY3Rpb25zXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0Q3VycmVudENoYXJJbmRleDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3Vyc29yUG9zaXRpb24gPSB0aGlzLmdldDJEQ3Vyc29yTG9jYXRpb24odGhpcy5zZWxlY3Rpb25TdGFydCwgdHJ1ZSksXG4gICAgICAgICAgY2hhckluZGV4ID0gY3Vyc29yUG9zaXRpb24uY2hhckluZGV4ID4gMCA/IGN1cnNvclBvc2l0aW9uLmNoYXJJbmRleCAtIDEgOiAwO1xuICAgICAgcmV0dXJuIHsgbDogY3Vyc29yUG9zaXRpb24ubGluZUluZGV4LCBjOiBjaGFySW5kZXggfTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZhYnJpYy5JVGV4dCBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuSVRleHRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBpbnZva2VkIHdpdGggbmV3IGluc3RhbmNlIGFzIGFyZ3VtZW50XG4gICAqL1xuICBmYWJyaWMuSVRleHQuZnJvbU9iamVjdCA9IGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgc3R5bGVzID0gZmFicmljLnV0aWwuc3R5bGVzRnJvbUFycmF5KG9iamVjdC5zdHlsZXMsIG9iamVjdC50ZXh0KTtcbiAgICAvL2NvcHkgb2JqZWN0IHRvIHByZXZlbnQgbXV0YXRpb25cbiAgICB2YXIgb2JqQ29weSA9IE9iamVjdC5hc3NpZ24oe30sIG9iamVjdCwgeyBzdHlsZXM6IHN0eWxlcyB9KTtcbiAgICBwYXJzZURlY29yYXRpb24ob2JqQ29weSk7XG4gICAgaWYgKG9iakNvcHkuc3R5bGVzKSB7XG4gICAgICBmb3IgKHZhciBpIGluIG9iakNvcHkuc3R5bGVzKSB7XG4gICAgICAgIGZvciAodmFyIGogaW4gb2JqQ29weS5zdHlsZXNbaV0pIHtcbiAgICAgICAgICBwYXJzZURlY29yYXRpb24ob2JqQ29weS5zdHlsZXNbaV1bal0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZhYnJpYy5PYmplY3QuX2Zyb21PYmplY3QoJ0lUZXh0Jywgb2JqQ29weSwgY2FsbGJhY2ssICd0ZXh0Jyk7XG4gIH07XG59KSgpO1xuXG5cbihmdW5jdGlvbigpIHtcblxuICB2YXIgY2xvbmUgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmU7XG5cbiAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuSVRleHQucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5JVGV4dC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYWxsIHRoZSBpbnRlcmFjdGl2ZSBiZWhhdmlvciBvZiBJVGV4dFxuICAgICAqL1xuICAgIGluaXRCZWhhdmlvcjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmluaXRBZGRlZEhhbmRsZXIoKTtcbiAgICAgIHRoaXMuaW5pdFJlbW92ZWRIYW5kbGVyKCk7XG4gICAgICB0aGlzLmluaXRDdXJzb3JTZWxlY3Rpb25IYW5kbGVycygpO1xuICAgICAgdGhpcy5pbml0RG91YmxlQ2xpY2tTaW11bGF0aW9uKCk7XG4gICAgICB0aGlzLm1vdXNlTW92ZUhhbmRsZXIgPSB0aGlzLm1vdXNlTW92ZUhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB9LFxuXG4gICAgb25EZXNlbGVjdDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmlzRWRpdGluZyAmJiB0aGlzLmV4aXRFZGl0aW5nKCk7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIFwiYWRkZWRcIiBldmVudCBoYW5kbGVyXG4gICAgICovXG4gICAgaW5pdEFkZGVkSGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5vbignYWRkZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNhbnZhcyA9IF90aGlzLmNhbnZhcztcbiAgICAgICAgaWYgKGNhbnZhcykge1xuICAgICAgICAgIGlmICghY2FudmFzLl9oYXNJVGV4dEhhbmRsZXJzKSB7XG4gICAgICAgICAgICBjYW52YXMuX2hhc0lUZXh0SGFuZGxlcnMgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMuX2luaXRDYW52YXNIYW5kbGVycyhjYW52YXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYW52YXMuX2lUZXh0SW5zdGFuY2VzID0gY2FudmFzLl9pVGV4dEluc3RhbmNlcyB8fCBbXTtcbiAgICAgICAgICBjYW52YXMuX2lUZXh0SW5zdGFuY2VzLnB1c2goX3RoaXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgaW5pdFJlbW92ZWRIYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLm9uKCdyZW1vdmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjYW52YXMgPSBfdGhpcy5jYW52YXM7XG4gICAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgICBjYW52YXMuX2lUZXh0SW5zdGFuY2VzID0gY2FudmFzLl9pVGV4dEluc3RhbmNlcyB8fCBbXTtcbiAgICAgICAgICBmYWJyaWMudXRpbC5yZW1vdmVGcm9tQXJyYXkoY2FudmFzLl9pVGV4dEluc3RhbmNlcywgX3RoaXMpO1xuICAgICAgICAgIGlmIChjYW52YXMuX2lUZXh0SW5zdGFuY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY2FudmFzLl9oYXNJVGV4dEhhbmRsZXJzID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5fcmVtb3ZlQ2FudmFzSGFuZGxlcnMoY2FudmFzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZWdpc3RlciBjYW52YXMgZXZlbnQgdG8gbWFuYWdlIGV4aXRpbmcgb24gb3RoZXIgaW5zdGFuY2VzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaW5pdENhbnZhc0hhbmRsZXJzOiBmdW5jdGlvbihjYW52YXMpIHtcbiAgICAgIGNhbnZhcy5fbW91c2VVcElUZXh0SGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoY2FudmFzLl9pVGV4dEluc3RhbmNlcykge1xuICAgICAgICAgIGNhbnZhcy5faVRleHRJbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIG9iai5fX2lzTW91c2Vkb3duID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjYW52YXMub24oJ21vdXNlOnVwJywgY2FudmFzLl9tb3VzZVVwSVRleHRIYW5kbGVyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIGNhbnZhcyBldmVudCB0byBtYW5hZ2UgZXhpdGluZyBvbiBvdGhlciBpbnN0YW5jZXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZW1vdmVDYW52YXNIYW5kbGVyczogZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgICBjYW52YXMub2ZmKCdtb3VzZTp1cCcsIGNhbnZhcy5fbW91c2VVcElUZXh0SGFuZGxlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3RpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fY3VycmVudFRpY2tTdGF0ZSA9IHRoaXMuX2FuaW1hdGVDdXJzb3IodGhpcywgMSwgdGhpcy5jdXJzb3JEdXJhdGlvbiwgJ19vblRpY2tDb21wbGV0ZScpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9hbmltYXRlQ3Vyc29yOiBmdW5jdGlvbihvYmosIHRhcmdldE9wYWNpdHksIGR1cmF0aW9uLCBjb21wbGV0ZU1ldGhvZCkge1xuXG4gICAgICB2YXIgdGlja1N0YXRlO1xuXG4gICAgICB0aWNrU3RhdGUgPSB7XG4gICAgICAgIGlzQWJvcnRlZDogZmFsc2UsXG4gICAgICAgIGFib3J0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLmlzQWJvcnRlZCA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBvYmouYW5pbWF0ZSgnX2N1cnJlbnRDdXJzb3JPcGFjaXR5JywgdGFyZ2V0T3BhY2l0eSwge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICghdGlja1N0YXRlLmlzQWJvcnRlZCkge1xuICAgICAgICAgICAgb2JqW2NvbXBsZXRlTWV0aG9kXSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIHdlIGRvIG5vdCB3YW50IHRvIGFuaW1hdGUgYSBzZWxlY3Rpb24sIG9ubHkgY3Vyc29yXG4gICAgICAgICAgaWYgKG9iai5jYW52YXMgJiYgb2JqLnNlbGVjdGlvblN0YXJ0ID09PSBvYmouc2VsZWN0aW9uRW5kKSB7XG4gICAgICAgICAgICBvYmoucmVuZGVyQ3Vyc29yT3JTZWxlY3Rpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFib3J0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGlja1N0YXRlLmlzQWJvcnRlZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGlja1N0YXRlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9vblRpY2tDb21wbGV0ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9jdXJzb3JUaW1lb3V0MSkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fY3Vyc29yVGltZW91dDEpO1xuICAgICAgfVxuICAgICAgdGhpcy5fY3Vyc29yVGltZW91dDEgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5fY3VycmVudFRpY2tDb21wbGV0ZVN0YXRlID0gX3RoaXMuX2FuaW1hdGVDdXJzb3IoX3RoaXMsIDAsIHRoaXMuY3Vyc29yRHVyYXRpb24gLyAyLCAnX3RpY2snKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGRlbGF5ZWQgY3Vyc29yXG4gICAgICovXG4gICAgaW5pdERlbGF5ZWRDdXJzb3I6IGZ1bmN0aW9uKHJlc3RhcnQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgZGVsYXkgPSByZXN0YXJ0ID8gMCA6IHRoaXMuY3Vyc29yRGVsYXk7XG5cbiAgICAgIHRoaXMuYWJvcnRDdXJzb3JBbmltYXRpb24oKTtcbiAgICAgIHRoaXMuX2N1cnJlbnRDdXJzb3JPcGFjaXR5ID0gMTtcbiAgICAgIHRoaXMuX2N1cnNvclRpbWVvdXQyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3RpY2soKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWJvcnRzIGN1cnNvciBhbmltYXRpb24gYW5kIGNsZWFycyBhbGwgdGltZW91dHNcbiAgICAgKi9cbiAgICBhYm9ydEN1cnNvckFuaW1hdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2hvdWxkQ2xlYXIgPSB0aGlzLl9jdXJyZW50VGlja1N0YXRlIHx8IHRoaXMuX2N1cnJlbnRUaWNrQ29tcGxldGVTdGF0ZSxcbiAgICAgICAgICBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICAgIHRoaXMuX2N1cnJlbnRUaWNrU3RhdGUgJiYgdGhpcy5fY3VycmVudFRpY2tTdGF0ZS5hYm9ydCgpO1xuICAgICAgdGhpcy5fY3VycmVudFRpY2tDb21wbGV0ZVN0YXRlICYmIHRoaXMuX2N1cnJlbnRUaWNrQ29tcGxldGVTdGF0ZS5hYm9ydCgpO1xuXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fY3Vyc29yVGltZW91dDEpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2N1cnNvclRpbWVvdXQyKTtcblxuICAgICAgdGhpcy5fY3VycmVudEN1cnNvck9wYWNpdHkgPSAwO1xuICAgICAgLy8gdG8gY2xlYXIganVzdCBpdGV4dCBhcmVhIHdlIG5lZWQgdG8gdHJhbnNmb3JtIHRoZSBjb250ZXh0XG4gICAgICAvLyBpdCBtYXkgbm90IGJlIHdvcnRoIGl0XG4gICAgICBpZiAoc2hvdWxkQ2xlYXIgJiYgY2FudmFzKSB7XG4gICAgICAgIGNhbnZhcy5jbGVhckNvbnRleHQoY2FudmFzLmNvbnRleHRUb3AgfHwgY2FudmFzLmNvbnRleHRDb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgZW50aXJlIHRleHRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuSVRleHR9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2VsZWN0QWxsOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSAwO1xuICAgICAgdGhpcy5zZWxlY3Rpb25FbmQgPSB0aGlzLl90ZXh0Lmxlbmd0aDtcbiAgICAgIHRoaXMuX2ZpcmVTZWxlY3Rpb25DaGFuZ2VkKCk7XG4gICAgICB0aGlzLl91cGRhdGVUZXh0YXJlYSgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc2VsZWN0ZWQgdGV4dFxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRTZWxlY3RlZFRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RleHQuc2xpY2UodGhpcy5zZWxlY3Rpb25TdGFydCwgdGhpcy5zZWxlY3Rpb25FbmQpLmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGaW5kIG5ldyBzZWxlY3Rpb24gaW5kZXggcmVwcmVzZW50aW5nIHN0YXJ0IG9mIGN1cnJlbnQgd29yZCBhY2NvcmRpbmcgdG8gY3VycmVudCBzZWxlY3Rpb24gaW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRGcm9tIEN1cnJlbnQgc2VsZWN0aW9uIGluZGV4XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBOZXcgc2VsZWN0aW9uIGluZGV4XG4gICAgICovXG4gICAgZmluZFdvcmRCb3VuZGFyeUxlZnQ6IGZ1bmN0aW9uKHN0YXJ0RnJvbSkge1xuICAgICAgdmFyIG9mZnNldCA9IDAsIGluZGV4ID0gc3RhcnRGcm9tIC0gMTtcblxuICAgICAgLy8gcmVtb3ZlIHNwYWNlIGJlZm9yZSBjdXJzb3IgZmlyc3RcbiAgICAgIGlmICh0aGlzLl9yZVNwYWNlLnRlc3QodGhpcy5fdGV4dFtpbmRleF0pKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLl9yZVNwYWNlLnRlc3QodGhpcy5fdGV4dFtpbmRleF0pKSB7XG4gICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKC9cXFMvLnRlc3QodGhpcy5fdGV4dFtpbmRleF0pICYmIGluZGV4ID4gLTEpIHtcbiAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGFydEZyb20gLSBvZmZzZXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpbmQgbmV3IHNlbGVjdGlvbiBpbmRleCByZXByZXNlbnRpbmcgZW5kIG9mIGN1cnJlbnQgd29yZCBhY2NvcmRpbmcgdG8gY3VycmVudCBzZWxlY3Rpb24gaW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRGcm9tIEN1cnJlbnQgc2VsZWN0aW9uIGluZGV4XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBOZXcgc2VsZWN0aW9uIGluZGV4XG4gICAgICovXG4gICAgZmluZFdvcmRCb3VuZGFyeVJpZ2h0OiBmdW5jdGlvbihzdGFydEZyb20pIHtcbiAgICAgIHZhciBvZmZzZXQgPSAwLCBpbmRleCA9IHN0YXJ0RnJvbTtcblxuICAgICAgLy8gcmVtb3ZlIHNwYWNlIGFmdGVyIGN1cnNvciBmaXJzdFxuICAgICAgaWYgKHRoaXMuX3JlU3BhY2UudGVzdCh0aGlzLl90ZXh0W2luZGV4XSkpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuX3JlU3BhY2UudGVzdCh0aGlzLl90ZXh0W2luZGV4XSkpIHtcbiAgICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAoL1xcUy8udGVzdCh0aGlzLl90ZXh0W2luZGV4XSkgJiYgaW5kZXggPCB0aGlzLl90ZXh0Lmxlbmd0aCkge1xuICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXJ0RnJvbSArIG9mZnNldDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmluZCBuZXcgc2VsZWN0aW9uIGluZGV4IHJlcHJlc2VudGluZyBzdGFydCBvZiBjdXJyZW50IGxpbmUgYWNjb3JkaW5nIHRvIGN1cnJlbnQgc2VsZWN0aW9uIGluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0RnJvbSBDdXJyZW50IHNlbGVjdGlvbiBpbmRleFxuICAgICAqIEByZXR1cm4ge051bWJlcn0gTmV3IHNlbGVjdGlvbiBpbmRleFxuICAgICAqL1xuICAgIGZpbmRMaW5lQm91bmRhcnlMZWZ0OiBmdW5jdGlvbihzdGFydEZyb20pIHtcbiAgICAgIHZhciBvZmZzZXQgPSAwLCBpbmRleCA9IHN0YXJ0RnJvbSAtIDE7XG5cbiAgICAgIHdoaWxlICghL1xcbi8udGVzdCh0aGlzLl90ZXh0W2luZGV4XSkgJiYgaW5kZXggPiAtMSkge1xuICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXJ0RnJvbSAtIG9mZnNldDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmluZCBuZXcgc2VsZWN0aW9uIGluZGV4IHJlcHJlc2VudGluZyBlbmQgb2YgY3VycmVudCBsaW5lIGFjY29yZGluZyB0byBjdXJyZW50IHNlbGVjdGlvbiBpbmRleFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydEZyb20gQ3VycmVudCBzZWxlY3Rpb24gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IE5ldyBzZWxlY3Rpb24gaW5kZXhcbiAgICAgKi9cbiAgICBmaW5kTGluZUJvdW5kYXJ5UmlnaHQ6IGZ1bmN0aW9uKHN0YXJ0RnJvbSkge1xuICAgICAgdmFyIG9mZnNldCA9IDAsIGluZGV4ID0gc3RhcnRGcm9tO1xuXG4gICAgICB3aGlsZSAoIS9cXG4vLnRlc3QodGhpcy5fdGV4dFtpbmRleF0pICYmIGluZGV4IDwgdGhpcy5fdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGFydEZyb20gKyBvZmZzZXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIGluZGV4IGNvcnJlc3BvbmRpbmcgdG8gYmVnaW5uaW5nIG9yIGVuZCBvZiBhIHdvcmRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2VsZWN0aW9uU3RhcnQgSW5kZXggb2YgYSBjaGFyYWN0ZXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGlyZWN0aW9uIDEgb3IgLTFcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEluZGV4IG9mIHRoZSBiZWdpbm5pbmcgb3IgZW5kIG9mIGEgd29yZFxuICAgICAqL1xuICAgIHNlYXJjaFdvcmRCb3VuZGFyeTogZnVuY3Rpb24oc2VsZWN0aW9uU3RhcnQsIGRpcmVjdGlvbikge1xuICAgICAgdmFyIHRleHQgPSB0aGlzLl90ZXh0LFxuICAgICAgICAgIGluZGV4ICAgICA9IHRoaXMuX3JlU3BhY2UudGVzdCh0ZXh0W3NlbGVjdGlvblN0YXJ0XSkgPyBzZWxlY3Rpb25TdGFydCAtIDEgOiBzZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICBfY2hhciAgICAgPSB0ZXh0W2luZGV4XSxcbiAgICAgICAgICAvLyB3cm9uZ1xuICAgICAgICAgIHJlTm9uV29yZCA9IGZhYnJpYy5yZU5vbldvcmQ7XG5cbiAgICAgIHdoaWxlICghcmVOb25Xb3JkLnRlc3QoX2NoYXIpICYmIGluZGV4ID4gMCAmJiBpbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgICAgIGluZGV4ICs9IGRpcmVjdGlvbjtcbiAgICAgICAgX2NoYXIgPSB0ZXh0W2luZGV4XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZU5vbldvcmQudGVzdChfY2hhcikpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyZWN0aW9uID09PSAxID8gMCA6IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgYSB3b3JkIGJhc2VkIG9uIHRoZSBpbmRleFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZWxlY3Rpb25TdGFydCBJbmRleCBvZiBhIGNoYXJhY3RlclxuICAgICAqL1xuICAgIHNlbGVjdFdvcmQ6IGZ1bmN0aW9uKHNlbGVjdGlvblN0YXJ0KSB7XG4gICAgICBzZWxlY3Rpb25TdGFydCA9IHNlbGVjdGlvblN0YXJ0IHx8IHRoaXMuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICB2YXIgbmV3U2VsZWN0aW9uU3RhcnQgPSB0aGlzLnNlYXJjaFdvcmRCb3VuZGFyeShzZWxlY3Rpb25TdGFydCwgLTEpLCAvKiBzZWFyY2ggYmFja3dhcmRzICovXG4gICAgICAgICAgbmV3U2VsZWN0aW9uRW5kID0gdGhpcy5zZWFyY2hXb3JkQm91bmRhcnkoc2VsZWN0aW9uU3RhcnQsIDEpOyAvKiBzZWFyY2ggZm9yd2FyZCAqL1xuXG4gICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gbmV3U2VsZWN0aW9uU3RhcnQ7XG4gICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IG5ld1NlbGVjdGlvbkVuZDtcbiAgICAgIHRoaXMuX2ZpcmVTZWxlY3Rpb25DaGFuZ2VkKCk7XG4gICAgICB0aGlzLl91cGRhdGVUZXh0YXJlYSgpO1xuICAgICAgdGhpcy5yZW5kZXJDdXJzb3JPclNlbGVjdGlvbigpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIGEgbGluZSBiYXNlZCBvbiB0aGUgaW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2VsZWN0aW9uU3RhcnQgSW5kZXggb2YgYSBjaGFyYWN0ZXJcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuSVRleHR9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2VsZWN0TGluZTogZnVuY3Rpb24oc2VsZWN0aW9uU3RhcnQpIHtcbiAgICAgIHNlbGVjdGlvblN0YXJ0ID0gc2VsZWN0aW9uU3RhcnQgfHwgdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICAgIHZhciBuZXdTZWxlY3Rpb25TdGFydCA9IHRoaXMuZmluZExpbmVCb3VuZGFyeUxlZnQoc2VsZWN0aW9uU3RhcnQpLFxuICAgICAgICAgIG5ld1NlbGVjdGlvbkVuZCA9IHRoaXMuZmluZExpbmVCb3VuZGFyeVJpZ2h0KHNlbGVjdGlvblN0YXJ0KTtcblxuICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IG5ld1NlbGVjdGlvblN0YXJ0O1xuICAgICAgdGhpcy5zZWxlY3Rpb25FbmQgPSBuZXdTZWxlY3Rpb25FbmQ7XG4gICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlZCgpO1xuICAgICAgdGhpcy5fdXBkYXRlVGV4dGFyZWEoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFbnRlcnMgZWRpdGluZyBzdGF0ZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5JVGV4dH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBlbnRlckVkaXRpbmc6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICh0aGlzLmlzRWRpdGluZyB8fCAhdGhpcy5lZGl0YWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgICB0aGlzLmNhbnZhcy5jYWxjT2Zmc2V0KCk7XG4gICAgICAgIHRoaXMuZXhpdEVkaXRpbmdPbk90aGVycyh0aGlzLmNhbnZhcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNFZGl0aW5nID0gdHJ1ZTtcblxuICAgICAgdGhpcy5pbml0SGlkZGVuVGV4dGFyZWEoZSk7XG4gICAgICB0aGlzLmhpZGRlblRleHRhcmVhLmZvY3VzKCk7XG4gICAgICB0aGlzLmhpZGRlblRleHRhcmVhLnZhbHVlID0gdGhpcy50ZXh0O1xuICAgICAgdGhpcy5fdXBkYXRlVGV4dGFyZWEoKTtcbiAgICAgIHRoaXMuX3NhdmVFZGl0aW5nUHJvcHMoKTtcbiAgICAgIHRoaXMuX3NldEVkaXRpbmdQcm9wcygpO1xuICAgICAgdGhpcy5fdGV4dEJlZm9yZUVkaXQgPSB0aGlzLnRleHQ7XG5cbiAgICAgIHRoaXMuX3RpY2soKTtcbiAgICAgIHRoaXMuZmlyZSgnZWRpdGluZzplbnRlcmVkJyk7XG4gICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlZCgpO1xuICAgICAgaWYgKCF0aGlzLmNhbnZhcykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHRoaXMuY2FudmFzLmZpcmUoJ3RleHQ6ZWRpdGluZzplbnRlcmVkJywgeyB0YXJnZXQ6IHRoaXMgfSk7XG4gICAgICB0aGlzLmluaXRNb3VzZU1vdmVIYW5kbGVyKCk7XG4gICAgICB0aGlzLmNhbnZhcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgZXhpdEVkaXRpbmdPbk90aGVyczogZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgICBpZiAoY2FudmFzLl9pVGV4dEluc3RhbmNlcykge1xuICAgICAgICBjYW52YXMuX2lUZXh0SW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgb2JqLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgaWYgKG9iai5pc0VkaXRpbmcpIHtcbiAgICAgICAgICAgIG9iai5leGl0RWRpdGluZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIFwibW91c2Vtb3ZlXCIgZXZlbnQgaGFuZGxlclxuICAgICAqL1xuICAgIGluaXRNb3VzZU1vdmVIYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuY2FudmFzLm9uKCdtb3VzZTptb3ZlJywgdGhpcy5tb3VzZU1vdmVIYW5kbGVyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBtb3VzZU1vdmVIYW5kbGVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBpZiAoIXRoaXMuX19pc01vdXNlZG93biB8fCAhdGhpcy5pc0VkaXRpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyByZWdhaW4gZm9jdXNcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRoaXMuaGlkZGVuVGV4dGFyZWEgJiYgdGhpcy5oaWRkZW5UZXh0YXJlYS5mb2N1cygpO1xuXG4gICAgICB2YXIgbmV3U2VsZWN0aW9uU3RhcnQgPSB0aGlzLmdldFNlbGVjdGlvblN0YXJ0RnJvbVBvaW50ZXIob3B0aW9ucy5lKSxcbiAgICAgICAgICBjdXJyZW50U3RhcnQgPSB0aGlzLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgIGN1cnJlbnRFbmQgPSB0aGlzLnNlbGVjdGlvbkVuZDtcbiAgICAgIGlmIChcbiAgICAgICAgKG5ld1NlbGVjdGlvblN0YXJ0ICE9PSB0aGlzLl9fc2VsZWN0aW9uU3RhcnRPbk1vdXNlRG93biB8fCBjdXJyZW50U3RhcnQgPT09IGN1cnJlbnRFbmQpXG4gICAgICAgICYmXG4gICAgICAgIChjdXJyZW50U3RhcnQgPT09IG5ld1NlbGVjdGlvblN0YXJ0IHx8IGN1cnJlbnRFbmQgPT09IG5ld1NlbGVjdGlvblN0YXJ0KVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdTZWxlY3Rpb25TdGFydCA+IHRoaXMuX19zZWxlY3Rpb25TdGFydE9uTW91c2VEb3duKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSB0aGlzLl9fc2VsZWN0aW9uU3RhcnRPbk1vdXNlRG93bjtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25FbmQgPSBuZXdTZWxlY3Rpb25TdGFydDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gbmV3U2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gdGhpcy5fX3NlbGVjdGlvblN0YXJ0T25Nb3VzZURvd247XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCAhPT0gY3VycmVudFN0YXJ0IHx8IHRoaXMuc2VsZWN0aW9uRW5kICE9PSBjdXJyZW50RW5kKSB7XG4gICAgICAgIHRoaXMucmVzdGFydEN1cnNvcklmTmVlZGVkKCk7XG4gICAgICAgIHRoaXMuX2ZpcmVTZWxlY3Rpb25DaGFuZ2VkKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVRleHRhcmVhKCk7XG4gICAgICAgIHRoaXMucmVuZGVyQ3Vyc29yT3JTZWxlY3Rpb24oKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0RWRpdGluZ1Byb3BzOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuaG92ZXJDdXJzb3IgPSAndGV4dCc7XG5cbiAgICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgICB0aGlzLmNhbnZhcy5kZWZhdWx0Q3Vyc29yID0gdGhpcy5jYW52YXMubW92ZUN1cnNvciA9ICd0ZXh0JztcbiAgICAgIH1cblxuICAgICAgdGhpcy5ib3JkZXJDb2xvciA9IHRoaXMuZWRpdGluZ0JvcmRlckNvbG9yO1xuICAgICAgdGhpcy5oYXNDb250cm9scyA9IHRoaXMuc2VsZWN0YWJsZSA9IGZhbHNlO1xuICAgICAgdGhpcy5sb2NrTW92ZW1lbnRYID0gdGhpcy5sb2NrTW92ZW1lbnRZID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY29udmVydCBmcm9tIHRleHRhcmVhIHRvIGdyYXBoZW1lIGluZGV4ZXNcbiAgICAgKi9cbiAgICBmcm9tU3RyaW5nVG9HcmFwaGVtZVNlbGVjdGlvbjogZnVuY3Rpb24oc3RhcnQsIGVuZCwgdGV4dCkge1xuICAgICAgdmFyIHNtYWxsZXJUZXh0U3RhcnQgPSB0ZXh0LnNsaWNlKDAsIHN0YXJ0KSxcbiAgICAgICAgICBncmFwaGVtZVN0YXJ0ID0gZmFicmljLnV0aWwuc3RyaW5nLmdyYXBoZW1lU3BsaXQoc21hbGxlclRleHRTdGFydCkubGVuZ3RoO1xuICAgICAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcbiAgICAgICAgcmV0dXJuIHsgc2VsZWN0aW9uU3RhcnQ6IGdyYXBoZW1lU3RhcnQsIHNlbGVjdGlvbkVuZDogZ3JhcGhlbWVTdGFydCB9O1xuICAgICAgfVxuICAgICAgdmFyIHNtYWxsZXJUZXh0RW5kID0gdGV4dC5zbGljZShzdGFydCwgZW5kKSxcbiAgICAgICAgICBncmFwaGVtZUVuZCA9IGZhYnJpYy51dGlsLnN0cmluZy5ncmFwaGVtZVNwbGl0KHNtYWxsZXJUZXh0RW5kKS5sZW5ndGg7XG4gICAgICByZXR1cm4geyBzZWxlY3Rpb25TdGFydDogZ3JhcGhlbWVTdGFydCwgc2VsZWN0aW9uRW5kOiBncmFwaGVtZVN0YXJ0ICsgZ3JhcGhlbWVFbmQgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY29udmVydCBmcm9tIGZhYnJpYyB0byB0ZXh0YXJlYSB2YWx1ZXNcbiAgICAgKi9cbiAgICBmcm9tR3JhcGhlbWVUb1N0cmluZ1NlbGVjdGlvbjogZnVuY3Rpb24oc3RhcnQsIGVuZCwgX3RleHQpIHtcbiAgICAgIHZhciBzbWFsbGVyVGV4dFN0YXJ0ID0gX3RleHQuc2xpY2UoMCwgc3RhcnQpLFxuICAgICAgICAgIGdyYXBoZW1lU3RhcnQgPSBzbWFsbGVyVGV4dFN0YXJ0LmpvaW4oJycpLmxlbmd0aDtcbiAgICAgIGlmIChzdGFydCA9PT0gZW5kKSB7XG4gICAgICAgIHJldHVybiB7IHNlbGVjdGlvblN0YXJ0OiBncmFwaGVtZVN0YXJ0LCBzZWxlY3Rpb25FbmQ6IGdyYXBoZW1lU3RhcnQgfTtcbiAgICAgIH1cbiAgICAgIHZhciBzbWFsbGVyVGV4dEVuZCA9IF90ZXh0LnNsaWNlKHN0YXJ0LCBlbmQpLFxuICAgICAgICAgIGdyYXBoZW1lRW5kID0gc21hbGxlclRleHRFbmQuam9pbignJykubGVuZ3RoO1xuICAgICAgcmV0dXJuIHsgc2VsZWN0aW9uU3RhcnQ6IGdyYXBoZW1lU3RhcnQsIHNlbGVjdGlvbkVuZDogZ3JhcGhlbWVTdGFydCArIGdyYXBoZW1lRW5kIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VwZGF0ZVRleHRhcmVhOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0Q2FjaGUgPSB7IH07XG4gICAgICBpZiAoIXRoaXMuaGlkZGVuVGV4dGFyZWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmluQ29tcG9zaXRpb25Nb2RlKSB7XG4gICAgICAgIHZhciBuZXdTZWxlY3Rpb24gPSB0aGlzLmZyb21HcmFwaGVtZVRvU3RyaW5nU2VsZWN0aW9uKHRoaXMuc2VsZWN0aW9uU3RhcnQsIHRoaXMuc2VsZWN0aW9uRW5kLCB0aGlzLl90ZXh0KTtcbiAgICAgICAgdGhpcy5oaWRkZW5UZXh0YXJlYS5zZWxlY3Rpb25TdGFydCA9IG5ld1NlbGVjdGlvbi5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgdGhpcy5oaWRkZW5UZXh0YXJlYS5zZWxlY3Rpb25FbmQgPSBuZXdTZWxlY3Rpb24uc2VsZWN0aW9uRW5kO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVUZXh0YXJlYVBvc2l0aW9uKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdXBkYXRlRnJvbVRleHRBcmVhOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5oaWRkZW5UZXh0YXJlYSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmN1cnNvck9mZnNldENhY2hlID0geyB9O1xuICAgICAgdGhpcy50ZXh0ID0gdGhpcy5oaWRkZW5UZXh0YXJlYS52YWx1ZTtcbiAgICAgIGlmICh0aGlzLl9zaG91bGRDbGVhckRpbWVuc2lvbkNhY2hlKCkpIHtcbiAgICAgICAgdGhpcy5pbml0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1NlbGVjdGlvbiA9IHRoaXMuZnJvbVN0cmluZ1RvR3JhcGhlbWVTZWxlY3Rpb24oXG4gICAgICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQsIHRoaXMuaGlkZGVuVGV4dGFyZWEuc2VsZWN0aW9uRW5kLCB0aGlzLmhpZGRlblRleHRhcmVhLnZhbHVlKTtcbiAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gdGhpcy5zZWxlY3Rpb25TdGFydCA9IG5ld1NlbGVjdGlvbi5zZWxlY3Rpb25FbmQ7XG4gICAgICBpZiAoIXRoaXMuaW5Db21wb3NpdGlvbk1vZGUpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IG5ld1NlbGVjdGlvbi5zZWxlY3Rpb25TdGFydDtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlVGV4dGFyZWFQb3NpdGlvbigpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHVwZGF0ZVRleHRhcmVhUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgPT09IHRoaXMuc2VsZWN0aW9uRW5kKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHRoaXMuX2NhbGNUZXh0YXJlYVBvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc3R5bGUubGVmdCA9IHN0eWxlLmxlZnQ7XG4gICAgICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc3R5bGUudG9wID0gc3R5bGUudG9wO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gc3R5bGUgY29udGFpbnMgc3R5bGUgZm9yIGhpZGRlblRleHRhcmVhXG4gICAgICovXG4gICAgX2NhbGNUZXh0YXJlYVBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5jYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogMSwgeTogMSB9O1xuICAgICAgfVxuICAgICAgdmFyIGRlc2lyZWRQb3NpdGlvbiA9IHRoaXMuaW5Db21wb3NpdGlvbk1vZGUgPyB0aGlzLmNvbXBvc2l0aW9uU3RhcnQgOiB0aGlzLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgIGJvdW5kYXJpZXMgPSB0aGlzLl9nZXRDdXJzb3JCb3VuZGFyaWVzKGRlc2lyZWRQb3NpdGlvbiksXG4gICAgICAgICAgY3Vyc29yTG9jYXRpb24gPSB0aGlzLmdldDJEQ3Vyc29yTG9jYXRpb24oZGVzaXJlZFBvc2l0aW9uKSxcbiAgICAgICAgICBsaW5lSW5kZXggPSBjdXJzb3JMb2NhdGlvbi5saW5lSW5kZXgsXG4gICAgICAgICAgY2hhckluZGV4ID0gY3Vyc29yTG9jYXRpb24uY2hhckluZGV4LFxuICAgICAgICAgIGNoYXJIZWlnaHQgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGxpbmVJbmRleCwgY2hhckluZGV4LCAnZm9udFNpemUnKSAqIHRoaXMubGluZUhlaWdodCxcbiAgICAgICAgICBsZWZ0T2Zmc2V0ID0gYm91bmRhcmllcy5sZWZ0T2Zmc2V0LFxuICAgICAgICAgIG0gPSB0aGlzLmNhbGNUcmFuc2Zvcm1NYXRyaXgoKSxcbiAgICAgICAgICBwID0ge1xuICAgICAgICAgICAgeDogYm91bmRhcmllcy5sZWZ0ICsgbGVmdE9mZnNldCxcbiAgICAgICAgICAgIHk6IGJvdW5kYXJpZXMudG9wICsgYm91bmRhcmllcy50b3BPZmZzZXQgKyBjaGFySGVpZ2h0XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXRpbmFTY2FsaW5nID0gdGhpcy5jYW52YXMuZ2V0UmV0aW5hU2NhbGluZygpLFxuICAgICAgICAgIHVwcGVyQ2FudmFzID0gdGhpcy5jYW52YXMudXBwZXJDYW52YXNFbCxcbiAgICAgICAgICB1cHBlckNhbnZhc1dpZHRoID0gdXBwZXJDYW52YXMud2lkdGggLyByZXRpbmFTY2FsaW5nLFxuICAgICAgICAgIHVwcGVyQ2FudmFzSGVpZ2h0ID0gdXBwZXJDYW52YXMuaGVpZ2h0IC8gcmV0aW5hU2NhbGluZyxcbiAgICAgICAgICBtYXhXaWR0aCA9IHVwcGVyQ2FudmFzV2lkdGggLSBjaGFySGVpZ2h0LFxuICAgICAgICAgIG1heEhlaWdodCA9IHVwcGVyQ2FudmFzSGVpZ2h0IC0gY2hhckhlaWdodCxcbiAgICAgICAgICBzY2FsZVggPSB1cHBlckNhbnZhcy5jbGllbnRXaWR0aCAvIHVwcGVyQ2FudmFzV2lkdGgsXG4gICAgICAgICAgc2NhbGVZID0gdXBwZXJDYW52YXMuY2xpZW50SGVpZ2h0IC8gdXBwZXJDYW52YXNIZWlnaHQ7XG5cbiAgICAgIHAgPSBmYWJyaWMudXRpbC50cmFuc2Zvcm1Qb2ludChwLCBtKTtcbiAgICAgIHAgPSBmYWJyaWMudXRpbC50cmFuc2Zvcm1Qb2ludChwLCB0aGlzLmNhbnZhcy52aWV3cG9ydFRyYW5zZm9ybSk7XG4gICAgICBwLnggKj0gc2NhbGVYO1xuICAgICAgcC55ICo9IHNjYWxlWTtcbiAgICAgIGlmIChwLnggPCAwKSB7XG4gICAgICAgIHAueCA9IDA7XG4gICAgICB9XG4gICAgICBpZiAocC54ID4gbWF4V2lkdGgpIHtcbiAgICAgICAgcC54ID0gbWF4V2lkdGg7XG4gICAgICB9XG4gICAgICBpZiAocC55IDwgMCkge1xuICAgICAgICBwLnkgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKHAueSA+IG1heEhlaWdodCkge1xuICAgICAgICBwLnkgPSBtYXhIZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZCBjYW52YXMgb2Zmc2V0IG9uIGRvY3VtZW50XG4gICAgICBwLnggKz0gdGhpcy5jYW52YXMuX29mZnNldC5sZWZ0O1xuICAgICAgcC55ICs9IHRoaXMuY2FudmFzLl9vZmZzZXQudG9wO1xuXG4gICAgICByZXR1cm4geyBsZWZ0OiBwLnggKyAncHgnLCB0b3A6IHAueSArICdweCcsIGZvbnRTaXplOiBjaGFySGVpZ2h0ICsgJ3B4JywgY2hhckhlaWdodDogY2hhckhlaWdodCB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zYXZlRWRpdGluZ1Byb3BzOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3NhdmVkUHJvcHMgPSB7XG4gICAgICAgIGhhc0NvbnRyb2xzOiB0aGlzLmhhc0NvbnRyb2xzLFxuICAgICAgICBib3JkZXJDb2xvcjogdGhpcy5ib3JkZXJDb2xvcixcbiAgICAgICAgbG9ja01vdmVtZW50WDogdGhpcy5sb2NrTW92ZW1lbnRYLFxuICAgICAgICBsb2NrTW92ZW1lbnRZOiB0aGlzLmxvY2tNb3ZlbWVudFksXG4gICAgICAgIGhvdmVyQ3Vyc29yOiB0aGlzLmhvdmVyQ3Vyc29yLFxuICAgICAgICBzZWxlY3RhYmxlOiB0aGlzLnNlbGVjdGFibGUsXG4gICAgICAgIGRlZmF1bHRDdXJzb3I6IHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLmRlZmF1bHRDdXJzb3IsXG4gICAgICAgIG1vdmVDdXJzb3I6IHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm1vdmVDdXJzb3JcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3Jlc3RvcmVFZGl0aW5nUHJvcHM6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLl9zYXZlZFByb3BzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5ob3ZlckN1cnNvciA9IHRoaXMuX3NhdmVkUHJvcHMuaG92ZXJDdXJzb3I7XG4gICAgICB0aGlzLmhhc0NvbnRyb2xzID0gdGhpcy5fc2F2ZWRQcm9wcy5oYXNDb250cm9scztcbiAgICAgIHRoaXMuYm9yZGVyQ29sb3IgPSB0aGlzLl9zYXZlZFByb3BzLmJvcmRlckNvbG9yO1xuICAgICAgdGhpcy5zZWxlY3RhYmxlID0gdGhpcy5fc2F2ZWRQcm9wcy5zZWxlY3RhYmxlO1xuICAgICAgdGhpcy5sb2NrTW92ZW1lbnRYID0gdGhpcy5fc2F2ZWRQcm9wcy5sb2NrTW92ZW1lbnRYO1xuICAgICAgdGhpcy5sb2NrTW92ZW1lbnRZID0gdGhpcy5fc2F2ZWRQcm9wcy5sb2NrTW92ZW1lbnRZO1xuXG4gICAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgICAgdGhpcy5jYW52YXMuZGVmYXVsdEN1cnNvciA9IHRoaXMuX3NhdmVkUHJvcHMuZGVmYXVsdEN1cnNvcjtcbiAgICAgICAgdGhpcy5jYW52YXMubW92ZUN1cnNvciA9IHRoaXMuX3NhdmVkUHJvcHMubW92ZUN1cnNvcjtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRXhpdHMgZnJvbSBlZGl0aW5nIHN0YXRlXG4gICAgICogQHJldHVybiB7ZmFicmljLklUZXh0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGV4aXRFZGl0aW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpc1RleHRDaGFuZ2VkID0gKHRoaXMuX3RleHRCZWZvcmVFZGl0ICE9PSB0aGlzLnRleHQpO1xuICAgICAgdmFyIGhpZGRlblRleHRhcmVhID0gdGhpcy5oaWRkZW5UZXh0YXJlYTtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuaXNFZGl0aW5nID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gdGhpcy5zZWxlY3Rpb25TdGFydDtcblxuICAgICAgaWYgKGhpZGRlblRleHRhcmVhKSB7XG4gICAgICAgIGhpZGRlblRleHRhcmVhLmJsdXIgJiYgaGlkZGVuVGV4dGFyZWEuYmx1cigpO1xuICAgICAgICBoaWRkZW5UZXh0YXJlYS5wYXJlbnROb2RlICYmIGhpZGRlblRleHRhcmVhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaGlkZGVuVGV4dGFyZWEpO1xuICAgICAgfVxuICAgICAgdGhpcy5oaWRkZW5UZXh0YXJlYSA9IG51bGw7XG4gICAgICB0aGlzLmFib3J0Q3Vyc29yQW5pbWF0aW9uKCk7XG4gICAgICB0aGlzLl9yZXN0b3JlRWRpdGluZ1Byb3BzKCk7XG4gICAgICB0aGlzLl9jdXJyZW50Q3Vyc29yT3BhY2l0eSA9IDA7XG4gICAgICBpZiAodGhpcy5fc2hvdWxkQ2xlYXJEaW1lbnNpb25DYWNoZSgpKSB7XG4gICAgICAgIHRoaXMuaW5pdERpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5zZXRDb29yZHMoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZmlyZSgnZWRpdGluZzpleGl0ZWQnKTtcbiAgICAgIGlzVGV4dENoYW5nZWQgJiYgdGhpcy5maXJlKCdtb2RpZmllZCcpO1xuICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgIHRoaXMuY2FudmFzLm9mZignbW91c2U6bW92ZScsIHRoaXMubW91c2VNb3ZlSGFuZGxlcik7XG4gICAgICAgIHRoaXMuY2FudmFzLmZpcmUoJ3RleHQ6ZWRpdGluZzpleGl0ZWQnLCB7IHRhcmdldDogdGhpcyB9KTtcbiAgICAgICAgaXNUZXh0Q2hhbmdlZCAmJiB0aGlzLmNhbnZhcy5maXJlKCdvYmplY3Q6bW9kaWZpZWQnLCB7IHRhcmdldDogdGhpcyB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZW1vdmVFeHRyYW5lb3VzU3R5bGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gdGhpcy5zdHlsZXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90ZXh0TGluZXNbcHJvcF0pIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5zdHlsZXNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIGFuZCByZWZsb3cgYSBzdHlsZSBibG9jayBmcm9tIHN0YXJ0IHRvIGVuZC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnQgbGluZWFyIHN0YXJ0IHBvc2l0aW9uIGZvciByZW1vdmFsIChpbmNsdWRlZCBpbiByZW1vdmFsKVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmQgbGluZWFyIGVuZCBwb3NpdGlvbiBmb3IgcmVtb3ZhbCAoIGV4Y2x1ZGVkIGZyb20gcmVtb3ZhbCApXG4gICAgICovXG4gICAgcmVtb3ZlU3R5bGVGcm9tVG86IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBjdXJzb3JTdGFydCA9IHRoaXMuZ2V0MkRDdXJzb3JMb2NhdGlvbihzdGFydCwgdHJ1ZSksXG4gICAgICAgICAgY3Vyc29yRW5kID0gdGhpcy5nZXQyREN1cnNvckxvY2F0aW9uKGVuZCwgdHJ1ZSksXG4gICAgICAgICAgbGluZVN0YXJ0ID0gY3Vyc29yU3RhcnQubGluZUluZGV4LFxuICAgICAgICAgIGNoYXJTdGFydCA9IGN1cnNvclN0YXJ0LmNoYXJJbmRleCxcbiAgICAgICAgICBsaW5lRW5kID0gY3Vyc29yRW5kLmxpbmVJbmRleCxcbiAgICAgICAgICBjaGFyRW5kID0gY3Vyc29yRW5kLmNoYXJJbmRleCxcbiAgICAgICAgICBpLCBzdHlsZU9iajtcbiAgICAgIGlmIChsaW5lU3RhcnQgIT09IGxpbmVFbmQpIHtcbiAgICAgICAgLy8gc3RlcDEgcmVtb3ZlIHRoZSB0cmFpbGluZyBvZiBsaW5lU3RhcnRcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVzW2xpbmVTdGFydF0pIHtcbiAgICAgICAgICBmb3IgKGkgPSBjaGFyU3RhcnQ7IGkgPCB0aGlzLl91bndyYXBwZWRUZXh0TGluZXNbbGluZVN0YXJ0XS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3R5bGVzW2xpbmVTdGFydF1baV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHN0ZXAyIG1vdmUgdGhlIHRyYWlsaW5nIG9mIGxpbmVFbmQgdG8gbGluZVN0YXJ0IGlmIG5lZWRlZFxuICAgICAgICBpZiAodGhpcy5zdHlsZXNbbGluZUVuZF0pIHtcbiAgICAgICAgICBmb3IgKGkgPSBjaGFyRW5kOyBpIDwgdGhpcy5fdW53cmFwcGVkVGV4dExpbmVzW2xpbmVFbmRdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzdHlsZU9iaiA9IHRoaXMuc3R5bGVzW2xpbmVFbmRdW2ldO1xuICAgICAgICAgICAgaWYgKHN0eWxlT2JqKSB7XG4gICAgICAgICAgICAgIHRoaXMuc3R5bGVzW2xpbmVTdGFydF0gfHwgKHRoaXMuc3R5bGVzW2xpbmVTdGFydF0gPSB7IH0pO1xuICAgICAgICAgICAgICB0aGlzLnN0eWxlc1tsaW5lU3RhcnRdW2NoYXJTdGFydCArIGkgLSBjaGFyRW5kXSA9IHN0eWxlT2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBzdGVwMyBkZXRlY3RzIGxpbmVzIHdpbGwgYmUgY29tcGxldGVseSByZW1vdmVkLlxuICAgICAgICBmb3IgKGkgPSBsaW5lU3RhcnQgKyAxOyBpIDw9IGxpbmVFbmQ7IGkrKykge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0eWxlc1tpXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdGVwNCBzaGlmdCByZW1haW5pbmcgbGluZXMuXG4gICAgICAgIHRoaXMuc2hpZnRMaW5lU3R5bGVzKGxpbmVFbmQsIGxpbmVTdGFydCAtIGxpbmVFbmQpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIHJlbW92ZSBhbmQgc2hpZnQgbGVmdCBvbiB0aGUgc2FtZSBsaW5lXG4gICAgICAgIGlmICh0aGlzLnN0eWxlc1tsaW5lU3RhcnRdKSB7XG4gICAgICAgICAgc3R5bGVPYmogPSB0aGlzLnN0eWxlc1tsaW5lU3RhcnRdO1xuICAgICAgICAgIHZhciBkaWZmID0gY2hhckVuZCAtIGNoYXJTdGFydCwgbnVtZXJpY0NoYXIsIF9jaGFyO1xuICAgICAgICAgIGZvciAoaSA9IGNoYXJTdGFydDsgaSA8IGNoYXJFbmQ7IGkrKykge1xuICAgICAgICAgICAgZGVsZXRlIHN0eWxlT2JqW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKF9jaGFyIGluIHRoaXMuc3R5bGVzW2xpbmVTdGFydF0pIHtcbiAgICAgICAgICAgIG51bWVyaWNDaGFyID0gcGFyc2VJbnQoX2NoYXIsIDEwKTtcbiAgICAgICAgICAgIGlmIChudW1lcmljQ2hhciA+PSBjaGFyRW5kKSB7XG4gICAgICAgICAgICAgIHN0eWxlT2JqW251bWVyaWNDaGFyIC0gZGlmZl0gPSBzdHlsZU9ialtfY2hhcl07XG4gICAgICAgICAgICAgIGRlbGV0ZSBzdHlsZU9ialtfY2hhcl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNoaWZ0cyBsaW5lIHN0eWxlcyB1cCBvciBkb3duXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCBJbmRleCBvZiBhIGxpbmVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IENhbiBhbnkgbnVtYmVyP1xuICAgICAqL1xuICAgIHNoaWZ0TGluZVN0eWxlczogZnVuY3Rpb24obGluZUluZGV4LCBvZmZzZXQpIHtcbiAgICAgIC8vIHNoaWZ0IGFsbCBsaW5lIHN0eWxlcyBieSBvZmZzZXQgdXB3YXJkIG9yIGRvd253YXJkXG4gICAgICAvLyBkbyBub3QgY2xvbmUgZGVlcC4gd2UgbmVlZCBuZXcgYXJyYXksIG5vdCBuZXcgc3R5bGUgb2JqZWN0c1xuICAgICAgdmFyIGNsb25lZFN0eWxlcyA9IGNsb25lKHRoaXMuc3R5bGVzKTtcbiAgICAgIGZvciAodmFyIGxpbmUgaW4gdGhpcy5zdHlsZXMpIHtcbiAgICAgICAgdmFyIG51bWVyaWNMaW5lID0gcGFyc2VJbnQobGluZSwgMTApO1xuICAgICAgICBpZiAobnVtZXJpY0xpbmUgPiBsaW5lSW5kZXgpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlc1tudW1lcmljTGluZSArIG9mZnNldF0gPSBjbG9uZWRTdHlsZXNbbnVtZXJpY0xpbmVdO1xuICAgICAgICAgIGlmICghY2xvbmVkU3R5bGVzW251bWVyaWNMaW5lIC0gb2Zmc2V0XSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3R5bGVzW251bWVyaWNMaW5lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVzdGFydEN1cnNvcklmTmVlZGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5fY3VycmVudFRpY2tTdGF0ZSB8fCB0aGlzLl9jdXJyZW50VGlja1N0YXRlLmlzQWJvcnRlZFxuICAgICAgICB8fCAhdGhpcy5fY3VycmVudFRpY2tDb21wbGV0ZVN0YXRlIHx8IHRoaXMuX2N1cnJlbnRUaWNrQ29tcGxldGVTdGF0ZS5pc0Fib3J0ZWRcbiAgICAgICkge1xuICAgICAgICB0aGlzLmluaXREZWxheWVkQ3Vyc29yKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBpbnNlcnRpb24gb2YgbW9yZSBjb25zZWN1dGl2ZSBzdHlsZSBsaW5lcyBmb3Igd2hlbiBvbmUgb3IgbW9yZVxuICAgICAqIG5ld2xpbmVzIGdldHMgYWRkZWQgdG8gdGhlIHRleHQuIFNpbmNlIGN1cnJlbnQgc3R5bGUgbmVlZHMgdG8gYmUgc2hpZnRlZFxuICAgICAqIGZpcnN0IHdlIHNoaWZ0IHRoZSBjdXJyZW50IHN0eWxlIG9mIHRoZSBudW1iZXIgbGluZXMgbmVlZGVkLCB0aGVuIHdlIGFkZFxuICAgICAqIG5ldyBsaW5lcyBmcm9tIHRoZSBsYXN0IHRvIHRoZSBmaXJzdC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4IEluZGV4IG9mIGEgbGluZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFySW5kZXggSW5kZXggb2YgYSBjaGFyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHF0eSBudW1iZXIgb2YgbGluZXMgdG8gYWRkXG4gICAgICogQHBhcmFtIHtBcnJheX0gY29waWVkU3R5bGUgQXJyYXkgb2Ygb2JqZWN0cyBzdHlsZXNcbiAgICAgKi9cbiAgICBpbnNlcnROZXdsaW5lU3R5bGVPYmplY3Q6IGZ1bmN0aW9uKGxpbmVJbmRleCwgY2hhckluZGV4LCBxdHksIGNvcGllZFN0eWxlKSB7XG4gICAgICB2YXIgY3VycmVudENoYXJTdHlsZSxcbiAgICAgICAgICBuZXdMaW5lU3R5bGVzID0ge30sXG4gICAgICAgICAgc29tZXRoaW5nQWRkZWQgPSBmYWxzZSxcbiAgICAgICAgICBpc0VuZE9mTGluZSA9IHRoaXMuX3Vud3JhcHBlZFRleHRMaW5lc1tsaW5lSW5kZXhdLmxlbmd0aCA9PT0gY2hhckluZGV4O1xuXG4gICAgICBxdHkgfHwgKHF0eSA9IDEpO1xuICAgICAgdGhpcy5zaGlmdExpbmVTdHlsZXMobGluZUluZGV4LCBxdHkpO1xuICAgICAgaWYgKHRoaXMuc3R5bGVzW2xpbmVJbmRleF0pIHtcbiAgICAgICAgY3VycmVudENoYXJTdHlsZSA9IHRoaXMuc3R5bGVzW2xpbmVJbmRleF1bY2hhckluZGV4ID09PSAwID8gY2hhckluZGV4IDogY2hhckluZGV4IC0gMV07XG4gICAgICB9XG4gICAgICAvLyB3ZSBjbG9uZSBzdHlsZXMgb2YgYWxsIGNoYXJzXG4gICAgICAvLyBhZnRlciBjdXJzb3Igb250byB0aGUgY3VycmVudCBsaW5lXG4gICAgICBmb3IgKHZhciBpbmRleCBpbiB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdKSB7XG4gICAgICAgIHZhciBudW1JbmRleCA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgICAgIGlmIChudW1JbmRleCA+PSBjaGFySW5kZXgpIHtcbiAgICAgICAgICBzb21ldGhpbmdBZGRlZCA9IHRydWU7XG4gICAgICAgICAgbmV3TGluZVN0eWxlc1tudW1JbmRleCAtIGNoYXJJbmRleF0gPSB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdW2luZGV4XTtcbiAgICAgICAgICAvLyByZW1vdmUgbGluZXMgZnJvbSB0aGUgcHJldmlvdXMgbGluZSBzaW5jZSB0aGV5J3JlIG9uIGEgbmV3IGxpbmUgbm93XG4gICAgICAgICAgaWYgKCEoaXNFbmRPZkxpbmUgJiYgY2hhckluZGV4ID09PSAwKSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3R5bGVzW2xpbmVJbmRleF1baW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN0eWxlQ2FycmllZE92ZXIgPSBmYWxzZTtcbiAgICAgIGlmIChzb21ldGhpbmdBZGRlZCAmJiAhaXNFbmRPZkxpbmUpIHtcbiAgICAgICAgLy8gaWYgaXMgZW5kIG9mIGxpbmUsIHRoZSBleHRyYSBzdHlsZSB3ZSBjb3BpZWRcbiAgICAgICAgLy8gaXMgcHJvYmFibHkgbm90IHNvbWV0aGluZyB3ZSB3YW50XG4gICAgICAgIHRoaXMuc3R5bGVzW2xpbmVJbmRleCArIHF0eV0gPSBuZXdMaW5lU3R5bGVzO1xuICAgICAgICBzdHlsZUNhcnJpZWRPdmVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHlsZUNhcnJpZWRPdmVyKSB7XG4gICAgICAgIC8vIHNraXAgdGhlIGxhc3QgbGluZSBvZiBzaW5jZSB3ZSBhbHJlYWR5IHByZXBhcmVkIGl0LlxuICAgICAgICBxdHktLTtcbiAgICAgIH1cbiAgICAgIC8vIGZvciB0aGUgYWxsIHRoZSBsaW5lcyBvciBhbGwgdGhlIG90aGVyIGxpbmVzXG4gICAgICAvLyB3ZSBjbG9uZSBjdXJyZW50IGNoYXIgc3R5bGUgb250byB0aGUgbmV4dCAob3RoZXJ3aXNlIGVtcHR5KSBsaW5lXG4gICAgICB3aGlsZSAocXR5ID4gMCkge1xuICAgICAgICBpZiAoY29waWVkU3R5bGUgJiYgY29waWVkU3R5bGVbcXR5IC0gMV0pIHtcbiAgICAgICAgICB0aGlzLnN0eWxlc1tsaW5lSW5kZXggKyBxdHldID0geyAwOiBjbG9uZShjb3BpZWRTdHlsZVtxdHkgLSAxXSkgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50Q2hhclN0eWxlKSB7XG4gICAgICAgICAgdGhpcy5zdHlsZXNbbGluZUluZGV4ICsgcXR5XSA9IHsgMDogY2xvbmUoY3VycmVudENoYXJTdHlsZSkgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5zdHlsZXNbbGluZUluZGV4ICsgcXR5XTtcbiAgICAgICAgfVxuICAgICAgICBxdHktLTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2ZvcmNlQ2xlYXJDYWNoZSA9IHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgc3R5bGUgb2JqZWN0IGZvciBhIGdpdmVuIGxpbmUvY2hhciBpbmRleFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXggSW5kZXggb2YgYSBsaW5lXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYXJJbmRleCBJbmRleCBvZiBhIGNoYXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcXVhbnRpdHkgbnVtYmVyIFN0eWxlIG9iamVjdCB0byBpbnNlcnQsIGlmIGdpdmVuXG4gICAgICogQHBhcmFtIHtBcnJheX0gY29waWVkU3R5bGUgYXJyYXkgb2Ygc3R5bGUgb2JqZWN0c1xuICAgICAqL1xuICAgIGluc2VydENoYXJTdHlsZU9iamVjdDogZnVuY3Rpb24obGluZUluZGV4LCBjaGFySW5kZXgsIHF1YW50aXR5LCBjb3BpZWRTdHlsZSkge1xuICAgICAgaWYgKCF0aGlzLnN0eWxlcykge1xuICAgICAgICB0aGlzLnN0eWxlcyA9IHt9O1xuICAgICAgfVxuICAgICAgdmFyIGN1cnJlbnRMaW5lU3R5bGVzICAgICAgID0gdGhpcy5zdHlsZXNbbGluZUluZGV4XSxcbiAgICAgICAgICBjdXJyZW50TGluZVN0eWxlc0Nsb25lZCA9IGN1cnJlbnRMaW5lU3R5bGVzID8gY2xvbmUoY3VycmVudExpbmVTdHlsZXMpIDoge307XG5cbiAgICAgIHF1YW50aXR5IHx8IChxdWFudGl0eSA9IDEpO1xuICAgICAgLy8gc2hpZnQgYWxsIGNoYXIgc3R5bGVzIGJ5IHF1YW50aXR5IGZvcndhcmRcbiAgICAgIC8vIDAsMSwyLDMgLT4gKGNoYXJJbmRleD0yKSAtPiAwLDEsMyw0IC0+IChpbnNlcnQgMikgLT4gMCwxLDIsMyw0XG4gICAgICBmb3IgKHZhciBpbmRleCBpbiBjdXJyZW50TGluZVN0eWxlc0Nsb25lZCkge1xuICAgICAgICB2YXIgbnVtZXJpY0luZGV4ID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgICAgICAgaWYgKG51bWVyaWNJbmRleCA+PSBjaGFySW5kZXgpIHtcbiAgICAgICAgICBjdXJyZW50TGluZVN0eWxlc1tudW1lcmljSW5kZXggKyBxdWFudGl0eV0gPSBjdXJyZW50TGluZVN0eWxlc0Nsb25lZFtudW1lcmljSW5kZXhdO1xuICAgICAgICAgIC8vIG9ubHkgZGVsZXRlIHRoZSBzdHlsZSBpZiB0aGVyZSB3YXMgbm90aGluZyBtb3ZlZCB0aGVyZVxuICAgICAgICAgIGlmICghY3VycmVudExpbmVTdHlsZXNDbG9uZWRbbnVtZXJpY0luZGV4IC0gcXVhbnRpdHldKSB7XG4gICAgICAgICAgICBkZWxldGUgY3VycmVudExpbmVTdHlsZXNbbnVtZXJpY0luZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2ZvcmNlQ2xlYXJDYWNoZSA9IHRydWU7XG4gICAgICBpZiAoY29waWVkU3R5bGUpIHtcbiAgICAgICAgd2hpbGUgKHF1YW50aXR5LS0pIHtcbiAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKGNvcGllZFN0eWxlW3F1YW50aXR5XSkubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCF0aGlzLnN0eWxlc1tsaW5lSW5kZXhdKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc3R5bGVzW2xpbmVJbmRleF1bY2hhckluZGV4ICsgcXVhbnRpdHldID0gY2xvbmUoY29waWVkU3R5bGVbcXVhbnRpdHldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIWN1cnJlbnRMaW5lU3R5bGVzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdTdHlsZSA9IGN1cnJlbnRMaW5lU3R5bGVzW2NoYXJJbmRleCA/IGNoYXJJbmRleCAtIDEgOiAxXTtcbiAgICAgIHdoaWxlIChuZXdTdHlsZSAmJiBxdWFudGl0eS0tKSB7XG4gICAgICAgIHRoaXMuc3R5bGVzW2xpbmVJbmRleF1bY2hhckluZGV4ICsgcXVhbnRpdHldID0gY2xvbmUobmV3U3R5bGUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHN0eWxlIG9iamVjdChzKVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluc2VydGVkVGV4dCBDaGFyYWN0ZXJzIGF0IHRoZSBsb2NhdGlvbiB3aGVyZSBzdHlsZSBpcyBpbnNlcnRlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydCBjdXJzb3IgaW5kZXggZm9yIGluc2VydGluZyBzdHlsZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtjb3BpZWRTdHlsZV0gYXJyYXkgb2Ygc3R5bGUgb2JqZWN0cyB0byBpbnNlcnQuXG4gICAgICovXG4gICAgaW5zZXJ0TmV3U3R5bGVCbG9jazogZnVuY3Rpb24oaW5zZXJ0ZWRUZXh0LCBzdGFydCwgY29waWVkU3R5bGUpIHtcbiAgICAgIHZhciBjdXJzb3JMb2MgPSB0aGlzLmdldDJEQ3Vyc29yTG9jYXRpb24oc3RhcnQsIHRydWUpLFxuICAgICAgICAgIGFkZGVkTGluZXMgPSBbMF0sIGxpbmVzTGVuZ3RoID0gMDtcbiAgICAgIC8vIGdldCBhbiBhcnJheSBvZiBob3cgbWFueSBjaGFyIHBlciBsaW5lcyBhcmUgYmVpbmcgYWRkZWQuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluc2VydGVkVGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaW5zZXJ0ZWRUZXh0W2ldID09PSAnXFxuJykge1xuICAgICAgICAgIGxpbmVzTGVuZ3RoKys7XG4gICAgICAgICAgYWRkZWRMaW5lc1tsaW5lc0xlbmd0aF0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFkZGVkTGluZXNbbGluZXNMZW5ndGhdKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGZvciB0aGUgZmlyc3QgbGluZSBjb3B5IHRoZSBzdHlsZSBmcm9tIHRoZSBjdXJyZW50IGNoYXIgcG9zaXRpb24uXG4gICAgICBpZiAoYWRkZWRMaW5lc1swXSA+IDApIHtcbiAgICAgICAgdGhpcy5pbnNlcnRDaGFyU3R5bGVPYmplY3QoY3Vyc29yTG9jLmxpbmVJbmRleCwgY3Vyc29yTG9jLmNoYXJJbmRleCwgYWRkZWRMaW5lc1swXSwgY29waWVkU3R5bGUpO1xuICAgICAgICBjb3BpZWRTdHlsZSA9IGNvcGllZFN0eWxlICYmIGNvcGllZFN0eWxlLnNsaWNlKGFkZGVkTGluZXNbMF0gKyAxKTtcbiAgICAgIH1cbiAgICAgIGxpbmVzTGVuZ3RoICYmIHRoaXMuaW5zZXJ0TmV3bGluZVN0eWxlT2JqZWN0KFxuICAgICAgICBjdXJzb3JMb2MubGluZUluZGV4LCBjdXJzb3JMb2MuY2hhckluZGV4ICsgYWRkZWRMaW5lc1swXSwgbGluZXNMZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBsaW5lc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhZGRlZExpbmVzW2ldID4gMCkge1xuICAgICAgICAgIHRoaXMuaW5zZXJ0Q2hhclN0eWxlT2JqZWN0KGN1cnNvckxvYy5saW5lSW5kZXggKyBpLCAwLCBhZGRlZExpbmVzW2ldLCBjb3BpZWRTdHlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29waWVkU3R5bGUpIHtcbiAgICAgICAgICAvLyB0aGlzIHRlc3QgaXMgcmVxdWlyZWQgaW4gb3JkZXIgdG8gY2xvc2UgIzY4NDFcbiAgICAgICAgICAvLyB3aGVuIGEgcGFzdGVkIGJ1ZmZlciBiZWdpbnMgd2l0aCBhIG5ld2xpbmUgdGhlblxuICAgICAgICAgIC8vIHRoaXMuc3R5bGVzW2N1cnNvckxvYy5saW5lSW5kZXggKyBpXSBhbmQgY29waWVkU3R5bGVbMF1cbiAgICAgICAgICAvLyBtYXkgYmUgdW5kZWZpbmVkIGZvciBzb21lIHJlYXNvblxuICAgICAgICAgIGlmICh0aGlzLnN0eWxlc1tjdXJzb3JMb2MubGluZUluZGV4ICsgaV0gJiYgY29waWVkU3R5bGVbMF0pIHtcbiAgICAgICAgICAgIHRoaXMuc3R5bGVzW2N1cnNvckxvYy5saW5lSW5kZXggKyBpXVswXSA9IGNvcGllZFN0eWxlWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb3BpZWRTdHlsZSA9IGNvcGllZFN0eWxlICYmIGNvcGllZFN0eWxlLnNsaWNlKGFkZGVkTGluZXNbaV0gKyAxKTtcbiAgICAgIH1cbiAgICAgIC8vIHdlIHVzZSBpIG91dHNpZGUgdGhlIGxvb3AgdG8gZ2V0IGl0IGxpa2UgbGluZXNMZW5ndGhcbiAgICAgIGlmIChhZGRlZExpbmVzW2ldID4gMCkge1xuICAgICAgICB0aGlzLmluc2VydENoYXJTdHlsZU9iamVjdChjdXJzb3JMb2MubGluZUluZGV4ICsgaSwgMCwgYWRkZWRMaW5lc1tpXSwgY29waWVkU3R5bGUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNlbGVjdGlvblN0YXJ0IGFuZCBzZWxlY3Rpb25FbmQgYWNjb3JkaW5nIHRvIHRoZSBuZXcgcG9zaXRpb24gb2YgY3Vyc29yXG4gICAgICogbWltaWMgdGhlIGtleSAtIG1vdXNlIG5hdmlnYXRpb24gd2hlbiBzaGlmdCBpcyBwcmVzc2VkLlxuICAgICAqL1xuICAgIHNldFNlbGVjdGlvblN0YXJ0RW5kV2l0aFNoaWZ0OiBmdW5jdGlvbihzdGFydCwgZW5kLCBuZXdTZWxlY3Rpb24pIHtcbiAgICAgIGlmIChuZXdTZWxlY3Rpb24gPD0gc3RhcnQpIHtcbiAgICAgICAgaWYgKGVuZCA9PT0gc3RhcnQpIHtcbiAgICAgICAgICB0aGlzLl9zZWxlY3Rpb25EaXJlY3Rpb24gPSAnbGVmdCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc2VsZWN0aW9uRGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgdGhpcy5fc2VsZWN0aW9uRGlyZWN0aW9uID0gJ2xlZnQnO1xuICAgICAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IG5ld1NlbGVjdGlvbjtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG5ld1NlbGVjdGlvbiA+IHN0YXJ0ICYmIG5ld1NlbGVjdGlvbiA8IGVuZCkge1xuICAgICAgICBpZiAodGhpcy5fc2VsZWN0aW9uRGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3Rpb25FbmQgPSBuZXdTZWxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IG5ld1NlbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIG5ld1NlbGVjdGlvbiBpcyA+IHNlbGVjdGlvbiBzdGFydCBhbmQgZW5kXG4gICAgICAgIGlmIChlbmQgPT09IHN0YXJ0KSB7XG4gICAgICAgICAgdGhpcy5fc2VsZWN0aW9uRGlyZWN0aW9uID0gJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9zZWxlY3Rpb25EaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9ICdyaWdodCc7XG4gICAgICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IG5ld1NlbGVjdGlvbjtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0U2VsZWN0aW9uSW5Cb3VuZGFyaWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsZW5ndGggPSB0aGlzLnRleHQubGVuZ3RoO1xuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgPiBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgPCAwKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uRW5kID4gbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5zZWxlY3Rpb25FbmQgPCAwKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufSkoKTtcblxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5JVGV4dC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLklUZXh0LnByb3RvdHlwZSAqLyB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBcImRiY2xpY2tcIiBldmVudCBoYW5kbGVyXG4gICAqL1xuICBpbml0RG91YmxlQ2xpY2tTaW11bGF0aW9uOiBmdW5jdGlvbigpIHtcblxuICAgIC8vIGZvciBkb3VibGUgY2xpY2tcbiAgICB0aGlzLl9fbGFzdENsaWNrVGltZSA9ICtuZXcgRGF0ZSgpO1xuXG4gICAgLy8gZm9yIHRyaXBsZSBjbGlja1xuICAgIHRoaXMuX19sYXN0TGFzdENsaWNrVGltZSA9ICtuZXcgRGF0ZSgpO1xuXG4gICAgdGhpcy5fX2xhc3RQb2ludGVyID0geyB9O1xuXG4gICAgdGhpcy5vbignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlZmF1bHQgZXZlbnQgaGFuZGxlciB0byBzaW11bGF0ZSB0cmlwbGUgY2xpY2tcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uTW91c2VEb3duOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmNhbnZhcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9fbmV3Q2xpY2tUaW1lID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG5ld1BvaW50ZXIgPSBvcHRpb25zLnBvaW50ZXI7XG4gICAgaWYgKHRoaXMuaXNUcmlwbGVDbGljayhuZXdQb2ludGVyKSkge1xuICAgICAgdGhpcy5maXJlKCd0cmlwbGVjbGljaycsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5fc3RvcEV2ZW50KG9wdGlvbnMuZSk7XG4gICAgfVxuICAgIHRoaXMuX19sYXN0TGFzdENsaWNrVGltZSA9IHRoaXMuX19sYXN0Q2xpY2tUaW1lO1xuICAgIHRoaXMuX19sYXN0Q2xpY2tUaW1lID0gdGhpcy5fX25ld0NsaWNrVGltZTtcbiAgICB0aGlzLl9fbGFzdFBvaW50ZXIgPSBuZXdQb2ludGVyO1xuICAgIHRoaXMuX19sYXN0SXNFZGl0aW5nID0gdGhpcy5pc0VkaXRpbmc7XG4gICAgdGhpcy5fX2xhc3RTZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWQ7XG4gIH0sXG5cbiAgaXNUcmlwbGVDbGljazogZnVuY3Rpb24obmV3UG9pbnRlcikge1xuICAgIHJldHVybiB0aGlzLl9fbmV3Q2xpY2tUaW1lIC0gdGhpcy5fX2xhc3RDbGlja1RpbWUgPCA1MDAgJiZcbiAgICAgICAgdGhpcy5fX2xhc3RDbGlja1RpbWUgLSB0aGlzLl9fbGFzdExhc3RDbGlja1RpbWUgPCA1MDAgJiZcbiAgICAgICAgdGhpcy5fX2xhc3RQb2ludGVyLnggPT09IG5ld1BvaW50ZXIueCAmJlxuICAgICAgICB0aGlzLl9fbGFzdFBvaW50ZXIueSA9PT0gbmV3UG9pbnRlci55O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N0b3BFdmVudDogZnVuY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uICYmIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50IGhhbmRsZXJzIHJlbGF0ZWQgdG8gY3Vyc29yIG9yIHNlbGVjdGlvblxuICAgKi9cbiAgaW5pdEN1cnNvclNlbGVjdGlvbkhhbmRsZXJzOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmluaXRNb3VzZWRvd25IYW5kbGVyKCk7XG4gICAgdGhpcy5pbml0TW91c2V1cEhhbmRsZXIoKTtcbiAgICB0aGlzLmluaXRDbGlja3MoKTtcbiAgfSxcblxuICAvKipcbiAgICogRGVmYXVsdCBoYW5kbGVyIGZvciBkb3VibGUgY2xpY2ssIHNlbGVjdCBhIHdvcmRcbiAgICovXG4gIGRvdWJsZUNsaWNrSGFuZGxlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGlmICghdGhpcy5pc0VkaXRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZWxlY3RXb3JkKHRoaXMuZ2V0U2VsZWN0aW9uU3RhcnRGcm9tUG9pbnRlcihvcHRpb25zLmUpKTtcbiAgfSxcblxuICAvKipcbiAgICogRGVmYXVsdCBoYW5kbGVyIGZvciB0cmlwbGUgY2xpY2ssIHNlbGVjdCBhIGxpbmVcbiAgICovXG4gIHRyaXBsZUNsaWNrSGFuZGxlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGlmICghdGhpcy5pc0VkaXRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZWxlY3RMaW5lKHRoaXMuZ2V0U2VsZWN0aW9uU3RhcnRGcm9tUG9pbnRlcihvcHRpb25zLmUpKTtcbiAgfSxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZG91YmxlIGFuZCB0cmlwbGUgY2xpY2sgZXZlbnQgaGFuZGxlcnNcbiAgICovXG4gIGluaXRDbGlja3M6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMub24oJ21vdXNlZGJsY2xpY2snLCB0aGlzLmRvdWJsZUNsaWNrSGFuZGxlcik7XG4gICAgdGhpcy5vbigndHJpcGxlY2xpY2snLCB0aGlzLnRyaXBsZUNsaWNrSGFuZGxlcik7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlZmF1bHQgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllcyBuZWVkZWQgb24gX21vdXNlRG93blxuICAgKiBjYW4gYmUgb3ZlcnJpZGRlbiB0byBkbyBzb21ldGhpbmcgZGlmZmVyZW50LlxuICAgKiBTY29wZSBvZiB0aGlzIGltcGxlbWVudGF0aW9uIGlzOiBmaW5kIHRoZSBjbGljayBwb3NpdGlvbiwgc2V0IHNlbGVjdGlvblN0YXJ0XG4gICAqIGZpbmQgc2VsZWN0aW9uRW5kLCBpbml0aWFsaXplIHRoZSBkcmF3aW5nIG9mIGVpdGhlciBjdXJzb3Igb3Igc2VsZWN0aW9uIGFyZWFcbiAgICogaW5pdGlhbGl6aW5nIGEgbW91c2VkRG93biBvbiBhIHRleHQgYXJlYSB3aWxsIGNhbmNlbCBmYWJyaWNqcyBrbm93bGVkZ2Ugb2ZcbiAgICogY3VycmVudCBjb21wb3NpdGlvbk1vZGUuIEl0IHdpbGwgYmUgc2V0IHRvIGZhbHNlLlxuICAgKi9cbiAgX21vdXNlRG93bkhhbmRsZXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuY2FudmFzIHx8ICF0aGlzLmVkaXRhYmxlIHx8IChvcHRpb25zLmUuYnV0dG9uICYmIG9wdGlvbnMuZS5idXR0b24gIT09IDEpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fX2lzTW91c2Vkb3duID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLnNlbGVjdGVkKSB7XG4gICAgICB0aGlzLmluQ29tcG9zaXRpb25Nb2RlID0gZmFsc2U7XG4gICAgICB0aGlzLnNldEN1cnNvckJ5Q2xpY2sob3B0aW9ucy5lKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0VkaXRpbmcpIHtcbiAgICAgIHRoaXMuX19zZWxlY3Rpb25TdGFydE9uTW91c2VEb3duID0gdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ID09PSB0aGlzLnNlbGVjdGlvbkVuZCkge1xuICAgICAgICB0aGlzLmFib3J0Q3Vyc29yQW5pbWF0aW9uKCk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbmRlckN1cnNvck9yU2VsZWN0aW9uKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXMgbmVlZGVkIG9uIG1vdXNlZG93bjpiZWZvcmVcbiAgICogY2FuIGJlIG92ZXJyaWRkZW4gdG8gZG8gc29tZXRoaW5nIGRpZmZlcmVudC5cbiAgICogU2NvcGUgb2YgdGhpcyBpbXBsZW1lbnRhdGlvbiBpczogdmVyaWZ5IHRoZSBvYmplY3QgaXMgYWxyZWFkeSBzZWxlY3RlZCB3aGVuIG1vdXNpbmcgZG93blxuICAgKi9cbiAgX21vdXNlRG93bkhhbmRsZXJCZWZvcmU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuY2FudmFzIHx8ICF0aGlzLmVkaXRhYmxlIHx8IChvcHRpb25zLmUuYnV0dG9uICYmIG9wdGlvbnMuZS5idXR0b24gIT09IDEpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHdlIHdhbnQgdG8gYXZvaWQgdGhhdCBhbiBvYmplY3QgdGhhdCB3YXMgc2VsZWN0ZWQgYW5kIHRoZW4gYmVjb21lcyB1bnNlbGVjdGFibGUsXG4gICAgLy8gbWF5IHRyaWdnZXIgZWRpdGluZyBtb2RlIGluIHNvbWUgd2F5LlxuICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzID09PSB0aGlzLmNhbnZhcy5fYWN0aXZlT2JqZWN0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBcIm1vdXNlZG93blwiIGV2ZW50IGhhbmRsZXJcbiAgICovXG4gIGluaXRNb3VzZWRvd25IYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm9uKCdtb3VzZWRvd24nLCB0aGlzLl9tb3VzZURvd25IYW5kbGVyKTtcbiAgICB0aGlzLm9uKCdtb3VzZWRvd246YmVmb3JlJywgdGhpcy5fbW91c2VEb3duSGFuZGxlckJlZm9yZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIFwibW91c2V1cFwiIGV2ZW50IGhhbmRsZXJcbiAgICovXG4gIGluaXRNb3VzZXVwSGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5vbignbW91c2V1cCcsIHRoaXMubW91c2VVcEhhbmRsZXIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBzdGFuZGFyZCBoYW5kbGVyIGZvciBtb3VzZSB1cCwgb3ZlcnJpZGFibGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG1vdXNlVXBIYW5kbGVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5fX2lzTW91c2Vkb3duID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLmVkaXRhYmxlIHx8IHRoaXMuZ3JvdXAgfHxcbiAgICAgIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvcHRpb25zLnRyYW5zZm9ybS5hY3Rpb25QZXJmb3JtZWQpIHx8XG4gICAgICAob3B0aW9ucy5lLmJ1dHRvbiAmJiBvcHRpb25zLmUuYnV0dG9uICE9PSAxKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgdmFyIGN1cnJlbnRBY3RpdmUgPSB0aGlzLmNhbnZhcy5fYWN0aXZlT2JqZWN0O1xuICAgICAgaWYgKGN1cnJlbnRBY3RpdmUgJiYgY3VycmVudEFjdGl2ZSAhPT0gdGhpcykge1xuICAgICAgICAvLyBhdm9pZCBydW5uaW5nIHRoaXMgbG9naWMgd2hlbiB0aGVyZSBpcyBhbiBhY3RpdmUgb2JqZWN0XG4gICAgICAgIC8vIHRoaXMgYmVjYXVzZSBpcyBwb3NzaWJsZSB3aXRoIHNoaWZ0IGNsaWNrIGFuZCBmYXN0IGNsaWNrcyxcbiAgICAgICAgLy8gdG8gcmFwaWRseSBkZXNlbGVjdCBhbmQgcmVzZWxlY3QgdGhpcyBvYmplY3QgYW5kIHRyaWdnZXIgYW4gZW50ZXJFZGl0XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fX2xhc3RTZWxlY3RlZCAmJiAhdGhpcy5fX2Nvcm5lcikge1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2xhc3RTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5lbnRlckVkaXRpbmcob3B0aW9ucy5lKTtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ID09PSB0aGlzLnNlbGVjdGlvbkVuZCkge1xuICAgICAgICB0aGlzLmluaXREZWxheWVkQ3Vyc29yKHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyQ3Vyc29yT3JTZWxlY3Rpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoYW5nZXMgY3Vyc29yIGxvY2F0aW9uIGluIGEgdGV4dCBkZXBlbmRpbmcgb24gcGFzc2VkIHBvaW50ZXIgKHgveSkgb2JqZWN0XG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBzZXRDdXJzb3JCeUNsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgdmFyIG5ld1NlbGVjdGlvbiA9IHRoaXMuZ2V0U2VsZWN0aW9uU3RhcnRGcm9tUG9pbnRlcihlKSxcbiAgICAgICAgc3RhcnQgPSB0aGlzLnNlbGVjdGlvblN0YXJ0LCBlbmQgPSB0aGlzLnNlbGVjdGlvbkVuZDtcbiAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgdGhpcy5zZXRTZWxlY3Rpb25TdGFydEVuZFdpdGhTaGlmdChzdGFydCwgZW5kLCBuZXdTZWxlY3Rpb24pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSBuZXdTZWxlY3Rpb247XG4gICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IG5ld1NlbGVjdGlvbjtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNFZGl0aW5nKSB7XG4gICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlZCgpO1xuICAgICAgdGhpcy5fdXBkYXRlVGV4dGFyZWEoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgaW5kZXggb2YgYSBjaGFyYWN0ZXIgY29ycmVzcG9uZGluZyB0byB3aGVyZSBhbiBvYmplY3Qgd2FzIGNsaWNrZWRcbiAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQHJldHVybiB7TnVtYmVyfSBJbmRleCBvZiBhIGNoYXJhY3RlclxuICAgKi9cbiAgZ2V0U2VsZWN0aW9uU3RhcnRGcm9tUG9pbnRlcjogZnVuY3Rpb24oZSkge1xuICAgIHZhciBtb3VzZU9mZnNldCA9IHRoaXMuZ2V0TG9jYWxQb2ludGVyKGUpLFxuICAgICAgICBwcmV2V2lkdGggPSAwLFxuICAgICAgICB3aWR0aCA9IDAsXG4gICAgICAgIGhlaWdodCA9IDAsXG4gICAgICAgIGNoYXJJbmRleCA9IDAsXG4gICAgICAgIGxpbmVJbmRleCA9IDAsXG4gICAgICAgIGxpbmVMZWZ0T2Zmc2V0LFxuICAgICAgICBsaW5lO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl90ZXh0TGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChoZWlnaHQgPD0gbW91c2VPZmZzZXQueSkge1xuICAgICAgICBoZWlnaHQgKz0gdGhpcy5nZXRIZWlnaHRPZkxpbmUoaSkgKiB0aGlzLnNjYWxlWTtcbiAgICAgICAgbGluZUluZGV4ID0gaTtcbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgY2hhckluZGV4ICs9IHRoaXMuX3RleHRMaW5lc1tpIC0gMV0ubGVuZ3RoICsgdGhpcy5taXNzaW5nTmV3bGluZU9mZnNldChpIC0gMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgbGluZUxlZnRPZmZzZXQgPSB0aGlzLl9nZXRMaW5lTGVmdE9mZnNldChsaW5lSW5kZXgpO1xuICAgIHdpZHRoID0gbGluZUxlZnRPZmZzZXQgKiB0aGlzLnNjYWxlWDtcbiAgICBsaW5lID0gdGhpcy5fdGV4dExpbmVzW2xpbmVJbmRleF07XG4gICAgLy8gaGFuZGxpbmcgb2YgUlRMOiBpbiBvcmRlciB0byBnZXQgdGhpbmdzIHdvcmsgY29ycmVjdGx5LFxuICAgIC8vIHdlIGFzc3VtZSBSVEwgd3JpdGluZyBpcyBtaXJyb3JlZCBjb21wYXJlZCB0byBMVFIgd3JpdGluZy5cbiAgICAvLyBzbyBpbiBwb3NpdGlvbiBkZXRlY3Rpb24gd2UgbWlycm9yIHRoZSBYIG9mZnNldCwgYW5kIHdoZW4gaXMgdGltZVxuICAgIC8vIG9mIHJlbmRlcmluZyBpdCwgd2UgbWlycm9yIGl0IGFnYWluLlxuICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgIG1vdXNlT2Zmc2V0LnggPSB0aGlzLndpZHRoICogdGhpcy5zY2FsZVggLSBtb3VzZU9mZnNldC54ICsgd2lkdGg7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwLCBqbGVuID0gbGluZS5sZW5ndGg7IGogPCBqbGVuOyBqKyspIHtcbiAgICAgIHByZXZXaWR0aCA9IHdpZHRoO1xuICAgICAgLy8gaSByZW1vdmVkIHNvbWV0aGluZyBhYm91dCBmbGlwWCBoZXJlLCBjaGVjay5cbiAgICAgIHdpZHRoICs9IHRoaXMuX19jaGFyQm91bmRzW2xpbmVJbmRleF1bal0ua2VybmVkV2lkdGggKiB0aGlzLnNjYWxlWDtcbiAgICAgIGlmICh3aWR0aCA8PSBtb3VzZU9mZnNldC54KSB7XG4gICAgICAgIGNoYXJJbmRleCsrO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZ2V0TmV3U2VsZWN0aW9uU3RhcnRGcm9tT2Zmc2V0KG1vdXNlT2Zmc2V0LCBwcmV2V2lkdGgsIHdpZHRoLCBjaGFySW5kZXgsIGpsZW4pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldE5ld1NlbGVjdGlvblN0YXJ0RnJvbU9mZnNldDogZnVuY3Rpb24obW91c2VPZmZzZXQsIHByZXZXaWR0aCwgd2lkdGgsIGluZGV4LCBqbGVuKSB7XG4gICAgLy8gd2UgbmVlZCBNYXRoLmFicyBiZWNhdXNlIHdoZW4gd2lkdGggaXMgYWZ0ZXIgdGhlIGxhc3QgY2hhciwgdGhlIG9mZnNldCBpcyBnaXZlbiBhcyAxLCB3aGlsZSBpcyAwXG4gICAgdmFyIGRpc3RhbmNlQnR3TGFzdENoYXJBbmRDdXJzb3IgPSBtb3VzZU9mZnNldC54IC0gcHJldldpZHRoLFxuICAgICAgICBkaXN0YW5jZUJ0d05leHRDaGFyQW5kQ3Vyc29yID0gd2lkdGggLSBtb3VzZU9mZnNldC54LFxuICAgICAgICBvZmZzZXQgPSBkaXN0YW5jZUJ0d05leHRDaGFyQW5kQ3Vyc29yID4gZGlzdGFuY2VCdHdMYXN0Q2hhckFuZEN1cnNvciB8fFxuICAgICAgICAgIGRpc3RhbmNlQnR3TmV4dENoYXJBbmRDdXJzb3IgPCAwID8gMCA6IDEsXG4gICAgICAgIG5ld1NlbGVjdGlvblN0YXJ0ID0gaW5kZXggKyBvZmZzZXQ7XG4gICAgLy8gaWYgb2JqZWN0IGlzIGhvcml6b250YWxseSBmbGlwcGVkLCBtaXJyb3IgY3Vyc29yIGxvY2F0aW9uIGZyb20gdGhlIGVuZFxuICAgIGlmICh0aGlzLmZsaXBYKSB7XG4gICAgICBuZXdTZWxlY3Rpb25TdGFydCA9IGpsZW4gLSBuZXdTZWxlY3Rpb25TdGFydDtcbiAgICB9XG5cbiAgICBpZiAobmV3U2VsZWN0aW9uU3RhcnQgPiB0aGlzLl90ZXh0Lmxlbmd0aCkge1xuICAgICAgbmV3U2VsZWN0aW9uU3RhcnQgPSB0aGlzLl90ZXh0Lmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3U2VsZWN0aW9uU3RhcnQ7XG4gIH1cbn0pO1xuXG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLklUZXh0LnByb3RvdHlwZSwgLyoqIEBsZW5kcyBmYWJyaWMuSVRleHQucHJvdG90eXBlICovIHtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgaGlkZGVuIHRleHRhcmVhIChuZWVkZWQgdG8gYnJpbmcgdXAga2V5Ym9hcmQgaW4gaU9TKVxuICAgKi9cbiAgaW5pdEhpZGRlblRleHRhcmVhOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmhpZGRlblRleHRhcmVhID0gZmFicmljLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdGhpcy5oaWRkZW5UZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ2F1dG9jYXBpdGFsaXplJywgJ29mZicpO1xuICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc2V0QXR0cmlidXRlKCdhdXRvY29ycmVjdCcsICdvZmYnKTtcbiAgICB0aGlzLmhpZGRlblRleHRhcmVhLnNldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJywgJ29mZicpO1xuICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc2V0QXR0cmlidXRlKCdzcGVsbGNoZWNrJywgJ2ZhbHNlJyk7XG4gICAgdGhpcy5oaWRkZW5UZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZmFicmljLWhpZGRlbnRleHRhcmVhJywgJycpO1xuICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc2V0QXR0cmlidXRlKCd3cmFwJywgJ29mZicpO1xuICAgIHZhciBzdHlsZSA9IHRoaXMuX2NhbGNUZXh0YXJlYVBvc2l0aW9uKCk7XG4gICAgLy8gbGluZS1oZWlnaHQ6IDFweDsgd2FzIHJlbW92ZWQgZnJvbSB0aGUgc3R5bGUgdG8gZml4IHRoaXM6XG4gICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODcwOTY2XG4gICAgdGhpcy5oaWRkZW5UZXh0YXJlYS5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAnICsgc3R5bGUudG9wICtcbiAgICAnOyBsZWZ0OiAnICsgc3R5bGUubGVmdCArICc7IHotaW5kZXg6IC05OTk7IG9wYWNpdHk6IDA7IHdpZHRoOiAxcHg7IGhlaWdodDogMXB4OyBmb250LXNpemU6IDFweDsnICtcbiAgICAnIHBhZGRpbmctdG9wOiAnICsgc3R5bGUuZm9udFNpemUgKyAnOyc7XG5cbiAgICBpZiAodGhpcy5oaWRkZW5UZXh0YXJlYUNvbnRhaW5lcikge1xuICAgICAgdGhpcy5oaWRkZW5UZXh0YXJlYUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmhpZGRlblRleHRhcmVhKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBmYWJyaWMuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmhpZGRlblRleHRhcmVhKTtcbiAgICB9XG5cbiAgICBmYWJyaWMudXRpbC5hZGRMaXN0ZW5lcih0aGlzLmhpZGRlblRleHRhcmVhLCAna2V5ZG93bicsIHRoaXMub25LZXlEb3duLmJpbmQodGhpcykpO1xuICAgIGZhYnJpYy51dGlsLmFkZExpc3RlbmVyKHRoaXMuaGlkZGVuVGV4dGFyZWEsICdrZXl1cCcsIHRoaXMub25LZXlVcC5iaW5kKHRoaXMpKTtcbiAgICBmYWJyaWMudXRpbC5hZGRMaXN0ZW5lcih0aGlzLmhpZGRlblRleHRhcmVhLCAnaW5wdXQnLCB0aGlzLm9uSW5wdXQuYmluZCh0aGlzKSk7XG4gICAgZmFicmljLnV0aWwuYWRkTGlzdGVuZXIodGhpcy5oaWRkZW5UZXh0YXJlYSwgJ2NvcHknLCB0aGlzLmNvcHkuYmluZCh0aGlzKSk7XG4gICAgZmFicmljLnV0aWwuYWRkTGlzdGVuZXIodGhpcy5oaWRkZW5UZXh0YXJlYSwgJ2N1dCcsIHRoaXMuY29weS5iaW5kKHRoaXMpKTtcbiAgICBmYWJyaWMudXRpbC5hZGRMaXN0ZW5lcih0aGlzLmhpZGRlblRleHRhcmVhLCAncGFzdGUnLCB0aGlzLnBhc3RlLmJpbmQodGhpcykpO1xuICAgIGZhYnJpYy51dGlsLmFkZExpc3RlbmVyKHRoaXMuaGlkZGVuVGV4dGFyZWEsICdjb21wb3NpdGlvbnN0YXJ0JywgdGhpcy5vbkNvbXBvc2l0aW9uU3RhcnQuYmluZCh0aGlzKSk7XG4gICAgZmFicmljLnV0aWwuYWRkTGlzdGVuZXIodGhpcy5oaWRkZW5UZXh0YXJlYSwgJ2NvbXBvc2l0aW9udXBkYXRlJywgdGhpcy5vbkNvbXBvc2l0aW9uVXBkYXRlLmJpbmQodGhpcykpO1xuICAgIGZhYnJpYy51dGlsLmFkZExpc3RlbmVyKHRoaXMuaGlkZGVuVGV4dGFyZWEsICdjb21wb3NpdGlvbmVuZCcsIHRoaXMub25Db21wb3NpdGlvbkVuZC5iaW5kKHRoaXMpKTtcblxuICAgIGlmICghdGhpcy5fY2xpY2tIYW5kbGVySW5pdGlhbGl6ZWQgJiYgdGhpcy5jYW52YXMpIHtcbiAgICAgIGZhYnJpYy51dGlsLmFkZExpc3RlbmVyKHRoaXMuY2FudmFzLnVwcGVyQ2FudmFzRWwsICdjbGljaycsIHRoaXMub25DbGljay5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuX2NsaWNrSGFuZGxlckluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZvciBmdW5jdGlvbmFsaXRpZXMgb24ga2V5RG93blxuICAgKiBNYXAgYSBzcGVjaWFsIGtleSB0byBhIGZ1bmN0aW9uIG9mIHRoZSBpbnN0YW5jZS9wcm90b3R5cGVcbiAgICogSWYgeW91IG5lZWQgZGlmZmVyZW50IGJlaGF2aW91ciBmb3IgRVNDIG9yIFRBQiBvciBhcnJvd3MsIHlvdSBoYXZlIHRvIGNoYW5nZVxuICAgKiB0aGlzIG1hcCBzZXR0aW5nIHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gdGhhdCB5b3UgYnVpbGQgb24gdGhlIGZhYnJpYy5JdGV4dCBvclxuICAgKiB5b3VyIHByb3RvdHlwZS5cbiAgICogdGhlIG1hcCBjaGFuZ2Ugd2lsbCBhZmZlY3QgYWxsIEluc3RhbmNlcyB1bmxlc3MgeW91IG5lZWQgZm9yIG9ubHkgc29tZSB0ZXh0IEluc3RhbmNlc1xuICAgKiBpbiB0aGF0IGNhc2UgeW91IGhhdmUgdG8gY2xvbmUgdGhpcyBvYmplY3QgYW5kIGFzc2lnbiB5b3VyIEluc3RhbmNlLlxuICAgKiB0aGlzLmtleXNNYXAgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUodGhpcy5rZXlzTWFwKTtcbiAgICogVGhlIGZ1bmN0aW9uIG11c3QgYmUgaW4gZmFicmljLkl0ZXh0LnByb3RvdHlwZS5teUZ1bmN0aW9uIEFuZCB3aWxsIHJlY2VpdmUgZXZlbnQgYXMgYXJnc1swXVxuICAgKi9cbiAga2V5c01hcDoge1xuICAgIDk6ICAnZXhpdEVkaXRpbmcnLFxuICAgIDI3OiAnZXhpdEVkaXRpbmcnLFxuICAgIDMzOiAnbW92ZUN1cnNvclVwJyxcbiAgICAzNDogJ21vdmVDdXJzb3JEb3duJyxcbiAgICAzNTogJ21vdmVDdXJzb3JSaWdodCcsXG4gICAgMzY6ICdtb3ZlQ3Vyc29yTGVmdCcsXG4gICAgMzc6ICdtb3ZlQ3Vyc29yTGVmdCcsXG4gICAgMzg6ICdtb3ZlQ3Vyc29yVXAnLFxuICAgIDM5OiAnbW92ZUN1cnNvclJpZ2h0JyxcbiAgICA0MDogJ21vdmVDdXJzb3JEb3duJyxcbiAgfSxcblxuICBrZXlzTWFwUnRsOiB7XG4gICAgOTogICdleGl0RWRpdGluZycsXG4gICAgMjc6ICdleGl0RWRpdGluZycsXG4gICAgMzM6ICdtb3ZlQ3Vyc29yVXAnLFxuICAgIDM0OiAnbW92ZUN1cnNvckRvd24nLFxuICAgIDM1OiAnbW92ZUN1cnNvckxlZnQnLFxuICAgIDM2OiAnbW92ZUN1cnNvclJpZ2h0JyxcbiAgICAzNzogJ21vdmVDdXJzb3JSaWdodCcsXG4gICAgMzg6ICdtb3ZlQ3Vyc29yVXAnLFxuICAgIDM5OiAnbW92ZUN1cnNvckxlZnQnLFxuICAgIDQwOiAnbW92ZUN1cnNvckRvd24nLFxuICB9LFxuXG4gIC8qKlxuICAgKiBGb3IgZnVuY3Rpb25hbGl0aWVzIG9uIGtleVVwICsgY3RybCB8fCBjbWRcbiAgICovXG4gIGN0cmxLZXlzTWFwVXA6IHtcbiAgICA2NzogJ2NvcHknLFxuICAgIDg4OiAnY3V0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3IgZnVuY3Rpb25hbGl0aWVzIG9uIGtleURvd24gKyBjdHJsIHx8IGNtZFxuICAgKi9cbiAgY3RybEtleXNNYXBEb3duOiB7XG4gICAgNjU6ICdzZWxlY3RBbGwnXG4gIH0sXG5cbiAgb25DbGljazogZnVuY3Rpb24oKSB7XG4gICAgLy8gTm8gbmVlZCB0byB0cmlnZ2VyIGNsaWNrIGV2ZW50IGhlcmUsIGZvY3VzIGlzIGVub3VnaCB0byBoYXZlIHRoZSBrZXlib2FyZCBhcHBlYXIgb24gQW5kcm9pZFxuICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEgJiYgdGhpcy5oaWRkZW5UZXh0YXJlYS5mb2N1cygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGtleWRvd24gZXZlbnRcbiAgICogb25seSB1c2VkIGZvciBhcnJvd3MgYW5kIGNvbWJpbmF0aW9uIG9mIG1vZGlmaWVyIGtleXMuXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBvbktleURvd246IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoIXRoaXMuaXNFZGl0aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBrZXlNYXAgPSB0aGlzLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyB0aGlzLmtleXNNYXBSdGwgOiB0aGlzLmtleXNNYXA7XG4gICAgaWYgKGUua2V5Q29kZSBpbiBrZXlNYXApIHtcbiAgICAgIHRoaXNba2V5TWFwW2Uua2V5Q29kZV1dKGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICgoZS5rZXlDb2RlIGluIHRoaXMuY3RybEtleXNNYXBEb3duKSAmJiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkpIHtcbiAgICAgIHRoaXNbdGhpcy5jdHJsS2V5c01hcERvd25bZS5rZXlDb2RlXV0oZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoZS5rZXlDb2RlID49IDMzICYmIGUua2V5Q29kZSA8PSA0MCkge1xuICAgICAgLy8gaWYgaSBwcmVzcyBhbiBhcnJvdyBrZXkganVzdCB1cGRhdGUgc2VsZWN0aW9uXG4gICAgICB0aGlzLmluQ29tcG9zaXRpb25Nb2RlID0gZmFsc2U7XG4gICAgICB0aGlzLmNsZWFyQ29udGV4dFRvcCgpO1xuICAgICAgdGhpcy5yZW5kZXJDdXJzb3JPclNlbGVjdGlvbigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhhbmRsZXMga2V5dXAgZXZlbnRcbiAgICogV2UgaGFuZGxlIEtleVVwIGJlY2F1c2UgaWUxMSBhbmQgZWRnZSBoYXZlIGRpZmZpY3VsdGllcyBjb3B5L3Bhc3RpbmdcbiAgICogaWYgYSBjb3B5L2N1dCBldmVudCBmaXJlZCwga2V5dXAgaXMgZGlzbWlzc2VkXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBvbktleVVwOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKCF0aGlzLmlzRWRpdGluZyB8fCB0aGlzLl9jb3B5RG9uZSB8fCB0aGlzLmluQ29tcG9zaXRpb25Nb2RlKSB7XG4gICAgICB0aGlzLl9jb3B5RG9uZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoKGUua2V5Q29kZSBpbiB0aGlzLmN0cmxLZXlzTWFwVXApICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSkge1xuICAgICAgdGhpc1t0aGlzLmN0cmxLZXlzTWFwVXBbZS5rZXlDb2RlXV0oZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgb25JbnB1dCBldmVudFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgb25JbnB1dDogZnVuY3Rpb24oZSkge1xuICAgIHZhciBmcm9tUGFzdGUgPSB0aGlzLmZyb21QYXN0ZTtcbiAgICB0aGlzLmZyb21QYXN0ZSA9IGZhbHNlO1xuICAgIGUgJiYgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoIXRoaXMuaXNFZGl0aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGRlY2lzaW9ucyBhYm91dCBzdHlsZSBjaGFuZ2VzLlxuICAgIHZhciBuZXh0VGV4dCA9IHRoaXMuX3NwbGl0VGV4dEludG9MaW5lcyh0aGlzLmhpZGRlblRleHRhcmVhLnZhbHVlKS5ncmFwaGVtZVRleHQsXG4gICAgICAgIGNoYXJDb3VudCA9IHRoaXMuX3RleHQubGVuZ3RoLFxuICAgICAgICBuZXh0Q2hhckNvdW50ID0gbmV4dFRleHQubGVuZ3RoLFxuICAgICAgICByZW1vdmVkVGV4dCwgaW5zZXJ0ZWRUZXh0LFxuICAgICAgICBjaGFyRGlmZiA9IG5leHRDaGFyQ291bnQgLSBjaGFyQ291bnQsXG4gICAgICAgIHNlbGVjdGlvblN0YXJ0ID0gdGhpcy5zZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kID0gdGhpcy5zZWxlY3Rpb25FbmQsXG4gICAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdGlvblN0YXJ0ICE9PSBzZWxlY3Rpb25FbmQsXG4gICAgICAgIGNvcGllZFN0eWxlLCByZW1vdmVGcm9tLCByZW1vdmVUbztcbiAgICBpZiAodGhpcy5oaWRkZW5UZXh0YXJlYS52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuc3R5bGVzID0geyB9O1xuICAgICAgdGhpcy51cGRhdGVGcm9tVGV4dEFyZWEoKTtcbiAgICAgIHRoaXMuZmlyZSgnY2hhbmdlZCcpO1xuICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgIHRoaXMuY2FudmFzLmZpcmUoJ3RleHQ6Y2hhbmdlZCcsIHsgdGFyZ2V0OiB0aGlzIH0pO1xuICAgICAgICB0aGlzLmNhbnZhcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRleHRhcmVhU2VsZWN0aW9uID0gdGhpcy5mcm9tU3RyaW5nVG9HcmFwaGVtZVNlbGVjdGlvbihcbiAgICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQsXG4gICAgICB0aGlzLmhpZGRlblRleHRhcmVhLnNlbGVjdGlvbkVuZCxcbiAgICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEudmFsdWVcbiAgICApO1xuICAgIHZhciBiYWNrRGVsZXRlID0gc2VsZWN0aW9uU3RhcnQgPiB0ZXh0YXJlYVNlbGVjdGlvbi5zZWxlY3Rpb25TdGFydDtcblxuICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgIHJlbW92ZWRUZXh0ID0gdGhpcy5fdGV4dC5zbGljZShzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKTtcbiAgICAgIGNoYXJEaWZmICs9IHNlbGVjdGlvbkVuZCAtIHNlbGVjdGlvblN0YXJ0O1xuICAgIH1cbiAgICBlbHNlIGlmIChuZXh0Q2hhckNvdW50IDwgY2hhckNvdW50KSB7XG4gICAgICBpZiAoYmFja0RlbGV0ZSkge1xuICAgICAgICByZW1vdmVkVGV4dCA9IHRoaXMuX3RleHQuc2xpY2Uoc2VsZWN0aW9uRW5kICsgY2hhckRpZmYsIHNlbGVjdGlvbkVuZCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVtb3ZlZFRleHQgPSB0aGlzLl90ZXh0LnNsaWNlKHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25TdGFydCAtIGNoYXJEaWZmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaW5zZXJ0ZWRUZXh0ID0gbmV4dFRleHQuc2xpY2UodGV4dGFyZWFTZWxlY3Rpb24uc2VsZWN0aW9uRW5kIC0gY2hhckRpZmYsIHRleHRhcmVhU2VsZWN0aW9uLnNlbGVjdGlvbkVuZCk7XG4gICAgaWYgKHJlbW92ZWRUZXh0ICYmIHJlbW92ZWRUZXh0Lmxlbmd0aCkge1xuICAgICAgaWYgKGluc2VydGVkVGV4dC5sZW5ndGgpIHtcbiAgICAgICAgLy8gbGV0J3MgY29weSBzb21lIHN0eWxlIGJlZm9yZSBkZWxldGluZy5cbiAgICAgICAgLy8gd2Ugd2FudCB0byBjb3B5IHRoZSBzdHlsZSBiZWZvcmUgdGhlIGN1cnNvciBPUiB0aGUgc3R5bGUgYXQgdGhlIGN1cnNvciBpZiBzZWxlY3Rpb25cbiAgICAgICAgLy8gaXMgYmlnZ2VyIHRoYW4gMC5cbiAgICAgICAgY29waWVkU3R5bGUgPSB0aGlzLmdldFNlbGVjdGlvblN0eWxlcyhzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uU3RhcnQgKyAxLCBmYWxzZSk7XG4gICAgICAgIC8vIG5vdyBkdXBsaWNhdGUgdGhlIHN0eWxlIG9uZSBmb3IgZWFjaCBpbnNlcnRlZCB0ZXh0LlxuICAgICAgICBjb3BpZWRTdHlsZSA9IGluc2VydGVkVGV4dC5tYXAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gdGhpcyByZXR1cm4gYW4gYXJyYXkgb2YgcmVmZXJlbmNlcywgYnV0IHRoYXQgaXMgZmluZSBzaW5jZSB3ZSBhcmVcbiAgICAgICAgICAvLyBjb3B5aW5nIHRoZSBzdHlsZSBsYXRlci5cbiAgICAgICAgICByZXR1cm4gY29waWVkU3R5bGVbMF07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICByZW1vdmVGcm9tID0gc2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgIHJlbW92ZVRvID0gc2VsZWN0aW9uRW5kO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYmFja0RlbGV0ZSkge1xuICAgICAgICAvLyBkZXRlY3QgZGlmZmVyZW5jZXMgYmV0d2VlbiBmb3J3YXJkRGVsZXRlIGFuZCBiYWNrRGVsZXRlXG4gICAgICAgIHJlbW92ZUZyb20gPSBzZWxlY3Rpb25FbmQgLSByZW1vdmVkVGV4dC5sZW5ndGg7XG4gICAgICAgIHJlbW92ZVRvID0gc2VsZWN0aW9uRW5kO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlbW92ZUZyb20gPSBzZWxlY3Rpb25FbmQ7XG4gICAgICAgIHJlbW92ZVRvID0gc2VsZWN0aW9uRW5kICsgcmVtb3ZlZFRleHQubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdGhpcy5yZW1vdmVTdHlsZUZyb21UbyhyZW1vdmVGcm9tLCByZW1vdmVUbyk7XG4gICAgfVxuICAgIGlmIChpbnNlcnRlZFRleHQubGVuZ3RoKSB7XG4gICAgICBpZiAoZnJvbVBhc3RlICYmIGluc2VydGVkVGV4dC5qb2luKCcnKSA9PT0gZmFicmljLmNvcGllZFRleHQgJiYgIWZhYnJpYy5kaXNhYmxlU3R5bGVDb3B5UGFzdGUpIHtcbiAgICAgICAgY29waWVkU3R5bGUgPSBmYWJyaWMuY29waWVkVGV4dFN0eWxlO1xuICAgICAgfVxuICAgICAgdGhpcy5pbnNlcnROZXdTdHlsZUJsb2NrKGluc2VydGVkVGV4dCwgc2VsZWN0aW9uU3RhcnQsIGNvcGllZFN0eWxlKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVGcm9tVGV4dEFyZWEoKTtcbiAgICB0aGlzLmZpcmUoJ2NoYW5nZWQnKTtcbiAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgIHRoaXMuY2FudmFzLmZpcmUoJ3RleHQ6Y2hhbmdlZCcsIHsgdGFyZ2V0OiB0aGlzIH0pO1xuICAgICAgdGhpcy5jYW52YXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgIH1cbiAgfSxcbiAgLyoqXG4gICAqIENvbXBvc2l0aW9uIHN0YXJ0XG4gICAqL1xuICBvbkNvbXBvc2l0aW9uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5Db21wb3NpdGlvbk1vZGUgPSB0cnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wb3NpdGlvbiBlbmRcbiAgICovXG4gIG9uQ29tcG9zaXRpb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5Db21wb3NpdGlvbk1vZGUgPSBmYWxzZTtcbiAgfSxcblxuICAvLyAvKipcbiAgLy8gICogQ29tcG9zaXRpb24gdXBkYXRlXG4gIC8vICAqL1xuICBvbkNvbXBvc2l0aW9uVXBkYXRlOiBmdW5jdGlvbihlKSB7XG4gICAgdGhpcy5jb21wb3NpdGlvblN0YXJ0ID0gZS50YXJnZXQuc2VsZWN0aW9uU3RhcnQ7XG4gICAgdGhpcy5jb21wb3NpdGlvbkVuZCA9IGUudGFyZ2V0LnNlbGVjdGlvbkVuZDtcbiAgICB0aGlzLnVwZGF0ZVRleHRhcmVhUG9zaXRpb24oKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29waWVzIHNlbGVjdGVkIHRleHRcbiAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ID09PSB0aGlzLnNlbGVjdGlvbkVuZCkge1xuICAgICAgLy9kbyBub3QgY3V0LWNvcHkgaWYgbm8gc2VsZWN0aW9uXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmFicmljLmNvcGllZFRleHQgPSB0aGlzLmdldFNlbGVjdGVkVGV4dCgpO1xuICAgIGlmICghZmFicmljLmRpc2FibGVTdHlsZUNvcHlQYXN0ZSkge1xuICAgICAgZmFicmljLmNvcGllZFRleHRTdHlsZSA9IHRoaXMuZ2V0U2VsZWN0aW9uU3R5bGVzKHRoaXMuc2VsZWN0aW9uU3RhcnQsIHRoaXMuc2VsZWN0aW9uRW5kLCB0cnVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBmYWJyaWMuY29waWVkVGV4dFN0eWxlID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5fY29weURvbmUgPSB0cnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQYXN0ZXMgdGV4dFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgcGFzdGU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZnJvbVBhc3RlID0gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQHJldHVybiB7T2JqZWN0fSBDbGlwYm9hcmQgZGF0YSBvYmplY3RcbiAgICovXG4gIF9nZXRDbGlwYm9hcmREYXRhOiBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIChlICYmIGUuY2xpcGJvYXJkRGF0YSkgfHwgZmFicmljLndpbmRvdy5jbGlwYm9hcmREYXRhO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgd2lkdGggaW4gcGl4ZWxzIGJlZm9yZSB0aGUgY3Vyc29yIG9uIHRoZSBzYW1lIGxpbmVcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhckluZGV4XG4gICAqIEByZXR1cm4ge051bWJlcn0gd2lkdGhCZWZvcmVDdXJzb3Igd2lkdGggYmVmb3JlIGN1cnNvclxuICAgKi9cbiAgX2dldFdpZHRoQmVmb3JlQ3Vyc29yOiBmdW5jdGlvbihsaW5lSW5kZXgsIGNoYXJJbmRleCkge1xuICAgIHZhciB3aWR0aEJlZm9yZUN1cnNvciA9IHRoaXMuX2dldExpbmVMZWZ0T2Zmc2V0KGxpbmVJbmRleCksIGJvdW5kO1xuXG4gICAgaWYgKGNoYXJJbmRleCA+IDApIHtcbiAgICAgIGJvdW5kID0gdGhpcy5fX2NoYXJCb3VuZHNbbGluZUluZGV4XVtjaGFySW5kZXggLSAxXTtcbiAgICAgIHdpZHRoQmVmb3JlQ3Vyc29yICs9IGJvdW5kLmxlZnQgKyBib3VuZC53aWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIHdpZHRoQmVmb3JlQ3Vyc29yO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHN0YXJ0IG9mZnNldCBvZiBhIHNlbGVjdGlvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmlnaHRcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKi9cbiAgZ2V0RG93bkN1cnNvck9mZnNldDogZnVuY3Rpb24oZSwgaXNSaWdodCkge1xuICAgIHZhciBzZWxlY3Rpb25Qcm9wID0gdGhpcy5fZ2V0U2VsZWN0aW9uRm9yT2Zmc2V0KGUsIGlzUmlnaHQpLFxuICAgICAgICBjdXJzb3JMb2NhdGlvbiA9IHRoaXMuZ2V0MkRDdXJzb3JMb2NhdGlvbihzZWxlY3Rpb25Qcm9wKSxcbiAgICAgICAgbGluZUluZGV4ID0gY3Vyc29yTG9jYXRpb24ubGluZUluZGV4O1xuICAgIC8vIGlmIG9uIGxhc3QgbGluZSwgZG93biBjdXJzb3IgZ29lcyB0byBlbmQgb2YgbGluZVxuICAgIGlmIChsaW5lSW5kZXggPT09IHRoaXMuX3RleHRMaW5lcy5sZW5ndGggLSAxIHx8IGUubWV0YUtleSB8fCBlLmtleUNvZGUgPT09IDM0KSB7XG4gICAgICAvLyBtb3ZlIHRvIHRoZSBlbmQgb2YgYSB0ZXh0XG4gICAgICByZXR1cm4gdGhpcy5fdGV4dC5sZW5ndGggLSBzZWxlY3Rpb25Qcm9wO1xuICAgIH1cbiAgICB2YXIgY2hhckluZGV4ID0gY3Vyc29yTG9jYXRpb24uY2hhckluZGV4LFxuICAgICAgICB3aWR0aEJlZm9yZUN1cnNvciA9IHRoaXMuX2dldFdpZHRoQmVmb3JlQ3Vyc29yKGxpbmVJbmRleCwgY2hhckluZGV4KSxcbiAgICAgICAgaW5kZXhPbk90aGVyTGluZSA9IHRoaXMuX2dldEluZGV4T25MaW5lKGxpbmVJbmRleCArIDEsIHdpZHRoQmVmb3JlQ3Vyc29yKSxcbiAgICAgICAgdGV4dEFmdGVyQ3Vyc29yID0gdGhpcy5fdGV4dExpbmVzW2xpbmVJbmRleF0uc2xpY2UoY2hhckluZGV4KTtcbiAgICByZXR1cm4gdGV4dEFmdGVyQ3Vyc29yLmxlbmd0aCArIGluZGV4T25PdGhlckxpbmUgKyAxICsgdGhpcy5taXNzaW5nTmV3bGluZU9mZnNldChsaW5lSW5kZXgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBwcml2YXRlXG4gICAqIEhlbHBzIGZpbmRpbmcgaWYgdGhlIG9mZnNldCBzaG91bGQgYmUgY291bnRlZCBmcm9tIFN0YXJ0IG9yIEVuZFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmlnaHRcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKi9cbiAgX2dldFNlbGVjdGlvbkZvck9mZnNldDogZnVuY3Rpb24oZSwgaXNSaWdodCkge1xuICAgIGlmIChlLnNoaWZ0S2V5ICYmIHRoaXMuc2VsZWN0aW9uU3RhcnQgIT09IHRoaXMuc2VsZWN0aW9uRW5kICYmIGlzUmlnaHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbkVuZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSaWdodFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICBnZXRVcEN1cnNvck9mZnNldDogZnVuY3Rpb24oZSwgaXNSaWdodCkge1xuICAgIHZhciBzZWxlY3Rpb25Qcm9wID0gdGhpcy5fZ2V0U2VsZWN0aW9uRm9yT2Zmc2V0KGUsIGlzUmlnaHQpLFxuICAgICAgICBjdXJzb3JMb2NhdGlvbiA9IHRoaXMuZ2V0MkRDdXJzb3JMb2NhdGlvbihzZWxlY3Rpb25Qcm9wKSxcbiAgICAgICAgbGluZUluZGV4ID0gY3Vyc29yTG9jYXRpb24ubGluZUluZGV4O1xuICAgIGlmIChsaW5lSW5kZXggPT09IDAgfHwgZS5tZXRhS2V5IHx8IGUua2V5Q29kZSA9PT0gMzMpIHtcbiAgICAgIC8vIGlmIG9uIGZpcnN0IGxpbmUsIHVwIGN1cnNvciBnb2VzIHRvIHN0YXJ0IG9mIGxpbmVcbiAgICAgIHJldHVybiAtc2VsZWN0aW9uUHJvcDtcbiAgICB9XG4gICAgdmFyIGNoYXJJbmRleCA9IGN1cnNvckxvY2F0aW9uLmNoYXJJbmRleCxcbiAgICAgICAgd2lkdGhCZWZvcmVDdXJzb3IgPSB0aGlzLl9nZXRXaWR0aEJlZm9yZUN1cnNvcihsaW5lSW5kZXgsIGNoYXJJbmRleCksXG4gICAgICAgIGluZGV4T25PdGhlckxpbmUgPSB0aGlzLl9nZXRJbmRleE9uTGluZShsaW5lSW5kZXggLSAxLCB3aWR0aEJlZm9yZUN1cnNvciksXG4gICAgICAgIHRleHRCZWZvcmVDdXJzb3IgPSB0aGlzLl90ZXh0TGluZXNbbGluZUluZGV4XS5zbGljZSgwLCBjaGFySW5kZXgpLFxuICAgICAgICBtaXNzaW5nTmV3bGluZU9mZnNldCA9IHRoaXMubWlzc2luZ05ld2xpbmVPZmZzZXQobGluZUluZGV4IC0gMSk7XG4gICAgLy8gcmV0dXJuIGEgbmVnYXRpdmUgb2Zmc2V0XG4gICAgcmV0dXJuIC10aGlzLl90ZXh0TGluZXNbbGluZUluZGV4IC0gMV0ubGVuZ3RoXG4gICAgICsgaW5kZXhPbk90aGVyTGluZSAtIHRleHRCZWZvcmVDdXJzb3IubGVuZ3RoICsgKDEgLSBtaXNzaW5nTmV3bGluZU9mZnNldCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGZvciBhIGdpdmVuIHdpZHRoIGl0IGZvdW5kcyB0aGUgbWF0Y2hpbmcgY2hhcmFjdGVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldEluZGV4T25MaW5lOiBmdW5jdGlvbihsaW5lSW5kZXgsIHdpZHRoKSB7XG5cbiAgICB2YXIgbGluZSA9IHRoaXMuX3RleHRMaW5lc1tsaW5lSW5kZXhdLFxuICAgICAgICBsaW5lTGVmdE9mZnNldCA9IHRoaXMuX2dldExpbmVMZWZ0T2Zmc2V0KGxpbmVJbmRleCksXG4gICAgICAgIHdpZHRoT2ZDaGFyc09uTGluZSA9IGxpbmVMZWZ0T2Zmc2V0LFxuICAgICAgICBpbmRleE9uTGluZSA9IDAsIGNoYXJXaWR0aCwgZm91bmRNYXRjaDtcblxuICAgIGZvciAodmFyIGogPSAwLCBqbGVuID0gbGluZS5sZW5ndGg7IGogPCBqbGVuOyBqKyspIHtcbiAgICAgIGNoYXJXaWR0aCA9IHRoaXMuX19jaGFyQm91bmRzW2xpbmVJbmRleF1bal0ud2lkdGg7XG4gICAgICB3aWR0aE9mQ2hhcnNPbkxpbmUgKz0gY2hhcldpZHRoO1xuICAgICAgaWYgKHdpZHRoT2ZDaGFyc09uTGluZSA+IHdpZHRoKSB7XG4gICAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlO1xuICAgICAgICB2YXIgbGVmdEVkZ2UgPSB3aWR0aE9mQ2hhcnNPbkxpbmUgLSBjaGFyV2lkdGgsXG4gICAgICAgICAgICByaWdodEVkZ2UgPSB3aWR0aE9mQ2hhcnNPbkxpbmUsXG4gICAgICAgICAgICBvZmZzZXRGcm9tTGVmdEVkZ2UgPSBNYXRoLmFicyhsZWZ0RWRnZSAtIHdpZHRoKSxcbiAgICAgICAgICAgIG9mZnNldEZyb21SaWdodEVkZ2UgPSBNYXRoLmFicyhyaWdodEVkZ2UgLSB3aWR0aCk7XG5cbiAgICAgICAgaW5kZXhPbkxpbmUgPSBvZmZzZXRGcm9tUmlnaHRFZGdlIDwgb2Zmc2V0RnJvbUxlZnRFZGdlID8gaiA6IChqIC0gMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJlYWNoZWQgZW5kXG4gICAgaWYgKCFmb3VuZE1hdGNoKSB7XG4gICAgICBpbmRleE9uTGluZSA9IGxpbmUubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5kZXhPbkxpbmU7XG4gIH0sXG5cblxuICAvKipcbiAgICogTW92ZXMgY3Vyc29yIGRvd25cbiAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIG1vdmVDdXJzb3JEb3duOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgPj0gdGhpcy5fdGV4dC5sZW5ndGggJiYgdGhpcy5zZWxlY3Rpb25FbmQgPj0gdGhpcy5fdGV4dC5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbW92ZUN1cnNvclVwT3JEb3duKCdEb3duJywgZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGN1cnNvciB1cFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgbW92ZUN1cnNvclVwOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgPT09IDAgJiYgdGhpcy5zZWxlY3Rpb25FbmQgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbW92ZUN1cnNvclVwT3JEb3duKCdVcCcsIGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb3ZlcyBjdXJzb3IgdXAgb3IgZG93biwgZmlyZXMgdGhlIGV2ZW50c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uICdVcCcgb3IgJ0Rvd24nXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBfbW92ZUN1cnNvclVwT3JEb3duOiBmdW5jdGlvbihkaXJlY3Rpb24sIGUpIHtcbiAgICAvLyBnZXRVcEN1cnNvck9mZnNldFxuICAgIC8vIGdldERvd25DdXJzb3JPZmZzZXRcbiAgICB2YXIgYWN0aW9uID0gJ2dldCcgKyBkaXJlY3Rpb24gKyAnQ3Vyc29yT2Zmc2V0JyxcbiAgICAgICAgb2Zmc2V0ID0gdGhpc1thY3Rpb25dKGUsIHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jyk7XG4gICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcldpdGhTaGlmdChvZmZzZXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcldpdGhvdXRTaGlmdChvZmZzZXQpO1xuICAgIH1cbiAgICBpZiAob2Zmc2V0ICE9PSAwKSB7XG4gICAgICB0aGlzLnNldFNlbGVjdGlvbkluQm91bmRhcmllcygpO1xuICAgICAgdGhpcy5hYm9ydEN1cnNvckFuaW1hdGlvbigpO1xuICAgICAgdGhpcy5fY3VycmVudEN1cnNvck9wYWNpdHkgPSAxO1xuICAgICAgdGhpcy5pbml0RGVsYXllZEN1cnNvcigpO1xuICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkNoYW5nZWQoKTtcbiAgICAgIHRoaXMuX3VwZGF0ZVRleHRhcmVhKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBNb3ZlcyBjdXJzb3Igd2l0aCBzaGlmdFxuICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0XG4gICAqL1xuICBtb3ZlQ3Vyc29yV2l0aFNoaWZ0OiBmdW5jdGlvbihvZmZzZXQpIHtcbiAgICB2YXIgbmV3U2VsZWN0aW9uID0gdGhpcy5fc2VsZWN0aW9uRGlyZWN0aW9uID09PSAnbGVmdCdcbiAgICAgID8gdGhpcy5zZWxlY3Rpb25TdGFydCArIG9mZnNldFxuICAgICAgOiB0aGlzLnNlbGVjdGlvbkVuZCArIG9mZnNldDtcbiAgICB0aGlzLnNldFNlbGVjdGlvblN0YXJ0RW5kV2l0aFNoaWZ0KHRoaXMuc2VsZWN0aW9uU3RhcnQsIHRoaXMuc2VsZWN0aW9uRW5kLCBuZXdTZWxlY3Rpb24pO1xuICAgIHJldHVybiBvZmZzZXQgIT09IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGN1cnNvciB1cCB3aXRob3V0IHNoaWZ0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIG1vdmVDdXJzb3JXaXRob3V0U2hpZnQ6IGZ1bmN0aW9uKG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ICs9IG9mZnNldDtcbiAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbkVuZCArPSBvZmZzZXQ7XG4gICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gdGhpcy5zZWxlY3Rpb25FbmQ7XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQgIT09IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGN1cnNvciBsZWZ0XG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBtb3ZlQ3Vyc29yTGVmdDogZnVuY3Rpb24oZSkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ID09PSAwICYmIHRoaXMuc2VsZWN0aW9uRW5kID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX21vdmVDdXJzb3JMZWZ0T3JSaWdodCgnTGVmdCcsIGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGEgY2hhbmdlIGhhcHBlbmVkXG4gICAqL1xuICBfbW92ZTogZnVuY3Rpb24oZSwgcHJvcCwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIG5ld1ZhbHVlO1xuICAgIGlmIChlLmFsdEtleSkge1xuICAgICAgbmV3VmFsdWUgPSB0aGlzWydmaW5kV29yZEJvdW5kYXJ5JyArIGRpcmVjdGlvbl0odGhpc1twcm9wXSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGUubWV0YUtleSB8fCBlLmtleUNvZGUgPT09IDM1IHx8ICBlLmtleUNvZGUgPT09IDM2ICkge1xuICAgICAgbmV3VmFsdWUgPSB0aGlzWydmaW5kTGluZUJvdW5kYXJ5JyArIGRpcmVjdGlvbl0odGhpc1twcm9wXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpc1twcm9wXSArPSBkaXJlY3Rpb24gPT09ICdMZWZ0JyA/IC0xIDogMTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5ld1ZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzW3Byb3BdICE9PSBuZXdWYWx1ZSkge1xuICAgICAgdGhpc1twcm9wXSA9IG5ld1ZhbHVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX21vdmVMZWZ0OiBmdW5jdGlvbihlLCBwcm9wKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vdmUoZSwgcHJvcCwgJ0xlZnQnKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tb3ZlUmlnaHQ6IGZ1bmN0aW9uKGUsIHByb3ApIHtcbiAgICByZXR1cm4gdGhpcy5fbW92ZShlLCBwcm9wLCAnUmlnaHQnKTtcbiAgfSxcblxuICAvKipcbiAgICogTW92ZXMgY3Vyc29yIGxlZnQgd2l0aG91dCBrZWVwaW5nIHNlbGVjdGlvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqL1xuICBtb3ZlQ3Vyc29yTGVmdFdpdGhvdXRTaGlmdDogZnVuY3Rpb24oZSkge1xuICAgIHZhciBjaGFuZ2UgPSB0cnVlO1xuICAgIHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9ICdsZWZ0JztcblxuICAgIC8vIG9ubHkgbW92ZSBjdXJzb3Igd2hlbiB0aGVyZSBpcyBubyBzZWxlY3Rpb24sXG4gICAgLy8gb3RoZXJ3aXNlIHdlIGRpc2NhcmQgaXQsIGFuZCBsZWF2ZSBjdXJzb3Igb24gc2FtZSBwbGFjZVxuICAgIGlmICh0aGlzLnNlbGVjdGlvbkVuZCA9PT0gdGhpcy5zZWxlY3Rpb25TdGFydCAmJiB0aGlzLnNlbGVjdGlvblN0YXJ0ICE9PSAwKSB7XG4gICAgICBjaGFuZ2UgPSB0aGlzLl9tb3ZlTGVmdChlLCAnc2VsZWN0aW9uU3RhcnQnKTtcblxuICAgIH1cbiAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IHRoaXMuc2VsZWN0aW9uU3RhcnQ7XG4gICAgcmV0dXJuIGNoYW5nZTtcbiAgfSxcblxuICAvKipcbiAgICogTW92ZXMgY3Vyc29yIGxlZnQgd2hpbGUga2VlcGluZyBzZWxlY3Rpb25cbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKi9cbiAgbW92ZUN1cnNvckxlZnRXaXRoU2hpZnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAodGhpcy5fc2VsZWN0aW9uRGlyZWN0aW9uID09PSAncmlnaHQnICYmIHRoaXMuc2VsZWN0aW9uU3RhcnQgIT09IHRoaXMuc2VsZWN0aW9uRW5kKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbW92ZUxlZnQoZSwgJ3NlbGVjdGlvbkVuZCcpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ICE9PSAwKXtcbiAgICAgIHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9ICdsZWZ0JztcbiAgICAgIHJldHVybiB0aGlzLl9tb3ZlTGVmdChlLCAnc2VsZWN0aW9uU3RhcnQnKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGN1cnNvciByaWdodFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgbW92ZUN1cnNvclJpZ2h0OiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgPj0gdGhpcy5fdGV4dC5sZW5ndGggJiYgdGhpcy5zZWxlY3Rpb25FbmQgPj0gdGhpcy5fdGV4dC5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbW92ZUN1cnNvckxlZnRPclJpZ2h0KCdSaWdodCcsIGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb3ZlcyBjdXJzb3IgcmlnaHQgb3IgTGVmdCwgZmlyZXMgZXZlbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRpcmVjdGlvbiAnTGVmdCcsICdSaWdodCdcbiAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIF9tb3ZlQ3Vyc29yTGVmdE9yUmlnaHQ6IGZ1bmN0aW9uKGRpcmVjdGlvbiwgZSkge1xuICAgIHZhciBhY3Rpb25OYW1lID0gJ21vdmVDdXJzb3InICsgZGlyZWN0aW9uICsgJ1dpdGgnO1xuICAgIHRoaXMuX2N1cnJlbnRDdXJzb3JPcGFjaXR5ID0gMTtcblxuICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICBhY3Rpb25OYW1lICs9ICdTaGlmdCc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYWN0aW9uTmFtZSArPSAnb3V0U2hpZnQnO1xuICAgIH1cbiAgICBpZiAodGhpc1thY3Rpb25OYW1lXShlKSkge1xuICAgICAgdGhpcy5hYm9ydEN1cnNvckFuaW1hdGlvbigpO1xuICAgICAgdGhpcy5pbml0RGVsYXllZEN1cnNvcigpO1xuICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkNoYW5nZWQoKTtcbiAgICAgIHRoaXMuX3VwZGF0ZVRleHRhcmVhKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBNb3ZlcyBjdXJzb3IgcmlnaHQgd2hpbGUga2VlcGluZyBzZWxlY3Rpb25cbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKi9cbiAgbW92ZUN1cnNvclJpZ2h0V2l0aFNoaWZ0OiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9PT0gJ2xlZnQnICYmIHRoaXMuc2VsZWN0aW9uU3RhcnQgIT09IHRoaXMuc2VsZWN0aW9uRW5kKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbW92ZVJpZ2h0KGUsICdzZWxlY3Rpb25TdGFydCcpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLnNlbGVjdGlvbkVuZCAhPT0gdGhpcy5fdGV4dC5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9ICdyaWdodCc7XG4gICAgICByZXR1cm4gdGhpcy5fbW92ZVJpZ2h0KGUsICdzZWxlY3Rpb25FbmQnKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGN1cnNvciByaWdodCB3aXRob3V0IGtlZXBpbmcgc2VsZWN0aW9uXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBtb3ZlQ3Vyc29yUmlnaHRXaXRob3V0U2hpZnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgY2hhbmdlZCA9IHRydWU7XG4gICAgdGhpcy5fc2VsZWN0aW9uRGlyZWN0aW9uID0gJ3JpZ2h0JztcblxuICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ID09PSB0aGlzLnNlbGVjdGlvbkVuZCkge1xuICAgICAgY2hhbmdlZCA9IHRoaXMuX21vdmVSaWdodChlLCAnc2VsZWN0aW9uU3RhcnQnKTtcbiAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gdGhpcy5zZWxlY3Rpb25FbmQ7XG4gICAgfVxuICAgIHJldHVybiBjaGFuZ2VkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGNoYXJhY3RlcnMgZnJvbSBzdGFydC9lbmRcbiAgICogc3RhcnQvZW5kIGFyIHBlciBncmFwaGVtZSBwb3NpdGlvbiBpbiBfdGV4dCBhcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbmQgZGVmYXVsdCB0byBzdGFydCArIDFcbiAgICovXG4gIHJlbW92ZUNoYXJzOiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlbmQgPSBzdGFydCArIDE7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlU3R5bGVGcm9tVG8oc3RhcnQsIGVuZCk7XG4gICAgdGhpcy5fdGV4dC5zcGxpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0KTtcbiAgICB0aGlzLnRleHQgPSB0aGlzLl90ZXh0LmpvaW4oJycpO1xuICAgIHRoaXMuc2V0KCdkaXJ0eScsIHRydWUpO1xuICAgIGlmICh0aGlzLl9zaG91bGRDbGVhckRpbWVuc2lvbkNhY2hlKCkpIHtcbiAgICAgIHRoaXMuaW5pdERpbWVuc2lvbnMoKTtcbiAgICAgIHRoaXMuc2V0Q29vcmRzKCk7XG4gICAgfVxuICAgIHRoaXMuX3JlbW92ZUV4dHJhbmVvdXNTdHlsZXMoKTtcbiAgfSxcblxuICAvKipcbiAgICogaW5zZXJ0IGNoYXJhY3RlcnMgYXQgc3RhcnQgcG9zaXRpb24sIGJlZm9yZSBzdGFydCBwb3NpdGlvbi5cbiAgICogc3RhcnQgIGVxdWFsIDEgaXQgbWVhbnMgdGhlIHRleHQgZ2V0IGluc2VydGVkIGJldHdlZW4gYWN0dWFsIGdyYXBoZW1lIDAgYW5kIDFcbiAgICogaWYgc3R5bGUgYXJyYXkgaXMgcHJvdmlkZWQsIGl0IG11c3QgYmUgYXMgdGhlIHNhbWUgbGVuZ3RoIG9mIHRleHQgaW4gZ3JhcGhlbWVzXG4gICAqIGlmIGVuZCBpcyBwcm92aWRlZCBhbmQgaXMgYmlnZ2VyIHRoYW4gc3RhcnQsIG9sZCB0ZXh0IGlzIHJlcGxhY2VkLlxuICAgKiBzdGFydC9lbmQgYXIgcGVyIGdyYXBoZW1lIHBvc2l0aW9uIGluIF90ZXh0IGFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCB0ZXh0IHRvIGluc2VydFxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHlsZSBhcnJheSBvZiBzdHlsZSBvYmplY3RzXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydFxuICAgKiBAcGFyYW0ge051bWJlcn0gZW5kIGRlZmF1bHQgdG8gc3RhcnQgKyAxXG4gICAqL1xuICBpbnNlcnRDaGFyczogZnVuY3Rpb24odGV4dCwgc3R5bGUsIHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVuZCA9IHN0YXJ0O1xuICAgIH1cbiAgICBpZiAoZW5kID4gc3RhcnQpIHtcbiAgICAgIHRoaXMucmVtb3ZlU3R5bGVGcm9tVG8oc3RhcnQsIGVuZCk7XG4gICAgfVxuICAgIHZhciBncmFwaGVtZXMgPSBmYWJyaWMudXRpbC5zdHJpbmcuZ3JhcGhlbWVTcGxpdCh0ZXh0KTtcbiAgICB0aGlzLmluc2VydE5ld1N0eWxlQmxvY2soZ3JhcGhlbWVzLCBzdGFydCwgc3R5bGUpO1xuICAgIHRoaXMuX3RleHQgPSBbXS5jb25jYXQodGhpcy5fdGV4dC5zbGljZSgwLCBzdGFydCksIGdyYXBoZW1lcywgdGhpcy5fdGV4dC5zbGljZShlbmQpKTtcbiAgICB0aGlzLnRleHQgPSB0aGlzLl90ZXh0LmpvaW4oJycpO1xuICAgIHRoaXMuc2V0KCdkaXJ0eScsIHRydWUpO1xuICAgIGlmICh0aGlzLl9zaG91bGRDbGVhckRpbWVuc2lvbkNhY2hlKCkpIHtcbiAgICAgIHRoaXMuaW5pdERpbWVuc2lvbnMoKTtcbiAgICAgIHRoaXMuc2V0Q29vcmRzKCk7XG4gICAgfVxuICAgIHRoaXMuX3JlbW92ZUV4dHJhbmVvdXNTdHlsZXMoKTtcbiAgfSxcblxufSk7XG5cblxuLyogX1RPX1NWR19TVEFSVF8gKi9cbihmdW5jdGlvbigpIHtcbiAgdmFyIHRvRml4ZWQgPSBmYWJyaWMudXRpbC50b0ZpeGVkLFxuICAgICAgbXVsdGlwbGVTcGFjZXNSZWdleCA9IC8gICsvZztcblxuICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5UZXh0LnByb3RvdHlwZSwgLyoqIEBsZW5kcyBmYWJyaWMuVGV4dC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBTVkcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2Ygc3ZnIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgX3RvU1ZHOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvZmZzZXRzID0gdGhpcy5fZ2V0U1ZHTGVmdFRvcE9mZnNldHMoKSxcbiAgICAgICAgICB0ZXh0QW5kQmcgPSB0aGlzLl9nZXRTVkdUZXh0QW5kQmcob2Zmc2V0cy50ZXh0VG9wLCBvZmZzZXRzLnRleHRMZWZ0KTtcbiAgICAgIHJldHVybiB0aGlzLl93cmFwU1ZHVGV4dEFuZEJnKHRleHRBbmRCZyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdIE1ldGhvZCBmb3IgZnVydGhlciBwYXJzaW5nIG9mIHN2ZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvU1ZHOiBmdW5jdGlvbihyZXZpdmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY3JlYXRlQmFzZVNWR01hcmt1cChcbiAgICAgICAgdGhpcy5fdG9TVkcoKSxcbiAgICAgICAgeyByZXZpdmVyOiByZXZpdmVyLCBub1N0eWxlOiB0cnVlLCB3aXRoU2hhZG93OiB0cnVlIH1cbiAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldFNWR0xlZnRUb3BPZmZzZXRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRleHRMZWZ0OiAtdGhpcy53aWR0aCAvIDIsXG4gICAgICAgIHRleHRUb3A6IC10aGlzLmhlaWdodCAvIDIsXG4gICAgICAgIGxpbmVUb3A6IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKDApXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF93cmFwU1ZHVGV4dEFuZEJnOiBmdW5jdGlvbih0ZXh0QW5kQmcpIHtcbiAgICAgIHZhciBub1NoYWRvdyA9IHRydWUsXG4gICAgICAgICAgdGV4dERlY29yYXRpb24gPSB0aGlzLmdldFN2Z1RleHREZWNvcmF0aW9uKHRoaXMpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdGV4dEFuZEJnLnRleHRCZ1JlY3RzLmpvaW4oJycpLFxuICAgICAgICAnXFx0XFx0PHRleHQgeG1sOnNwYWNlPVwicHJlc2VydmVcIiAnLFxuICAgICAgICAodGhpcy5mb250RmFtaWx5ID8gJ2ZvbnQtZmFtaWx5PVwiJyArIHRoaXMuZm9udEZhbWlseS5yZXBsYWNlKC9cIi9nLCAnXFwnJykgKyAnXCIgJyA6ICcnKSxcbiAgICAgICAgKHRoaXMuZm9udFNpemUgPyAnZm9udC1zaXplPVwiJyArIHRoaXMuZm9udFNpemUgKyAnXCIgJyA6ICcnKSxcbiAgICAgICAgKHRoaXMuZm9udFN0eWxlID8gJ2ZvbnQtc3R5bGU9XCInICsgdGhpcy5mb250U3R5bGUgKyAnXCIgJyA6ICcnKSxcbiAgICAgICAgKHRoaXMuZm9udFdlaWdodCA/ICdmb250LXdlaWdodD1cIicgKyB0aGlzLmZvbnRXZWlnaHQgKyAnXCIgJyA6ICcnKSxcbiAgICAgICAgKHRleHREZWNvcmF0aW9uID8gJ3RleHQtZGVjb3JhdGlvbj1cIicgKyB0ZXh0RGVjb3JhdGlvbiArICdcIiAnIDogJycpLFxuICAgICAgICAnc3R5bGU9XCInLCB0aGlzLmdldFN2Z1N0eWxlcyhub1NoYWRvdyksICdcIicsIHRoaXMuYWRkUGFpbnRPcmRlcigpLCAnID4nLFxuICAgICAgICB0ZXh0QW5kQmcudGV4dFNwYW5zLmpvaW4oJycpLFxuICAgICAgICAnPC90ZXh0PlxcbidcbiAgICAgIF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRleHRUb3BPZmZzZXQgVGV4dCB0b3Agb2Zmc2V0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRleHRMZWZ0T2Zmc2V0IFRleHQgbGVmdCBvZmZzZXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgX2dldFNWR1RleHRBbmRCZzogZnVuY3Rpb24odGV4dFRvcE9mZnNldCwgdGV4dExlZnRPZmZzZXQpIHtcbiAgICAgIHZhciB0ZXh0U3BhbnMgPSBbXSxcbiAgICAgICAgICB0ZXh0QmdSZWN0cyA9IFtdLFxuICAgICAgICAgIGhlaWdodCA9IHRleHRUb3BPZmZzZXQsIGxpbmVPZmZzZXQ7XG4gICAgICAvLyBib3VuZGluZy1ib3ggYmFja2dyb3VuZFxuICAgICAgdGhpcy5fc2V0U1ZHQmcodGV4dEJnUmVjdHMpO1xuXG4gICAgICAvLyB0ZXh0IGFuZCB0ZXh0LWJhY2tncm91bmRcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl90ZXh0TGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbGluZU9mZnNldCA9IHRoaXMuX2dldExpbmVMZWZ0T2Zmc2V0KGkpO1xuICAgICAgICBpZiAodGhpcy50ZXh0QmFja2dyb3VuZENvbG9yIHx8IHRoaXMuc3R5bGVIYXMoJ3RleHRCYWNrZ3JvdW5kQ29sb3InLCBpKSkge1xuICAgICAgICAgIHRoaXMuX3NldFNWR1RleHRMaW5lQmcodGV4dEJnUmVjdHMsIGksIHRleHRMZWZ0T2Zmc2V0ICsgbGluZU9mZnNldCwgaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZXRTVkdUZXh0TGluZVRleHQodGV4dFNwYW5zLCBpLCB0ZXh0TGVmdE9mZnNldCArIGxpbmVPZmZzZXQsIGhlaWdodCk7XG4gICAgICAgIGhlaWdodCArPSB0aGlzLmdldEhlaWdodE9mTGluZShpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dFNwYW5zOiB0ZXh0U3BhbnMsXG4gICAgICAgIHRleHRCZ1JlY3RzOiB0ZXh0QmdSZWN0c1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY3JlYXRlVGV4dENoYXJTcGFuOiBmdW5jdGlvbihfY2hhciwgc3R5bGVEZWNsLCBsZWZ0LCB0b3ApIHtcbiAgICAgIHZhciBzaG91bGRVc2VXaGl0ZXNwYWNlID0gX2NoYXIgIT09IF9jaGFyLnRyaW0oKSB8fCBfY2hhci5tYXRjaChtdWx0aXBsZVNwYWNlc1JlZ2V4KSxcbiAgICAgICAgICBzdHlsZVByb3BzID0gdGhpcy5nZXRTdmdTcGFuU3R5bGVzKHN0eWxlRGVjbCwgc2hvdWxkVXNlV2hpdGVzcGFjZSksXG4gICAgICAgICAgZmlsbFN0eWxlcyA9IHN0eWxlUHJvcHMgPyAnc3R5bGU9XCInICsgc3R5bGVQcm9wcyArICdcIicgOiAnJyxcbiAgICAgICAgICBkeSA9IHN0eWxlRGVjbC5kZWx0YVksIGR5U3BhbiA9ICcnLFxuICAgICAgICAgIE5VTV9GUkFDVElPTl9ESUdJVFMgPSBmYWJyaWMuT2JqZWN0Lk5VTV9GUkFDVElPTl9ESUdJVFM7XG4gICAgICBpZiAoZHkpIHtcbiAgICAgICAgZHlTcGFuID0gJyBkeT1cIicgKyB0b0ZpeGVkKGR5LCBOVU1fRlJBQ1RJT05fRElHSVRTKSArICdcIiAnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgJzx0c3BhbiB4PVwiJywgdG9GaXhlZChsZWZ0LCBOVU1fRlJBQ1RJT05fRElHSVRTKSwgJ1wiIHk9XCInLFxuICAgICAgICB0b0ZpeGVkKHRvcCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksICdcIiAnLCBkeVNwYW4sXG4gICAgICAgIGZpbGxTdHlsZXMsICc+JyxcbiAgICAgICAgZmFicmljLnV0aWwuc3RyaW5nLmVzY2FwZVhtbChfY2hhciksXG4gICAgICAgICc8L3RzcGFuPidcbiAgICAgIF0uam9pbignJyk7XG4gICAgfSxcblxuICAgIF9zZXRTVkdUZXh0TGluZVRleHQ6IGZ1bmN0aW9uKHRleHRTcGFucywgbGluZUluZGV4LCB0ZXh0TGVmdE9mZnNldCwgdGV4dFRvcE9mZnNldCkge1xuICAgICAgLy8gc2V0IHByb3BlciBsaW5lIG9mZnNldFxuICAgICAgdmFyIGxpbmVIZWlnaHQgPSB0aGlzLmdldEhlaWdodE9mTGluZShsaW5lSW5kZXgpLFxuICAgICAgICAgIGlzSnVzdGlmeSA9IHRoaXMudGV4dEFsaWduLmluZGV4T2YoJ2p1c3RpZnknKSAhPT0gLTEsXG4gICAgICAgICAgYWN0dWFsU3R5bGUsXG4gICAgICAgICAgbmV4dFN0eWxlLFxuICAgICAgICAgIGNoYXJzVG9SZW5kZXIgPSAnJyxcbiAgICAgICAgICBjaGFyQm94LCBzdHlsZSxcbiAgICAgICAgICBib3hXaWR0aCA9IDAsXG4gICAgICAgICAgbGluZSA9IHRoaXMuX3RleHRMaW5lc1tsaW5lSW5kZXhdLFxuICAgICAgICAgIHRpbWVUb1JlbmRlcjtcblxuICAgICAgdGV4dFRvcE9mZnNldCArPSBsaW5lSGVpZ2h0ICogKDEgLSB0aGlzLl9mb250U2l6ZUZyYWN0aW9uKSAvIHRoaXMubGluZUhlaWdodDtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaW5lLmxlbmd0aCAtIDE7IGkgPD0gbGVuOyBpKyspIHtcbiAgICAgICAgdGltZVRvUmVuZGVyID0gaSA9PT0gbGVuIHx8IHRoaXMuY2hhclNwYWNpbmc7XG4gICAgICAgIGNoYXJzVG9SZW5kZXIgKz0gbGluZVtpXTtcbiAgICAgICAgY2hhckJveCA9IHRoaXMuX19jaGFyQm91bmRzW2xpbmVJbmRleF1baV07XG4gICAgICAgIGlmIChib3hXaWR0aCA9PT0gMCkge1xuICAgICAgICAgIHRleHRMZWZ0T2Zmc2V0ICs9IGNoYXJCb3gua2VybmVkV2lkdGggLSBjaGFyQm94LndpZHRoO1xuICAgICAgICAgIGJveFdpZHRoICs9IGNoYXJCb3gud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYm94V2lkdGggKz0gY2hhckJveC5rZXJuZWRXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNKdXN0aWZ5ICYmICF0aW1lVG9SZW5kZXIpIHtcbiAgICAgICAgICBpZiAodGhpcy5fcmVTcGFjZUFuZFRhYi50ZXN0KGxpbmVbaV0pKSB7XG4gICAgICAgICAgICB0aW1lVG9SZW5kZXIgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRpbWVUb1JlbmRlcikge1xuICAgICAgICAgIC8vIGlmIHdlIGhhdmUgY2hhclNwYWNpbmcsIHdlIHJlbmRlciBjaGFyIGJ5IGNoYXJcbiAgICAgICAgICBhY3R1YWxTdHlsZSA9IGFjdHVhbFN0eWxlIHx8IHRoaXMuZ2V0Q29tcGxldGVTdHlsZURlY2xhcmF0aW9uKGxpbmVJbmRleCwgaSk7XG4gICAgICAgICAgbmV4dFN0eWxlID0gdGhpcy5nZXRDb21wbGV0ZVN0eWxlRGVjbGFyYXRpb24obGluZUluZGV4LCBpICsgMSk7XG4gICAgICAgICAgdGltZVRvUmVuZGVyID0gZmFicmljLnV0aWwuaGFzU3R5bGVDaGFuZ2VkKGFjdHVhbFN0eWxlLCBuZXh0U3R5bGUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lVG9SZW5kZXIpIHtcbiAgICAgICAgICBzdHlsZSA9IHRoaXMuX2dldFN0eWxlRGVjbGFyYXRpb24obGluZUluZGV4LCBpKSB8fCB7IH07XG4gICAgICAgICAgdGV4dFNwYW5zLnB1c2godGhpcy5fY3JlYXRlVGV4dENoYXJTcGFuKGNoYXJzVG9SZW5kZXIsIHN0eWxlLCB0ZXh0TGVmdE9mZnNldCwgdGV4dFRvcE9mZnNldCkpO1xuICAgICAgICAgIGNoYXJzVG9SZW5kZXIgPSAnJztcbiAgICAgICAgICBhY3R1YWxTdHlsZSA9IG5leHRTdHlsZTtcbiAgICAgICAgICB0ZXh0TGVmdE9mZnNldCArPSBib3hXaWR0aDtcbiAgICAgICAgICBib3hXaWR0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX3B1c2hUZXh0QmdSZWN0OiBmdW5jdGlvbih0ZXh0QmdSZWN0cywgY29sb3IsIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgdmFyIE5VTV9GUkFDVElPTl9ESUdJVFMgPSBmYWJyaWMuT2JqZWN0Lk5VTV9GUkFDVElPTl9ESUdJVFM7XG4gICAgICB0ZXh0QmdSZWN0cy5wdXNoKFxuICAgICAgICAnXFx0XFx0PHJlY3QgJyxcbiAgICAgICAgdGhpcy5fZ2V0RmlsbEF0dHJpYnV0ZXMoY29sb3IpLFxuICAgICAgICAnIHg9XCInLFxuICAgICAgICB0b0ZpeGVkKGxlZnQsIE5VTV9GUkFDVElPTl9ESUdJVFMpLFxuICAgICAgICAnXCIgeT1cIicsXG4gICAgICAgIHRvRml4ZWQodG9wLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgJ1wiIHdpZHRoPVwiJyxcbiAgICAgICAgdG9GaXhlZCh3aWR0aCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICdcIiBoZWlnaHQ9XCInLFxuICAgICAgICB0b0ZpeGVkKGhlaWdodCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICdcIj48L3JlY3Q+XFxuJyk7XG4gICAgfSxcblxuICAgIF9zZXRTVkdUZXh0TGluZUJnOiBmdW5jdGlvbih0ZXh0QmdSZWN0cywgaSwgbGVmdE9mZnNldCwgdGV4dFRvcE9mZnNldCkge1xuICAgICAgdmFyIGxpbmUgPSB0aGlzLl90ZXh0TGluZXNbaV0sXG4gICAgICAgICAgaGVpZ2h0T2ZMaW5lID0gdGhpcy5nZXRIZWlnaHRPZkxpbmUoaSkgLyB0aGlzLmxpbmVIZWlnaHQsXG4gICAgICAgICAgYm94V2lkdGggPSAwLFxuICAgICAgICAgIGJveFN0YXJ0ID0gMCxcbiAgICAgICAgICBjaGFyQm94LCBjdXJyZW50Q29sb3IsXG4gICAgICAgICAgbGFzdENvbG9yID0gdGhpcy5nZXRWYWx1ZU9mUHJvcGVydHlBdChpLCAwLCAndGV4dEJhY2tncm91bmRDb2xvcicpO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGpsZW4gPSBsaW5lLmxlbmd0aDsgaiA8IGpsZW47IGorKykge1xuICAgICAgICBjaGFyQm94ID0gdGhpcy5fX2NoYXJCb3VuZHNbaV1bal07XG4gICAgICAgIGN1cnJlbnRDb2xvciA9IHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQoaSwgaiwgJ3RleHRCYWNrZ3JvdW5kQ29sb3InKTtcbiAgICAgICAgaWYgKGN1cnJlbnRDb2xvciAhPT0gbGFzdENvbG9yKSB7XG4gICAgICAgICAgbGFzdENvbG9yICYmIHRoaXMuX3B1c2hUZXh0QmdSZWN0KHRleHRCZ1JlY3RzLCBsYXN0Q29sb3IsIGxlZnRPZmZzZXQgKyBib3hTdGFydCxcbiAgICAgICAgICAgIHRleHRUb3BPZmZzZXQsIGJveFdpZHRoLCBoZWlnaHRPZkxpbmUpO1xuICAgICAgICAgIGJveFN0YXJ0ID0gY2hhckJveC5sZWZ0O1xuICAgICAgICAgIGJveFdpZHRoID0gY2hhckJveC53aWR0aDtcbiAgICAgICAgICBsYXN0Q29sb3IgPSBjdXJyZW50Q29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYm94V2lkdGggKz0gY2hhckJveC5rZXJuZWRXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3VycmVudENvbG9yICYmIHRoaXMuX3B1c2hUZXh0QmdSZWN0KHRleHRCZ1JlY3RzLCBjdXJyZW50Q29sb3IsIGxlZnRPZmZzZXQgKyBib3hTdGFydCxcbiAgICAgICAgdGV4dFRvcE9mZnNldCwgYm94V2lkdGgsIGhlaWdodE9mTGluZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkb2JlIElsbHVzdHJhdG9yIChhdCBsZWFzdCBDUzUpIGlzIHVuYWJsZSB0byByZW5kZXIgcmdiYSgpLWJhc2VkIGZpbGwgdmFsdWVzXG4gICAgICogd2Ugd29yayBhcm91bmQgaXQgYnkgXCJtb3ZpbmdcIiBhbHBoYSBjaGFubmVsIGludG8gb3BhY2l0eSBhdHRyaWJ1dGUgYW5kIHNldHRpbmcgZmlsbCdzIGFscGhhIHRvIDFcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBfZ2V0RmlsbEF0dHJpYnV0ZXM6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgZmlsbENvbG9yID0gKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpID8gbmV3IGZhYnJpYy5Db2xvcih2YWx1ZSkgOiAnJztcbiAgICAgIGlmICghZmlsbENvbG9yIHx8ICFmaWxsQ29sb3IuZ2V0U291cmNlKCkgfHwgZmlsbENvbG9yLmdldEFscGhhKCkgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuICdmaWxsPVwiJyArIHZhbHVlICsgJ1wiJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnb3BhY2l0eT1cIicgKyBmaWxsQ29sb3IuZ2V0QWxwaGEoKSArICdcIiBmaWxsPVwiJyArIGZpbGxDb2xvci5zZXRBbHBoYSgxKS50b1JnYigpICsgJ1wiJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0U1ZHTGluZVRvcE9mZnNldDogZnVuY3Rpb24obGluZUluZGV4KSB7XG4gICAgICB2YXIgbGluZVRvcE9mZnNldCA9IDAsIGxhc3RIZWlnaHQgPSAwO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsaW5lSW5kZXg7IGorKykge1xuICAgICAgICBsaW5lVG9wT2Zmc2V0ICs9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGopO1xuICAgICAgfVxuICAgICAgbGFzdEhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGopO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZVRvcDogbGluZVRvcE9mZnNldCxcbiAgICAgICAgb2Zmc2V0OiAodGhpcy5fZm9udFNpemVNdWx0IC0gdGhpcy5fZm9udFNpemVGcmFjdGlvbikgKiBsYXN0SGVpZ2h0IC8gKHRoaXMubGluZUhlaWdodCAqIHRoaXMuX2ZvbnRTaXplTXVsdClcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3R5bGVzLXN0cmluZyBmb3Igc3ZnLWV4cG9ydFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gc2tpcFNoYWRvdyBhIGJvb2xlYW4gdG8gc2tpcCBzaGFkb3cgZmlsdGVyIG91dHB1dFxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRTdmdTdHlsZXM6IGZ1bmN0aW9uKHNraXBTaGFkb3cpIHtcbiAgICAgIHZhciBzdmdTdHlsZSA9IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLmdldFN2Z1N0eWxlcy5jYWxsKHRoaXMsIHNraXBTaGFkb3cpO1xuICAgICAgcmV0dXJuIHN2Z1N0eWxlICsgJyB3aGl0ZS1zcGFjZTogcHJlOyc7XG4gICAgfSxcbiAgfSk7XG59KSgpO1xuLyogX1RPX1NWR19FTkRfICovXG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHt9KTtcblxuICAvKipcbiAgICogVGV4dGJveCBjbGFzcywgYmFzZWQgb24gSVRleHQsIGFsbG93cyB0aGUgdXNlciB0byByZXNpemUgdGhlIHRleHQgcmVjdGFuZ2xlXG4gICAqIGFuZCB3cmFwcyBsaW5lcyBhdXRvbWF0aWNhbGx5LiBUZXh0Ym94ZXMgaGF2ZSB0aGVpciBZIHNjYWxpbmcgbG9ja2VkLCB0aGVcbiAgICogdXNlciBjYW4gb25seSBjaGFuZ2Ugd2lkdGguIEhlaWdodCBpcyBhZGp1c3RlZCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIHRoZVxuICAgKiB3cmFwcGluZyBvZiBsaW5lcy5cbiAgICogQGNsYXNzIGZhYnJpYy5UZXh0Ym94XG4gICAqIEBleHRlbmRzIGZhYnJpYy5JVGV4dFxuICAgKiBAbWl4ZXMgZmFicmljLk9ic2VydmFibGVcbiAgICogQHJldHVybiB7ZmFicmljLlRleHRib3h9IHRoaXNBcmdcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLlRleHRib3gjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICovXG4gIGZhYnJpYy5UZXh0Ym94ID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLklUZXh0LCBmYWJyaWMuT2JzZXJ2YWJsZSwge1xuXG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBhbiBvYmplY3RcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICd0ZXh0Ym94JyxcblxuICAgIC8qKlxuICAgICAqIE1pbmltdW0gd2lkdGggb2YgdGV4dGJveCwgaW4gcGl4ZWxzLlxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbWluV2lkdGg6IDIwLFxuXG4gICAgLyoqXG4gICAgICogTWluaW11bSBjYWxjdWxhdGVkIHdpZHRoIG9mIGEgdGV4dGJveCwgaW4gcGl4ZWxzLlxuICAgICAqIGZpeGVkIHRvIDIgc28gdGhhdCBhbiBlbXB0eSB0ZXh0Ym94IGNhbm5vdCBnbyB0byAwXG4gICAgICogYW5kIGlzIHN0aWxsIHNlbGVjdGFibGUgd2l0aG91dCB0ZXh0LlxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZHluYW1pY01pbldpZHRoOiAyLFxuXG4gICAgLyoqXG4gICAgICogQ2FjaGVkIGFycmF5IG9mIHRleHQgd3JhcHBpbmcuXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKi9cbiAgICBfX2NhY2hlZExpbmVzOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgc3RhbmRhcmQgT2JqZWN0IGNsYXNzIHZhbHVlc1xuICAgICAqL1xuICAgIGxvY2tTY2FsaW5nRmxpcDogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHN0YW5kYXJkIE9iamVjdCBjbGFzcyB2YWx1ZXNcbiAgICAgKiBUZXh0Ym94IG5lZWRzIHRoaXMgb24gZmFsc2VcbiAgICAgKi9cbiAgICBub1NjYWxlQ2FjaGU6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyB3aGljaCB3aGVuIHNldCBjYXVzZSBvYmplY3QgdG8gY2hhbmdlIGRpbWVuc2lvbnNcbiAgICAgKiBAdHlwZSBPYmplY3RcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9kaW1lbnNpb25BZmZlY3RpbmdQcm9wczogZmFicmljLlRleHQucHJvdG90eXBlLl9kaW1lbnNpb25BZmZlY3RpbmdQcm9wcy5jb25jYXQoJ3dpZHRoJyksXG5cbiAgICAvKipcbiAgICAgKiBVc2UgdGhpcyByZWd1bGFyIGV4cHJlc3Npb24gdG8gc3BsaXQgc3RyaW5ncyBpbiBicmVha2FibGUgbGluZXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF93b3JkSm9pbmVyczogL1sgXFx0XFxyXS8sXG5cbiAgICAvKipcbiAgICAgKiBVc2UgdGhpcyBib29sZWFuIHByb3BlcnR5IGluIG9yZGVyIHRvIHNwbGl0IHN0cmluZ3MgdGhhdCBoYXZlIG5vIHdoaXRlIHNwYWNlIGNvbmNlcHQuXG4gICAgICogdGhpcyBpcyBhIGNoZWFwIHdheSB0byBoZWxwIHdpdGggY2hpbmVzZS9qYXBhbmVzZVxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAc2luY2UgMi42LjBcbiAgICAgKi9cbiAgICBzcGxpdEJ5R3JhcGhlbWU6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogVW5saWtlIHN1cGVyY2xhc3MncyB2ZXJzaW9uIG9mIHRoaXMgZnVuY3Rpb24sIFRleHRib3ggZG9lcyBub3QgdXBkYXRlXG4gICAgICogaXRzIHdpZHRoLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgaW5pdERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX19za2lwRGltZW5zaW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuaXNFZGl0aW5nICYmIHRoaXMuaW5pdERlbGF5ZWRDdXJzb3IoKTtcbiAgICAgIHRoaXMuY2xlYXJDb250ZXh0VG9wKCk7XG4gICAgICB0aGlzLl9jbGVhckNhY2hlKCk7XG4gICAgICAvLyBjbGVhciBkeW5hbWljTWluV2lkdGggYXMgaXQgd2lsbCBiZSBkaWZmZXJlbnQgYWZ0ZXIgd2UgcmUtd3JhcCBsaW5lXG4gICAgICB0aGlzLmR5bmFtaWNNaW5XaWR0aCA9IDA7XG4gICAgICAvLyB3cmFwIGxpbmVzXG4gICAgICB0aGlzLl9zdHlsZU1hcCA9IHRoaXMuX2dlbmVyYXRlU3R5bGVNYXAodGhpcy5fc3BsaXRUZXh0KCkpO1xuICAgICAgLy8gaWYgYWZ0ZXIgd3JhcHBpbmcsIHRoZSB3aWR0aCBpcyBzbWFsbGVyIHRoYW4gZHluYW1pY01pbldpZHRoLCBjaGFuZ2UgdGhlIHdpZHRoIGFuZCByZS13cmFwXG4gICAgICBpZiAodGhpcy5keW5hbWljTWluV2lkdGggPiB0aGlzLndpZHRoKSB7XG4gICAgICAgIHRoaXMuX3NldCgnd2lkdGgnLCB0aGlzLmR5bmFtaWNNaW5XaWR0aCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50ZXh0QWxpZ24uaW5kZXhPZignanVzdGlmeScpICE9PSAtMSkge1xuICAgICAgICAvLyBvbmNlIHRleHQgaXMgbWVhc3VyZWQgd2UgbmVlZCB0byBtYWtlIHNwYWNlIGZhdHRlciB0byBtYWtlIGp1c3RpZmllZCB0ZXh0LlxuICAgICAgICB0aGlzLmVubGFyZ2VTcGFjZXMoKTtcbiAgICAgIH1cbiAgICAgIC8vIGNsZWFyIGNhY2hlIGFuZCByZS1jYWxjdWxhdGUgaGVpZ2h0XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMuY2FsY1RleHRIZWlnaHQoKTtcbiAgICAgIHRoaXMuc2F2ZVN0YXRlKHsgcHJvcGVydHlTZXQ6ICdfZGltZW5zaW9uQWZmZWN0aW5nUHJvcHMnIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhbiBvYmplY3QgdGhhdCB0cmFuc2xhdGVzIHRoZSBzdHlsZSBvYmplY3Qgc28gdGhhdCBpdCBpc1xuICAgICAqIGJyb2tlbiB1cCBieSB2aXN1YWwgbGluZXMgKG5ldyBsaW5lcyBhbmQgYXV0b21hdGljIHdyYXBwaW5nKS5cbiAgICAgKiBUaGUgb3JpZ2luYWwgdGV4dCBzdHlsZXMgb2JqZWN0IGlzIGJyb2tlbiB1cCBieSBhY3R1YWwgbGluZXMgKG5ldyBsaW5lcyBvbmx5KSxcbiAgICAgKiB3aGljaCBpcyBvbmx5IHN1ZmZpY2llbnQgZm9yIFRleHQgLyBJVGV4dFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dlbmVyYXRlU3R5bGVNYXA6IGZ1bmN0aW9uKHRleHRJbmZvKSB7XG4gICAgICB2YXIgcmVhbExpbmVDb3VudCAgICAgPSAwLFxuICAgICAgICAgIHJlYWxMaW5lQ2hhckNvdW50ID0gMCxcbiAgICAgICAgICBjaGFyQ291bnQgICAgICAgICA9IDAsXG4gICAgICAgICAgbWFwICAgICAgICAgICAgICAgPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0SW5mby5ncmFwaGVtZUxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0ZXh0SW5mby5ncmFwaGVtZVRleHRbY2hhckNvdW50XSA9PT0gJ1xcbicgJiYgaSA+IDApIHtcbiAgICAgICAgICByZWFsTGluZUNoYXJDb3VudCA9IDA7XG4gICAgICAgICAgY2hhckNvdW50Kys7XG4gICAgICAgICAgcmVhbExpbmVDb3VudCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLnNwbGl0QnlHcmFwaGVtZSAmJiB0aGlzLl9yZVNwYWNlQW5kVGFiLnRlc3QodGV4dEluZm8uZ3JhcGhlbWVUZXh0W2NoYXJDb3VudF0pICYmIGkgPiAwKSB7XG4gICAgICAgICAgLy8gdGhpcyBjYXNlIGRlYWxzIHdpdGggc3BhY2UncyB0aGF0IGFyZSByZW1vdmVkIGZyb20gZW5kIG9mIGxpbmVzIHdoZW4gd3JhcHBpbmdcbiAgICAgICAgICByZWFsTGluZUNoYXJDb3VudCsrO1xuICAgICAgICAgIGNoYXJDb3VudCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwW2ldID0geyBsaW5lOiByZWFsTGluZUNvdW50LCBvZmZzZXQ6IHJlYWxMaW5lQ2hhckNvdW50IH07XG5cbiAgICAgICAgY2hhckNvdW50ICs9IHRleHRJbmZvLmdyYXBoZW1lTGluZXNbaV0ubGVuZ3RoO1xuICAgICAgICByZWFsTGluZUNoYXJDb3VudCArPSB0ZXh0SW5mby5ncmFwaGVtZUxpbmVzW2ldLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIG9iamVjdCBoYXMgYSBzdHlsZSBwcm9wZXJ0eSBvciBoYXMgaXQgb24gYSBzcGVjaWZpZWQgbGluZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIHN0eWxlSGFzOiBmdW5jdGlvbihwcm9wZXJ0eSwgbGluZUluZGV4KSB7XG4gICAgICBpZiAodGhpcy5fc3R5bGVNYXAgJiYgIXRoaXMuaXNXcmFwcGluZykge1xuICAgICAgICB2YXIgbWFwID0gdGhpcy5fc3R5bGVNYXBbbGluZUluZGV4XTtcbiAgICAgICAgaWYgKG1hcCkge1xuICAgICAgICAgIGxpbmVJbmRleCA9IG1hcC5saW5lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFicmljLlRleHQucHJvdG90eXBlLnN0eWxlSGFzLmNhbGwodGhpcywgcHJvcGVydHksIGxpbmVJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBvYmplY3QgaGFzIG5vIHN0eWxpbmcgb3Igbm8gc3R5bGluZyBpbiBhIGxpbmVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4ICwgbGluZUluZGV4IGlzIG9uIHdyYXBwZWQgbGluZXMuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0VtcHR5U3R5bGVzOiBmdW5jdGlvbihsaW5lSW5kZXgpIHtcbiAgICAgIGlmICghdGhpcy5zdHlsZXMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gMCwgbmV4dExpbmVJbmRleCA9IGxpbmVJbmRleCArIDEsIG5leHRPZmZzZXQsIG9iaiwgc2hvdWxkTGltaXQgPSBmYWxzZSxcbiAgICAgICAgICBtYXAgPSB0aGlzLl9zdHlsZU1hcFtsaW5lSW5kZXhdLCBtYXBOZXh0TGluZSA9IHRoaXMuX3N0eWxlTWFwW2xpbmVJbmRleCArIDFdO1xuICAgICAgaWYgKG1hcCkge1xuICAgICAgICBsaW5lSW5kZXggPSBtYXAubGluZTtcbiAgICAgICAgb2Zmc2V0ID0gbWFwLm9mZnNldDtcbiAgICAgIH1cbiAgICAgIGlmIChtYXBOZXh0TGluZSkge1xuICAgICAgICBuZXh0TGluZUluZGV4ID0gbWFwTmV4dExpbmUubGluZTtcbiAgICAgICAgc2hvdWxkTGltaXQgPSBuZXh0TGluZUluZGV4ID09PSBsaW5lSW5kZXg7XG4gICAgICAgIG5leHRPZmZzZXQgPSBtYXBOZXh0TGluZS5vZmZzZXQ7XG4gICAgICB9XG4gICAgICBvYmogPSB0eXBlb2YgbGluZUluZGV4ID09PSAndW5kZWZpbmVkJyA/IHRoaXMuc3R5bGVzIDogeyBsaW5lOiB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdIH07XG4gICAgICBmb3IgKHZhciBwMSBpbiBvYmopIHtcbiAgICAgICAgZm9yICh2YXIgcDIgaW4gb2JqW3AxXSkge1xuICAgICAgICAgIGlmIChwMiA+PSBvZmZzZXQgJiYgKCFzaG91bGRMaW1pdCB8fCBwMiA8IG5leHRPZmZzZXQpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgICAgICAgIGZvciAodmFyIHAzIGluIG9ialtwMV1bcDJdKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYXJJbmRleFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldFN0eWxlRGVjbGFyYXRpb246IGZ1bmN0aW9uKGxpbmVJbmRleCwgY2hhckluZGV4KSB7XG4gICAgICBpZiAodGhpcy5fc3R5bGVNYXAgJiYgIXRoaXMuaXNXcmFwcGluZykge1xuICAgICAgICB2YXIgbWFwID0gdGhpcy5fc3R5bGVNYXBbbGluZUluZGV4XTtcbiAgICAgICAgaWYgKCFtYXApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsaW5lSW5kZXggPSBtYXAubGluZTtcbiAgICAgICAgY2hhckluZGV4ID0gbWFwLm9mZnNldCArIGNoYXJJbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmNhbGxTdXBlcignX2dldFN0eWxlRGVjbGFyYXRpb24nLCBsaW5lSW5kZXgsIGNoYXJJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2hhckluZGV4XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0U3R5bGVEZWNsYXJhdGlvbjogZnVuY3Rpb24obGluZUluZGV4LCBjaGFySW5kZXgsIHN0eWxlKSB7XG4gICAgICB2YXIgbWFwID0gdGhpcy5fc3R5bGVNYXBbbGluZUluZGV4XTtcbiAgICAgIGxpbmVJbmRleCA9IG1hcC5saW5lO1xuICAgICAgY2hhckluZGV4ID0gbWFwLm9mZnNldCArIGNoYXJJbmRleDtcblxuICAgICAgdGhpcy5zdHlsZXNbbGluZUluZGV4XVtjaGFySW5kZXhdID0gc3R5bGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2hhckluZGV4XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZGVsZXRlU3R5bGVEZWNsYXJhdGlvbjogZnVuY3Rpb24obGluZUluZGV4LCBjaGFySW5kZXgpIHtcbiAgICAgIHZhciBtYXAgPSB0aGlzLl9zdHlsZU1hcFtsaW5lSW5kZXhdO1xuICAgICAgbGluZUluZGV4ID0gbWFwLmxpbmU7XG4gICAgICBjaGFySW5kZXggPSBtYXAub2Zmc2V0ICsgY2hhckluZGV4O1xuICAgICAgZGVsZXRlIHRoaXMuc3R5bGVzW2xpbmVJbmRleF1bY2hhckluZGV4XTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcHJvYmFibHkgYnJva2VuIG5lZWQgYSBmaXhcbiAgICAgKiBSZXR1cm5zIHRoZSByZWFsIHN0eWxlIGxpbmUgdGhhdCBjb3JyZXNwb25kIHRvIHRoZSB3cmFwcGVkIGxpbmVJbmRleCBsaW5lXG4gICAgICogVXNlZCBqdXN0IHRvIHZlcmlmeSBpZiB0aGUgbGluZSBkb2VzIGV4aXN0IG9yIG5vdC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4XG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IGlmIHRoZSBsaW5lIGV4aXN0cyBvciBub3RcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRMaW5lU3R5bGU6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgdmFyIG1hcCA9IHRoaXMuX3N0eWxlTWFwW2xpbmVJbmRleF07XG4gICAgICByZXR1cm4gISF0aGlzLnN0eWxlc1ttYXAubGluZV07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbGluZSBzdHlsZSB0byBhbiBlbXB0eSBvYmplY3Qgc28gdGhhdCBpcyBpbml0aWFsaXplZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXRMaW5lU3R5bGU6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgdmFyIG1hcCA9IHRoaXMuX3N0eWxlTWFwW2xpbmVJbmRleF07XG4gICAgICB0aGlzLnN0eWxlc1ttYXAubGluZV0gPSB7fTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogV3JhcHMgdGV4dCB1c2luZyB0aGUgJ3dpZHRoJyBwcm9wZXJ0eSBvZiBUZXh0Ym94LiBGaXJzdCB0aGlzIGZ1bmN0aW9uXG4gICAgICogc3BsaXRzIHRleHQgb24gbmV3bGluZXMsIHNvIHdlIHByZXNlcnZlIG5ld2xpbmVzIGVudGVyZWQgYnkgdGhlIHVzZXIuXG4gICAgICogVGhlbiBpdCB3cmFwcyBlYWNoIGxpbmUgdXNpbmcgdGhlIHdpZHRoIG9mIHRoZSBUZXh0Ym94IGJ5IGNhbGxpbmdcbiAgICAgKiBfd3JhcExpbmUoKS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBsaW5lcyBUaGUgc3RyaW5nIGFycmF5IG9mIHRleHQgdGhhdCBpcyBzcGxpdCBpbnRvIGxpbmVzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRlc2lyZWRXaWR0aCB3aWR0aCB5b3Ugd2FudCB0byB3cmFwIHRvXG4gICAgICogQHJldHVybnMge0FycmF5fSBBcnJheSBvZiBsaW5lc1xuICAgICAqL1xuICAgIF93cmFwVGV4dDogZnVuY3Rpb24obGluZXMsIGRlc2lyZWRXaWR0aCkge1xuICAgICAgdmFyIHdyYXBwZWQgPSBbXSwgaTtcbiAgICAgIHRoaXMuaXNXcmFwcGluZyA9IHRydWU7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQuY29uY2F0KHRoaXMuX3dyYXBMaW5lKGxpbmVzW2ldLCBpLCBkZXNpcmVkV2lkdGgpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaXNXcmFwcGluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHdyYXBwZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byBtZWFzdXJlIGEgc3RyaW5nIG9mIHRleHQsIGdpdmVuIGl0cyBsaW5lSW5kZXggYW5kIGNoYXJJbmRleCBvZmZzZXRcbiAgICAgKiBpdCBnZXRzIGNhbGxlZCB3aGVuIGNoYXJCb3VuZHMgYXJlIG5vdCBhdmFpbGFibGUgeWV0LlxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2hhck9mZnNldFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbWVhc3VyZVdvcmQ6IGZ1bmN0aW9uKHdvcmQsIGxpbmVJbmRleCwgY2hhck9mZnNldCkge1xuICAgICAgdmFyIHdpZHRoID0gMCwgcHJldkdyYXBoZW1lLCBza2lwTGVmdCA9IHRydWU7XG4gICAgICBjaGFyT2Zmc2V0ID0gY2hhck9mZnNldCB8fCAwO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHdvcmQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGJveCA9IHRoaXMuX2dldEdyYXBoZW1lQm94KHdvcmRbaV0sIGxpbmVJbmRleCwgaSArIGNoYXJPZmZzZXQsIHByZXZHcmFwaGVtZSwgc2tpcExlZnQpO1xuICAgICAgICB3aWR0aCArPSBib3gua2VybmVkV2lkdGg7XG4gICAgICAgIHByZXZHcmFwaGVtZSA9IHdvcmRbaV07XG4gICAgICB9XG4gICAgICByZXR1cm4gd2lkdGg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFdyYXBzIGEgbGluZSBvZiB0ZXh0IHVzaW5nIHRoZSB3aWR0aCBvZiB0aGUgVGV4dGJveCBhbmQgYSBjb250ZXh0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGxpbmUgVGhlIGdyYXBoZW1lIGFycmF5IHRoYXQgcmVwcmVzZW50IHRoZSBsaW5lXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZXNpcmVkV2lkdGggd2lkdGggeW91IHdhbnQgdG8gd3JhcCB0aGUgbGluZSB0b1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByZXNlcnZlZFNwYWNlIHNwYWNlIHRvIHJlbW92ZSBmcm9tIHdyYXBwaW5nIGZvciBjdXN0b20gZnVuY3Rpb25hbGl0aWVzXG4gICAgICogQHJldHVybnMge0FycmF5fSBBcnJheSBvZiBsaW5lKHMpIGludG8gd2hpY2ggdGhlIGdpdmVuIHRleHQgaXMgd3JhcHBlZFxuICAgICAqIHRvLlxuICAgICAqL1xuICAgIF93cmFwTGluZTogZnVuY3Rpb24oX2xpbmUsIGxpbmVJbmRleCwgZGVzaXJlZFdpZHRoLCByZXNlcnZlZFNwYWNlKSB7XG4gICAgICB2YXIgbGluZVdpZHRoID0gMCxcbiAgICAgICAgICBzcGxpdEJ5R3JhcGhlbWUgPSB0aGlzLnNwbGl0QnlHcmFwaGVtZSxcbiAgICAgICAgICBncmFwaGVtZUxpbmVzID0gW10sXG4gICAgICAgICAgbGluZSA9IFtdLFxuICAgICAgICAgIC8vIHNwYWNlcyBpbiBkaWZmZXJlbnQgbGFuZ3VhZ2VzP1xuICAgICAgICAgIHdvcmRzID0gc3BsaXRCeUdyYXBoZW1lID8gZmFicmljLnV0aWwuc3RyaW5nLmdyYXBoZW1lU3BsaXQoX2xpbmUpIDogX2xpbmUuc3BsaXQodGhpcy5fd29yZEpvaW5lcnMpLFxuICAgICAgICAgIHdvcmQgPSAnJyxcbiAgICAgICAgICBvZmZzZXQgPSAwLFxuICAgICAgICAgIGluZml4ID0gc3BsaXRCeUdyYXBoZW1lID8gJycgOiAnICcsXG4gICAgICAgICAgd29yZFdpZHRoID0gMCxcbiAgICAgICAgICBpbmZpeFdpZHRoID0gMCxcbiAgICAgICAgICBsYXJnZXN0V29yZFdpZHRoID0gMCxcbiAgICAgICAgICBsaW5lSnVzdFN0YXJ0ZWQgPSB0cnVlLFxuICAgICAgICAgIGFkZGl0aW9uYWxTcGFjZSA9IHRoaXMuX2dldFdpZHRoT2ZDaGFyU3BhY2luZygpLFxuICAgICAgICAgIHJlc2VydmVkU3BhY2UgPSByZXNlcnZlZFNwYWNlIHx8IDA7XG4gICAgICAvLyBmaXggYSBkaWZmZXJlbmNlIGJldHdlZW4gc3BsaXQgYW5kIGdyYXBoZW1lU3BsaXRcbiAgICAgIGlmICh3b3Jkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgd29yZHMucHVzaChbXSk7XG4gICAgICB9XG4gICAgICBkZXNpcmVkV2lkdGggLT0gcmVzZXJ2ZWRTcGFjZTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gaWYgdXNpbmcgc3BsaXRCeUdyYXBoZW1lIHdvcmRzIGFyZSBhbHJlYWR5IGluIGdyYXBoZW1lcy5cbiAgICAgICAgd29yZCA9IHNwbGl0QnlHcmFwaGVtZSA/IHdvcmRzW2ldIDogZmFicmljLnV0aWwuc3RyaW5nLmdyYXBoZW1lU3BsaXQod29yZHNbaV0pO1xuICAgICAgICB3b3JkV2lkdGggPSB0aGlzLl9tZWFzdXJlV29yZCh3b3JkLCBsaW5lSW5kZXgsIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSB3b3JkLmxlbmd0aDtcblxuICAgICAgICBsaW5lV2lkdGggKz0gaW5maXhXaWR0aCArIHdvcmRXaWR0aCAtIGFkZGl0aW9uYWxTcGFjZTtcbiAgICAgICAgaWYgKGxpbmVXaWR0aCA+IGRlc2lyZWRXaWR0aCAmJiAhbGluZUp1c3RTdGFydGVkKSB7XG4gICAgICAgICAgZ3JhcGhlbWVMaW5lcy5wdXNoKGxpbmUpO1xuICAgICAgICAgIGxpbmUgPSBbXTtcbiAgICAgICAgICBsaW5lV2lkdGggPSB3b3JkV2lkdGg7XG4gICAgICAgICAgbGluZUp1c3RTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBsaW5lV2lkdGggKz0gYWRkaXRpb25hbFNwYWNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsaW5lSnVzdFN0YXJ0ZWQgJiYgIXNwbGl0QnlHcmFwaGVtZSkge1xuICAgICAgICAgIGxpbmUucHVzaChpbmZpeCk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZSA9IGxpbmUuY29uY2F0KHdvcmQpO1xuXG4gICAgICAgIGluZml4V2lkdGggPSBzcGxpdEJ5R3JhcGhlbWUgPyAwIDogdGhpcy5fbWVhc3VyZVdvcmQoW2luZml4XSwgbGluZUluZGV4LCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgbGluZUp1c3RTdGFydGVkID0gZmFsc2U7XG4gICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgbGFyZ2VzdCB3b3JkXG4gICAgICAgIGlmICh3b3JkV2lkdGggPiBsYXJnZXN0V29yZFdpZHRoKSB7XG4gICAgICAgICAgbGFyZ2VzdFdvcmRXaWR0aCA9IHdvcmRXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpICYmIGdyYXBoZW1lTGluZXMucHVzaChsaW5lKTtcblxuICAgICAgaWYgKGxhcmdlc3RXb3JkV2lkdGggKyByZXNlcnZlZFNwYWNlID4gdGhpcy5keW5hbWljTWluV2lkdGgpIHtcbiAgICAgICAgdGhpcy5keW5hbWljTWluV2lkdGggPSBsYXJnZXN0V29yZFdpZHRoIC0gYWRkaXRpb25hbFNwYWNlICsgcmVzZXJ2ZWRTcGFjZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBncmFwaGVtZUxpbmVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3QgaWYgdGhlIHRleHQgbGluZSBpcyBlbmRlZCB3aXRoIGFuIGhhcmQgYnJlYWtcbiAgICAgKiB0ZXh0IGFuZCBpdGV4dCBkbyBub3QgaGF2ZSB3cmFwcGluZywgcmV0dXJuIGZhbHNlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCB0ZXh0IHRvIHNwbGl0XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0VuZE9mV3JhcHBpbmc6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgaWYgKCF0aGlzLl9zdHlsZU1hcFtsaW5lSW5kZXggKyAxXSkge1xuICAgICAgICAvLyBpcyBsYXN0IGxpbmUsIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9zdHlsZU1hcFtsaW5lSW5kZXggKyAxXS5saW5lICE9PSB0aGlzLl9zdHlsZU1hcFtsaW5lSW5kZXhdLmxpbmUpIHtcbiAgICAgICAgLy8gdGhpcyBpcyBsYXN0IGxpbmUgYmVmb3JlIGEgbGluZSBicmVhaywgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3QgaWYgYSBsaW5lIGhhcyBhIGxpbmVicmVhayBhbmQgc28gd2UgbmVlZCB0byBhY2NvdW50IGZvciBpdCB3aGVuIG1vdmluZ1xuICAgICAqIGFuZCBjb3VudGluZyBzdHlsZS5cbiAgICAgKiBAcmV0dXJuIE51bWJlclxuICAgICAqL1xuICAgIG1pc3NpbmdOZXdsaW5lT2Zmc2V0OiBmdW5jdGlvbihsaW5lSW5kZXgpIHtcbiAgICAgIGlmICh0aGlzLnNwbGl0QnlHcmFwaGVtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0VuZE9mV3JhcHBpbmcobGluZUluZGV4KSA/IDEgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDE7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICogR2V0cyBsaW5lcyBvZiB0ZXh0IHRvIHJlbmRlciBpbiB0aGUgVGV4dGJveC4gVGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzXG4gICAgKiB0ZXh0IHdyYXBwaW5nIG9uIHRoZSBmbHkgZXZlcnkgdGltZSBpdCBpcyBjYWxsZWQuXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCB0ZXh0IHRvIHNwbGl0XG4gICAgKiBAcmV0dXJucyB7QXJyYXl9IEFycmF5IG9mIGxpbmVzIGluIHRoZSBUZXh0Ym94LlxuICAgICogQG92ZXJyaWRlXG4gICAgKi9cbiAgICBfc3BsaXRUZXh0SW50b0xpbmVzOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICB2YXIgbmV3VGV4dCA9IGZhYnJpYy5UZXh0LnByb3RvdHlwZS5fc3BsaXRUZXh0SW50b0xpbmVzLmNhbGwodGhpcywgdGV4dCksXG4gICAgICAgICAgZ3JhcGhlbWVMaW5lcyA9IHRoaXMuX3dyYXBUZXh0KG5ld1RleHQubGluZXMsIHRoaXMud2lkdGgpLFxuICAgICAgICAgIGxpbmVzID0gbmV3IEFycmF5KGdyYXBoZW1lTGluZXMubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JhcGhlbWVMaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaW5lc1tpXSA9IGdyYXBoZW1lTGluZXNbaV0uam9pbignJyk7XG4gICAgICB9XG4gICAgICBuZXdUZXh0LmxpbmVzID0gbGluZXM7XG4gICAgICBuZXdUZXh0LmdyYXBoZW1lTGluZXMgPSBncmFwaGVtZUxpbmVzO1xuICAgICAgcmV0dXJuIG5ld1RleHQ7XG4gICAgfSxcblxuICAgIGdldE1pbldpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLm1pbldpZHRoLCB0aGlzLmR5bmFtaWNNaW5XaWR0aCk7XG4gICAgfSxcblxuICAgIF9yZW1vdmVFeHRyYW5lb3VzU3R5bGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsaW5lc1RvS2VlcCA9IHt9O1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzLl9zdHlsZU1hcCkge1xuICAgICAgICBpZiAodGhpcy5fdGV4dExpbmVzW3Byb3BdKSB7XG4gICAgICAgICAgbGluZXNUb0tlZXBbdGhpcy5fc3R5bGVNYXBbcHJvcF0ubGluZV0gPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGVzKSB7XG4gICAgICAgIGlmICghbGluZXNUb0tlZXBbcHJvcF0pIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5zdHlsZXNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAbWV0aG9kIHRvT2JqZWN0XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxTdXBlcigndG9PYmplY3QnLCBbJ21pbldpZHRoJywgJ3NwbGl0QnlHcmFwaGVtZSddLmNvbmNhdChwcm9wZXJ0aWVzVG9JbmNsdWRlKSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmYWJyaWMuVGV4dGJveCBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuVGV4dGJveFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGZhYnJpYy5UZXh0Ym94IGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5UZXh0Ym94LmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHN0eWxlcyA9IGZhYnJpYy51dGlsLnN0eWxlc0Zyb21BcnJheShvYmplY3Quc3R5bGVzLCBvYmplY3QudGV4dCk7XG4gICAgLy9jb3B5IG9iamVjdCB0byBwcmV2ZW50IG11dGF0aW9uXG4gICAgdmFyIG9iakNvcHkgPSBPYmplY3QuYXNzaWduKHt9LCBvYmplY3QsIHsgc3R5bGVzOiBzdHlsZXMgfSk7XG4gICAgcmV0dXJuIGZhYnJpYy5PYmplY3QuX2Zyb21PYmplY3QoJ1RleHRib3gnLCBvYmpDb3B5LCBjYWxsYmFjaywgJ3RleHQnKTtcbiAgfTtcbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGNvbnRyb2xzVXRpbHMgPSBmYWJyaWMuY29udHJvbHNVdGlscyxcbiAgICAgIHNjYWxlU2tld1N0eWxlSGFuZGxlciA9IGNvbnRyb2xzVXRpbHMuc2NhbGVTa2V3Q3Vyc29yU3R5bGVIYW5kbGVyLFxuICAgICAgc2NhbGVTdHlsZUhhbmRsZXIgPSBjb250cm9sc1V0aWxzLnNjYWxlQ3Vyc29yU3R5bGVIYW5kbGVyLFxuICAgICAgc2NhbGluZ0VxdWFsbHkgPSBjb250cm9sc1V0aWxzLnNjYWxpbmdFcXVhbGx5LFxuICAgICAgc2NhbGluZ1lPclNrZXdpbmdYID0gY29udHJvbHNVdGlscy5zY2FsaW5nWU9yU2tld2luZ1gsXG4gICAgICBzY2FsaW5nWE9yU2tld2luZ1kgPSBjb250cm9sc1V0aWxzLnNjYWxpbmdYT3JTa2V3aW5nWSxcbiAgICAgIHNjYWxlT3JTa2V3QWN0aW9uTmFtZSA9IGNvbnRyb2xzVXRpbHMuc2NhbGVPclNrZXdBY3Rpb25OYW1lLFxuICAgICAgb2JqZWN0Q29udHJvbHMgPSBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5jb250cm9scztcblxuICBvYmplY3RDb250cm9scy5tbCA9IG5ldyBmYWJyaWMuQ29udHJvbCh7XG4gICAgeDogLTAuNSxcbiAgICB5OiAwLFxuICAgIGN1cnNvclN0eWxlSGFuZGxlcjogc2NhbGVTa2V3U3R5bGVIYW5kbGVyLFxuICAgIGFjdGlvbkhhbmRsZXI6IHNjYWxpbmdYT3JTa2V3aW5nWSxcbiAgICBnZXRBY3Rpb25OYW1lOiBzY2FsZU9yU2tld0FjdGlvbk5hbWUsXG4gIH0pO1xuXG4gIG9iamVjdENvbnRyb2xzLm1yID0gbmV3IGZhYnJpYy5Db250cm9sKHtcbiAgICB4OiAwLjUsXG4gICAgeTogMCxcbiAgICBjdXJzb3JTdHlsZUhhbmRsZXI6IHNjYWxlU2tld1N0eWxlSGFuZGxlcixcbiAgICBhY3Rpb25IYW5kbGVyOiBzY2FsaW5nWE9yU2tld2luZ1ksXG4gICAgZ2V0QWN0aW9uTmFtZTogc2NhbGVPclNrZXdBY3Rpb25OYW1lLFxuICB9KTtcblxuICBvYmplY3RDb250cm9scy5tYiA9IG5ldyBmYWJyaWMuQ29udHJvbCh7XG4gICAgeDogMCxcbiAgICB5OiAwLjUsXG4gICAgY3Vyc29yU3R5bGVIYW5kbGVyOiBzY2FsZVNrZXdTdHlsZUhhbmRsZXIsXG4gICAgYWN0aW9uSGFuZGxlcjogc2NhbGluZ1lPclNrZXdpbmdYLFxuICAgIGdldEFjdGlvbk5hbWU6IHNjYWxlT3JTa2V3QWN0aW9uTmFtZSxcbiAgfSk7XG5cbiAgb2JqZWN0Q29udHJvbHMubXQgPSBuZXcgZmFicmljLkNvbnRyb2woe1xuICAgIHg6IDAsXG4gICAgeTogLTAuNSxcbiAgICBjdXJzb3JTdHlsZUhhbmRsZXI6IHNjYWxlU2tld1N0eWxlSGFuZGxlcixcbiAgICBhY3Rpb25IYW5kbGVyOiBzY2FsaW5nWU9yU2tld2luZ1gsXG4gICAgZ2V0QWN0aW9uTmFtZTogc2NhbGVPclNrZXdBY3Rpb25OYW1lLFxuICB9KTtcblxuICBvYmplY3RDb250cm9scy50bCA9IG5ldyBmYWJyaWMuQ29udHJvbCh7XG4gICAgeDogLTAuNSxcbiAgICB5OiAtMC41LFxuICAgIGN1cnNvclN0eWxlSGFuZGxlcjogc2NhbGVTdHlsZUhhbmRsZXIsXG4gICAgYWN0aW9uSGFuZGxlcjogc2NhbGluZ0VxdWFsbHlcbiAgfSk7XG5cbiAgb2JqZWN0Q29udHJvbHMudHIgPSBuZXcgZmFicmljLkNvbnRyb2woe1xuICAgIHg6IDAuNSxcbiAgICB5OiAtMC41LFxuICAgIGN1cnNvclN0eWxlSGFuZGxlcjogc2NhbGVTdHlsZUhhbmRsZXIsXG4gICAgYWN0aW9uSGFuZGxlcjogc2NhbGluZ0VxdWFsbHlcbiAgfSk7XG5cbiAgb2JqZWN0Q29udHJvbHMuYmwgPSBuZXcgZmFicmljLkNvbnRyb2woe1xuICAgIHg6IC0wLjUsXG4gICAgeTogMC41LFxuICAgIGN1cnNvclN0eWxlSGFuZGxlcjogc2NhbGVTdHlsZUhhbmRsZXIsXG4gICAgYWN0aW9uSGFuZGxlcjogc2NhbGluZ0VxdWFsbHlcbiAgfSk7XG5cbiAgb2JqZWN0Q29udHJvbHMuYnIgPSBuZXcgZmFicmljLkNvbnRyb2woe1xuICAgIHg6IDAuNSxcbiAgICB5OiAwLjUsXG4gICAgY3Vyc29yU3R5bGVIYW5kbGVyOiBzY2FsZVN0eWxlSGFuZGxlcixcbiAgICBhY3Rpb25IYW5kbGVyOiBzY2FsaW5nRXF1YWxseVxuICB9KTtcblxuICBvYmplY3RDb250cm9scy5tdHIgPSBuZXcgZmFicmljLkNvbnRyb2woe1xuICAgIHg6IDAsXG4gICAgeTogLTAuNSxcbiAgICBhY3Rpb25IYW5kbGVyOiBjb250cm9sc1V0aWxzLnJvdGF0aW9uV2l0aFNuYXBwaW5nLFxuICAgIGN1cnNvclN0eWxlSGFuZGxlcjogY29udHJvbHNVdGlscy5yb3RhdGlvblN0eWxlSGFuZGxlcixcbiAgICBvZmZzZXRZOiAtNDAsXG4gICAgd2l0aENvbm5lY3Rpb246IHRydWUsXG4gICAgYWN0aW9uTmFtZTogJ3JvdGF0ZScsXG4gIH0pO1xuXG4gIGlmIChmYWJyaWMuVGV4dGJveCkge1xuICAgIC8vIHRoaXMgaXMgYnJlYWtpbmcgdGhlIHByb3RvdHlwZSBpbmhlcml0YW5jZSwgbm8gdGltZSAvIGlkZWFzIHRvIGZpeCBpdC5cbiAgICAvLyBpcyBpbXBvcnRhbnQgdG8gZG9jdW1lbnQgdGhhdCBpZiB5b3Ugd2FudCB0byBoYXZlIGFsbCBvYmplY3RzIHRvIGhhdmUgYVxuICAgIC8vIHNwZWNpZmljIGN1c3RvbSBjb250cm9sLCB5b3UgaGF2ZSB0byBhZGQgaXQgdG8gT2JqZWN0IHByb3RvdHlwZSBhbmQgdG8gVGV4dGJveFxuICAgIC8vIHByb3RvdHlwZS4gVGhlIGNvbnRyb2xzIGFyZSBzaGFyZWQgYXMgcmVmZXJlbmNlcy4gU28gY2hhbmdlcyB0byBjb250cm9sIGB0cmBcbiAgICAvLyBjYW4gc3RpbGwgYXBwbHkgdG8gYWxsIG9iamVjdHMgaWYgbmVlZGVkLlxuICAgIHZhciB0ZXh0Qm94Q29udHJvbHMgPSBmYWJyaWMuVGV4dGJveC5wcm90b3R5cGUuY29udHJvbHMgPSB7IH07XG5cbiAgICB0ZXh0Qm94Q29udHJvbHMubXRyID0gb2JqZWN0Q29udHJvbHMubXRyO1xuICAgIHRleHRCb3hDb250cm9scy50ciA9IG9iamVjdENvbnRyb2xzLnRyO1xuICAgIHRleHRCb3hDb250cm9scy5iciA9IG9iamVjdENvbnRyb2xzLmJyO1xuICAgIHRleHRCb3hDb250cm9scy50bCA9IG9iamVjdENvbnRyb2xzLnRsO1xuICAgIHRleHRCb3hDb250cm9scy5ibCA9IG9iamVjdENvbnRyb2xzLmJsO1xuICAgIHRleHRCb3hDb250cm9scy5tdCA9IG9iamVjdENvbnRyb2xzLm10O1xuICAgIHRleHRCb3hDb250cm9scy5tYiA9IG9iamVjdENvbnRyb2xzLm1iO1xuXG4gICAgdGV4dEJveENvbnRyb2xzLm1yID0gbmV3IGZhYnJpYy5Db250cm9sKHtcbiAgICAgIHg6IDAuNSxcbiAgICAgIHk6IDAsXG4gICAgICBhY3Rpb25IYW5kbGVyOiBjb250cm9sc1V0aWxzLmNoYW5nZVdpZHRoLFxuICAgICAgY3Vyc29yU3R5bGVIYW5kbGVyOiBzY2FsZVNrZXdTdHlsZUhhbmRsZXIsXG4gICAgICBhY3Rpb25OYW1lOiAncmVzaXppbmcnLFxuICAgIH0pO1xuXG4gICAgdGV4dEJveENvbnRyb2xzLm1sID0gbmV3IGZhYnJpYy5Db250cm9sKHtcbiAgICAgIHg6IC0wLjUsXG4gICAgICB5OiAwLFxuICAgICAgYWN0aW9uSGFuZGxlcjogY29udHJvbHNVdGlscy5jaGFuZ2VXaWR0aCxcbiAgICAgIGN1cnNvclN0eWxlSGFuZGxlcjogc2NhbGVTa2V3U3R5bGVIYW5kbGVyLFxuICAgICAgYWN0aW9uTmFtZTogJ3Jlc2l6aW5nJyxcbiAgICB9KTtcbiAgfVxufSkoKTtcblxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Jhci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Jhci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29sb3JQaWNrQnV0dG9uLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29sb3JQaWNrQnV0dG9uLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9vYmplY3RQcm9wZXJ0aWVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vb2JqZWN0UHJvcGVydGllcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYnV0dG9uLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYnV0dG9uLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi90b29sdGlwLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdG9vbHRpcC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48cGF0aCBkPVxcXCJNMTIuNTAxIDE0Ljc5MmwzLjg1NCAzLjg1NC0uNzA3LjcwN0wxMyAxNi43MDVWMjNoLTF2LTYuMjkzbC0yLjY0NiAyLjY0Ni0uNzA3LS43MDd6TTguNjQ3IDYuMzU0bDMuODU0IDMuODU0IDMuODU0LTMuODU0LS43MDctLjcwN0wxMyA4LjI5NVYyaC0xdjYuMjkzTDkuMzU0IDUuNjQ3ek02IDEzaDEzdi0xSDZ6XFxcIj48L3BhdGg+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgZD1cXFwiTTAgMGgyNHYyNEgwelxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxwYXRoIGQ9XFxcIk0xNi43MDcgMTJIMjN2MWgtNi4yOTVsMi42NDggMi42NDctLjcwNy43MDctMy44NTQtMy44NTMgMy44NTQtMy44NTQuNzA3LjcwN3pNNS42NDcgOS4zNTRMOC4yOTMgMTJIMnYxaDYuMjk1bC0yLjY0OCAyLjY0Ny43MDcuNzA3IDMuODU0LTMuODUzLTMuODU0LTMuODU0ek0xMiAxOWgxVjZoLTF6XFxcIj48L3BhdGg+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgZD1cXFwiTTAgMGgyNHYyNEgwelxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxwYXRoIGQ9XFxcIk0xMyAzdjEyLjI5NGwyLjY0Ny0yLjY0Ny43MDcuNzA3LTMuODUzIDMuODU0LTMuODU0LTMuODU0LjcwNy0uNzA3TDEyIDE1LjI5MlYzek02IDIxaDEzdi0xSDZ6XFxcIj48L3BhdGg+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgZD1cXFwiTTAgMGgyNHYyNEgwelxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxwYXRoIGQ9XFxcIk0yMiA1SDEyVjRoMTB6bTAgM2gtOHYxaDh6bTAgNXYtMWgtNnYxek0yIDE3aDIwdi0xSDJ6bTAgNGgyMHYtMUgyem0uMjM0LThMNy4wNDIgMi4wNDloLjkxNkwxMi43NjYgMTNoLTEuMDkzTDkuOTE3IDlINS4wODNsLTEuNzU2IDR6bTMuMjg4LTVoMy45NTZMNy41IDMuNDk0elxcXCI+PC9wYXRoPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIGQ9XFxcIk0wIDBoMjR2MjRIMHpcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48cGF0aCBkPVxcXCJNMTguODcgNmgxLjAwN2wtLjk4OCAxNi4wMTVBMS4wNTEgMS4wNTEgMCAwIDEgMTcuODQgMjNINi4xNThhMS4wNTIgMS4wNTIgMCAwIDEtMS4wNDgtLjk4NHYtLjAwMUw0LjEyMyA2aDEuMDAzbC45ODIgMTUuOTUzYS4wNS4wNSAwIDAgMCAuMDUuMDQ3aDExLjY4M3pNOS41IDE5YS41LjUgMCAwIDAgLjUtLjV2LTEwYS41LjUgMCAwIDAtMSAwdjEwYS41LjUgMCAwIDAgLjUuNXptNSAwYS41LjUgMCAwIDAgLjUtLjV2LTEwYS41LjUgMCAwIDAtMSAwdjEwYS41LjUgMCAwIDAgLjUuNXpNNS4wNjQgNUgzVjRoNXYtLjc1QTEuMjUxIDEuMjUxIDAgMCAxIDkuMjUgMmg1LjVBMS4yNTEgMS4yNTEgMCAwIDEgMTYgMy4yNVY0aDV2MUg1LjA2NHpNOSA0aDZ2LS43NWEuMjUuMjUgMCAwIDAtLjI1LS4yNWgtNS41YS4yNS4yNSAwIDAgMC0uMjUuMjV6XFxcIj48L3BhdGg+PHBhdGggZmlsbD1cXFwibm9uZVxcXCIgZD1cXFwiTTAgMGgyNHYyNEgwelxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwiaW1wb3J0IEJhciBmcm9tIFwiLi9jb21wb25lbnRzL0Jhci9CYXJcIlxyXG5pbXBvcnQgT2JqZWN0UHJvcGVydGllcyBmcm9tIFwiLi9jb21wb25lbnRzL09iamVjdFByb3BlcnRpZXMvT2JqZWN0UHJvcGVydGllc1wiXHJcbmltcG9ydCBXaWRnZXRDYW52YXMgZnJvbSBcIi4vY29tcG9uZW50cy9XaWRnZXRDYW52YXMvV2lkZ2V0Q2FudmFzXCJcclxuaW1wb3J0IHsgZ2V0Q29sb3JzLCBnZXREYXRhLCBnZXRQcmljZUVsZW1lbnQgfSBmcm9tIFwiLi9yZXNvdXJjZXMvY29uc3RhbnRzXCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2lkZ2V0IHtcclxuXHRwcml2YXRlIF9lbGVtZW50OiBIVE1MRGl2RWxlbWVudFxyXG5cdHByaXZhdGUgX3VwYmFyOiBCYXJcclxuXHRwcml2YXRlIF9jYW52YXM6IFdpZGdldENhbnZhc1xyXG5cdHByaXZhdGUgX29iamVjdFByb3BlcnRpZXNCYXI6IE9iamVjdFByb3BlcnRpZXNcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXHJcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKS5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KVxyXG5cdH1cclxuXHRhc3luYyBpbml0aWFsaXplKCkge1xyXG5cdFx0dGhpcy5fY2FudmFzID0gbmV3IFdpZGdldENhbnZhcyh0aGlzLl9lbGVtZW50KVxyXG5cdFx0YXdhaXQgZ2V0RGF0YSgpXHJcblx0XHRnZXRDb2xvcnMoKVxyXG5cdFx0dGhpcy5fdXBiYXIgPSBuZXcgQmFyKHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NhbnZhcylcclxuXHRcdHRoaXMuX29iamVjdFByb3BlcnRpZXNCYXIgPSBuZXcgT2JqZWN0UHJvcGVydGllcyhcclxuXHRcdFx0dGhpcy5fZWxlbWVudCxcclxuXHRcdFx0dGhpcy5fY2FudmFzXHJcblx0XHQpXHJcblx0fVxyXG5cclxuXHRsb2FkRm9udHMoZm9udHM6IHN0cmluZ1tdKSB7XHJcblx0XHRmb250cy5tYXAoKGZvbnQpID0+IHtcclxuXHRcdFx0Y29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpXHJcblx0XHRcdHAuaW5uZXJIVE1MID0gYCZlbnNwO2BcclxuXHRcdFx0cC5zdHlsZS5mb250RmFtaWx5ID0gZm9udFxyXG5cdFx0XHRwLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiXHJcblx0XHRcdHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQocClcclxuXHRcdH0pXHJcblx0fVxyXG5cdGNyZWF0ZVNlbGVjdCgpIHtcclxuXHRcdC8qIENoYW5nZSBmb250c1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdCA9IG5ldyBTZWxlY3QoZm9udHMsIChldjpFdmVudCk9PntcclxuICAgICAgICAgICAgY29uc29sZS5sb2coKGV2LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSk7XHJcbiAgICAgICAgICAgIChjYW52YXMuX2ZhYnJpY0NhbnZhcy5fYWN0aXZlT2JqZWN0IGFzIElUZXh0KS5mb250RmFtaWx5ID0gKGV2LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZVxyXG4gICAgICAgICAgICBjYW52YXMuX2ZhYnJpY0NhbnZhcy5yZW5kZXJBbGwoKVxyXG4gICAgICAgIH0sIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYmFzZUxvY2F0aW9uKSlcclxuICAgICovXHJcblx0fVxyXG5cdGdldENhbnZhcygpOiBXaWRnZXRDYW52YXMge1xyXG5cdFx0cmV0dXJuIHRoaXMuX2NhbnZhc1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgXCIuL2Jhci5jc3NcIlxyXG5pbXBvcnQgVG9vbHRpcCBmcm9tIFwiLi4vVUkvVG9vbHRpcC9Ub29sdGlwXCJcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vVUkvQnV0dG9uL0J1dHRvblwiXHJcbmltcG9ydCBXaWRnZXRDYW52YXMgZnJvbSBcIi4uL1dpZGdldENhbnZhcy9XaWRnZXRDYW52YXNcIlxyXG5pbXBvcnQgeyBmYWJyaWMgfSBmcm9tIFwiZmFicmljXCJcclxuaW1wb3J0IEFkZFRleHRJY29uIGZyb20gXCIuLi8uLi9pY29ucy90ZXh0LnN2Z1wiXHJcbmltcG9ydCBUcmFzaEljb24gZnJvbSBcIi4uLy4uL2ljb25zL3RyYXNoLnN2Z1wiXHJcbmltcG9ydCBDZW50ZXJIb3Jpem9udGFsSWNvbiBmcm9tIFwiLi4vLi4vaWNvbnMvY2VudGVyLWhvcml6b250YWwuc3ZnXCJcclxuaW1wb3J0IENlbnRlclZlcnRpY2FsSWNvbiBmcm9tIFwiLi4vLi4vaWNvbnMvY2VudGVyLXZlcnRpY2FsLnN2Z1wiXHJcbmltcG9ydCBEb3dubG9hZEljb24gZnJvbSBcIi4uLy4uL2ljb25zL2Rvd25sb2FkLnN2Z1wiXHJcbmltcG9ydCBEb3dubG9hZGVyIGZyb20gXCIuL0Rvd25sb2RlclwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXIge1xyXG5cdF9lbGVtZW50OiBIVE1MRGl2RWxlbWVudFxyXG5cdF9kb3dubG9hZGVyOiBEb3dubG9hZGVyXHJcblx0Y29uc3RydWN0b3IobW91bnRFbGVtZW50OiBIVE1MRGl2RWxlbWVudCwgY2FudmFzOiBXaWRnZXRDYW52YXMpIHtcclxuXHRcdHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXHJcblx0XHRtb3VudEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudClcclxuXHRcdHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImJhclwiKVxyXG5cclxuXHRcdHRoaXMuX2Rvd25sb2FkZXIgPSBuZXcgRG93bmxvYWRlcihtb3VudEVsZW1lbnQpXHJcblxyXG5cdFx0Y29uc3QgYnV0dG9ucyA9IFtcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG5hbWU6IFwi0JTQvtCx0LDQstC40YLRjCDRgtC10LrRgdGCXCIsXHJcblx0XHRcdFx0ZnVuYzogKCkgPT4ge1xyXG5cdFx0XHRcdFx0Y2FudmFzLmFkZFRleHQoXCLQotC10LrRgdGCXCIpXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRpY29uOiBBZGRUZXh0SWNvbixcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG5hbWU6IFwi0JLRi9GA0L7QstC90Y/RgtGMINC/0L4g0LPQvtGA0LjQt9C+0L3RgtCw0LvQuFwiLFxyXG5cdFx0XHRcdGZ1bmM6ICgpID0+IHtcclxuXHRcdFx0XHRcdGNhbnZhcy5fc2VsZWN0ZWRPYmplY3RzPy5tYXAoKG9iaikgPT4ge1xyXG5cdFx0XHRcdFx0XHRjYW52YXMuYWxpZ25PYmplY3Qob2JqLCB0cnVlLCBmYWxzZSlcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRpY29uOiBDZW50ZXJIb3Jpem9udGFsSWNvbixcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG5hbWU6IFwi0JLRi9GA0L7QstC90Y/RgtGMINC/0L4g0LLQtdGA0YLQuNC60LDQu9C4XCIsXHJcblx0XHRcdFx0ZnVuYzogKCkgPT4ge1xyXG5cdFx0XHRcdFx0Y2FudmFzLl9zZWxlY3RlZE9iamVjdHM/Lm1hcCgob2JqKSA9PiB7XHJcblx0XHRcdFx0XHRcdGNhbnZhcy5hbGlnbk9iamVjdChvYmosIGZhbHNlLCB0cnVlKVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGljb246IENlbnRlclZlcnRpY2FsSWNvbixcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG5hbWU6IFwi0KHQvtGF0YDQsNC90LjRgtGMINCyIFBOR1wiLFxyXG5cdFx0XHRcdGZ1bmM6ICgpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMuX2Rvd25sb2FkZXIuZG93bG9hZCh0aGlzLl9kb3dubG9hZGVyLnJlbmRlcihjYW52YXMpKVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0aWNvbjogRG93bmxvYWRJY29uLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bmFtZTogXCLQo9C00LDQu9C40YLRjCDRjdC70LXQvNC10L3RglwiLFxyXG5cdFx0XHRcdGZ1bmM6ICgpID0+IHtcclxuXHRcdFx0XHRcdGNhbnZhcy5kZWxldGVMYXN0QWN0aXZlT2JqZWN0KClcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGljb246IFRyYXNoSWNvbixcclxuXHRcdFx0fSxcclxuXHRcdF1cclxuXHRcdGJ1dHRvbnMubWFwKChvYmopID0+IHtcclxuXHRcdFx0Y29uc3QgYnV0dG9uID0gbmV3IEJ1dHRvbihcIlwiLCBvYmouZnVuYywgdGhpcy5fZWxlbWVudClcclxuXHRcdFx0YnV0dG9uLmdldEVsZW1lbnQoKS5pbm5lckhUTUwgPSBvYmouaWNvblxyXG5cdFx0XHRuZXcgVG9vbHRpcChvYmoubmFtZSwgYnV0dG9uLmdldEVsZW1lbnQoKSlcclxuXHRcdH0pXHJcblx0fVxyXG59XHJcbiIsImltcG9ydCBXaWRnZXRDYW52YXMgZnJvbSBcIi4uL1dpZGdldENhbnZhcy9XaWRnZXRDYW52YXNcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG93bmxvYWRlcntcclxuICAgIF9lbGVtZW50OiBIVE1MQW5jaG9yRWxlbWVudFxyXG4gICAgY29uc3RydWN0b3IobW91bnRQbGFjZTogSFRNTEVsZW1lbnQpe1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcclxuICAgICAgICBtb3VudFBsYWNlLmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpXHJcbiAgICB9XHJcbiAgICByZW5kZXIoY2FudmFzOiBXaWRnZXRDYW52YXMsIHJlbmRlckNvbnRyb2xzID0gdHJ1ZSl7XHJcbiAgICAgICAgaWYocmVuZGVyQ29udHJvbHMpe1xyXG4gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgcmV0dXJuIGNhbnZhcy5fY2FudmFzRWxlbWVudC50b0RhdGFVUkwoXCJpbWFnZS9wbmdcIikgLy8gc2F2ZSB3aXRoIGNvbnRyb2xzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBjYW52YXMuX2NhbnZhcy50b0RhdGFVUkwoe1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAncG5nJyxcclxuICAgICAgICAgICAgICAgIG11bHRpcGxpZXI6IDIsXHJcbiAgICAgICAgICAgICAgICB3aXRob3V0VHJhbnNmb3JtOiB0cnVlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkb3dsb2FkKGJsb2JJbWFnZTogc3RyaW5nKXtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LmhyZWYgPSBibG9iSW1hZ2VcclxuICAgICAgICB0aGlzLl9lbGVtZW50LmRvd25sb2FkID0gJ05FT05FUy5SVS5wbmcnXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGljaygpXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBnZXRDb2xvcnMgfSBmcm9tIFwiLi4vLi4vLi4vcmVzb3VyY2VzL2NvbnN0YW50c1wiXHJcbmltcG9ydCBTaGFkb3dUZXh0IGZyb20gXCIuLi8uLi9TaGFkb3dUZXh0XCJcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vVUkvQnV0dG9uL0J1dHRvblwiXHJcbmltcG9ydCBUb29sdGlwIGZyb20gXCIuLi8uLi9VSS9Ub29sdGlwL1Rvb2x0aXBcIlxyXG5pbXBvcnQgV2lkZ2V0Q2FudmFzIGZyb20gXCIuLi8uLi9XaWRnZXRDYW52YXMvV2lkZ2V0Q2FudmFzXCJcclxuaW1wb3J0IFwiLi9jb2xvclBpY2tCdXR0b24uY3NzXCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sb3JQaWNrQnV0dG9ucyB7XHJcblx0ZWxlbWVudDogSFRNTERpdkVsZW1lbnRcclxuXHRjb25zdHJ1Y3RvcihjYW52YXM6IFdpZGdldENhbnZhcykge1xyXG5cdFx0Y29uc3QgY29sb3JzID0gZ2V0Q29sb3JzKClcclxuXHRcdHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiY29sb3JQaWNrQnV0dG9uc1wiKVxyXG5cdFx0T2JqZWN0LmtleXMoY29sb3JzKS5tYXAoKGNvbG9yS2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IHtcclxuXHRcdFx0Y29uc3QgY29sb3IgPSBPYmplY3QudmFsdWVzKGNvbG9ycylbaW5kZXhdXHJcblx0XHRcdGNvbnN0IGJ1dHRvbiA9IG5ldyBCdXR0b24oXHJcblx0XHRcdFx0XCJcIixcclxuXHRcdFx0XHQoKSA9PiB7XHJcblx0XHRcdFx0XHRjYW52YXM/Ll9zZWxlY3RlZE9iamVjdHM/Lm1hcCgob2JqOiBTaGFkb3dUZXh0KSA9PiB7XHJcblx0XHRcdFx0XHRcdG9iai5jaGFuZ2VTaGFkb3coY29sb3IgYXMgc3RyaW5nKVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdGNhbnZhcy51cGRhdGUoKVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dGhpcy5lbGVtZW50XHJcblx0XHRcdClcclxuXHRcdFx0YnV0dG9uLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwiY29sb3JCdXR0b25cIilcclxuXHRcdFx0bmV3IFRvb2x0aXAoY29sb3JLZXksIGJ1dHRvbi5nZXRFbGVtZW50KCkpXHJcblx0XHRcdGJ1dHRvbi5nZXRFbGVtZW50KCkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3IgYXMgc3RyaW5nXHJcblx0XHR9KVxyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQge1xuXHRmb250cyxcblx0Z2V0UHJpY2VFbGVtZW50LFxuXHRnZXRQcmljZVRleHRTaXplLFxufSBmcm9tIFwiLi4vLi4vcmVzb3VyY2VzL2NvbnN0YW50c1wiXG5pbXBvcnQgU2hhZG93VGV4dCBmcm9tIFwiLi4vU2hhZG93VGV4dFwiXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi9VSS9CdXR0b24vQnV0dG9uXCJcbmltcG9ydCBUb29sdGlwIGZyb20gXCIuLi9VSS9Ub29sdGlwL1Rvb2x0aXBcIlxuaW1wb3J0IFdpZGdldENhbnZhcyBmcm9tIFwiLi4vV2lkZ2V0Q2FudmFzL1dpZGdldENhbnZhc1wiXG5pbXBvcnQgQ29sb3JQaWNrQnV0dG9ucyBmcm9tIFwiLi9Db2xvckJ1dHRvbnMvQ29sb3JQaWNrQnV0dG9uc1wiXG5pbXBvcnQgXCIuL29iamVjdFByb3BlcnRpZXMuY3NzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2JqZWN0UHJvcGVydGllcyB7XG5cdHByaXZhdGUgX2VsZW1lbnQ6IEhUTUxEaXZFbGVtZW50XG5cdHByaXZhdGUgX2NhbnZhczogV2lkZ2V0Q2FudmFzXG5cdGNvbnN0cnVjdG9yKG1vdW50RWxlbWVudDogSFRNTERpdkVsZW1lbnQsIGNhbnZhczogV2lkZ2V0Q2FudmFzKSB7XG5cdFx0dGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcblx0XHR0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJvYmplY3RQcm9wZXJ0aWVzXCIsIFwiaGlkZGVuXCIpXG5cdFx0dGhpcy5fY2FudmFzID0gY2FudmFzXG5cdFx0bW91bnRFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpXG5cblx0XHRjYW52YXMuX2NhbnZhcy5vbihcInNlbGVjdGlvbjpjcmVhdGVkXCIsICgpID0+IHtcblx0XHRcdHRoaXMudXBkYXRlVmlzaWJpbGl0eSgpXG5cdFx0fSlcblx0XHRjYW52YXMuX2NhbnZhcy5vbihcInNlbGVjdGlvbjpjbGVhcmVkXCIsICgpID0+IHtcblx0XHRcdHRoaXMudXBkYXRlVmlzaWJpbGl0eSgpXG5cdFx0fSlcblx0XHRjYW52YXMuX2NhbnZhcy5vbihcInNlbGVjdGlvbjp1cGRhdGVkXCIsICgpID0+IHtcblx0XHRcdHRoaXMudXBkYXRlVmlzaWJpbGl0eSgpXG5cdFx0fSlcblxuXHRcdHRoaXMub3B0aW9uVGV4dCgpXG5cdFx0dGhpcy5vcHRpb25Db2xvcnMoKVxuXHRcdHRoaXMub3B0aW9uRm9udHMoKVxuXHRcdHRoaXMub3B0aW9uUHJpY2UoKVxuXHR9XG5cdGFkZE9wdGlvbkRpdigpIHtcblx0XHRjb25zdCBvcHRpb25EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG5cdFx0b3B0aW9uRGl2LmNsYXNzTGlzdC5hZGQoXCJvcHRpb25cIilcblx0XHRyZXR1cm4gb3B0aW9uRGl2XG5cdH1cblx0YWRkT3B0aW9uKGxhYmVsVGV4dDogc3RyaW5nID0gXCJcIikge1xuXHRcdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxuXHRcdGxhYmVsLmNsYXNzTGlzdC5hZGQobGFiZWxUZXh0KVxuXHRcdGxhYmVsLmNsYXNzTGlzdC5hZGQoXCJsYWJlbFwiKVxuXHRcdHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQobGFiZWwpXG5cdFx0Y29uc3Qgb3B0aW9uID0gdGhpcy5hZGRPcHRpb25EaXYoKVxuXHRcdGxhYmVsLmFwcGVuZENoaWxkKG9wdGlvbilcblxuXHRcdHJldHVybiBvcHRpb25cblx0fVxuXHRhZGRSYW5nZShcblx0XHRtaW46IHN0cmluZyxcblx0XHRtYXg6IHN0cmluZyxcblx0XHRzdGVwOiBzdHJpbmcsXG5cdFx0bW91bnRFbGVtZW50OiBIVE1MRGl2RWxlbWVudFxuXHQpIHtcblx0XHRjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKVxuXHRcdHJhbmdlLnR5cGUgPSBcInJhbmdlXCJcblx0XHRyYW5nZS5taW4gPSBtaW5cblx0XHRyYW5nZS5tYXggPSBtYXhcblx0XHRyYW5nZS5zdGVwID0gc3RlcFxuXHRcdG1vdW50RWxlbWVudC5hcHBlbmRDaGlsZChyYW5nZSlcblx0fVxuXHR1cGRhdGVWaXNpYmlsaXR5KCkge1xuXHRcdHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImhpZGRlblwiKVxuXG5cdFx0dGhpcy5zaG93UHJpY2UoKVxuXHR9XG5cdG9wdGlvblRleHQoKSB7XG5cdFx0Y29uc3Qgb3B0aW9uRWxlbWVudCA9IHRoaXMuYWRkT3B0aW9uKFwi0KLQtdC60YHRglwiKVxuXHRcdGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpXG5cdFx0aW5wdXQuY2xhc3NMaXN0LmFkZChcInRleHRhcmVhXCIpXG5cdFx0aW5wdXQucGxhY2Vob2xkZXIgPSBcItCS0LDRiCDRgtC10LrRgdGCXCJcblx0XHRpbnB1dC5yb3dzID0gM1xuXHRcdG9wdGlvbkVsZW1lbnQuYXBwZW5kQ2hpbGQoaW5wdXQpXG5cdFx0aW5wdXQub25pbnB1dCA9IChlKSA9PiB7XG5cdFx0XHRjb25zdCB2YWx1ZSA9IChlLnRhcmdldCBhcyBIVE1MVGV4dEFyZWFFbGVtZW50KS52YWx1ZVxuXHRcdFx0dGhpcy5fY2FudmFzLl9zZWxlY3RlZE9iamVjdHMubWFwKChvYmo6IFNoYWRvd1RleHQpID0+IHtcblx0XHRcdFx0b2JqLmNoYW5nZVRleHQodmFsdWUpXG5cdFx0XHR9KVxuXHRcdFx0dGhpcy5fY2FudmFzLnVwZGF0ZSgpXG5cdFx0fVxuXHR9XG5cdG9wdGlvbkNvbG9ycygpIHtcblx0XHRjb25zdCBvcHRpb25FbGVtZW50ID0gdGhpcy5hZGRPcHRpb24oXCLQptCy0LXRglwiKVxuXHRcdGNvbnN0IGNvbG9yUGlja0J1dHRvbnMgPSBuZXcgQ29sb3JQaWNrQnV0dG9ucyh0aGlzLl9jYW52YXMpXG5cdFx0b3B0aW9uRWxlbWVudC5hcHBlbmRDaGlsZChjb2xvclBpY2tCdXR0b25zLmVsZW1lbnQpXG5cdH1cblxuXHRvcHRpb25Gb250cygpIHtcblx0XHRjb25zdCBvcHRpb24gPSB0aGlzLmFkZE9wdGlvbihcItCo0YDQuNGE0YJcIilcblx0XHRvcHRpb24uY2xhc3NMaXN0LmFkZChcImZvbnRPcHRpb25cIilcblx0XHRmb250cy5tYXAoKGZvbnQpID0+IHtcblx0XHRcdGNvbnN0IGJ1dHRvbiA9IG5ldyBCdXR0b24oXG5cdFx0XHRcdGZvbnQsXG5cdFx0XHRcdCgpID0+IHtcblx0XHRcdFx0XHR0aGlzLl9jYW52YXMuX3NlbGVjdGVkT2JqZWN0cy5tYXAoKG9iajogU2hhZG93VGV4dCkgPT4ge1xuXHRcdFx0XHRcdFx0b2JqLmNoYW5nZUZvbnQoZm9udClcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdHRoaXMuX2NhbnZhcy51cGRhdGUoKVxuXHRcdFx0XHRcdHRoaXMuc2hvd1ByaWNlKClcblx0XHRcdFx0fSxcblx0XHRcdFx0b3B0aW9uXG5cdFx0XHQpXG5cdFx0XHRidXR0b24uZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXCJmb250T3B0aW9uQnV0dG9uXCIpXG5cdFx0XHRidXR0b24uZ2V0RWxlbWVudCgpLnN0eWxlLmZvbnRGYW1pbHkgPSBmb250XG5cdFx0XHRidXR0b24uZ2V0RWxlbWVudCgpLnN0eWxlLmZvbnRTaXplID0gXCIxZW1cIlxuXHRcdH0pXG5cdH1cblx0Y2hhbmdlU2hhZG93KGNvbG9yOiBzdHJpbmcpIHtcblx0XHR0aGlzLl9jYW52YXMuX3NlbGVjdGVkT2JqZWN0cy5tYXAoKG9iajogU2hhZG93VGV4dCkgPT4ge1xuXHRcdFx0b2JqLmNoYW5nZVNoYWRvdyhjb2xvcilcblx0XHRcdG9iai5kaXJ0eSA9IHRydWVcblx0XHR9KVxuXHRcdHRoaXMuX2NhbnZhcy51cGRhdGUoKVxuXHR9XG5cdG9wdGlvblByaWNlKCkge1xuXHRcdGNvbnN0IG9wdGlvbiA9IHRoaXMuYWRkT3B0aW9uKFwi0KHRgtC+0LjQvNC+0YHRgtGMXCIpXG5cdFx0Y29uc3QgcHJpY2VEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG5cdFx0cHJpY2VEaXYuY2xhc3NMaXN0LmFkZChcInByaWNlRGl2XCIpXG5cdFx0cHJpY2VEaXYudGV4dENvbnRlbnQgPSBcIlwiXG5cdFx0b3B0aW9uLmFwcGVuZENoaWxkKHByaWNlRGl2KVxuXG5cdFx0dGhpcy5fY2FudmFzLl9jYW52YXMub24oXCJvYmplY3Q6bW9kaWZpZWRcIiwgKCkgPT4ge1xuXHRcdFx0dGhpcy5zaG93UHJpY2UoKVxuXHRcdH0pXG5cdH1cblx0c2hvd1ByaWNlKCkge1xuXHRcdGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuX2NhbnZhcy5zZWxlY3RBbGwoKVxuXHRcdHNlbGVjdGlvbi51bmdyb3VwT25DYW52YXMoKVxuXHRcdGxldCBwcmljZSA9IDBcblx0XHRsZXQgZWxlbWVudHMgPSAwXG5cdFx0bGV0IHdpZHRoID0gTnVtYmVyLnBhcnNlRmxvYXQoXG5cdFx0XHQoXG5cdFx0XHRcdE1hdGgucm91bmQoKHNlbGVjdGlvbi53aWR0aCArIE51bWJlci5FUFNJTE9OKSAqIDEwMCkgLyAxMDBcblx0XHRcdCkudG9TdHJpbmcoKVxuXHRcdClcblx0XHRsZXQgaGVpZ2h0ID0gTnVtYmVyLnBhcnNlRmxvYXQoXG5cdFx0XHQoXG5cdFx0XHRcdE1hdGgucm91bmQoKHNlbGVjdGlvbi5oZWlnaHQgKyBOdW1iZXIuRVBTSUxPTikgKiAxMDApIC8gMTAwXG5cdFx0XHQpLnRvU3RyaW5nKClcblx0XHQpXG5cblx0XHRzZWxlY3Rpb24uZ2V0T2JqZWN0cygpLm1hcCgob2JqKSA9PiB7XG5cdFx0XHRpZiAob2JqIGluc3RhbmNlb2YgU2hhZG93VGV4dCkge1xuXHRcdFx0XHRlbGVtZW50cyArPSBvYmouZ2V0VGV4dCgpLnRyaW0oKS5yZXBsYWNlKFwiIFwiLCBcIlwiKS5sZW5ndGhcblx0XHRcdH1cblx0XHR9KVxuXHRcdHByaWNlID1cblx0XHRcdHdpZHRoICogZ2V0UHJpY2VUZXh0U2l6ZSgpICtcblx0XHRcdGhlaWdodCAqIGdldFByaWNlVGV4dFNpemUoKSArXG5cdFx0XHRlbGVtZW50cyAqIGdldFByaWNlRWxlbWVudCgpXG5cdFx0cHJpY2UgPSBNYXRoLmZsb29yKHByaWNlKVxuXHRcdGNvbnN0IHByaWNlRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcmljZURpdlwiKVxuXHRcdHByaWNlICYmIChwcmljZURpdi50ZXh0Q29udGVudCA9IHByaWNlPy50b1N0cmluZygpICsgXCIg0YAuXCIpXG5cblx0XHRjb25zdCB0b29sdGlwUHJpY2UgPSBuZXcgVG9vbHRpcChcblx0XHRcdFwi0J/RgNC40LzQtdGA0L3QsNGPINGB0YLQvtC40LzQvtGB0YLRjCDQstGL0LLQtdGB0LrQuFwiLFxuXHRcdFx0cHJpY2VEaXYgYXMgSFRNTERpdkVsZW1lbnRcblx0XHQpXG5cdH1cbn1cbiIsImltcG9ydCB7ZmFicmljfSBmcm9tIFwiZmFicmljXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYWRvd1RleHQgZXh0ZW5kcyBmYWJyaWMuR3JvdXAge1xyXG4gICAgcHJpdmF0ZSBfY29sb3JPZlNoYWRvdzogc3RyaW5nXHJcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0Pzogc3RyaW5nLCBzaGFkb3dTdHJlbmd0aDogbnVtYmVyID0gNSwgY29sb3JPZlNoYWRvdz86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKClcclxuICAgICAgICB0aGlzLl9jb2xvck9mU2hhZG93ID0gY29sb3JPZlNoYWRvd1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hhZG93U3RyZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmFkZFdpdGhVcGRhdGUoIG5ldyBmYWJyaWMuVGV4dCh0ZXh0LCB7ZmlsbDogJ3doaXRlJ30pKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNoYW5nZVNoYWRvdygpXHJcbiAgICB9XHJcbiAgICBjaGFuZ2VTaGFkb3coY29sb3JPZlNoYWRvdyA9IHRoaXMuX2NvbG9yT2ZTaGFkb3cpe1xyXG4gICAgICAgICAgICB0aGlzLmdldE9iamVjdHMoKS5tYXAoKHRleHRPYmosIGkpPT57XHJcbiAgICAgICAgICAgICAgICB0ZXh0T2JqLnNoYWRvdyA9IG5ldyBmYWJyaWMuU2hhZG93KHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JPZlNoYWRvdyxcclxuICAgICAgICAgICAgICAgICAgICBibHVyOiBpKjMsXHJcbiAgICAgICAgICAgICAgICAgICAgbm9uU2NhbGluZzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB0ZXh0T2JqLnNldCh7ZGlydHk6IHRydWV9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZVxyXG4gICAgICAgICAgICBcclxuICAgIH1cclxuICAgIGNoYW5nZVRleHQodGV4dDogc3RyaW5nID0gXCJcIil7XHJcbiAgICAgICAgdGhpcy5nZXRPYmplY3RzKCkubWFwKCh0ZXh0T2JqOiBmYWJyaWMuVGV4dCk9PntcclxuICAgICAgICAgICAgdGV4dE9iai5zZXQoe3RleHQ6IHRleHR9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5hZGRXaXRoVXBkYXRlKClcclxuICAgIH1cclxuICAgIGdldFRleHQoKXtcclxuICAgICAgICByZXR1cm4gKHRoaXMuZ2V0T2JqZWN0cygpWzBdIGFzIGZhYnJpYy5UZXh0KS50ZXh0XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VGb250KGZvbnQ6IHN0cmluZyl7XHJcbiAgICAgICAgdGhpcy5nZXRPYmplY3RzKCkubWFwKCh0ZXh0T2JqOiBmYWJyaWMuVGV4dCk9PntcclxuICAgICAgICAgICAgdGV4dE9iai5zZXQoe2ZvbnRGYW1pbHk6IGZvbnR9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5zZXQoJ2RpcnR5JywgdHJ1ZSlcclxuICAgICAgICB0aGlzLmFkZFdpdGhVcGRhdGUoKVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCAnLi9idXR0b24uY3NzJ1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnV0dG9uIHtcbiAgICBwcml2YXRlIF90ZXh0OiBzdHJpbmdcbiAgICBwcml2YXRlIF9vbkNsaWNrOiBGdW5jdGlvblxuICAgIHByaXZhdGUgX2J1dHRvbkRpdjogSFRNTEJ1dHRvbkVsZW1lbnRcblxuICAgIGNvbnN0cnVjdG9yKHRleHQ6IHN0cmluZyA9IFwiXCIsIG9uY2xpY2s6IEZ1bmN0aW9uLCBtb3VudFBsYWNlOiBIVE1MRWxlbWVudCkge1xuIFxuICAgICAgICB0aGlzLl90ZXh0ID0gdGV4dFxuICAgICAgICB0aGlzLl9vbkNsaWNrID0gb25jbGlja1xuICAgICAgICB0aGlzLl9idXR0b25EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgICAgICB0aGlzLl9idXR0b25EaXYuY2xhc3NMaXN0LmFkZCgnYnRuJylcbiAgICAgICAgdGhpcy5fYnV0dG9uRGl2LnRleHRDb250ZW50ID0gdGV4dFxuICAgICAgICB0aGlzLl9idXR0b25EaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e29uY2xpY2soKX0pXG4gICAgICAgIG1vdW50UGxhY2UuYXBwZW5kQ2hpbGQodGhpcy5fYnV0dG9uRGl2KVxuICAgIH1cblxuICAgIGdldCB0ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dDtcbiAgICAgIH1cbiAgICBzZXQgdGV4dCh0ZXh0KXtcbiAgICAgICAgdGhpcy5fdGV4dCA9IHRleHRcbiAgICB9XG4gICAgXG4gICAgZ2V0RWxlbWVudCgpe1xuICAgICAgICByZXR1cm4gdGhpcy5fYnV0dG9uRGl2XG4gICAgfVxufSIsImltcG9ydCAnLi90b29sdGlwLmNzcydcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbHRpcCB7XHJcbiAgICBwcml2YXRlIF90ZXh0OiBzdHJpbmdcclxuICAgIHByaXZhdGUgX3NwYW5FbGVtZW50OiBIVE1MU3BhbkVsZW1lbnRcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0OiBzdHJpbmcsIG1vdW50UGxhY2U6IEhUTUxFbGVtZW50KSB7XHJcbiBcclxuICAgICAgICB0aGlzLl90ZXh0ID0gdGV4dFxyXG4gICAgICAgIHRoaXMuX3NwYW5FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXHJcbiAgICAgICAgdGhpcy5fc3BhbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndG9vbHRpcFRleHQnKVxyXG4gICAgICAgIHRoaXMuX3NwYW5FbGVtZW50LnRleHRDb250ZW50ID0gdGV4dFxyXG4gICAgICAgIG1vdW50UGxhY2UuY2xhc3NMaXN0LmFkZCgndG9vbHRpcCcpXHJcbiAgICAgICAgdGhpcy5vbkhvdmVyU2hvd0hpZ2hlcihtb3VudFBsYWNlKVxyXG4gICAgICAgIG1vdW50UGxhY2UuYXBwZW5kQ2hpbGQodGhpcy5fc3BhbkVsZW1lbnQpXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHQ7XHJcbiAgICAgIH1cclxuICAgIHNldCB0ZXh0KHRleHQpe1xyXG4gICAgICAgIHRoaXMuX3RleHQgPSB0ZXh0XHJcbiAgICB9XHJcbiAgICBvbkhvdmVyU2hvd0hpZ2hlcihodG1sRWw6IEhUTUxFbGVtZW50LCBvbmhvdmVyWmluZGV4ID0gJzUnLCBub2hvdmVyWmluZGV4ID0gJzEnKXtcclxuICAgICAgICBodG1sRWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKCk9PntcclxuICAgICAgICAgICAgaHRtbEVsLnN0eWxlLnpJbmRleCA9IG9uaG92ZXJaaW5kZXhcclxuICAgICAgICB9KVxyXG4gICAgICAgIGh0bWxFbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsICgpPT57XHJcbiAgICAgICAgICAgIGh0bWxFbC5zdHlsZS56SW5kZXggPSBub2hvdmVyWmluZGV4XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufSIsImltcG9ydCB7ZmFicmljfSBmcm9tIFwiZmFicmljXCI7XHJcbmltcG9ydCB7IGNvbG9yU2NoZW1lIH0gZnJvbSBcIi4uLy4uL3Jlc291cmNlcy9jb25zdGFudHNcIjtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT2JqZWN0T3B0aW9ucygpe1xyXG4gICAgXHJcbiAgICBjb25zdCBmb250Rm9yQ29udHJvbHMgPSAnMTJweCBBcmlhbCdcclxuICAgIGNvbnN0IHBhZGRpbmcgPSA4XHJcblxyXG4gICAgZmFicmljLk9iamVjdC5wcm90b3R5cGUub2JqZWN0Q2FjaGluZyA9IGZhbHNlXHJcbiAgICBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5jb250cm9scy5oID0gbmV3IGZhYnJpYy5Db250cm9sKHtcclxuICAgICAgICB4OiAtMC41LFxyXG4gICAgICAgIGN1cnNvclN0eWxlOiAncG9pbnRlcicsXHJcbiAgICAgICAgXHJcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihjdHgsIGxlZnQsIHRvcCwgc3R5bGVPdmVycmlkZSwgZmFicmljT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGN0eC5mb250ID0gZm9udEZvckNvbnRyb2xzO1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3JTY2hlbWUuYmx1ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBzaXplVG9TdHJpbmcoZmFicmljT2JqZWN0LmdldFNjYWxlZFdpZHRoKCkpXHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aFxyXG4gICAgICAgICAgICBjb25zdCB0ZXh0SGVpZ2h0ID0gY3R4Lm1lYXN1cmVUZXh0KCdNJykud2lkdGggKiAxLjJcclxuICAgICAgICAgICAgY29uc3QgeCA9IChsZWZ0ICsgZmFicmljT2JqZWN0LmdldFNjYWxlZFdpZHRoKCkvMiktICh0ZXh0V2lkdGgvMilcclxuICAgICAgICAgICAgY29uc3QgeSA9IHRvcCArIGZhYnJpY09iamVjdC5nZXRTY2FsZWRIZWlnaHQoKS8yK3RleHRIZWlnaHQgKyBwYWRkaW5nXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjdHguZmlsbFRleHQodGV4dCwgeCwgeSk7XHJcbiAgICAgICAgfSxcclxuICAgIH0pXHJcblxyXG4gICAgZmFicmljLk9iamVjdC5wcm90b3R5cGUuY29udHJvbHMudyA9IG5ldyBmYWJyaWMuQ29udHJvbCh7XHJcbiAgICAgICAgeTogLTAuNSxcclxuICAgICAgICBjdXJzb3JTdHlsZTogJ3BvaW50ZXInLFxyXG4gICAgICAgIFxyXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24oY3R4LCBsZWZ0LCB0b3AsIHN0eWxlT3ZlcnJpZGUsIGZhYnJpY09iamVjdCkge1xyXG4gICAgICAgICAgICBjdHguZm9udCA9IGZvbnRGb3JDb250cm9scztcclxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yU2NoZW1lLmJsdWU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gc2l6ZVRvU3RyaW5nKGZhYnJpY09iamVjdC5nZXRTY2FsZWRIZWlnaHQoKSlcclxuICAgICAgICAgICAgY29uc3QgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHRleHQpLndpZHRoXHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRIZWlnaHQgPSBjdHgubWVhc3VyZVRleHQoJ00nKS53aWR0aCAqIDEuMlxyXG4gICAgICAgICAgICBjb25zdCB4ID0gbGVmdCAtIGZhYnJpY09iamVjdC5nZXRTY2FsZWRXaWR0aCgpLzIgLSBwYWRkaW5nIC0gdGV4dEhlaWdodC8yIFxyXG4gICAgICAgICAgICBjb25zdCB5ID0gdG9wICsgZmFicmljT2JqZWN0LmdldFNjYWxlZEhlaWdodCgpLzIgKyB0ZXh0V2lkdGgvMlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY3R4LnNhdmUoKVxyXG4gICAgICAgICAgICBjdHgucm90YXRlKC1NYXRoLlBJLzIpXHJcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dCh0ZXh0LCAteSwgeCk7XHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKClcclxuICAgICAgICB9LFxyXG4gICAgfSlcclxuXHJcbiAgICBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5zZXRDb250cm9sc1Zpc2liaWxpdHkoe1xyXG4gICAgICAgIG1iOiBmYWxzZSxcclxuICAgICAgICBtbDogZmFsc2UsXHJcbiAgICAgICAgbXI6IGZhbHNlLFxyXG4gICAgICAgIG10OiBmYWxzZSxcclxuICAgICAgICBtdHI6IGZhbHNlXHJcbiAgICB9KVxyXG4gICAgZmFicmljLk9iamVjdC5wcm90b3R5cGUuY29ybmVyQ29sb3IgPSBjb2xvclNjaGVtZS5ibHVlXHJcbiAgICBmdW5jdGlvbiBzaXplVG9TdHJpbmcoc2l6ZTogbnVtYmVyKXtcclxuICAgICAgIHJldHVybiBzaXplLnRvRml4ZWQoMikudG9TdHJpbmcoKS5yZXBsYWNlKCcuJywgJywnKSArICcg0LzQvCdcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHsgUG9pbnQsIFNpemUgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvdHlwZXMnO1xuaW1wb3J0IHtmYWJyaWN9IGZyb20gXCJmYWJyaWNcIjtcbmltcG9ydCBTaGFkb3dUZXh0IGZyb20gJy4uL1NoYWRvd1RleHQnO1xuaW1wb3J0IHsgY29sb3JTY2hlbWUsIGZvbnRzIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL2NvbnN0YW50cyc7XG5pbXBvcnQgT2JqZWN0T3B0aW9ucyBmcm9tICcuL09iamVjdENvbnRyb2xzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaWRnZXRDYW52YXN7XG4gICAgX2NhbnZhc0VsZW1lbnQ6IEhUTUxDYW52YXNFbGVtZW50XG4gICAgX2NhbnZhczogZmFicmljLkNhbnZhc1xuICAgIF9zZWxlY3RlZE9iamVjdHM6IGZhYnJpYy5PYmplY3RbXVxuICAgIGNvbnN0cnVjdG9yKG1vdW50RWxlbWVudDogSFRNTERpdkVsZW1lbnQpe1xuICAgICAgICBjb25zdCBjYW52YXNDbGFzcyA9ICdjYW52YXNGYWJyaWMnXG4gICAgICAgIHRoaXMubWFrZUNhbnZhc0Rpdihtb3VudEVsZW1lbnQsIGNhbnZhc0NsYXNzKVxuICAgICAgICB0aGlzLl9jYW52YXMgPSBuZXcgZmFicmljLkNhbnZhcyhjYW52YXNDbGFzcyk7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5zZXRCYWNrZ3JvdW5kQ29sb3IoJyMxMDEwMTAnLCAoKT0+e30pXG4gICAgICAgIHRoaXMuX2NhbnZhcy5zZXREaW1lbnNpb25zKHtoZWlnaHQ6NTAwLCB3aWR0aDo1MDB9KVxuICAgICAgICB0aGlzLl9jYW52YXMub24oJ3NlbGVjdGlvbjpjcmVhdGVkJywgKCk9Pnt0aGlzLl9zZWxlY3RlZE9iamVjdHM9dGhpcy5fY2FudmFzLmdldEFjdGl2ZU9iamVjdHMoKX0gKVxuICAgICAgICB0aGlzLl9jYW52YXMub24oJ3NlbGVjdGlvbjp1cGRhdGVkJywgKCk9Pnt0aGlzLl9zZWxlY3RlZE9iamVjdHM9dGhpcy5fY2FudmFzLmdldEFjdGl2ZU9iamVjdHMoKX0gKVxuICAgICAgICB0aGlzLl9jYW52YXMub24oJ3NlbGVjdGlvbjpjbGVhcmVkJywgKCk9Pnt0aGlzLl9zZWxlY3RlZE9iamVjdHM9bnVsbH0pXG4gICAgICAgIHRoaXMuX2NhbnZhcy5vbigncm90YXRpbmcnLCAoKT0+e3RoaXMuX3NlbGVjdGVkT2JqZWN0cy5tYXAob2JqPT57b2JqLnNldENvb3JkcygpfSl9KVxuICAgICAgICBPYmplY3RPcHRpb25zKClcbiAgICB9XG4gICAgXG5cbiAgICBwcml2YXRlIG1ha2VDYW52YXNEaXYobW91bnRFbGVtZW50OkhUTUxEaXZFbGVtZW50LCBjYW52YXNDbGFzczogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gICAgICAgIG1vdW50RWxlbWVudC5hcHBlbmRDaGlsZChjYW52YXMpXG4gICAgICAgIGNhbnZhcy5pZCA9IGNhbnZhc0NsYXNzXG4gICAgICAgIHRoaXMuX2NhbnZhc0VsZW1lbnQgPSBjYW52YXNcbiAgICAgICBcbiAgICB9XG4gICAgcmVzaXplKHc6bnVtYmVyLCBoOm51bWJlcil7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5zZXRXaWR0aCh3KVxuICAgICAgICB0aGlzLl9jYW52YXMuc2V0SGVpZ2h0KGgpXG4gICAgICAgIHRoaXMudXBkYXRlKClcbiAgICB9XG4gICAgZ2V0U2l6ZSgpe1xuICAgICAgICBjb25zdCBzOlNpemUgPSB7XG4gICAgICAgICAgICB3aWR0aDogIHRoaXMuX2NhbnZhcy53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogIHRoaXMuX2NhbnZhcy5oZWlnaHRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc1xuICAgIH1cbiAgICBnZXRDZW50ZXIoKXtcbiAgICAgICAgY29uc3QgYzpQb2ludCA9IHtcbiAgICAgICAgICAgIHg6IHRoaXMuZ2V0U2l6ZSgpLndpZHRoIC8gMixcbiAgICAgICAgICAgIHk6ICB0aGlzLmdldFNpemUoKS5oZWlnaHQgLyAyXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNcbiAgICB9XG4gICAgYWRkVG9TY2VuZSggb2JqZWN0OiBmYWJyaWMuT2JqZWN0W10sIHNob3VsZFJlbmRlcjogYm9vbGVhbiA9IHRydWUpe1xuICAgICAgICB0aGlzLl9jYW52YXMuYWRkKC4uLm9iamVjdClcbiAgICAgICAgc2hvdWxkUmVuZGVyICAmJiB0aGlzLnVwZGF0ZSgpXG4gICAgfVxuICAgIGFkZFJlY3QodzpudW1iZXIsaDpudW1iZXIsIGNvbG9yOiBzdHJpbmcgPSAnYmx1ZScpe1xuICAgICAgICB2YXIgcmVjdCA9IG5ldyBmYWJyaWMuUmVjdCh7XG4gICAgICAgICAgICBsZWZ0OiB0aGlzLmdldENlbnRlcigpLngsIFxuICAgICAgICAgICAgdG9wOiB0aGlzLmdldENlbnRlcigpLnksXG4gICAgICAgICAgICBmaWxsOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgd2lkdGg6IHcsXG4gICAgICAgICAgICBoZWlnaHQ6IGgsXG4gICAgICAgICAgICBzdHJva2VXaWR0aDogMSxcbiAgICAgICAgICAgIHN0cm9rZTogY29sb3IsXG4gICAgICAgICAgICBzdHJva2VVbmlmb3JtOiB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hZGRUb1NjZW5lKFtyZWN0XSlcblxuICAgICAgICByZXR1cm4gcmVjdFxuICAgIH1cbiAgICBhZGRUZXh0KHRleHQ6IHN0cmluZyl7XG4gICAgICAgIGNvbnN0IHRleHRFbGVtZW50ID0gbmV3IFNoYWRvd1RleHQodGV4dCwgOCwgJ3JlZCcpXG4gICAgICAgIHRleHRFbGVtZW50LmNoYW5nZUZvbnQoZm9udHNbMF0pXG4gICAgICAgIC8qdGhpcy5fY2FudmFzLm9uKFwiYmVmb3JlOnNlbGVjdGlvbjpjbGVhcmVkXCIsICgpPT57XG4gICAgICAgICAgICBpZih0aGlzLl9zZWxlY3RlZE9iamVjdHNbMF0uY29uc3RydWN0b3IucHJvdG90eXBlLnR5cGU9PSdpLXRleHQnKXtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0RWwgPSB0aGlzLl9zZWxlY3RlZE9iamVjdHNbMF0gYXMgZmFicmljLklUZXh0XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKSovXG4gICAgICAgIHRoaXMuYWxpZ25PYmplY3QodGV4dEVsZW1lbnQpXG4gICAgICAgIHRoaXMuYWRkVG9TY2VuZShbIHRleHRFbGVtZW50XSlcbiAgICAgICAgdGV4dEVsZW1lbnQuY2hhbmdlU2hhZG93KCdyZWQnKVxuICAgICAgIHJldHVybiB0ZXh0RWxlbWVudFxuICAgIH1cbiAgICBhbGlnbk9iamVjdChvYmplY3Q6IGZhYnJpYy5PYmplY3QsIGhvcml6b250YWw6Ym9vbGVhbiA9dHJ1ZSwgdmVydGljYWw6IGJvb2xlYW4gPSB0cnVlKXtcbiAgICAgICAgdmVydGljYWwgICYmICAgb2JqZWN0LnNldCgnbGVmdCcsIHRoaXMuX2NhbnZhcy53aWR0aCAvIDIgLSBvYmplY3QuZ2V0U2NhbGVkV2lkdGgoKSAvIDIpXG4gICAgICAgIGhvcml6b250YWwgICAgJiYgICBvYmplY3Quc2V0KCd0b3AnLCB0aGlzLl9jYW52YXMuaGVpZ2h0IC8gMiAtIG9iamVjdC5nZXRTY2FsZWRIZWlnaHQoKSAvIDIpICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZSgpXG4gICAgICAgIFxuICAgIH1cbiAgICBkZWxldGVMYXN0QWN0aXZlT2JqZWN0KCl7XG4gICAgICAgIHRoaXMuX3NlbGVjdGVkT2JqZWN0cyAmJiB0aGlzLl9jYW52YXMucmVtb3ZlKC4uLnRoaXMuX3NlbGVjdGVkT2JqZWN0cylcbiAgICB9XG4gICAgdXBkYXRlKCl7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5yZW5kZXJBbGwoKVxuICAgIH1cbiAgICBzZWxlY3RBbGwoKXtcbiAgICAgICAgcmV0dXJuIG5ldyBmYWJyaWMuQWN0aXZlU2VsZWN0aW9uKHRoaXMuX2NhbnZhcy5nZXRPYmplY3RzKCksIHtjYW52YXM6IHRoaXMuX2NhbnZhc30pXG4gICAgfVxufSIsIi8vaW1wb3J0c1xyXG5pbXBvcnQgXCIuLi9zcmMvc3R5bGVzL3N0eWxlLmNzc1wiXHJcbmltcG9ydCB7IGZvbnRzIH0gZnJvbSBcIi4vcmVzb3VyY2VzL2NvbnN0YW50c1wiXHJcblxyXG5pbXBvcnQgV2lkZ2V0IGZyb20gXCIuL1dpZGdldFwiXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBvbmxvYWQpXHJcblxyXG5jb25zdCB3aWRnZXQgPSBuZXcgV2lkZ2V0KClcclxud2lkZ2V0LmxvYWRGb250cyhmb250cylcclxuXHJcbmZ1bmN0aW9uIG9ubG9hZCgpIHtcclxuXHR3aWRnZXQuaW5pdGlhbGl6ZSgpXHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGJhc2VMb2NhdGlvbiA9IFwiLm5lb25XaWRnZXRcIlxyXG5leHBvcnQgY29uc3Qgc2VydmVyVXJsID0gXCJodHRwczovL25lb24td2lkZ2V0LWJhY2sub25yZW5kZXIuY29tXCJcclxuZXhwb3J0IGNvbnN0IGZvbnRzID0gW1xyXG5cdFwiTUFERUxpa2VzXCIsXHJcblx0XCJSb3NhTWFyZW5hXCIsXHJcblx0XCJWZWxlc1wiLFxyXG5cdFwiUEZIYW5kYm9va1Byb1wiLFxyXG5cdFwiTmlja2FpbmxleVwiLFxyXG5cdFwiU3R1ZGlvU2NyaXB0Q1RUXCIsXHJcblx0XCJMRFNsZW5kZXJcIixcclxuXHRcIkhlbHZldGljYVwiLFxyXG5cdFwiQ2l0cmljYUN5cmlsbGljXCIsXHJcblx0XCJCbG9nZ2VyU2Fuc1wiLFxyXG5cdFwiQmlyY2hcIixcclxuXHRcIkFtZXJpY2FuUmV0cm9cIixcclxuXVxyXG5cclxuZXhwb3J0IGNvbnN0IGNvbG9ycyA9IHtcclxuXHTQmtGA0LDRgdC90YvQuTogXCJyZ2IoMjU1LDAsMClcIixcclxuXHTQntGA0LDQvdC20LXQstGL0Lk6IFwicmdiKDI1NSwxNjUsMClcIixcclxuXHTQpNGD0LrRgdC40Y86IFwicmdiKDI1NSwwLDI1NSlcIixcclxuXHTQoNC+0LfQvtCy0YvQuTogXCJyZ2IoMjU1LDE5MiwyMDMpXCIsXHJcblx00JbQtdC70YLRi9C5OiBcInJnYigyNTUsMjM1LDApXCIsXHJcblx00JvQsNC50LzQvtCy0YvQuTogXCJyZ2IoMjU1LDI1NSwxMDIpXCIsXHJcblx00KTQuNC+0LvQtdGC0L7QstGL0Lk6IFwicmdiKDEyOCwgMCwgMTI4KVwiLFxyXG5cdNCh0LjQvdC40Lk6IFwicmdiKDAsMCwxMzkpXCIsXHJcblx00JPQvtC70YPQsdC+0Lk6IFwicmdiKDE3MywgMjE2LCAyMzApXCIsXHJcblx00JfQtdC70LXQvdGL0Lk6IFwicmdiKDUwLDIwNSw1MClcIixcclxuXHRcItCi0LXQv9C70YvQuSDQsdC10LvRi9C5XCI6IFwicmdiKDI1MywgMjQ0LCAyMjApXCIsXHJcblx0XCLQpdC+0LvQvtC00L3Ri9C5INCx0LXQu9GL0LlcIjogXCJyZ2IoMjQ0LCAyNTMsIDI1NSlcIixcclxufVxyXG5leHBvcnQgY29uc3QgY29sb3JTY2hlbWUgPSB7XHJcblx0Ymx1ZTogXCJyZ2IoMTUzLCAyMDQsIDI1NSlcIixcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHByaWNlcyA9IHtcclxuXHRwcmljZTFtbTogNSxcclxuXHRwcmljZWZvckVsZW1lbnQ6IDE1MCxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFByaWNlRWxlbWVudCA9ICgpID0+IHtcclxuXHRjb25zdCBkYXRhID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImRhdGFcIikpXHJcblx0aWYgKCFkYXRhKSB7XHJcblx0XHRyZXR1cm4gcHJpY2VzLnByaWNlZm9yRWxlbWVudFxyXG5cdH1cclxuXHRyZXR1cm4gZGF0YVswXVsxXVxyXG59XHJcbmV4cG9ydCBjb25zdCBnZXRQcmljZVRleHRTaXplID0gKCkgPT4ge1xyXG5cdGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZGF0YVwiKSlcclxuXHRpZiAoIWRhdGEpIHtcclxuXHRcdHJldHVybiBwcmljZXMucHJpY2UxbW1cclxuXHR9XHJcblx0cmV0dXJuIGRhdGFbMV1bMV1cclxufVxyXG5leHBvcnQgY29uc3QgZ2V0Q29sb3JzID0gKCkgPT4ge1xyXG5cdGxldCByZXNwb25zZTogYW55ID0ge31cclxuXHRjb25zdCBkYXRhID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImRhdGFcIikpXHJcblx0aWYgKCFkYXRhKSB7XHJcblx0XHRyZXR1cm4gY29sb3JzXHJcblx0fVxyXG5cclxuXHRkYXRhWzJdLm1hcCgoY29sOiBzdHJpbmdbXSwgaTogbnVtYmVyKSA9PiB7XHJcblx0XHRpZiAoaSAhPSAwKSB7XHJcblx0XHRcdHJlc3BvbnNlW2RhdGFbMl1baV1dID0gXCJyZ2IoXCIgKyBkYXRhWzNdW2ldICsgXCIpXCJcclxuXHRcdH1cclxuXHR9KVxyXG5cdHJldHVybiByZXNwb25zZVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RGF0YSA9IGFzeW5jICgpID0+IHtcclxuXHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHNlcnZlclVybCArIFwiL2RhdGFcIiwge1xyXG5cdFx0bWV0aG9kOiBcIkdFVFwiLFxyXG5cdFx0bW9kZTogXCJjb3JzXCIsXHJcblx0fSlcclxuXHRjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXHJcblx0Y29uc29sZS5sb2coanNvbilcclxuXHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImRhdGFcIiwgSlNPTi5zdHJpbmdpZnkoanNvbikpXHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwNyk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwiZ2xvYmFsIiwic3FydCIsImF0YW4yIiwicG93IiwiUGlCeTE4MCIsIlBpQnkyIiwiY291bGRVc2VBdHRhY2hFdmVudCIsInRvdWNoRXZlbnRzIiwicGFyc2VFbCIsInN1cHBvcnRzT3BhY2l0eSIsInN1cHBvcnRzRmlsdGVycyIsInJlT3BhY2l0eSIsInNldE9wYWNpdHkiLCJwcm90byIsIm1pbiIsIm1heCIsImRlZ3JlZXNUb1JhZGlhbnMiLCJvcmlnaW5YT2Zmc2V0Iiwib3JpZ2luWU9mZnNldCIsImNsb25lIiwidG9GaXhlZCIsIm11bHRpcGxlU3BhY2VzUmVnZXgiLCJmYWJyaWMiLCJ2ZXJzaW9uIiwiZG9jdW1lbnQiLCJ3aW5kb3ciLCJIVE1MRG9jdW1lbnQiLCJEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlSFRNTERvY3VtZW50IiwidmlydHVhbFdpbmRvdyIsIkpTRE9NIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZmVhdHVyZXMiLCJGZXRjaEV4dGVybmFsUmVzb3VyY2VzIiwicmVzb3VyY2VzIiwianNkb21JbXBsRm9yV3JhcHBlciIsIm5vZGVDYW52YXMiLCJET01QYXJzZXIiLCJjb3B5R0xUbzJERHJhd0ltYWdlIiwiZ2wiLCJwaXBlbGluZVN0YXRlIiwiZ2xDYW52YXMiLCJjYW52YXMiLCJ0YXJnZXRDYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwidHJhbnNsYXRlIiwiaGVpZ2h0Iiwic2NhbGUiLCJzb3VyY2VZIiwiZHJhd0ltYWdlIiwid2lkdGgiLCJjb3B5R0xUbzJEUHV0SW1hZ2VEYXRhIiwiZFdpZHRoIiwiZGVzdGluYXRpb25XaWR0aCIsImRIZWlnaHQiLCJkZXN0aW5hdGlvbkhlaWdodCIsIm51bUJ5dGVzIiwidTgiLCJVaW50OEFycmF5IiwiaW1hZ2VCdWZmZXIiLCJ1OENsYW1wZWQiLCJVaW50OENsYW1wZWRBcnJheSIsInJlYWRQaXhlbHMiLCJSR0JBIiwiVU5TSUdORURfQllURSIsImltZ0RhdGEiLCJJbWFnZURhdGEiLCJwdXRJbWFnZURhdGEiLCJpc1RvdWNoU3VwcG9ydGVkIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJpc0xpa2VseU5vZGUiLCJCdWZmZXIiLCJTSEFSRURfQVRUUklCVVRFUyIsIkRQSSIsInJlTnVtIiwiY29tbWFXc3AiLCJyZVBhdGhDb21tYW5kIiwicmVOb25Xb3JkIiwiZm9udFBhdGhzIiwiaU1hdHJpeCIsInN2Z05TIiwicGVyZkxpbWl0U2l6ZVRvdGFsIiwibWF4Q2FjaGVTaWRlTGltaXQiLCJtaW5DYWNoZVNpZGVMaW1pdCIsImNoYXJXaWR0aHNDYWNoZSIsInRleHR1cmVTaXplIiwiZGlzYWJsZVN0eWxlQ29weVBhc3RlIiwiZW5hYmxlR0xGaWx0ZXJpbmciLCJkZXZpY2VQaXhlbFJhdGlvIiwid2Via2l0RGV2aWNlUGl4ZWxSYXRpbyIsIm1vekRldmljZVBpeGVsUmF0aW8iLCJicm93c2VyU2hhZG93Qmx1ckNvbnN0YW50IiwiYXJjVG9TZWdtZW50c0NhY2hlIiwiYm91bmRzT2ZDdXJ2ZUNhY2hlIiwiY2FjaGVzQm91bmRzT2ZDdXJ2ZSIsImZvcmNlR0xQdXRJbWFnZURhdGEiLCJpbml0RmlsdGVyQmFja2VuZCIsImlzV2ViZ2xTdXBwb3J0ZWQiLCJjb25zb2xlIiwibG9nIiwibWF4VGV4dHVyZVNpemUiLCJXZWJnbEZpbHRlckJhY2tlbmQiLCJ0aWxlU2l6ZSIsIkNhbnZhczJkRmlsdGVyQmFja2VuZCIsIl9yZW1vdmVFdmVudExpc3RlbmVyIiwiZXZlbnROYW1lIiwiaGFuZGxlciIsIl9fZXZlbnRMaXN0ZW5lcnMiLCJldmVudExpc3RlbmVyIiwiaW5kZXhPZiIsInV0aWwiLCJhcnJheSIsImZpbGwiLCJfb25jZSIsIl9oYW5kbGVyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJvZmYiLCJiaW5kIiwib24iLCJPYnNlcnZhYmxlIiwiZmlyZSIsIm9wdGlvbnMiLCJsaXN0ZW5lcnNGb3JFdmVudCIsImxlbiIsImNhbGwiLCJmaWx0ZXIiLCJ2YWx1ZSIsInByb3AiLCJvbmNlIiwiQ29sbGVjdGlvbiIsIl9vYmplY3RzIiwiYWRkIiwiX29uT2JqZWN0QWRkZWQiLCJyZW5kZXJPbkFkZFJlbW92ZSIsInJlcXVlc3RSZW5kZXJBbGwiLCJpbnNlcnRBdCIsIm9iamVjdCIsImluZGV4Iiwibm9uU3BsaWNpbmciLCJvYmplY3RzIiwic3BsaWNlIiwicmVtb3ZlIiwic29tZXRoaW5nUmVtb3ZlZCIsIl9vbk9iamVjdFJlbW92ZWQiLCJmb3JFYWNoT2JqZWN0IiwiY2FsbGJhY2siLCJjb250ZXh0IiwiZ2V0T2JqZWN0cyIsInR5cGUiLCJvIiwiaXNFbXB0eSIsInNpemUiLCJjb250YWlucyIsImRlZXAiLCJzb21lIiwib2JqIiwiY29tcGxleGl0eSIsInJlZHVjZSIsIm1lbW8iLCJjdXJyZW50IiwiQ29tbW9uTWV0aG9kcyIsIl9zZXRPcHRpb25zIiwic2V0IiwiX2luaXRHcmFkaWVudCIsImZpbGxlciIsInByb3BlcnR5IiwiY29sb3JTdG9wcyIsIkdyYWRpZW50IiwiX2luaXRQYXR0ZXJuIiwic291cmNlIiwiUGF0dGVybiIsIl9zZXRPYmplY3QiLCJfc2V0Iiwia2V5IiwidG9nZ2xlIiwiZ2V0IiwiTWF0aCIsIlBJIiwiY29zIiwiYW5nbGUiLCJzaW4iLCJzaWduIiwicmVtb3ZlRnJvbUFycmF5IiwiaWR4IiwiZ2V0UmFuZG9tSW50IiwiZmxvb3IiLCJyYW5kb20iLCJkZWdyZWVzIiwicmFkaWFuc1RvRGVncmVlcyIsInJhZGlhbnMiLCJyb3RhdGVQb2ludCIsInBvaW50Iiwib3JpZ2luIiwibmV3UG9pbnQiLCJQb2ludCIsIngiLCJ5IiwidiIsInJvdGF0ZVZlY3RvciIsImFkZEVxdWFscyIsInZlY3RvciIsImNyZWF0ZVZlY3RvciIsImZyb20iLCJ0byIsImNhbGNBbmdsZUJldHdlZW5WZWN0b3JzIiwiYSIsImIiLCJhY29zIiwiaHlwb3QiLCJnZXRIYXRWZWN0b3IiLCJtdWx0aXBseSIsImdldEJpc2VjdG9yIiwiQSIsIkIiLCJDIiwiQUIiLCJBQyIsImFscGhhIiwicGhpIiwicHJvamVjdFN0cm9rZU9uUG9pbnRzIiwicG9pbnRzIiwib3BlblBhdGgiLCJjb29yZHMiLCJzIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VVbmlmb3JtU2NhbGFyIiwic3Ryb2tlVW5pZm9ybSIsInNjYWxlWCIsInNjYWxlWSIsImdldFN0cm9rZUhhdFZlY3RvciIsInNjYWxhciIsImZvckVhY2giLCJwIiwibWl0ZXJWZWN0b3IiLCJiaXNlY3RvciIsImJpc2VjdG9yVmVjdG9yIiwic3Ryb2tlTGluZUpvaW4iLCJzdHJva2VNaXRlckxpbWl0Iiwic3VidHJhY3QiLCJTUVJUMiIsInRyYW5zZm9ybVBvaW50IiwidCIsImlnbm9yZU9mZnNldCIsIm1ha2VCb3VuZGluZ0JveEZyb21Qb2ludHMiLCJ0cmFuc2Zvcm0iLCJ4UG9pbnRzIiwibWluWCIsInlQb2ludHMiLCJtaW5ZIiwibGVmdCIsInRvcCIsImludmVydFRyYW5zZm9ybSIsInIiLCJudW1iZXIiLCJmcmFjdGlvbkRpZ2l0cyIsInBhcnNlRmxvYXQiLCJOdW1iZXIiLCJwYXJzZVVuaXQiLCJmb250U2l6ZSIsInVuaXQiLCJleGVjIiwiVGV4dCIsIkRFRkFVTFRfU1ZHX0ZPTlRfU0laRSIsImZhbHNlRnVuY3Rpb24iLCJnZXRLbGFzcyIsIm5hbWVzcGFjZSIsInN0cmluZyIsImNhbWVsaXplIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsInJlc29sdmVOYW1lc3BhY2UiLCJnZXRTdmdBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInBhcnRzIiwic3BsaXQiLCJsb2FkSW1hZ2UiLCJ1cmwiLCJjcm9zc09yaWdpbiIsImltZyIsImNyZWF0ZUltYWdlIiwib25Mb2FkQ2FsbGJhY2siLCJvbmxvYWQiLCJvbmVycm9yIiwic3JjIiwic3Vic3RyaW5nIiwibG9hZEltYWdlSW5Eb20iLCJkaXYiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJwb3NpdGlvbiIsImFwcGVuZENoaWxkIiwicXVlcnlTZWxlY3RvciIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImVubGl2ZW5PYmplY3RzIiwicmV2aXZlciIsImVubGl2ZW5lZE9iamVjdHMiLCJudW1Mb2FkZWRPYmplY3RzIiwibnVtVG90YWxPYmplY3RzIiwib25Mb2FkZWQiLCJmcm9tT2JqZWN0IiwiZXJyb3IiLCJlbmxpdmVuT2JqZWN0RW5saXZhYmxlcyIsImVubGl2ZW5Qcm9wcyIsIk9iamVjdCIsIkVOTElWRU5fUFJPUFMiLCJlbmxpdmVkUHJvcHMiLCJlbmxpdmVuUGF0dGVybnMiLCJwYXR0ZXJucyIsIm51bUxvYWRlZFBhdHRlcm5zIiwibnVtUGF0dGVybnMiLCJlbmxpdmVuZWRQYXR0ZXJucyIsInBhdHRlcm4iLCJncm91cFNWR0VsZW1lbnRzIiwiZWxlbWVudHMiLCJwYXRoIiwic291cmNlUGF0aCIsImNlbnRlclBvaW50IiwiR3JvdXAiLCJwb3B1bGF0ZVdpdGhQcm9wZXJ0aWVzIiwiZGVzdGluYXRpb24iLCJwcm9wZXJ0aWVzIiwiQXJyYXkiLCJpc0FycmF5IiwiY3JlYXRlQ2FudmFzRWxlbWVudCIsImNvcHlDYW52YXNFbGVtZW50IiwibmV3Q2FudmFzIiwidG9EYXRhVVJMIiwiY2FudmFzRWwiLCJmb3JtYXQiLCJxdWFsaXR5IiwibXVsdGlwbHlUcmFuc2Zvcm1NYXRyaWNlcyIsImlzMngyIiwicXJEZWNvbXBvc2UiLCJkZW5vbSIsInNrZXdYIiwic2tld1kiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImNhbGNSb3RhdGVNYXRyaXgiLCJ0aGV0YSIsImNhbGNEaW1lbnNpb25zTWF0cml4Iiwic2NhbGVNYXRyaXgiLCJmbGlwWCIsImZsaXBZIiwidGFuIiwiY29tcG9zZU1hdHJpeCIsIm1hdHJpeCIsInJlc2V0T2JqZWN0VHJhbnNmb3JtIiwidGFyZ2V0Iiwicm90YXRlIiwic2F2ZU9iamVjdFRyYW5zZm9ybSIsImlzVHJhbnNwYXJlbnQiLCJ0b2xlcmFuY2UiLCJfaXNUcmFuc3BhcmVudCIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsImwiLCJwYXJzZVByZXNlcnZlQXNwZWN0UmF0aW9BdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJhbGlnbiIsIm1lZXRPclNsaWNlIiwiYXNwZWN0UmF0aW9BdHRycyIsInBvcCIsImFsaWduWCIsImFsaWduWSIsImNsZWFyRmFicmljRm9udENhY2hlIiwiZm9udEZhbWlseSIsInRvTG93ZXJDYXNlIiwibGltaXREaW1zQnlBcmVhIiwiYXIiLCJtYXhpbXVtQXJlYSIsInJvdWdoV2lkdGgiLCJwZXJmTGltaXRTaXplWSIsImNhcFZhbHVlIiwiZmluZFNjYWxlVG9GaXQiLCJmaW5kU2NhbGVUb0NvdmVyIiwibWF0cml4VG9TVkciLCJOVU1fRlJBQ1RJT05fRElHSVRTIiwicmVtb3ZlVHJhbnNmb3JtRnJvbU9iamVjdCIsImludmVydGVkIiwiZmluYWxUcmFuc2Zvcm0iLCJjYWxjT3duTWF0cml4IiwiYXBwbHlUcmFuc2Zvcm1Ub09iamVjdCIsImFkZFRyYW5zZm9ybVRvT2JqZWN0IiwiY2VudGVyIiwic2V0UG9zaXRpb25CeU9yaWdpbiIsInNpemVBZnRlclRyYW5zZm9ybSIsImRpbVgiLCJkaW1ZIiwidHJhbnNmb3JtTWF0cml4IiwiYmJveCIsIm1lcmdlQ2xpcFBhdGhzIiwiYzEiLCJjMiIsImNhbGNUcmFuc2Zvcm1NYXRyaXgiLCJjbGlwUGF0aCIsImhhc1N0eWxlQ2hhbmdlZCIsInByZXZTdHlsZSIsInRoaXNTdHlsZSIsImZvclRleHRTcGFucyIsInN0cm9rZSIsImZvbnRXZWlnaHQiLCJmb250U3R5bGUiLCJ0ZXh0QmFja2dyb3VuZENvbG9yIiwiZGVsdGFZIiwib3ZlcmxpbmUiLCJ1bmRlcmxpbmUiLCJsaW5ldGhyb3VnaCIsInN0eWxlc1RvQXJyYXkiLCJzdHlsZXMiLCJ0ZXh0IiwidGV4dExpbmVzIiwiY2hhckluZGV4Iiwic3R5bGVzQXJyYXkiLCJjIiwia2V5cyIsInN0YXJ0IiwiZW5kIiwic3R5bGVzRnJvbUFycmF5Iiwic3R5bGVJbmRleCIsInN0eWxlc09iamVjdCIsImFzc2lnbiIsIl9qb2luIiwicHJvdG90eXBlIiwiY29tbWFuZExlbmd0aHMiLCJtIiwiaCIsInEiLCJyZXBlYXRlZENvbW1hbmRzIiwiTSIsInNlZ21lbnRUb0JlemllciIsInRoMiIsInRoMyIsImNvc1RoIiwic2luVGgiLCJyeCIsInJ5IiwiY3gxIiwiY3kxIiwibVQiLCJmcm9tWCIsImZyb21ZIiwiY29zdGgyIiwic2ludGgyIiwiY29zdGgzIiwic2ludGgzIiwidG9YIiwidG9ZIiwiY2FsY1ZlY3RvckFuZ2xlIiwidXgiLCJ1eSIsInZ4IiwidnkiLCJ0YSIsInRiIiwiZnJvbUFyY1RvQmV6aWVycyIsImZ4IiwiZnkiLCJyb3QiLCJsYXJnZSIsInN3ZWVwIiwic2Vnc05vcm0iLCJyb3RhdGVYIiwidGgiLCJweCIsInB5IiwicngyIiwiYWJzIiwicnkyIiwicHkyIiwicHgyIiwicGwiLCJyb290IiwiY3giLCJjeSIsIm1UaGV0YSIsImR0aGV0YSIsInNlZ21lbnRzIiwiY2VpbCIsInJlc3VsdCIsIm1EZWx0YSIsImFyY1RvU2VnbWVudHMiLCJjYWxjTGluZUxlbmd0aCIsIngxIiwieTEiLCJ4MiIsInkyIiwiZ2V0UG9pbnRPbkN1YmljQmV6aWVySXRlcmF0b3IiLCJwMXgiLCJwMXkiLCJwMngiLCJwMnkiLCJwM3giLCJwM3kiLCJwNHgiLCJwNHkiLCJwY3QiLCJDQjIiLCJjMyIsIkNCMyIsImM0IiwiQ0I0IiwiZ2V0VGFuZ2VudEN1YmljSXRlcmF0b3IiLCJpbnZUIiwidGFuZ2VudFgiLCJ0YW5nZW50WSIsImdldFBvaW50T25RdWFkcmF0aWNCZXppZXJJdGVyYXRvciIsIlFCMiIsIlFCMyIsImdldFRhbmdlbnRRdWFkcmF0aWNJdGVyYXRvciIsInBhdGhJdGVyYXRvciIsIml0ZXJhdG9yIiwicGVyYyIsInRlbXBQIiwidG1wTGVuIiwiZ2V0UGF0aFNlZ21lbnRzSW5mbyIsInRlbXBJbmZvIiwiYW5nbGVGaW5kZXIiLCJ0b3RhbExlbmd0aCIsImluZm8iLCJjb21tYW5kIiwiZGVzdFgiLCJkZXN0WSIsImpvaW5QYXRoIiwicGF0aERhdGEiLCJzZWdtZW50IiwicGFyc2VQYXRoIiwicGF0aFN0cmluZyIsImN1cnJlbnRQYXRoIiwicGFyc2VkIiwibWF0Y2giLCJjb29yZHNTdHIiLCJyZSIsInJOdW1iZXIiLCJyTnVtYmVyQ29tbWFXc3AiLCJyRmxhZ0NvbW1hV3NwIiwicmVnQXJjQXJndW1lbnRTZXF1ZW5jZSIsIlJlZ0V4cCIsImNvb3Jkc1BhcnNlZCIsInRyaW0iLCJhcmdzIiwiaiIsImpsZW4iLCJpc05hTiIsImNvbW1hbmRMZW5ndGgiLCJyZXBlYXRlZENvbW1hbmQiLCJrbGVuIiwibWFrZVBhdGhTaW1wbGVyIiwiY29udmVydGVkIiwicHJldmlvdXMiLCJjb250cm9sWCIsImNvbnRyb2xZIiwiZGVzdGluYXRpb25QYXRoIiwiZ2V0U21vb3RoUGF0aEZyb21Qb2ludHMiLCJjb3JyZWN0aW9uIiwicDEiLCJwMiIsIm11bHRTaWduWCIsIm11bHRTaWduWSIsIm1hbnlQb2ludHMiLCJlcSIsIm1pZFBvaW50IiwibWlkUG9pbnRGcm9tIiwiZ2V0Qm91bmRzT2ZDdXJ2ZSIsIngwIiwieTAiLCJ4MyIsInkzIiwiYXJnc1N0cmluZyIsInQxIiwidDIiLCJiMmFjIiwic3FydGIyYWMiLCJ0dmFsdWVzIiwiYm91bmRzIiwibXQiLCJnZXRQb2ludE9uUGF0aCIsImRpc3RhbmNlIiwiaW5mb3MiLCJzZWdJbmZvIiwic2VnUGVyY2VudCIsImxlcnAiLCJuZXh0TGVuIiwibGFzdFBlcmMiLCJuZXh0U3RlcCIsImZpbmRQZXJjZW50YWdlRm9yRGlzdGFuY2UiLCJ0cmFuc2Zvcm1QYXRoIiwicGF0aE9mZnNldCIsInBhdGhTZWdtZW50IiwibmV3U2VnbWVudCIsImZpbmQiLCJieVByb3BlcnR5IiwiY29uZGl0aW9uIiwiaW52b2tlIiwibWV0aG9kIiwidmFsdWUxIiwidmFsdWUyIiwiZXh0ZW5kIiwiRWxlbWVudCIsImhhc093blByb3BlcnR5IiwiZ2V0V2hvbGVDaGFyIiwic3RyIiwiY29kZSIsImNoYXJDb2RlQXQiLCJuZXh0IiwicHJldiIsInJlcGxhY2UiLCJjaGFyYWN0ZXIiLCJjYXBpdGFsaXplIiwiZmlyc3RMZXR0ZXJPbmx5IiwiZXNjYXBlWG1sIiwiZ3JhcGhlbWVTcGxpdCIsInRleHRzdHJpbmciLCJjaHIiLCJncmFwaGVtZXMiLCJlbXB0eUZ1bmN0aW9uIiwiSVNfRE9OVEVOVU1fQlVHR1kiLCJhZGRNZXRob2RzIiwia2xhc3MiLCJwYXJlbnQiLCJzdXBlcmNsYXNzIiwiY29uc3RydWN0b3IiLCJyZXR1cm5WYWx1ZSIsInZhbHVlT2YiLCJTdWJjbGFzcyIsImNhbGxTdXBlciIsIm1ldGhvZE5hbWUiLCJwYXJlbnRNZXRob2QiLCJfdGhpcyIsInN1cGVyQ2xhc3NNZXRob2QiLCJjcmVhdGVDbGFzcyIsImluaXRpYWxpemUiLCJzaGlmdCIsInN1YmNsYXNzZXMiLCJhdHRhY2hFdmVudCIsImFkZExpc3RlbmVyIiwiZWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnZXRQb2ludGVyIiwiZXZlbnQiLCJzY3JvbGwiLCJnZXRTY3JvbGxMZWZ0VG9wIiwiX2V2dCIsInRvdWNoUHJvcCIsImNoYW5nZWRUb3VjaGVzIiwiZ2V0VG91Y2hJbmZvIiwiY2xpZW50WCIsImNsaWVudFkiLCJpc1RvdWNoRXZlbnQiLCJwb2ludGVyVHlwZSIsIm9wYWNpdHkiLCJlcyIsImN1cnJlbnRTdHlsZSIsImhhc0xheW91dCIsInpvb20iLCJ0ZXN0Iiwic2V0U3R5bGUiLCJlbGVtZW50U3R5bGUiLCJjc3NUZXh0Iiwibm9ybWFsaXplZFByb3BlcnR5Iiwic3R5bGVGbG9hdCIsInNldFByb3BlcnR5Iiwic2xpY2VDYW5Db252ZXJ0Tm9kZWxpc3RzIiwiZ2V0RWxlbWVudFN0eWxlIiwic2VsZWN0UHJvcCIsIl9zbGljZSIsInRvQXJyYXkiLCJhcnJheUxpa2UiLCJjaGlsZE5vZGVzIiwiZXJyIiwibWFrZUVsZW1lbnQiLCJ0YWdOYW1lIiwiZWwiLCJjbGFzc05hbWUiLCJodG1sRm9yIiwic2V0QXR0cmlidXRlIiwiZG9jRWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsImJvZHkiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiaG9zdCIsIm5vZGVUeXBlIiwiYXJyIiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiYXR0ciIsIm1ha2VFbGVtZW50VW5zZWxlY3RhYmxlIiwib25zZWxlY3RzdGFydCIsInVuc2VsZWN0YWJsZSIsIm1ha2VFbGVtZW50U2VsZWN0YWJsZSIsInNldEltYWdlU21vb3RoaW5nIiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwid2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibXNJbWFnZVNtb290aGluZ0VuYWJsZWQiLCJvSW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiZ2V0QnlJZCIsImdldEVsZW1lbnRCeUlkIiwiYWRkQ2xhc3MiLCJ3cmFwRWxlbWVudCIsIndyYXBwZXIiLCJyZXBsYWNlQ2hpbGQiLCJnZXRFbGVtZW50T2Zmc2V0IiwiZG9jRWxlbSIsInNjcm9sbExlZnRUb3AiLCJkb2MiLCJvd25lckRvY3VtZW50IiwiYm94Iiwib2Zmc2V0Iiwib2Zmc2V0QXR0cmlidXRlcyIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclRvcFdpZHRoIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nVG9wIiwicGFyc2VJbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiZ2V0Tm9kZUNhbnZhcyIsImltcGwiLCJfY2FudmFzIiwiX2ltYWdlIiwiY2xlYW5VcEpzZG9tTm9kZSIsIl9jdXJyZW50U3JjIiwiX2F0dHJpYnV0ZXMiLCJfY2xhc3NMaXN0IiwiZW1wdHlGbiIsInJlcXVlc3QiLCJvbkNvbXBsZXRlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJwYXJhbWV0ZXJzIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInBhcmFtIiwiYWRkUGFyYW1Ub1VybCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsIndhcm4iLCJSVU5OSU5HX0FOSU1BVElPTlMiLCJub29wIiwiZGVmYXVsdEVhc2luZyIsImQiLCJjYW5jZWxBbGwiLCJhbmltYXRpb25zIiwiYW5pbWF0aW9uIiwiY2FuY2VsIiwiY2FuY2VsQnlDYW52YXMiLCJjYW5jZWxsZWQiLCJjYW5jZWxCeVRhcmdldCIsImZpbmRBbmltYXRpb25zQnlUYXJnZXQiLCJmaW5kQW5pbWF0aW9uSW5kZXgiLCJjYW5jZWxGdW5jIiwiZmluZEFuaW1hdGlvbiIsIl9yZXF1ZXN0QW5pbUZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsIl9jYW5jZWxBbmltRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsInJlcXVlc3RBbmltRnJhbWUiLCJhbmltYXRlIiwicmVtb3ZlRnJvbVJlZ2lzdHJ5IiwicnVubmluZ0FuaW1hdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJzdGFydFZhbHVlIiwiY29tcGxldGlvblJhdGUiLCJkdXJhdGlvblJhdGUiLCJ0aW1lc3RhbXAiLCJ0aW1lIiwiRGF0ZSIsImR1cmF0aW9uIiwiZmluaXNoIiwib25DaGFuZ2UiLCJhYm9ydCIsImVhc2luZyIsImlzTWFueSIsImVuZFZhbHVlIiwiYnlWYWx1ZSIsIm9uU3RhcnQiLCJ0aWNrIiwidGlja3RpbWUiLCJjdXJyZW50VGltZSIsInRpbWVQZXJjIiwiX3ZhbHVlIiwidmFsdWVQZXJjIiwiY2FuY2VsQW5pbUZyYW1lIiwiY2FsY3VsYXRlQ29sb3IiLCJiZWdpbiIsInBvcyIsImNvbG9yIiwiYW5pbWF0ZUNvbG9yIiwiZnJvbUNvbG9yIiwidG9Db2xvciIsInN0YXJ0Q29sb3IiLCJDb2xvciIsImdldFNvdXJjZSIsImVuZENvbG9yIiwib3JpZ2luYWxPbkNvbXBsZXRlIiwib3JpZ2luYWxPbkNoYW5nZSIsImNvbG9yRWFzaW5nIiwibm9ybWFsaXplIiwiYXNpbiIsImVsYXN0aWMiLCJvcHRzIiwiZWFzZUluQm91bmNlIiwiZWFzZU91dEJvdW5jZSIsImVhc2UiLCJlYXNlSW5RdWFkIiwiZWFzZU91dFF1YWQiLCJlYXNlSW5PdXRRdWFkIiwiZWFzZUluQ3ViaWMiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5PdXRDdWJpYyIsImVhc2VJblF1YXJ0IiwiZWFzZU91dFF1YXJ0IiwiZWFzZUluT3V0UXVhcnQiLCJlYXNlSW5RdWludCIsImVhc2VPdXRRdWludCIsImVhc2VJbk91dFF1aW50IiwiZWFzZUluU2luZSIsImVhc2VPdXRTaW5lIiwiZWFzZUluT3V0U2luZSIsImVhc2VJbkV4cG8iLCJlYXNlT3V0RXhwbyIsImVhc2VJbk91dEV4cG8iLCJlYXNlSW5DaXJjIiwiZWFzZU91dENpcmMiLCJlYXNlSW5PdXRDaXJjIiwiZWFzZUluRWxhc3RpYyIsImVhc2VPdXRFbGFzdGljIiwiZWFzZUluT3V0RWxhc3RpYyIsImVhc2VJbkJhY2siLCJlYXNlT3V0QmFjayIsImVhc2VJbk91dEJhY2siLCJlYXNlSW5PdXRCb3VuY2UiLCJhdHRyaWJ1dGVzTWFwIiwiZGlzcGxheSIsInZpc2liaWxpdHkiLCJjb2xvckF0dHJpYnV0ZXMiLCJmU2l6ZSIsImNQYXRoIiwibm9ybWFsaXplQXR0ciIsIm5vcm1hbGl6ZVZhbHVlIiwicGFyZW50QXR0cmlidXRlcyIsInBhcnNlVHJhbnNmb3JtQXR0cmlidXRlIiwidmlzaWJsZSIsImZpbGxJbmRleCIsInN0cm9rZUluZGV4IiwiZ2V0U3ZnUmVnZXgiLCJfZ2V0TXVsdGlwbGVOb2RlcyIsIm5vZGVOYW1lcyIsIm5vZGVOYW1lIiwibm9kZUxpc3QiLCJub2RlQXJyYXkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImVsZW1lbnRNYXRjaGVzUnVsZSIsInNlbGVjdG9ycyIsImZpcnN0TWF0Y2hpbmciLCJwYXJlbnRNYXRjaGluZyIsInNlbGVjdG9yTWF0Y2hlcyIsInNlbGVjdG9yIiwiZG9lc1NvbWVQYXJlbnRNYXRjaCIsIm1hdGNoZXIiLCJjbGFzc05hbWVzIiwiZ2V0QXR0cmlidXRlIiwiZWxlbWVudEJ5SWQiLCJub2RlIiwibm9kZWxpc3QiLCJzdmdWYWxpZFRhZ05hbWVzUmVnRXgiLCJzdmdWaWV3Qm94RWxlbWVudHNSZWdFeCIsInN2Z0ludmFsaWRBbmNlc3RvcnNSZWdFeCIsInN2Z1ZhbGlkUGFyZW50c1JlZ0V4IiwiY3NzUnVsZXMiLCJncmFkaWVudERlZnMiLCJjbGlwUGF0aHMiLCJza2V3TWF0cml4IiwicmVUcmFuc2Zvcm1MaXN0IiwicmVUcmFuc2Zvcm0iLCJhdHRyaWJ1dGVWYWx1ZSIsIm1hdHJpY2VzIiwib3BlcmF0aW9uIiwidHJhbnNsYXRlTWF0cml4Iiwicm90YXRlTWF0cml4IiwibXVsdGlwbGllclgiLCJtdWx0aXBsaWVyWSIsImNvbWJpbmVkTWF0cml4IiwicmVWaWV3Qm94QXR0clZhbHVlIiwiYXBwbHlWaWV3Ym94VHJhbnNmb3JtIiwidmlld0JveFdpZHRoIiwidmlld0JveEhlaWdodCIsInZpZXdCb3hBdHRyIiwid2lkdGhBdHRyIiwiaGVpZ2h0QXR0ciIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJtaXNzaW5nVmlld0JveCIsIm1pc3NpbmdEaW1BdHRyIiwidG9CZVBhcnNlZCIsInBhcnNlZERpbSIsIndpZHRoRGlmZiIsImhlaWdodERpZmYiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjcmVhdGVFbGVtZW50TlMiLCJmaXJzdENoaWxkIiwicmVjdXJzaXZlbHlQYXJzZUdyYWRpZW50c1hsaW5rIiwiZ3JhZGllbnQiLCJ4bGlua0F0dHIiLCJyZWZlcmVuY2VkR3JhZGllbnQiLCJoYXNBdHRyaWJ1dGUiLCJjaGlsZHJlbiIsInJlZmVyZW5jZUNsb25lIiwiY2xvbmVOb2RlIiwicGFyc2VTVkdEb2N1bWVudCIsInBhcnNpbmdPcHRpb25zIiwieGxpbmtBdHRyaWJ1dGUiLCJhdHRycyIsInhsaW5rIiwiZWwyIiwiY3VycmVudFRyYW5zIiwib2xkTGVuZ3RoIiwiZWwzIiwic2V0QXR0cmlidXRlTlMiLCJub2RlVmFsdWUiLCJwYXJzZVVzZURpcmVjdGl2ZXMiLCJzdmdVaWQiLCJfX3VpZCIsImRlc2NlbmRhbnRzIiwic2VsZWN0Tm9kZXMiLCJoYXNBbmNlc3RvcldpdGhOb2RlTmFtZSIsImdldEdyYWRpZW50RGVmcyIsImdldENTU1J1bGVzIiwicGFyc2VFbGVtZW50cyIsImluc3RhbmNlcyIsInJlRm9udERlY2xhcmF0aW9uIiwicGFyc2VGb250RGVjbGFyYXRpb24iLCJvU3R5bGUiLCJsaW5lSGVpZ2h0IiwiZWxMaXN0IiwicGFyc2VBdHRyaWJ1dGVzIiwicGFyZW50Rm9udFNpemUiLCJvd25BdHRyaWJ1dGVzIiwiY3NzQXR0cnMiLCJydWxlIiwiZ2V0R2xvYmFsU3R5bGVzRm9yRWxlbWVudCIsInBhcnNlU3R5bGVBdHRyaWJ1dGUiLCJub3JtYWxpemVkQXR0ciIsIm5vcm1hbGl6ZWRWYWx1ZSIsIm5vcm1hbGl6ZWRTdHlsZSIsImZvbnQiLCJtZXJnZWRBdHRycyIsInNldEFscGhhIiwiZ2V0QWxwaGEiLCJ0b1JnYmEiLCJfc2V0U3Ryb2tlRmlsbE9wYWNpdHkiLCJFbGVtZW50c1BhcnNlciIsInBhcnNlIiwiY2h1bmsiLCJwYWlyIiwicGFyc2VTdHlsZVN0cmluZyIsInBhcnNlU3R5bGVPYmplY3QiLCJwYXJzZVBvaW50c0F0dHJpYnV0ZSIsInBhcnNlZFBvaW50cyIsImFsbFJ1bGVzIiwic3R5bGVDb250ZW50cyIsInRleHRDb250ZW50IiwicnVsZU9iaiIsInByb3BlcnR5VmFsdWVQYWlycyIsIl9ydWxlIiwibG9hZFNWR0Zyb21VUkwiLCJ4bWwiLCJyZXNwb25zZVhNTCIsInJlc3VsdHMiLCJfb3B0aW9ucyIsImFsbEVsZW1lbnRzIiwibG9hZFNWR0Zyb21TdHJpbmciLCJwYXJzZUZyb21TdHJpbmciLCJyZWdleFVybCIsIm51bUVsZW1lbnRzIiwiY3JlYXRlT2JqZWN0cyIsImNyZWF0ZU9iamVjdCIsImZpbmRUYWciLCJmcm9tRWxlbWVudCIsImNyZWF0ZUNhbGxiYWNrIiwiY2hlY2tJZkRvbmUiLCJyZXNvbHZlR3JhZGllbnQiLCJJbWFnZSIsIl9vcmlnaW5hbEVsZW1lbnQiLCJfcmVtb3ZlVHJhbnNmb3JtTWF0cml4IiwicmVzb2x2ZUNsaXBQYXRoIiwiZXh0cmFjdFByb3BlcnR5RGVmaW5pdGlvbiIsInN0b3JhZ2UiLCJyZWdleCIsImxhc3RJbmRleCIsImdyYWRpZW50RGVmIiwib3BhY2l0eUF0dHIiLCJjcmVhdGVDbGlwUGF0aENhbGxiYWNrIiwiY29udGFpbmVyIiwiX25ld09iaiIsImZpbGxSdWxlIiwiY2xpcFJ1bGUiLCJ1c2luZ0VsZW1lbnQiLCJvYmpUcmFuc2Zvcm1JbnYiLCJnVHJhbnNmb3JtIiwiY2xpcFBhdGhUYWciLCJjbGlwUGF0aE93bmVyIiwidGhhdCIsInNjYWxhckFkZCIsInNjYWxhckFkZEVxdWFscyIsInN1YnRyYWN0RXF1YWxzIiwic2NhbGFyU3VidHJhY3QiLCJzY2FsYXJTdWJ0cmFjdEVxdWFscyIsIm11bHRpcGx5RXF1YWxzIiwiZGl2aWRlIiwiZGl2aWRlRXF1YWxzIiwibHQiLCJsdGUiLCJndCIsImd0ZSIsImRpc3RhbmNlRnJvbSIsImR4IiwiZHkiLCJzZXRYWSIsInNldFgiLCJzZXRZIiwic2V0RnJvbVBvaW50Iiwic3dhcCIsIkludGVyc2VjdGlvbiIsInN0YXR1cyIsImFwcGVuZFBvaW50IiwiYXBwZW5kUG9pbnRzIiwiaW50ZXJzZWN0TGluZUxpbmUiLCJhMSIsImEyIiwiYjEiLCJiMiIsInVhVCIsInViVCIsInVCIiwidWEiLCJ1YiIsImludGVyc2VjdExpbmVQb2x5Z29uIiwiaW50ZXIiLCJpbnRlcnNlY3RQb2x5Z29uUG9seWdvbiIsInBvaW50czEiLCJwb2ludHMyIiwiaW50ZXJzZWN0UG9seWdvblJlY3RhbmdsZSIsInIxIiwicjIiLCJ0b3BSaWdodCIsImJvdHRvbUxlZnQiLCJpbnRlcjEiLCJpbnRlcjIiLCJpbnRlcjMiLCJpbnRlcjQiLCJfdHJ5UGFyc2luZ0NvbG9yIiwic2V0U291cmNlIiwiaHVlMnJnYiIsImNvbG9yTmFtZU1hcCIsInNvdXJjZUZyb21IZXgiLCJzb3VyY2VGcm9tUmdiIiwic291cmNlRnJvbUhzbCIsIl9yZ2JUb0hzbCIsImciLCJyb3VuZCIsIl9zb3VyY2UiLCJ0b1JnYiIsInRvSHNsIiwiaHNsIiwidG9Ic2xhIiwidG9IZXgiLCJ0b0hleGEiLCJ0b0dyYXlzY2FsZSIsImF2ZXJhZ2UiLCJjdXJyZW50QWxwaGEiLCJ0b0JsYWNrV2hpdGUiLCJ0aHJlc2hvbGQiLCJvdmVybGF5V2l0aCIsIm90aGVyQ29sb3IiLCJvdGhlclNvdXJjZSIsInJlUkdCYSIsInJlSFNMYSIsInJlSGV4IiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZXkiLCJkYXJrZ3JlZW4iLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JleSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmV5IiwibGlnaHRncmVlbiIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJmcm9tUmdiIiwiZnJvbVNvdXJjZSIsImZyb21SZ2JhIiwiZnJvbUhzbCIsImZyb21Ic2xhIiwiZnJvbUhleCIsImlzU2hvcnROb3RhdGlvbiIsImlzUkdCYSIsIm9Db2xvciIsInNjYWxlTWFwIiwic2tld01hcCIsImNvbnRyb2xzIiwiTEVGVCIsIlRPUCIsIlJJR0hUIiwiQk9UVE9NIiwiQ0VOVEVSIiwib3Bwb3NpdGUiLCJib3R0b20iLCJyaWdodCIsImZpbmRDb3JuZXJRdWFkcmFudCIsImZhYnJpY09iamVjdCIsImNvbnRyb2wiLCJjb3JuZXJBbmdsZSIsImZpcmVFdmVudCIsImNhbnZhc09wdGlvbnMiLCJzY2FsZUlzUHJvcG9ydGlvbmFsIiwiZXZlbnREYXRhIiwidW5pZm9ybUlzVG9nZ2xlZCIsInVuaVNjYWxlS2V5IiwidW5pZm9ybVNjYWxpbmciLCJpc1RyYW5zZm9ybUNlbnRlcmVkIiwib3JpZ2luWCIsIm9yaWdpblkiLCJzY2FsaW5nSXNGb3JiaWRkZW4iLCJieSIsInNjYWxlUHJvcG9ydGlvbmFsbHkiLCJsb2NrWCIsImxvY2tTY2FsaW5nWCIsImxvY2tZIiwibG9ja1NjYWxpbmdZIiwiY29tbW9uRXZlbnRJbmZvIiwiZSIsInBvaW50ZXIiLCJ3cmFwV2l0aEZpeGVkQW5jaG9yIiwiYWN0aW9uSGFuZGxlciIsImdldENlbnRlclBvaW50IiwiY29uc3RyYWludCIsInRyYW5zbGF0ZVRvT3JpZ2luUG9pbnQiLCJhY3Rpb25QZXJmb3JtZWQiLCJ3cmFwV2l0aEZpcmVFdmVudCIsImdldExvY2FsUG9pbnQiLCJjb3JuZXIiLCJnZXRab29tIiwicGFkZGluZyIsImxvY2FsUG9pbnQiLCJ0b0xvY2FsUG9pbnQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInRhcmdldEhhc09uZUZsaXAiLCJjb21wZW5zYXRlU2NhbGVGb3JTa2V3Iiwib3Bwb3NpdGVTa2V3Iiwic2NhbGVUb0NvbXBlbnNhdGUiLCJheGlzIiwicmVmZXJlbmNlIiwibmV3VmFsdWUiLCJfZ2V0VHJhbnNmb3JtZWREaW1lbnNpb25zIiwic2tld09iamVjdFgiLCJuZXdTa2V3IiwiZGltTm9Ta2V3IiwidG90YWxTa2V3U2l6ZSIsImN1cnJlbnRTa2V3IiwiaGFzU2tld2VkIiwiZGltQmVmb3JlU2tld2luZyIsInNrZXdPYmplY3RZIiwic2NhbGVPYmplY3QiLCJkaW0iLCJzaWduWCIsInNpZ25ZIiwiZm9yYmlkU2NhbGluZyIsImdlc3R1cmVTY2FsZSIsImxvY2tTY2FsaW5nRmxpcCIsIm9yaWdpbmFsIiwib2xkU2NhbGVYIiwib2xkU2NhbGVZIiwic2NhbGVDdXJzb3JTdHlsZUhhbmRsZXIiLCJuIiwic2tld0N1cnNvclN0eWxlSGFuZGxlciIsIm5vdEFsbG93ZWQiLCJsb2NrU2tld2luZ1kiLCJsb2NrU2tld2luZ1giLCJzY2FsZVNrZXdDdXJzb3JTdHlsZUhhbmRsZXIiLCJhbHRBY3Rpb25LZXkiLCJyb3RhdGlvbldpdGhTbmFwcGluZyIsInBpdm90UG9pbnQiLCJsb2NrUm90YXRpb24iLCJoYXNSb3RhdGVkIiwibGFzdEFuZ2xlIiwiZXkiLCJleCIsImN1ckFuZ2xlIiwic25hcEFuZ2xlIiwic25hcFRocmVzaG9sZCIsInJpZ2h0QW5nbGVMb2NrZWQiLCJsZWZ0QW5nbGVMb2NrZWQiLCJzY2FsaW5nRXF1YWxseSIsInNjYWxpbmdYIiwic2NhbGluZ1kiLCJzY2FsaW5nWU9yU2tld2luZ1giLCJza2V3SGFuZGxlclgiLCJzY2FsaW5nWE9yU2tld2luZ1kiLCJza2V3SGFuZGxlclkiLCJjaGFuZ2VXaWR0aCIsInN0cm9rZVBhZGRpbmciLCJtdWx0aXBsaWVyIiwib2xkV2lkdGgiLCJuZXdXaWR0aCIsImZpbmFsSGFuZGxlciIsImRyYWdIYW5kbGVyIiwibmV3TGVmdCIsIm5ld1RvcCIsIm1vdmVYIiwibW92ZVkiLCJzY2FsZU9yU2tld0FjdGlvbk5hbWUiLCJpc0FsdGVybmF0aXZlIiwicm90YXRpb25TdHlsZUhhbmRsZXIiLCJjdXJzb3JTdHlsZSIsImNvbnRyb2xzVXRpbHMiLCJyZW5kZXJDaXJjbGVDb250cm9sIiwic3R5bGVPdmVycmlkZSIsInhTaXplIiwic2l6ZVgiLCJjb3JuZXJTaXplIiwieVNpemUiLCJzaXplWSIsInRyYW5zcGFyZW50Q29ybmVycyIsImNvcm5lclN0cm9rZUNvbG9yIiwibXlMZWZ0IiwibXlUb3AiLCJzYXZlIiwiZmlsbFN0eWxlIiwiY29ybmVyQ29sb3IiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImJlZ2luUGF0aCIsImFyYyIsInJlc3RvcmUiLCJyZW5kZXJTcXVhcmVDb250cm9sIiwieFNpemVCeTIiLCJ5U2l6ZUJ5MiIsInN0cm9rZVJlY3QiLCJDb250cm9sIiwiYWN0aW9uTmFtZSIsInRvdWNoU2l6ZVgiLCJ0b3VjaFNpemVZIiwid2l0aENvbm5lY3Rpb24iLCJtb3VzZURvd25IYW5kbGVyIiwibW91c2VVcEhhbmRsZXIiLCJnZXRBY3Rpb25IYW5kbGVyIiwiZ2V0TW91c2VEb3duSGFuZGxlciIsImdldE1vdXNlVXBIYW5kbGVyIiwiY3Vyc29yU3R5bGVIYW5kbGVyIiwiZ2V0QWN0aW9uTmFtZSIsImdldFZpc2liaWxpdHkiLCJjb250cm9sS2V5Iiwib2JqZWN0VmlzaWJpbGl0eSIsIl9jb250cm9sc1Zpc2liaWxpdHkiLCJzZXRWaXNpYmlsaXR5IiwicG9zaXRpb25IYW5kbGVyIiwiZmluYWxNYXRyaXgiLCJjYWxjQ29ybmVyQ29vcmRzIiwib2JqZWN0QW5nbGUiLCJvYmplY3RDb3JuZXJTaXplIiwiY2VudGVyWCIsImNlbnRlclkiLCJpc1RvdWNoIiwiY29zSGFsZk9mZnNldCIsInNpbkhhbGZPZmZzZXQiLCJjb3NIYWxmT2Zmc2V0Q29tcCIsInNpbkhhbGZPZmZzZXRDb21wIiwiY29udHJvbFRyaWFuZ2xlQW5nbGUiLCJjb3JuZXJIeXBvdGVudXNlIiwibmV3VGhldGEiLCJuZXdUaGV0YUNvbXAiLCJ0bCIsInRyIiwiYmwiLCJiciIsInJlbmRlciIsImNvcm5lclN0eWxlIiwiZ2V0Q29sb3JTdG9wIiwiY29sb3JBbHBoYSIsImtleVZhbHVlUGFpcnMiLCJncmFkaWVudFRyYW5zZm9ybSIsImdyYWRpZW50VW5pdHMiLCJvcHRpb24iLCJhZGRDb2xvclN0b3AiLCJ0b09iamVjdCIsInByb3BlcnRpZXNUb0luY2x1ZGUiLCJ0b1NWRyIsIm1hcmt1cCIsImNvbW1vbkF0dHJpYnV0ZXMiLCJuZWVkc1N3YXAiLCJ3aXRoVmlld3BvcnQiLCJhZGRpdGlvbmFsVHJhbnNmb3JtIiwic29ydCIsInJldmVyc2UiLCJtaW5SYWRpdXMiLCJwZXJjZW50YWdlU2hpZnQiLCJjb2xvclN0b3AiLCJ0b0xpdmUiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImNyZWF0ZVJhZGlhbEdyYWRpZW50IiwiaW5zdGFuY2UiLCJzdmdPcHRpb25zIiwiY29sb3JTdG9wRWxzIiwiZ2V0TGluZWFyQ29vcmRzIiwiZ2V0UmFkaWFsQ29vcmRzIiwicHJvcFZhbHVlIiwiZmluYWxWYWx1ZSIsIl9fY29udmVydFBlcmNlbnRVbml0c1RvVmFsdWVzIiwicmVwZWF0IiwicGF0dGVyblRyYW5zZm9ybSIsInNldE9wdGlvbnMiLCJpc0Vycm9yIiwicGF0dGVyblNvdXJjZSIsInBhdHRlcm5XaWR0aCIsInBhdHRlcm5IZWlnaHQiLCJwYXR0ZXJuT2Zmc2V0WCIsInBhdHRlcm5PZmZzZXRZIiwicGF0dGVybkltZ1NyYyIsImNvbXBsZXRlIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsImNyZWF0ZVBhdHRlcm4iLCJTaGFkb3ciLCJibHVyIiwiYWZmZWN0U3Ryb2tlIiwiaW5jbHVkZURlZmF1bHRWYWx1ZXMiLCJub25TY2FsaW5nIiwiX3BhcnNlU2hhZG93Iiwic2hhZG93Iiwic2hhZG93U3RyIiwib2Zmc2V0c0FuZEJsdXIiLCJyZU9mZnNldHNBbmRCbHVyIiwiZkJveFgiLCJmQm94WSIsIlN0YXRpY0NhbnZhcyIsIkNBTlZBU19JTklUX0VSUk9SIiwiRXJyb3IiLCJyZW5kZXJBbmRSZXNldEJvdW5kIiwicmVuZGVyQW5kUmVzZXQiLCJyZXF1ZXN0UmVuZGVyQWxsQm91bmQiLCJfaW5pdFN0YXRpYyIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRJbWFnZSIsIm92ZXJsYXlDb2xvciIsIm92ZXJsYXlJbWFnZSIsInN0YXRlZnVsIiwiY29udHJvbHNBYm92ZU92ZXJsYXkiLCJhbGxvd1RvdWNoU2Nyb2xsaW5nIiwidmlld3BvcnRUcmFuc2Zvcm0iLCJiYWNrZ3JvdW5kVnB0Iiwib3ZlcmxheVZwdCIsImVuYWJsZVJldGluYVNjYWxpbmciLCJ2cHRDb29yZHMiLCJza2lwT2Zmc2NyZWVuIiwiY2IiLCJfY3JlYXRlTG93ZXJDYW52YXMiLCJfaW5pdE9wdGlvbnMiLCJpbnRlcmFjdGl2ZSIsIl9pbml0UmV0aW5hU2NhbGluZyIsInNldE92ZXJsYXlJbWFnZSIsInNldEJhY2tncm91bmRJbWFnZSIsInNldEJhY2tncm91bmRDb2xvciIsInNldE92ZXJsYXlDb2xvciIsImNhbGNPZmZzZXQiLCJfaXNSZXRpbmFTY2FsaW5nIiwiZ2V0UmV0aW5hU2NhbGluZyIsInNjYWxlUmF0aW8iLCJfX2luaXRSZXRpbmFTY2FsaW5nIiwibG93ZXJDYW52YXNFbCIsImNvbnRleHRDb250YWluZXIiLCJ1cHBlckNhbnZhc0VsIiwiY29udGV4dFRvcCIsIl9vZmZzZXQiLCJpbWFnZSIsIl9fc2V0QmdPdmVybGF5SW1hZ2UiLCJfX3NldEJnT3ZlcmxheUNvbG9yIiwiX2NyZWF0ZUNhbnZhc0VsZW1lbnQiLCJfb3JpZ2luYWxDYW52YXNTdHlsZSIsIl9hcHBseUNhbnZhc1N0eWxlIiwiZ2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJzZXRXaWR0aCIsInNldERpbWVuc2lvbnMiLCJzZXRIZWlnaHQiLCJkaW1lbnNpb25zIiwiY3NzVmFsdWUiLCJjc3NPbmx5IiwiX3NldEJhY2tzdG9yZURpbWVuc2lvbiIsImhhc0xvc3RDb250ZXh0IiwiYmFja3N0b3JlT25seSIsIl9zZXRDc3NEaW1lbnNpb24iLCJfaXNDdXJyZW50bHlEcmF3aW5nIiwiZnJlZURyYXdpbmdCcnVzaCIsIl9zZXRCcnVzaFN0eWxlcyIsImNhY2hlQ2FudmFzRWwiLCJ3cmFwcGVyRWwiLCJzZXRWaWV3cG9ydFRyYW5zZm9ybSIsInZwdCIsImFjdGl2ZU9iamVjdCIsIl9hY3RpdmVPYmplY3QiLCJiYWNrZ3JvdW5kT2JqZWN0Iiwib3ZlcmxheU9iamVjdCIsImdyb3VwIiwic2V0Q29vcmRzIiwiY2FsY1ZpZXdwb3J0Qm91bmRhcmllcyIsInpvb21Ub1BvaW50IiwiYmVmb3JlIiwiYWZ0ZXIiLCJzZXRab29tIiwiYWJzb2x1dGVQYW4iLCJyZWxhdGl2ZVBhbiIsImdldEVsZW1lbnQiLCJzZXR1cFN0YXRlIiwiY2xlYXJDb250ZXh0IiwiY2xlYXJSZWN0IiwiY2xlYXIiLCJfaGFzSVRleHRIYW5kbGVycyIsIl9tb3VzZVVwSVRleHRIYW5kbGVyIiwiX2lUZXh0SW5zdGFuY2VzIiwicmVuZGVyQWxsIiwiY2FudmFzVG9EcmF3T24iLCJyZW5kZXJDYW52YXMiLCJpc1JlbmRlcmluZyIsImlWcHQiLCJjYW5jZWxSZXF1ZXN0ZWRSZW5kZXIiLCJfcmVuZGVyQmFja2dyb3VuZCIsIl9yZW5kZXJPYmplY3RzIiwiZHJhd0NvbnRyb2xzIiwic2hvdWxkQ2FjaGUiLCJfdHJhbnNmb3JtRG9uZSIsInJlbmRlckNhY2hlIiwiZm9yQ2xpcHBpbmciLCJkcmF3Q2xpcFBhdGhPbkNhbnZhcyIsIl9yZW5kZXJPdmVybGF5IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiem9vbVgiLCJ6b29tWSIsIl9jYWNoZUNhbnZhcyIsImNhY2hlVHJhbnNsYXRpb25YIiwiY2FjaGVUcmFuc2xhdGlvblkiLCJfcmVuZGVyQmFja2dyb3VuZE9yT3ZlcmxheSIsIm5lZWRzVnB0IiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2VQYXRoIiwiZ2V0Q2VudGVyIiwiY2VudGVyT2JqZWN0SCIsIl9jZW50ZXJPYmplY3QiLCJjZW50ZXJPYmplY3RWIiwiY2VudGVyT2JqZWN0Iiwidmlld3BvcnRDZW50ZXJPYmplY3QiLCJ2cENlbnRlciIsImdldFZwQ2VudGVyIiwidmlld3BvcnRDZW50ZXJPYmplY3RIIiwidmlld3BvcnRDZW50ZXJPYmplY3RWIiwidG9EYXRhbGVzc0pTT04iLCJ0b0RhdGFsZXNzT2JqZWN0IiwiX3RvT2JqZWN0TWV0aG9kIiwiX3RvT2JqZWN0cyIsImV4Y2x1ZGVGcm9tRXhwb3J0IiwiX3RvT2JqZWN0IiwiX19zZXJpYWxpemVCZ092ZXJsYXkiLCJvcmlnaW5hbFZhbHVlIiwiYmdJbWFnZSIsImJnQ29sb3IiLCJiYWNrZ3JvdW5kIiwib3ZlcmxheSIsInN2Z1ZpZXdwb3J0VHJhbnNmb3JtYXRpb24iLCJfc2V0U1ZHUHJlYW1ibGUiLCJfc2V0U1ZHSGVhZGVyIiwiY2xpcFBhdGhJZCIsIl9zZXRTVkdCZ092ZXJsYXlDb2xvciIsIl9zZXRTVkdCZ092ZXJsYXlJbWFnZSIsIl9zZXRTVkdPYmplY3RzIiwic3VwcHJlc3NQcmVhbWJsZSIsImVuY29kaW5nIiwidmlld0JveCIsImNyZWF0ZVNWR0ZvbnRGYWNlc01hcmt1cCIsImNyZWF0ZVNWR1JlZkVsZW1lbnRzTWFya3VwIiwiY3JlYXRlU1ZHQ2xpcFBhdGhNYXJrdXAiLCJ0b0NsaXBQYXRoU1ZHIiwic2hvdWxkVHJhbnNmb3JtIiwicm93Iiwicm93SW5kZXgiLCJmb250TGlzdCIsIl9zZXRTVkdPYmplY3QiLCJmaW5hbFdpZHRoIiwiZmluYWxIZWlnaHQiLCJzZW5kVG9CYWNrIiwib2JqcyIsImFjdGl2ZVNlbGVjdGlvbiIsInVuc2hpZnQiLCJicmluZ1RvRnJvbnQiLCJzZW5kQmFja3dhcmRzIiwiaW50ZXJzZWN0aW5nIiwibmV3SWR4Iiwib2Jqc01vdmVkIiwiX2ZpbmROZXdMb3dlckluZGV4IiwiaW50ZXJzZWN0c1dpdGhPYmplY3QiLCJpc0NvbnRhaW5lZFdpdGhpbk9iamVjdCIsImJyaW5nRm9yd2FyZCIsIl9maW5kTmV3VXBwZXJJbmRleCIsImRpc3Bvc2UiLCJjbGFzc0xpc3QiLCJEYXRhVVJMRXhwb3J0ZXIiLCJFTVBUWV9KU09OIiwic2V0TGluZURhc2giLCJ0b0pTT04iLCJjcmVhdGVQTkdTdHJlYW0iLCJjcmVhdGVKUEVHU3RyZWFtIiwiQmFzZUJydXNoIiwic3Ryb2tlTGluZUNhcCIsInN0cm9rZURhc2hBcnJheSIsImxpbWl0ZWRUb0NhbnZhc1NpemUiLCJsaW5lQ2FwIiwibWl0ZXJMaW1pdCIsImxpbmVKb2luIiwiX3NhdmVBbmRUcmFuc2Zvcm0iLCJfc2V0U2hhZG93Iiwic2hhZG93Q29sb3IiLCJzaGFkb3dCbHVyIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJuZWVkc0Z1bGxSZW5kZXIiLCJfcmVzZXRTaGFkb3ciLCJfaXNPdXRTaWRlQ2FudmFzIiwiUGVuY2lsQnJ1c2giLCJkZWNpbWF0ZSIsImRyYXdTdHJhaWdodExpbmUiLCJzdHJhaWdodExpbmVLZXkiLCJfcG9pbnRzIiwiX2hhc1N0cmFpZ2h0TGluZSIsIl9kcmF3U2VnbWVudCIsInF1YWRyYXRpY0N1cnZlVG8iLCJvbk1vdXNlRG93biIsIl9pc01haW5FdmVudCIsIl9wcmVwYXJlRm9yRHJhd2luZyIsIl9jYXB0dXJlRHJhd2luZ1BhdGgiLCJfcmVuZGVyIiwib25Nb3VzZU1vdmUiLCJvbGRFbmQiLCJvbk1vdXNlVXAiLCJfZmluYWxpemVBbmRBZGRQYXRoIiwiX3Jlc2V0IiwiX2FkZFBvaW50IiwicG9pbnRlclBvaW50IiwiY29udmVydFBvaW50c1RvU1ZHUGF0aCIsIl9pc0VtcHR5U1ZHUGF0aCIsImNyZWF0ZVBhdGgiLCJQYXRoIiwiZGVjaW1hdGVQb2ludHMiLCJhZGp1c3RlZERpc3RhbmNlIiwibGFzdFBvaW50IiwibmV3UG9pbnRzIiwiQ2lyY2xlQnJ1c2giLCJkcmF3RG90IiwiYWRkUG9pbnQiLCJkb3QiLCJyYWRpdXMiLCJvcmlnaW5hbFJlbmRlck9uQWRkUmVtb3ZlIiwiY2lyY2xlcyIsImNpcmNsZSIsIkNpcmNsZSIsImNpcmNsZVJhZGl1cyIsImNpcmNsZUNvbG9yIiwiU3ByYXlCcnVzaCIsImRlbnNpdHkiLCJkb3RXaWR0aCIsImRvdFdpZHRoVmFyaWFuY2UiLCJyYW5kb21PcGFjaXR5Iiwib3B0aW1pemVPdmVybGFwcGluZyIsInNwcmF5Q2h1bmtzIiwiYWRkU3ByYXlDaHVuayIsInNwcmF5Q2h1bmtQb2ludHMiLCJyZWN0cyIsImlsZW4iLCJzcHJheUNodW5rIiwicmVjdCIsIlJlY3QiLCJfZ2V0T3B0aW1pemVkUmVjdHMiLCJ1bmlxdWVSZWN0cyIsInVuaXF1ZVJlY3RzQXJyYXkiLCJnbG9iYWxBbHBoYSIsImZpbGxSZWN0IiwiUGF0dGVybkJydXNoIiwiZ2V0UGF0dGVyblNyYyIsInBhdHRlcm5DYW52YXMiLCJwYXR0ZXJuQ3R4IiwiZ2V0UGF0dGVyblNyY0Z1bmN0aW9uIiwiU3RyaW5nIiwiZ2V0UGF0dGVybiIsInRvcExlZnQiLCJfZ2V0TGVmdFRvcENvb3JkcyIsIkNhbnZhcyIsIl9pbml0SW50ZXJhY3RpdmUiLCJfY3JlYXRlQ2FjaGVDYW52YXMiLCJjZW50ZXJlZFNjYWxpbmciLCJjZW50ZXJlZFJvdGF0aW9uIiwiY2VudGVyZWRLZXkiLCJzZWxlY3Rpb24iLCJzZWxlY3Rpb25LZXkiLCJhbHRTZWxlY3Rpb25LZXkiLCJzZWxlY3Rpb25Db2xvciIsInNlbGVjdGlvbkRhc2hBcnJheSIsInNlbGVjdGlvbkJvcmRlckNvbG9yIiwic2VsZWN0aW9uTGluZVdpZHRoIiwic2VsZWN0aW9uRnVsbHlDb250YWluZWQiLCJob3ZlckN1cnNvciIsIm1vdmVDdXJzb3IiLCJkZWZhdWx0Q3Vyc29yIiwiZnJlZURyYXdpbmdDdXJzb3IiLCJub3RBbGxvd2VkQ3Vyc29yIiwiY29udGFpbmVyQ2xhc3MiLCJwZXJQaXhlbFRhcmdldEZpbmQiLCJ0YXJnZXRGaW5kVG9sZXJhbmNlIiwic2tpcFRhcmdldEZpbmQiLCJpc0RyYXdpbmdNb2RlIiwicHJlc2VydmVPYmplY3RTdGFja2luZyIsInN0b3BDb250ZXh0TWVudSIsImZpcmVSaWdodENsaWNrIiwiZmlyZU1pZGRsZUNsaWNrIiwidGFyZ2V0cyIsImVuYWJsZVBvaW50ZXJFdmVudHMiLCJfaG92ZXJlZFRhcmdldCIsIl9ob3ZlcmVkVGFyZ2V0cyIsIl9jdXJyZW50VHJhbnNmb3JtIiwiX2dyb3VwU2VsZWN0b3IiLCJfaW5pdFdyYXBwZXJFbGVtZW50IiwiX2NyZWF0ZVVwcGVyQ2FudmFzIiwiX2luaXRFdmVudExpc3RlbmVycyIsIl9jaG9vc2VPYmplY3RzVG9SZW5kZXIiLCJvYmpzVG9SZW5kZXIiLCJhY3RpdmVHcm91cE9iamVjdHMiLCJhY3RpdmVPYmplY3RzIiwiZ2V0QWN0aXZlT2JqZWN0cyIsImNvbnRleHRUb3BEaXJ0eSIsInJlbmRlclRvcExheWVyIiwiX2RyYXdTZWxlY3Rpb24iLCJyZW5kZXJUb3AiLCJfbm9ybWFsaXplUG9pbnRlciIsImludmVydGVkTSIsInZwdFBvaW50ZXIiLCJyZXN0b3JlUG9pbnRlclZwdCIsImlzVGFyZ2V0VHJhbnNwYXJlbnQiLCJub3JtYWxpemVkUG9pbnRlciIsInRhcmdldFJlbGF0aXZlWCIsInRhcmdldFJlbGF0aXZlWSIsIl9jYWNoZUNvbnRleHQiLCJjb250ZXh0Q2FjaGUiLCJvcmlnaW5hbENvbG9yIiwic2VsZWN0aW9uQmFja2dyb3VuZENvbG9yIiwiX2lzU2VsZWN0aW9uS2V5UHJlc3NlZCIsIl9zaG91bGRDbGVhclNlbGVjdGlvbiIsImV2ZW50ZWQiLCJzZWxlY3RhYmxlIiwiX3Nob3VsZENlbnRlclRyYW5zZm9ybSIsImFjdGlvbiIsImFsdEtleSIsImNlbnRlclRyYW5zZm9ybSIsIl9nZXRPcmlnaW5Gcm9tQ29ybmVyIiwiX2dldEFjdGlvbkZyb21Db3JuZXIiLCJhbHJlYWR5U2VsZWN0ZWQiLCJfc2V0dXBDdXJyZW50VHJhbnNmb3JtIiwiX19jb3JuZXIiLCJsYXN0WCIsImxhc3RZIiwic2hpZnRLZXkiLCJfYmVmb3JlVHJhbnNmb3JtIiwic2V0Q3Vyc29yIiwiY3Vyc29yIiwidmlld3BvcnRTdGFydCIsInZpZXdwb3J0RXh0ZW50IiwiZXh0ZW50IiwibWF4WCIsIm1heFkiLCJzdHJva2VPZmZzZXQiLCJfc2V0TGluZURhc2giLCJmaW5kVGFyZ2V0Iiwic2tpcEdyb3VwIiwiYWN0aXZlVGFyZ2V0IiwiYWN0aXZlVGFyZ2V0U3VicyIsImFPYmplY3RzIiwic2hvdWxkTG9va0ZvckFjdGl2ZSIsIl9maW5kVGFyZ2V0Q29ybmVyIiwiX3NlYXJjaFBvc3NpYmxlVGFyZ2V0cyIsIl9jaGVja1RhcmdldCIsImdsb2JhbFBvaW50ZXIiLCJjb250YWluc1BvaW50IiwiaXNFZGl0aW5nIiwic3ViVGFyZ2V0Iiwib2JqVG9DaGVjayIsInBvaW50ZXJUb1VzZSIsInN1YlRhcmdldENoZWNrIiwiaWdub3JlWm9vbSIsIl9hYnNvbHV0ZVBvaW50ZXIiLCJfcG9pbnRlciIsImNzc1NjYWxlIiwiYm91bmRzV2lkdGgiLCJib3VuZHNIZWlnaHQiLCJyZXRpbmFTY2FsaW5nIiwibG93ZXJDYW52YXNDbGFzcyIsIl9jb3B5Q2FudmFzU3R5bGUiLCJnZXRUb3BDb250ZXh0IiwiZnJvbUVsIiwidG9FbCIsImdldFNlbGVjdGlvbkNvbnRleHQiLCJnZXRTZWxlY3Rpb25FbGVtZW50IiwiZ2V0QWN0aXZlT2JqZWN0IiwiYWN0aXZlIiwiX2Rpc2NhcmRBY3RpdmVPYmplY3QiLCJfZmlyZVNlbGVjdGlvbkV2ZW50cyIsIm9sZE9iamVjdHMiLCJzb21ldGhpbmdDaGFuZ2VkIiwiYWRkZWQiLCJyZW1vdmVkIiwib2xkT2JqZWN0Iiwic2VsZWN0ZWQiLCJkZXNlbGVjdGVkIiwic2V0QWN0aXZlT2JqZWN0IiwiY3VycmVudEFjdGl2ZXMiLCJfc2V0QWN0aXZlT2JqZWN0Iiwib25TZWxlY3QiLCJvbkRlc2VsZWN0IiwiZGlzY2FyZEFjdGl2ZU9iamVjdCIsInJlbW92ZUxpc3RlbmVycyIsIl9yZW5kZXJDb250cm9scyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIl9yZWFsaXplR3JvdXBUcmFuc2Zvcm1Pbk9iamVjdCIsIl91bndpbmRHcm91cFRyYW5zZm9ybU9uT2JqZWN0Iiwib3JpZ2luYWxWYWx1ZXMiLCJjbGVhckNvbnRleHRUb3AiLCJhZGRFdmVudE9wdGlvbnMiLCJwYXNzaXZlIiwiY2hlY2tDbGljayIsImJ1dHRvbiIsIm1haW5Ub3VjaElkIiwiX2JpbmRFdmVudHMiLCJhZGRPclJlbW92ZSIsIl9nZXRFdmVudFByZWZpeCIsImZ1bmN0b3IiLCJldmVudGpzRnVuY3RvciIsImNhbnZhc0VsZW1lbnQiLCJldmVudFR5cGVQcmVmaXgiLCJfb25SZXNpemUiLCJfb25Nb3VzZURvd24iLCJfb25Nb3VzZU1vdmUiLCJfb25Nb3VzZU91dCIsIl9vbk1vdXNlRW50ZXIiLCJfb25Nb3VzZVdoZWVsIiwiX29uQ29udGV4dE1lbnUiLCJfb25Eb3VibGVDbGljayIsIl9vbkRyYWdPdmVyIiwiX29uRHJhZ0VudGVyIiwiX29uRHJhZ0xlYXZlIiwiX29uRHJvcCIsIl9vblRvdWNoU3RhcnQiLCJldmVudGpzIiwiX29uR2VzdHVyZSIsIl9vbkRyYWciLCJfb25PcmllbnRhdGlvbkNoYW5nZSIsIl9vblNoYWtlIiwiX29uTG9uZ1ByZXNzIiwiX29uTW91c2VVcCIsIl9vblRvdWNoRW5kIiwiZXZlbnRzQm91bmQiLCJfc2ltcGxlRXZlbnRIYW5kbGVyIiwic2VsZiIsIl9fb25UcmFuc2Zvcm1HZXN0dXJlIiwiX19vbkRyYWciLCJfX29uTW91c2VXaGVlbCIsIl90YXJnZXQiLCJfX29uT3JpZW50YXRpb25DaGFuZ2UiLCJfX29uU2hha2UiLCJfX29uTG9uZ1ByZXNzIiwicHJldmVudERlZmF1bHQiLCJfZmlyZUVudGVyTGVhdmVFdmVudHMiLCJzdG9wUHJvcGFnYXRpb24iLCJfY2FjaGVUcmFuc2Zvcm1FdmVudERhdGEiLCJfaGFuZGxlRXZlbnQiLCJfcmVzZXRUcmFuc2Zvcm1FdmVudERhdGEiLCJnZXRQb2ludGVySWQiLCJldnQiLCJpZGVudGlmaWVyIiwicG9pbnRlcklkIiwiaXNQcmltYXJ5IiwidG91Y2hlcyIsIl9fb25Nb3VzZURvd24iLCJfX29uTW91c2VVcCIsIl93aWxsQWRkTW91c2VEb3duIiwiX19vbk1vdXNlTW92ZSIsIl9zaG91bGRSZW5kZXIiLCJncm91cFNlbGVjdG9yIiwic2hvdWxkUmVuZGVyIiwiaXNDbGljayIsIl9vbk1vdXNlVXBJbkRyYXdpbmdNb2RlIiwiX2ZpbmFsaXplQ3VycmVudFRyYW5zZm9ybSIsInRhcmdldFdhc0FjdGl2ZSIsIl9tYXliZUdyb3VwT2JqZWN0cyIsImFjdGl2ZU9uIiwiaXNNb3ZpbmciLCJvcmlnaW5hbENvbnRyb2wiLCJvcmlnaW5hbE1vdXNlVXBIYW5kbGVyIiwiX3NldEN1cnNvckZyb21FdmVudCIsImV2ZW50VHlwZSIsInN1YlRhcmdldHMiLCJhYnNvbHV0ZVBvaW50ZXIiLCJjdXJyZW50VGFyZ2V0IiwiY3VycmVudFN1YlRhcmdldHMiLCJfc2NhbGluZyIsImhhc1N0YXRlQ2hhbmdlZCIsIl9maXJlIiwiX29uTW91c2VEb3duSW5EcmF3aW5nTW9kZSIsIl9vbk1vdXNlTW92ZUluRHJhd2luZ01vZGUiLCJfcHJldmlvdXNQb2ludGVyIiwic2hvdWxkR3JvdXAiLCJfc2hvdWxkR3JvdXAiLCJfaGFuZGxlR3JvdXBpbmciLCJzYXZlU3RhdGUiLCJfdHJhbnNmb3JtT2JqZWN0IiwiX2ZpcmVPdmVyT3V0RXZlbnRzIiwiZmlyZVN5bnRoZXRpY0luT3V0RXZlbnRzIiwib2xkVGFyZ2V0IiwiZXZ0T3V0IiwiY2FudmFzRXZ0T3V0IiwiZXZ0SW4iLCJjYW52YXNFdnRJbiIsIl9kcmFnZ2Vkb3ZlclRhcmdldCIsImNvbmZpZyIsImluT3B0Iiwib3V0T3B0IiwiaW5GaXJlcyIsInRhcmdldENoYW5nZWQiLCJwcmV2aW91c1RhcmdldCIsIm5leHRUYXJnZXQiLCJyZXNldCIsIl9wZXJmb3JtVHJhbnNmb3JtQWN0aW9uIiwiZ2V0Q29ybmVyQ3Vyc29yIiwiX3VwZGF0ZUFjdGl2ZVNlbGVjdGlvbiIsIl9jcmVhdGVBY3RpdmVTZWxlY3Rpb24iLCJjdXJyZW50QWN0aXZlT2JqZWN0cyIsInJlbW92ZVdpdGhVcGRhdGUiLCJhZGRXaXRoVXBkYXRlIiwiX2NyZWF0ZUdyb3VwIiwiZ3JvdXBPYmplY3RzIiwiZXhpdEVkaXRpbmciLCJBY3RpdmVTZWxlY3Rpb24iLCJfZ3JvdXBTZWxlY3RlZE9iamVjdHMiLCJhR3JvdXAiLCJfY29sbGVjdE9iamVjdHMiLCJjdXJyZW50T2JqZWN0Iiwic2VsZWN0aW9uWDFZMSIsInNlbGVjdGlvblgyWTIiLCJhbGxvd0ludGVyc2VjdCIsImludGVyc2VjdHNXaXRoUmVjdCIsImlzQ29udGFpbmVkV2l0aGluUmVjdCIsInRvQ2FudmFzRWxlbWVudCIsImNyb3BwaW5nIiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJvcmlnaW5hbFdpZHRoIiwib3JpZ2luYWxIZWlnaHQiLCJuZXdab29tIiwidnAiLCJvcmlnaW5hbEludGVyYWN0aXZlIiwibmV3VnAiLCJvcmlnaW5hbFJldGluYSIsIm9yaWdpbmFsQ29udGV4dFRvcCIsImxvYWRGcm9tSlNPTiIsImpzb24iLCJzZXJpYWxpemVkIiwiX2VubGl2ZW5PYmplY3RzIiwiX3NldEJnT3ZlcmxheSIsImVubGl2ZW5lZENhbnZhc0NsaXAiLCJfX3NldHVwQ2FudmFzIiwibG9hZGVkIiwiY2JJZkxvYWRlZCIsIl9fc2V0QmdPdmVybGF5IiwiZW5saXZlZE9iamVjdCIsIl90b0RhdGFVUkwiLCJfdG9EYXRhVVJMV2l0aE11bHRpcGxpZXIiLCJ0b0RhdGFVUkxXaXRoTXVsdGlwbGllciIsImNsb25lV2l0aG91dERhdGEiLCJiYWNrZ3JvdW5kSW1hZ2VPcGFjaXR5IiwiYmFja2dyb3VuZEltYWdlU3RyZXRjaCIsIm9iamVjdENhY2hpbmciLCJ0b3VjaENvcm5lclNpemUiLCJib3JkZXJDb2xvciIsImJvcmRlckRhc2hBcnJheSIsImNvcm5lckRhc2hBcnJheSIsInN0cm9rZURhc2hPZmZzZXQiLCJib3JkZXJPcGFjaXR5V2hlbk1vdmluZyIsImJvcmRlclNjYWxlRmFjdG9yIiwibWluU2NhbGVMaW1pdCIsImhhc0NvbnRyb2xzIiwiaGFzQm9yZGVycyIsImxvY2tNb3ZlbWVudFgiLCJsb2NrTW92ZW1lbnRZIiwic3RhdGVmdWxsQ2FjaGUiLCJub1NjYWxlQ2FjaGUiLCJkaXJ0eSIsInBhaW50Rmlyc3QiLCJzdGF0ZVByb3BlcnRpZXMiLCJjYWNoZVByb3BlcnRpZXMiLCJjb2xvclByb3BlcnRpZXMiLCJhYnNvbHV0ZVBvc2l0aW9uZWQiLCJfY2FjaGVQcm9wZXJ0aWVzIiwiX3VwZGF0ZUNhY2hlQ2FudmFzIiwiX2xpbWl0Q2FjaGVTaXplIiwiZGltcyIsImxpbWl0ZWREaW1zIiwiY2FwcGVkIiwiX2dldENhY2hlQ2FudmFzRGltZW5zaW9ucyIsIm9iamVjdFNjYWxlIiwiZ2V0VG90YWxPYmplY3RTY2FsaW5nIiwibmVlZGVkWCIsIm5lZWRlZFkiLCJkcmF3aW5nV2lkdGgiLCJkcmF3aW5nSGVpZ2h0IiwibWluQ2FjaGVTaXplIiwiZGltZW5zaW9uc0NoYW5nZWQiLCJjYWNoZVdpZHRoIiwiY2FjaGVIZWlnaHQiLCJ6b29tQ2hhbmdlZCIsInNob3VsZFJlZHJhdyIsImFkZGl0aW9uYWxXaWR0aCIsImFkZGl0aW9uYWxIZWlnaHQiLCJzaG91bGRSZXNpemVDYW52YXMiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsInNpemVHcm93aW5nIiwiZ2V0SGVpZ2h0T2ZMaW5lIiwic2V0VHJhbnNmb3JtIiwibmVlZEZ1bGxUcmFuc2Zvcm0iLCJfcmVtb3ZlRGVmYXVsdFZhbHVlcyIsImdldE9iamVjdFNjYWxpbmciLCJyZXRpbmEiLCJnZXRPYmplY3RPcGFjaXR5Iiwic2hvdWxkQ29uc3RyYWluVmFsdWUiLCJpc0NoYW5nZWQiLCJncm91cE5lZWRzVXBkYXRlIiwiX2NvbnN0cmFpblNjYWxlIiwiaXNPbkFDYWNoZSIsInNldE9uR3JvdXAiLCJnZXRWaWV3cG9ydFRyYW5zZm9ybSIsImlzTm90VmlzaWJsZSIsImlzT25TY3JlZW4iLCJfc2V0dXBDb21wb3NpdGVPcGVyYXRpb24iLCJkcmF3U2VsZWN0aW9uQmFja2dyb3VuZCIsIl9zZXRPcGFjaXR5IiwiZHJhd0NhY2hlT25DYW52YXMiLCJfcmVtb3ZlQ2FjaGVDYW52YXMiLCJkcmF3T2JqZWN0IiwicHJvcGVydHlTZXQiLCJpc0NhY2hlRGlydHkiLCJoYXNTdHJva2UiLCJoYXNGaWxsIiwibmVlZHNJdHNPd25DYWNoZSIsIm93bkNhY2hpbmciLCJ3aWxsRHJhd1NoYWRvdyIsImRyYXdDbGlwUGF0aE9uQ2FjaGUiLCJvcmlnaW5hbEZpbGwiLCJvcmlnaW5hbFN0cm9rZSIsIl9zZXRDbGlwcGluZ1Byb3BlcnRpZXMiLCJfZHJhd0NsaXBQYXRoIiwic2tpcENhbnZhcyIsIl9nZXROb25UcmFuc2Zvcm1lZERpbWVuc2lvbnMiLCJfcmVtb3ZlU2hhZG93IiwiX3NldFN0cm9rZVN0eWxlcyIsImRlY2wiLCJsaW5lRGFzaE9mZnNldCIsIl9hcHBseVBhdHRlcm5Gb3JUcmFuc2Zvcm1lZEdyYWRpZW50IiwiX2FwcGx5UGF0dGVybkdyYWRpZW50VHJhbnNmb3JtIiwiX3NldEZpbGxTdHlsZXMiLCJkYXNoQXJyYXkiLCJkcmF3Qm9yZGVycyIsImZvckFjdGl2ZVNlbGVjdGlvbiIsImRyYXdCb3JkZXJzSW5Hcm91cCIsInNjYWxpbmciLCJtdWx0WCIsIm11bHRZIiwiX3JlbmRlclBhaW50SW5PcmRlciIsIl9yZW5kZXJTdHJva2UiLCJfcmVuZGVyRmlsbCIsInBDdHgiLCJwQ2FudmFzIiwiX2ZpbmRDZW50ZXJGcm9tRWxlbWVudCIsIl9hc3NpZ25UcmFuc2Zvcm1NYXRyaXhQcm9wcyIsInByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zIiwiY3JvcFgiLCJjcm9wWSIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvYmplY3RGb3JtIiwiX2Zyb21PYmplY3QiLCJjbG9uZUFzSW1hZ2UiLCJ1dGlscyIsIm9yaWdQYXJhbXMiLCJvcmlnaW5hbEdyb3VwIiwib3JpZ2luYWxTaGFkb3ciLCJ3aXRob3V0VHJhbnNmb3JtIiwid2l0aG91dFNoYWRvdyIsImJvdW5kaW5nUmVjdCIsImdldEJvdW5kaW5nUmVjdCIsInNoYWRvd09mZnNldCIsIm9yaWdpbmFsQ2FudmFzIiwiaXNUeXBlIiwiaW5jbHVkZXMiLCJzaG91bGRDZW50ZXJPcmlnaW4iLCJfc2V0T3JpZ2luVG9DZW50ZXIiLCJfcmVzZXRPcmlnaW4iLCJjZW50ZXJIIiwidmlld3BvcnRDZW50ZXJIIiwiY2VudGVyViIsInZpZXdwb3J0Q2VudGVyViIsInZpZXdwb3J0Q2VudGVyIiwiZ2V0TG9jYWxQb2ludGVyIiwicENsaWNrZWQiLCJvYmplY3RMZWZ0VG9wIiwiY3JlYXRlQWNjZXNzb3JzIiwiZXh0cmFQYXJhbSIsInRyYW5zbGF0ZVRvR2l2ZW5PcmlnaW4iLCJmcm9tT3JpZ2luWCIsImZyb21PcmlnaW5ZIiwidG9PcmlnaW5YIiwidG9PcmlnaW5ZIiwidHJhbnNsYXRlVG9DZW50ZXJQb2ludCIsImxlZnRUb3AiLCJnZXRQb2ludEJ5T3JpZ2luIiwiYWRqdXN0UG9zaXRpb24iLCJvZmZzZXRGcm9tIiwib2Zmc2V0VG8iLCJoeXBvdEZ1bGwiLCJnZXRTY2FsZWRXaWR0aCIsInhGdWxsIiwieUZ1bGwiLCJfb3JpZ2luYWxPcmlnaW5YIiwiX29yaWdpbmFsT3JpZ2luWSIsIm9yaWdpblBvaW50IiwibXVsdGlwbHlNYXRyaWNlcyIsIm9Db29yZHMiLCJhQ29vcmRzIiwibGluZUNvb3JkcyIsIm93bk1hdHJpeENhY2hlIiwibWF0cml4Q2FjaGUiLCJfZ2V0Q29vcmRzIiwiYWJzb2x1dGUiLCJjYWxjdWxhdGUiLCJjYWxjQUNvb3JkcyIsImNhbGNMaW5lQ29vcmRzIiwiZ2V0Q29vcmRzIiwicG9pbnRUTCIsInBvaW50QlIiLCJvdGhlciIsIm90aGVyQ29vcmRzIiwibGluZXMiLCJfZ2V0SW1hZ2VMaW5lcyIsIl9maW5kQ3Jvc3NQb2ludHMiLCJfY29udGFpbnNDZW50ZXJPZkNhbnZhcyIsImlzUGFydGlhbGx5T25TY3JlZW4iLCJldmVyeSIsInRvcGxpbmUiLCJyaWdodGxpbmUiLCJib3R0b21saW5lIiwibGVmdGxpbmUiLCJ4aSIsImlMaW5lIiwieGNvdW50IiwibGluZUtleSIsImdldFNjYWxlZEhlaWdodCIsInNjYWxlVG9XaWR0aCIsImJvdW5kaW5nUmVjdEZhY3RvciIsInNjYWxlVG9IZWlnaHQiLCJjb3NQIiwic2luUCIsImNvc1BTaW5QIiwiY29zUE1pbnVzU2luUCIsImNhbGNPQ29vcmRzIiwiX2NhbGNSb3RhdGVNYXRyaXgiLCJfY2FsY1RyYW5zbGF0ZU1hdHJpeCIsInN0YXJ0TWF0cml4IiwiX2NhbGN1bGF0ZUN1cnJlbnREaW1lbnNpb25zIiwiZm9yRWFjaENvbnRyb2wiLCJ3Iiwic2tpcENvcm5lcnMiLCJfc2V0Q29ybmVyQ29vcmRzIiwidHJhbnNmb3JtTWF0cml4S2V5Iiwic2VwIiwicHJlZml4IiwiY2FjaGUiLCJ0TWF0cml4Iiwibm9Ta2V3IiwiX2ZpbmFsaXplRGltZW5zaW9ucyIsImdldFN2Z0NvbG9yU3RyaW5nIiwiZ2V0U3ZnU3R5bGVzIiwic2tpcFNoYWRvdyIsImdldFN2Z0ZpbHRlciIsImdldFN2Z1NwYW5TdHlsZXMiLCJ1c2VXaGl0ZVNwYWNlIiwidGVybSIsInRleHREZWNvcmF0aW9uIiwiZ2V0U3ZnVGV4dERlY29yYXRpb24iLCJkZWNvcmF0aW9uIiwiZ2V0U3ZnQ29tbW9ucyIsImdldFN2Z1RyYW5zZm9ybSIsImZ1bGwiLCJfc2V0U1ZHQmciLCJ0ZXh0QmdSZWN0cyIsIl9nZXRGaWxsQXR0cmlidXRlcyIsIl9jcmVhdGVCYXNlU1ZHTWFya3VwIiwiX3RvU1ZHIiwiX2NyZWF0ZUJhc2VDbGlwUGF0aFNWR01hcmt1cCIsIm9iamVjdE1hcmt1cCIsImNvbW1vblBpZWNlcyIsImNsaXBQYXRoTWFya3VwIiwibm9TdHlsZSIsInN0eWxlSW5mbyIsInNoYWRvd0luZm8iLCJ3aXRoU2hhZG93IiwidmVjdG9yRWZmZWN0IiwiYWJzb2x1dGVDbGlwUGF0aCIsImFkZFBhaW50T3JkZXIiLCJvcmlnaW5hbFNldCIsInNhdmVQcm9wcyIsInByb3BzIiwidG1wT2JqIiwiX2lzRXF1YWwiLCJvcmlnVmFsdWUiLCJmaXJzdFBhc3MiLCJkYXNoZWRQcm9wZXJ0eVNldCIsImZvclRvdWNoIiwiaXNDb250cm9sVmlzaWJsZSIsInRvdWNoQ29ybmVyIiwiZm4iLCJjb250cm9sT2JqZWN0Iiwid2giLCJzaG91bGRTdHJva2UiLCJzZXRDb250cm9sVmlzaWJsZSIsInNldENvbnRyb2xzVmlzaWJpbGl0eSIsIkZYX0RVUkFUSU9OIiwiZnhDZW50ZXJPYmplY3RIIiwiY2FsbGJhY2tzIiwiZW1wdHkiLCJmeENlbnRlck9iamVjdFYiLCJmeFJlbW92ZSIsInNraXBDYWxsYmFja3MiLCJwcm9wc1RvQW5pbWF0ZSIsIm91dCIsIl9hbmltYXRlIiwicHJvcFBhaXIiLCJwcm9wSXNDb2xvciIsInZhbHVlUHJvZ3Jlc3MiLCJ0aW1lUHJvZ3Jlc3MiLCJjb29yZFByb3BzIiwibWFrZUVkZ2VUb09yaWdpbkdldHRlciIsInByb3BlcnR5TmFtZXMiLCJvcmlnaW5WYWx1ZXMiLCJheGlzMSIsImF4aXMyIiwiZGltZW5zaW9uIiwibmVhcmVzdCIsImZhcnRoZXN0IiwiTGluZSIsIl9zZXRXaWR0aEhlaWdodCIsIl9nZXRMZWZ0VG9PcmlnaW5YIiwiX2dldFRvcFRvT3JpZ2luWSIsImNhbGNMaW5lUG9pbnRzIiwib3JpZ1N0cm9rZVN0eWxlIiwieE11bHQiLCJ5TXVsdCIsIkFUVFJJQlVURV9OQU1FUyIsInBhcnNlZEF0dHJpYnV0ZXMiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJzZXRSYWRpdXMiLCJzdmdTdHJpbmciLCJnZXRSYWRpdXNYIiwiZ2V0UmFkaXVzWSIsIlRyaWFuZ2xlIiwid2lkdGhCeTIiLCJoZWlnaHRCeTIiLCJwaUJ5MiIsIkVsbGlwc2UiLCJnZXRSeCIsImdldFJ5IiwiX2luaXRSeFJ5IiwiaXNSb3VuZGVkIiwiYmV6aWVyQ3VydmVUbyIsIlBvbHlsaW5lIiwiZXhhY3RCb3VuZGluZ0JveCIsIl9zZXRQb3NpdGlvbkRpbWVuc2lvbnMiLCJfcHJvamVjdFN0cm9rZU9uUG9pbnRzIiwiY29ycmVjdExlZnRUb3AiLCJjYWxjRGltIiwiX2NhbGNEaW1lbnNpb25zIiwiY29ycmVjdFNpemUiLCJmcm9tU1ZHIiwiZGlmZlgiLCJkaWZmWSIsImNvbW1vblJlbmRlciIsImZyb21FbGVtZW50R2VuZXJhdG9yIiwiX2NsYXNzIiwiUG9seWdvbiIsIl9zZXRQYXRoIiwiX3JlbmRlclBhdGhDb21tYW5kcyIsInN1YnBhdGhTdGFydFgiLCJzdWJwYXRoU3RhcnRZIiwiX2dldE9mZnNldFRyYW5zZm9ybSIsImRpZ2l0cyIsImFYIiwiYVkiLCJwYXRoVXJsIiwiZWxpdmVuZWRPYmplY3RzIiwidXNlU2V0T25Hcm91cCIsImlzQWxyZWFkeUdyb3VwZWQiLCJfdXBkYXRlT2JqZWN0c0FDb29yZHMiLCJfY2FsY0JvdW5kcyIsIl91cGRhdGVPYmplY3RzQ29vcmRzIiwiX3VwZGF0ZU9iamVjdENvb3JkcyIsIm9iamVjdExlZnQiLCJvYmplY3RUb3AiLCJuZXN0ZWQiLCJfcmVzdG9yZU9iamVjdHNTdGF0ZSIsIl9pbmNsdWRlRGVmYXVsdFZhbHVlcyIsIm9ianNUb09iamVjdCIsIm9yaWdpbmFsRGVmYXVsdHMiLCJfb2JqIiwib3duQ2FjaGUiLCJncm91cE1hdHJpeCIsImRlc3Ryb3kiLCJ0b0FjdGl2ZVNlbGVjdGlvbiIsInVuZ3JvdXBPbkNhbnZhcyIsInNldE9iamVjdHNDb29yZHMiLCJvbmx5V2lkdGhIZWlnaHQiLCJpTGVuIiwiakxlbiIsIl9nZXRCb3VuZHMiLCJtaW5YWSIsIm1heFhZIiwidG9Hcm91cCIsIm5ld0dyb3VwIiwiY2hpbGRyZW5PdmVycmlkZSIsInNyY0Zyb21BdHRyaWJ1dGUiLCJfbGFzdFNjYWxlWCIsIl9sYXN0U2NhbGVZIiwiX2ZpbHRlclNjYWxpbmdYIiwiX2ZpbHRlclNjYWxpbmdZIiwibWluaW11bVNjYWxlVHJpZ2dlciIsImNhY2hlS2V5IiwiaW1hZ2VTbW9vdGhpbmciLCJmaWx0ZXJzIiwiX2luaXRFbGVtZW50IiwiX2VsZW1lbnQiLCJzZXRFbGVtZW50IiwicmVtb3ZlVGV4dHVyZSIsIl9pbml0Q29uZmlnIiwiYXBwbHlGaWx0ZXJzIiwicmVzaXplRmlsdGVyIiwiYXBwbHlSZXNpemVGaWx0ZXJzIiwiYmFja2VuZCIsImZpbHRlckJhY2tlbmQiLCJldmljdENhY2hlc0ZvcktleSIsImdldENyb3NzT3JpZ2luIiwiZ2V0T3JpZ2luYWxTaXplIiwiX3N0cm9rZSIsImZpbHRlck9iaiIsImdldFNyYyIsImhhc0Nyb3AiLCJzdHJva2VTdmciLCJpbWFnZU1hcmt1cCIsImltYWdlUmVuZGVyaW5nIiwiZ2V0U3ZnU3JjIiwib3JpZ0ZpbGwiLCJmaWx0ZXJlZCIsInNldFNyYyIsIm1pbmltdW1TY2FsZSIsImVsZW1lbnRUb0ZpbHRlciIsIl9maWx0ZXJlZEVsIiwic291cmNlV2lkdGgiLCJzb3VyY2VIZWlnaHQiLCJpc05ldXRyYWxTdGF0ZSIsImltZ0VsZW1lbnQiLCJfbmVlZHNSZXNpemUiLCJlbGVtZW50VG9EcmF3IiwiZWxXaWR0aCIsImVsSGVpZ2h0Iiwic1giLCJzWSIsInNXIiwic0giLCJtYXhEZXN0VyIsIm1heERlc3RIIiwiX3Jlc2V0V2lkdGhIZWlnaHQiLCJDU1NfQ0FOVkFTIiwiX2luaXRGaWx0ZXJzIiwicEFSIiwicldpZHRoIiwickhlaWdodCIsInBXaWR0aCIsInBIZWlnaHQiLCJfb2JqZWN0IiwicmVzaXplRmlsdGVycyIsImZyb21VUkwiLCJpbWdPcHRpb25zIiwiX2dldEFuZ2xlVmFsdWVGb3JTdHJhaWdodGVuIiwic3RyYWlnaHRlbiIsImZ4U3RyYWlnaHRlbiIsInN0cmFpZ2h0ZW5PYmplY3QiLCJmeFN0cmFpZ2h0ZW5PYmplY3QiLCJ0ZXN0UHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiZnJhZ21lbnRTb3VyY2UiLCJmcmFnbWVudFNoYWRlciIsImNyZWF0ZVNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsInNldHVwR0xDb250ZXh0IiwiY2FwdHVyZUdQVUluZm8iLCJpc1N1cHBvcnRlZCIsImdldFBhcmFtZXRlciIsIk1BWF9URVhUVVJFX1NJWkUiLCJwcmVjaXNpb25zIiwid2ViR2xQcmVjaXNpb24iLCJjcmVhdGVXZWJHTENhbnZhcyIsImFQb3NpdGlvbiIsIkZsb2F0MzJBcnJheSIsImNob29zZUZhc3Rlc3RDb3B5R0xUbzJETWV0aG9kIiwiY2FuVXNlSW1hZ2VEYXRhIiwiY2FuTWVhc3VyZVBlcmYiLCJwZXJmb3JtYW5jZSIsImNhblVzZUFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJjYW5Vc2VVaW50OENsYW1wZWQiLCJjb3B5R0xUbzJEIiwic3RhcnRUaW1lIiwiZHJhd0ltYWdlVGltZSIsInRlc3RDb250ZXh0Iiwibm93IiwiZ2xPcHRpb25zIiwicHJlbXVsdGlwbGllZEFscGhhIiwiZGVwdGgiLCJzdGVuY2lsIiwiYW50aWFsaWFzIiwiY2xlYXJDb2xvciIsImNhY2hlZFRleHR1cmUiLCJnZXRDYWNoZWRUZXh0dXJlIiwic291cmNlVGV4dHVyZSIsImNyZWF0ZVRleHR1cmUiLCJ0YXJnZXRUZXh0dXJlIiwib3JpZ2luYWxUZXh0dXJlIiwicGFzc2VzIiwid2ViZ2wiLCJwcm9ncmFtQ2FjaGUiLCJwYXNzIiwidGVtcEZibyIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJhcHBseVRvIiwicmVzaXplQ2FudmFzSWZOZWVkZWQiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJkZWxldGVUZXh0dXJlIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJjbGVhcldlYkdMQ2FjaGVzIiwidGV4dHVyZUNhY2hlIiwidGV4dHVyZUltYWdlU291cmNlIiwiZmlsdGVyVHlwZSIsInRleHR1cmUiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiTkVBUkVTVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwidGV4SW1hZ2UyRCIsInVuaXF1ZUlkIiwiZ3B1SW5mbyIsInJlbmRlcmVyIiwidmVuZG9yIiwiZXh0IiwiZ2V0RXh0ZW5zaW9uIiwiVU5NQVNLRURfUkVOREVSRVJfV0VCR0wiLCJVTk1BU0tFRF9WRU5ET1JfV0VCR0wiLCJzb3VyY2VFbGVtZW50Iiwib3JpZ2luYWxFbCIsIm9yaWdpbmFsSW1hZ2VEYXRhIiwiQmFzZUZpbHRlciIsInZlcnRleFNvdXJjZSIsImNyZWF0ZVByb2dyYW0iLCJ2ZXJ0ZXhTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwiZ2V0U2hhZGVySW5mb0xvZyIsInByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwiYXR0cmlidXRlTG9jYXRpb25zIiwiZ2V0QXR0cmlidXRlTG9jYXRpb25zIiwidW5pZm9ybUxvY2F0aW9ucyIsImdldFVuaWZvcm1Mb2NhdGlvbnMiLCJ1U3RlcFciLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ1U3RlcEgiLCJnZXRBdHRyaWJMb2NhdGlvbiIsInNlbmRBdHRyaWJ1dGVEYXRhIiwiYVBvc2l0aW9uRGF0YSIsImF0dHJpYnV0ZUxvY2F0aW9uIiwiYnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliUG9pbnRlciIsIkZMT0FUIiwiYnVmZmVyRGF0YSIsIlNUQVRJQ19EUkFXIiwiX3NldHVwRnJhbWVCdWZmZXIiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsIkNPTE9SX0FUVEFDSE1FTlQwIiwiX3N3YXBUZXh0dXJlcyIsInRlbXAiLCJtYWluIiwibWFpblBhcmFtZXRlciIsImFwcGx5VG9XZWJHTCIsImFwcGx5VG8yZCIsInJldHJpZXZlU2hhZGVyIiwic2hhZGVyIiwidXNlUHJvZ3JhbSIsInVuaWZvcm0xZiIsInNlbmRVbmlmb3JtRGF0YSIsInZpZXdwb3J0IiwiZHJhd0FycmF5cyIsIlRSSUFOR0xFX1NUUklQIiwiYmluZEFkZGl0aW9uYWxUZXh0dXJlIiwidGV4dHVyZVVuaXQiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJ1bmJpbmRBZGRpdGlvbmFsVGV4dHVyZSIsImdldE1haW5QYXJhbWV0ZXIiLCJzZXRNYWluUGFyYW1ldGVyIiwiY3JlYXRlSGVscExheWVyIiwiaGVscExheWVyIiwibWFpblAiLCJDb2xvck1hdHJpeCIsImNvbG9yc09ubHkiLCJ1Q29sb3JNYXRyaXgiLCJ1Q29uc3RhbnRzIiwiY29uc3RhbnRzIiwidW5pZm9ybU1hdHJpeDRmdiIsInVuaWZvcm00ZnYiLCJCcmlnaHRuZXNzIiwiYnJpZ2h0bmVzcyIsInVCcmlnaHRuZXNzIiwiQ29udm9sdXRlIiwib3BhcXVlIiwiQ29udm9sdXRlXzNfMSIsIkNvbnZvbHV0ZV8zXzAiLCJDb252b2x1dGVfNV8xIiwiQ29udm9sdXRlXzVfMCIsIkNvbnZvbHV0ZV83XzEiLCJDb252b2x1dGVfN18wIiwiQ29udm9sdXRlXzlfMSIsIkNvbnZvbHV0ZV85XzAiLCJkc3RPZmYiLCJzY3giLCJzY3kiLCJzcmNPZmYiLCJ3dCIsIndlaWdodHMiLCJzaWRlIiwiaGFsZlNpZGUiLCJzdyIsInNoIiwib3V0cHV0IiwiY3JlYXRlSW1hZ2VEYXRhIiwiZHN0IiwiYWxwaGFGYWMiLCJ1TWF0cml4IiwidU9wYXF1ZSIsInVIYWxmU2l6ZSIsInVTaXplIiwidW5pZm9ybTFmdiIsIkdyYXlzY2FsZSIsImxpZ2h0bmVzcyIsImx1bWlub3NpdHkiLCJtb2RlIiwidU1vZGUiLCJ1bmlmb3JtMWkiLCJJbnZlcnQiLCJpbnZlcnQiLCJ1SW52ZXJ0IiwiTm9pc2UiLCJub2lzZSIsInJhbmQiLCJ1Tm9pc2UiLCJ1U2VlZCIsIlBpeGVsYXRlIiwiYmxvY2tzaXplIiwiX2kiLCJfaiIsIl9pTGVuIiwiX2pMZW4iLCJ1QmxvY2tzaXplIiwiUmVtb3ZlQ29sb3IiLCJ1c2VBbHBoYSIsImxvd0MiLCJoaWdoQyIsInVMb3ciLCJ1SGlnaCIsIkJyb3duaWUiLCJWaW50YWdlIiwiS29kYWNocm9tZSIsIlRlY2huaWNvbG9yIiwiUG9sYXJvaWQiLCJTZXBpYSIsIkJsYWNrV2hpdGUiLCJCbGVuZENvbG9yIiwic2NyZWVuIiwiZGlmZiIsImxpZ2h0ZW4iLCJkYXJrZW4iLCJleGNsdXNpb24iLCJ0aW50IiwiYnVpbGRTb3VyY2UiLCJ0ZyIsImFscGhhMSIsInVDb2xvciIsIkJsZW5kSW1hZ2UiLCJtYXNrIiwiVEVYVFVSRTEiLCJjYWxjdWxhdGVNYXRyaXgiLCJjYW52YXMxIiwiYmxlbmREYXRhIiwiYmxlbmRJbWFnZSIsInVUcmFuc2Zvcm1NYXRyaXgiLCJ1SW1hZ2UiLCJ1bmlmb3JtTWF0cml4M2Z2IiwiUmVzaXplIiwicmVzaXplVHlwZSIsImxhbmN6b3NMb2JlcyIsInVEZWx0YSIsInVUYXBzIiwidW5pZm9ybTJmdiIsImhvcml6b250YWwiLCJ0YXBzIiwiZmlsdGVyV2luZG93IiwiZ2V0RmlsdGVyV2luZG93IiwiZ2VuZXJhdGVTaGFkZXIiLCJ0ZW1wU2NhbGUiLCJnZXRUYXBzIiwibG9iZUZ1bmN0aW9uIiwibGFuY3pvc0NyZWF0ZSIsIm9mZnNldHMiLCJmcmFnbWVudFNvdXJjZVRPUCIsImRXIiwiZEgiLCJsb2JlcyIsInh4IiwicmNwU2NhbGVYIiwicmNwU2NhbGVZIiwibmV3RGF0YSIsIm9XIiwib0giLCJzbGljZUJ5VHdvIiwiaGVybWl0ZUZhc3RSZXNpemUiLCJiaWxpbmVhckZpbHRlcmluZyIsImxhbmN6b3NSZXNpemUiLCJ0bXBDYW52YXMiLCJtdWx0IiwiZG9uZVciLCJkb25lSCIsInN0ZXBXIiwic3RlcEgiLCJkWCIsImRZIiwic3JjRGF0YSIsImRlc3RJbWciLCJkZXN0RGF0YSIsImxhbmN6b3MiLCJyYXRpb1giLCJyYXRpb1kiLCJyY3BSYXRpb1giLCJyY3BSYXRpb1kiLCJyYW5nZTJYIiwicmFuZ2UyWSIsImNhY2hlTGFuYyIsImljZW50ZXIiLCJwcm9jZXNzIiwidSIsIndlaWdodCIsImZYIiwiZlkiLCJ4RGlmZiIsInlEaWZmIiwiY2hubCIsIm9yaWdQaXgiLCJ3NCIsInBpeGVscyIsImRlc3RJbWFnZSIsImRlc3RQaXhlbHMiLCJyYXRpb1ciLCJyYXRpb0giLCJyYXRpb1dIYWxmIiwicmF0aW9ISGFsZiIsImltZzIiLCJkYXRhMiIsIndlaWdodHNBbHBoYSIsImd4UiIsImd4RyIsImd4QiIsImd4QSIsInl5IiwidzAiLCJDb250cmFzdCIsImNvbnRyYXN0IiwiY29udHJhc3RGIiwidUNvbnRyYXN0IiwiU2F0dXJhdGlvbiIsInNhdHVyYXRpb24iLCJhZGp1c3QiLCJ1U2F0dXJhdGlvbiIsIlZpYnJhbmNlIiwidmlicmFuY2UiLCJhdmciLCJhbXQiLCJ1VmlicmFuY2UiLCJCbHVyIiwiYXNwZWN0UmF0aW8iLCJzaW1wbGVCbHVyIiwiY2FudmFzMiIsImJsdXJMYXllcjEiLCJibHVyTGF5ZXIyIiwicGVyY2VudCIsImN0eDEiLCJjdHgyIiwibmV3SW1hZ2VEYXRhIiwiZGVsdGEiLCJjaG9vc2VSaWdodERlbHRhIiwiYmx1clNjYWxlIiwiR2FtbWEiLCJnYW1tYSIsInJJbnYiLCJnSW52IiwiYkludiIsInJWYWxzIiwiZ1ZhbHMiLCJiVmFscyIsInVHYW1tYSIsInVuaWZvcm0zZnYiLCJDb21wb3NlZCIsInN1YkZpbHRlcnMiLCJIdWVSb3RhdGlvbiIsInJvdGF0aW9uIiwicmFkIiwiYVRoaXJkIiwiYVRoaXJkU3F0U2luIiwiT25lTWludXNDb3MiLCJhZGRpdGlvbmFsUHJvcHMiLCJfZGltZW5zaW9uQWZmZWN0aW5nUHJvcHMiLCJfcmVOZXdsaW5lIiwiX3JlU3BhY2VzQW5kVGFicyIsIl9yZVNwYWNlQW5kVGFiIiwiX3JlV29yZHMiLCJ0ZXh0QWxpZ24iLCJzdXBlcnNjcmlwdCIsImJhc2VsaW5lIiwic3Vic2NyaXB0IiwicGF0aFN0YXJ0T2Zmc2V0IiwicGF0aFNpZGUiLCJwYXRoQWxpZ24iLCJfZm9udFNpemVGcmFjdGlvbiIsIl9mb250U2l6ZU11bHQiLCJjaGFyU3BhY2luZyIsIl9tZWFzdXJpbmdDb250ZXh0IiwiZGlyZWN0aW9uIiwiX3N0eWxlUHJvcGVydGllcyIsIl9fY2hhckJvdW5kcyIsIkNBQ0hFX0ZPTlRfU0laRSIsIk1JTl9URVhUX1dJRFRIIiwiX19za2lwRGltZW5zaW9uIiwic2V0UGF0aEluZm8iLCJpbml0RGltZW5zaW9ucyIsInNlZ21lbnRzSW5mbyIsImdldE1lYXN1cmluZ0NvbnRleHQiLCJfc3BsaXRUZXh0IiwibmV3TGluZXMiLCJfc3BsaXRUZXh0SW50b0xpbmVzIiwiX3RleHRMaW5lcyIsImdyYXBoZW1lTGluZXMiLCJfdW53cmFwcGVkVGV4dExpbmVzIiwiX3Vud3JhcHBlZExpbmVzIiwiX3RleHQiLCJncmFwaGVtZVRleHQiLCJfY2xlYXJDYWNoZSIsImNhbGNUZXh0V2lkdGgiLCJjdXJzb3JXaWR0aCIsImNhbGNUZXh0SGVpZ2h0IiwiZW5sYXJnZVNwYWNlcyIsImRpZmZTcGFjZSIsImN1cnJlbnRMaW5lV2lkdGgiLCJudW1iZXJPZlNwYWNlcyIsImFjY3VtdWxhdGVkU3BhY2UiLCJsaW5lIiwiY2hhckJvdW5kIiwic3BhY2VzIiwiaXNFbmRPZldyYXBwaW5nIiwiZ2V0TGluZVdpZHRoIiwia2VybmVkV2lkdGgiLCJsaW5lSW5kZXgiLCJtaXNzaW5nTmV3bGluZU9mZnNldCIsIl9zZXRUZXh0U3R5bGVzIiwiX3JlbmRlclRleHRMaW5lc0JhY2tncm91bmQiLCJfcmVuZGVyVGV4dERlY29yYXRpb24iLCJfcmVuZGVyVGV4dCIsIl9yZW5kZXJUZXh0U3Ryb2tlIiwiX3JlbmRlclRleHRGaWxsIiwiY2hhclN0eWxlIiwiZm9yTWVhc3VyaW5nIiwidGV4dEJhc2VsaW5lIiwiX2dldEZvbnREZWNsYXJhdGlvbiIsIm1heFdpZHRoIiwiX3JlbmRlclRleHRMaW5lIiwiX3JlbmRlckNoYXJzIiwic3R5bGVIYXMiLCJoZWlnaHRPZkxpbmUiLCJsaW5lTGVmdE9mZnNldCIsImxhc3RDb2xvciIsImNoYXJCb3giLCJjdXJyZW50Q29sb3IiLCJkcmF3U3RhcnQiLCJsZWZ0T2Zmc2V0IiwiX2dldExlZnRPZmZzZXQiLCJsaW5lVG9wT2Zmc2V0IiwiX2dldFRvcE9mZnNldCIsImJveFN0YXJ0IiwiYm94V2lkdGgiLCJfZ2V0TGluZUxlZnRPZmZzZXQiLCJnZXRWYWx1ZU9mUHJvcGVydHlBdCIsInJlbmRlckxlZnQiLCJnZXRGb250Q2FjaGUiLCJjYWNoZVByb3AiLCJfbWVhc3VyZUNoYXIiLCJfY2hhciIsInByZXZpb3VzQ2hhciIsInByZXZDaGFyU3R5bGUiLCJjb3VwbGVXaWR0aCIsInByZXZpb3VzV2lkdGgiLCJmb250Q2FjaGUiLCJjb3VwbGUiLCJzdHlsZXNBcmVFcXVhbCIsImZvbnRNdWx0aXBsaWVyIiwibWVhc3VyZVRleHQiLCJnZXRIZWlnaHRPZkNoYXIiLCJtZWFzdXJlTGluZSIsImxpbmVJbmZvIiwiX21lYXN1cmVMaW5lIiwiX2dldFdpZHRoT2ZDaGFyU3BhY2luZyIsImdyYXBoZW1lIiwicHJldkdyYXBoZW1lIiwiZ3JhcGhlbWVJbmZvIiwic3RhcnRpbmdQb2ludCIsInRvdGFsUGF0aExlbmd0aCIsImxpbmVCb3VuZHMiLCJwb3NpdGlvbkluUGF0aCIsIl9nZXRHcmFwaGVtZUJveCIsIl9zZXRHcmFwaGVtZU9uUGF0aCIsIm51bU9mU3BhY2VzIiwiY2VudGVyUG9zaXRpb24iLCJza2lwTGVmdCIsImdldENvbXBsZXRlU3R5bGVEZWNsYXJhdGlvbiIsInByZXZpb3VzQm94IiwiX19saW5lSGVpZ2h0cyIsIm1heEhlaWdodCIsIl9yZW5kZXJUZXh0Q29tbW9uIiwibGluZUhlaWdodHMiLCJpc0VtcHR5U3R5bGVzIiwiYWN0dWFsU3R5bGUiLCJuZXh0U3R5bGUiLCJ0aW1lVG9SZW5kZXIiLCJkcmF3aW5nTGVmdCIsImlzSnVzdGlmeSIsImNoYXJzVG9SZW5kZXIiLCJzaG9ydEN1dCIsImlzTHRyIiwiY3VycmVudERpcmVjdGlvbiIsIl9yZW5kZXJDaGFyIiwiX2FwcGx5UGF0dGVybkdyYWRpZW50VHJhbnNmb3JtVGV4dCIsImhhbmRsZUZpbGxlciIsImZpbGxPZmZzZXRzIiwic3Ryb2tlT2Zmc2V0cyIsIl9nZXRTdHlsZURlY2xhcmF0aW9uIiwiZnVsbERlY2wiLCJzaG91bGRGaWxsIiwiZmlsbFRleHQiLCJzdHJva2VUZXh0Iiwic2V0U3VwZXJzY3JpcHQiLCJfc2V0U2NyaXB0Iiwic2V0U3Vic2NyaXB0Iiwic2NoZW1hIiwibG9jIiwiZ2V0MkRDdXJzb3JMb2NhdGlvbiIsInNldFNlbGVjdGlvblN0eWxlcyIsImxpbmVEaWZmIiwiX19saW5lV2lkdGhzIiwiX3Nob3VsZENsZWFyRGltZW5zaW9uQ2FjaGUiLCJzaG91bGRDbGVhciIsIl9mb3JjZUNsZWFyQ2FjaGUiLCJfc2l6ZSIsIl9keSIsImxhc3REZWNvcmF0aW9uIiwiY3VycmVudERlY29yYXRpb24iLCJjdXJyZW50RmlsbCIsImxhc3RGaWxsIiwidG9wT2Zmc2V0Iiwic3R5bGVPYmplY3QiLCJmYW1pbHkiLCJmb250SXNHZW5lcmljIiwiZ2VuZXJpY0ZvbnRzIiwibmV3TGluZSIsIm5ld1RleHQiLCJhbGxQcm9wZXJ0aWVzIiwibmVlZHNEaW1zIiwiaXNBZGRpbmdQYXRoIiwiX2tleSIsInBhcnNlZEFuY2hvciIsInRleHRBbmNob3IiLCJvcmlnaW5hbFN0cm9rZVdpZHRoIiwidGV4dEhlaWdodFNjYWxlRmFjdG9yIiwic2NhbGVkRGlmZiIsInRleHRIZWlnaHQiLCJvZmZYIiwib2JqZWN0Q29weSIsInRleHRJbnN0YW5jZSIsInBhdGhJbnN0YW5jZSIsInAzIiwiY2xlYW5TdHlsZSIsImxldHRlckNvdW50Iiwic3R5bGVQcm9wZXJ0eVZhbHVlIiwic3R5bGVzQ291bnQiLCJhbGxTdHlsZU9iamVjdFByb3BlcnRpZXNNYXRjaCIsImdyYXBoZW1lQ291bnQiLCJyZW1vdmVTdHlsZSIsImxpbmVOdW0iLCJjaGFyTnVtIiwiX2V4dGVuZFN0eWxlcyIsIl9nZXRMaW5lU3R5bGUiLCJfc2V0TGluZVN0eWxlIiwiX3NldFN0eWxlRGVjbGFyYXRpb24iLCJzZWxlY3Rpb25TdGFydCIsInNraXBXcmFwcGluZyIsImdldFNlbGVjdGlvblN0eWxlcyIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInNlbGVjdGlvbkVuZCIsImdldFN0eWxlQXRQb3NpdGlvbiIsImxpbmVTdHlsZSIsIl9kZWxldGVTdHlsZURlY2xhcmF0aW9uIiwiX2RlbGV0ZUxpbmVTdHlsZSIsInBhcnNlRGVjb3JhdGlvbiIsIklUZXh0IiwiZWRpdGFibGUiLCJlZGl0aW5nQm9yZGVyQ29sb3IiLCJjdXJzb3JDb2xvciIsImN1cnNvckRlbGF5IiwiY3Vyc29yRHVyYXRpb24iLCJjYWNoaW5nIiwiaGlkZGVuVGV4dGFyZWFDb250YWluZXIiLCJfcmVTcGFjZSIsIl9jdXJyZW50Q3Vyc29yT3BhY2l0eSIsIl9zZWxlY3Rpb25EaXJlY3Rpb24iLCJfYWJvcnRDdXJzb3JBbmltYXRpb24iLCJfX3dpZHRoT2ZTcGFjZSIsImluQ29tcG9zaXRpb25Nb2RlIiwiaW5pdEJlaGF2aW9yIiwic2V0U2VsZWN0aW9uU3RhcnQiLCJfdXBkYXRlQW5kRmlyZSIsInNldFNlbGVjdGlvbkVuZCIsIl9maXJlU2VsZWN0aW9uQ2hhbmdlZCIsIl91cGRhdGVUZXh0YXJlYSIsImluaXREZWxheWVkQ3Vyc29yIiwiY3Vyc29yT2Zmc2V0Q2FjaGUiLCJyZW5kZXJDdXJzb3JPclNlbGVjdGlvbiIsInNraXBSZXN0b3JlIiwiX2NsZWFyVGV4dEFyZWEiLCJib3VuZGFyaWVzIiwiX2dldEN1cnNvckJvdW5kYXJpZXMiLCJyZW5kZXJDdXJzb3IiLCJyZW5kZXJTZWxlY3Rpb24iLCJfZ2V0Q3Vyc29yQm91bmRhcmllc09mZnNldHMiLCJjdXJzb3JQb3NpdGlvbiIsImJvdW5kIiwiY3Vyc29yTG9jYXRpb24iLCJjaGFySGVpZ2h0IiwiX19pc01vdXNlZG93biIsImhpZGRlblRleHRhcmVhIiwic3RhcnRMaW5lIiwiZW5kTGluZSIsInN0YXJ0Q2hhciIsImVuZENoYXIiLCJyZWFsTGluZUhlaWdodCIsImxpbmVPZmZzZXQiLCJib3hFbmQiLCJkcmF3V2lkdGgiLCJkcmF3SGVpZ2h0IiwiZXh0cmFUb3AiLCJjb21wb3NpdGlvbkNvbG9yIiwiZ2V0Q3VycmVudENoYXJGb250U2l6ZSIsImNwIiwiX2dldEN1cnJlbnRDaGFySW5kZXgiLCJnZXRDdXJyZW50Q2hhckNvbG9yIiwib2JqQ29weSIsImluaXRBZGRlZEhhbmRsZXIiLCJpbml0UmVtb3ZlZEhhbmRsZXIiLCJpbml0Q3Vyc29yU2VsZWN0aW9uSGFuZGxlcnMiLCJpbml0RG91YmxlQ2xpY2tTaW11bGF0aW9uIiwibW91c2VNb3ZlSGFuZGxlciIsIl9pbml0Q2FudmFzSGFuZGxlcnMiLCJfcmVtb3ZlQ2FudmFzSGFuZGxlcnMiLCJfdGljayIsIl9jdXJyZW50VGlja1N0YXRlIiwiX2FuaW1hdGVDdXJzb3IiLCJ0YXJnZXRPcGFjaXR5IiwiY29tcGxldGVNZXRob2QiLCJ0aWNrU3RhdGUiLCJpc0Fib3J0ZWQiLCJfb25UaWNrQ29tcGxldGUiLCJfY3Vyc29yVGltZW91dDEiLCJfY3VycmVudFRpY2tDb21wbGV0ZVN0YXRlIiwicmVzdGFydCIsImRlbGF5IiwiYWJvcnRDdXJzb3JBbmltYXRpb24iLCJfY3Vyc29yVGltZW91dDIiLCJzZWxlY3RBbGwiLCJnZXRTZWxlY3RlZFRleHQiLCJmaW5kV29yZEJvdW5kYXJ5TGVmdCIsInN0YXJ0RnJvbSIsImZpbmRXb3JkQm91bmRhcnlSaWdodCIsImZpbmRMaW5lQm91bmRhcnlMZWZ0IiwiZmluZExpbmVCb3VuZGFyeVJpZ2h0Iiwic2VhcmNoV29yZEJvdW5kYXJ5Iiwic2VsZWN0V29yZCIsIm5ld1NlbGVjdGlvblN0YXJ0IiwibmV3U2VsZWN0aW9uRW5kIiwic2VsZWN0TGluZSIsImVudGVyRWRpdGluZyIsImV4aXRFZGl0aW5nT25PdGhlcnMiLCJpbml0SGlkZGVuVGV4dGFyZWEiLCJmb2N1cyIsIl9zYXZlRWRpdGluZ1Byb3BzIiwiX3NldEVkaXRpbmdQcm9wcyIsIl90ZXh0QmVmb3JlRWRpdCIsImluaXRNb3VzZU1vdmVIYW5kbGVyIiwiYWN0aXZlRWxlbWVudCIsImdldFNlbGVjdGlvblN0YXJ0RnJvbVBvaW50ZXIiLCJjdXJyZW50U3RhcnQiLCJjdXJyZW50RW5kIiwiX19zZWxlY3Rpb25TdGFydE9uTW91c2VEb3duIiwicmVzdGFydEN1cnNvcklmTmVlZGVkIiwiZnJvbVN0cmluZ1RvR3JhcGhlbWVTZWxlY3Rpb24iLCJzbWFsbGVyVGV4dFN0YXJ0IiwiZ3JhcGhlbWVTdGFydCIsInNtYWxsZXJUZXh0RW5kIiwiZnJvbUdyYXBoZW1lVG9TdHJpbmdTZWxlY3Rpb24iLCJuZXdTZWxlY3Rpb24iLCJ1cGRhdGVUZXh0YXJlYVBvc2l0aW9uIiwidXBkYXRlRnJvbVRleHRBcmVhIiwiX2NhbGNUZXh0YXJlYVBvc2l0aW9uIiwiZGVzaXJlZFBvc2l0aW9uIiwiY29tcG9zaXRpb25TdGFydCIsInVwcGVyQ2FudmFzIiwidXBwZXJDYW52YXNXaWR0aCIsInVwcGVyQ2FudmFzSGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJfc2F2ZWRQcm9wcyIsIl9yZXN0b3JlRWRpdGluZ1Byb3BzIiwiaXNUZXh0Q2hhbmdlZCIsIl9yZW1vdmVFeHRyYW5lb3VzU3R5bGVzIiwicmVtb3ZlU3R5bGVGcm9tVG8iLCJzdHlsZU9iaiIsImN1cnNvclN0YXJ0IiwiY3Vyc29yRW5kIiwibGluZVN0YXJ0IiwiY2hhclN0YXJ0IiwibGluZUVuZCIsImNoYXJFbmQiLCJzaGlmdExpbmVTdHlsZXMiLCJudW1lcmljQ2hhciIsImNsb25lZFN0eWxlcyIsIm51bWVyaWNMaW5lIiwiaW5zZXJ0TmV3bGluZVN0eWxlT2JqZWN0IiwicXR5IiwiY29waWVkU3R5bGUiLCJjdXJyZW50Q2hhclN0eWxlIiwibmV3TGluZVN0eWxlcyIsInNvbWV0aGluZ0FkZGVkIiwiaXNFbmRPZkxpbmUiLCJudW1JbmRleCIsInN0eWxlQ2FycmllZE92ZXIiLCJpbnNlcnRDaGFyU3R5bGVPYmplY3QiLCJxdWFudGl0eSIsImN1cnJlbnRMaW5lU3R5bGVzIiwiY3VycmVudExpbmVTdHlsZXNDbG9uZWQiLCJudW1lcmljSW5kZXgiLCJuZXdTdHlsZSIsImluc2VydE5ld1N0eWxlQmxvY2siLCJpbnNlcnRlZFRleHQiLCJjdXJzb3JMb2MiLCJhZGRlZExpbmVzIiwibGluZXNMZW5ndGgiLCJzZXRTZWxlY3Rpb25TdGFydEVuZFdpdGhTaGlmdCIsInNldFNlbGVjdGlvbkluQm91bmRhcmllcyIsIl9fbGFzdENsaWNrVGltZSIsIl9fbGFzdExhc3RDbGlja1RpbWUiLCJfX2xhc3RQb2ludGVyIiwiX19uZXdDbGlja1RpbWUiLCJuZXdQb2ludGVyIiwiaXNUcmlwbGVDbGljayIsIl9zdG9wRXZlbnQiLCJfX2xhc3RJc0VkaXRpbmciLCJfX2xhc3RTZWxlY3RlZCIsImluaXRNb3VzZWRvd25IYW5kbGVyIiwiaW5pdE1vdXNldXBIYW5kbGVyIiwiaW5pdENsaWNrcyIsImRvdWJsZUNsaWNrSGFuZGxlciIsInRyaXBsZUNsaWNrSGFuZGxlciIsIl9tb3VzZURvd25IYW5kbGVyIiwic2V0Q3Vyc29yQnlDbGljayIsIl9tb3VzZURvd25IYW5kbGVyQmVmb3JlIiwiY3VycmVudEFjdGl2ZSIsIm1vdXNlT2Zmc2V0IiwicHJldldpZHRoIiwiX2dldE5ld1NlbGVjdGlvblN0YXJ0RnJvbU9mZnNldCIsImRpc3RhbmNlQnR3TGFzdENoYXJBbmRDdXJzb3IiLCJkaXN0YW5jZUJ0d05leHRDaGFyQW5kQ3Vyc29yIiwib25LZXlEb3duIiwib25LZXlVcCIsIm9uSW5wdXQiLCJjb3B5IiwicGFzdGUiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uVXBkYXRlIiwib25Db21wb3NpdGlvbkVuZCIsIl9jbGlja0hhbmRsZXJJbml0aWFsaXplZCIsIm9uQ2xpY2siLCJrZXlzTWFwIiwia2V5c01hcFJ0bCIsImN0cmxLZXlzTWFwVXAiLCJjdHJsS2V5c01hcERvd24iLCJrZXlNYXAiLCJrZXlDb2RlIiwiY3RybEtleSIsIm1ldGFLZXkiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfY29weURvbmUiLCJmcm9tUGFzdGUiLCJyZW1vdmVkVGV4dCIsInJlbW92ZUZyb20iLCJyZW1vdmVUbyIsIm5leHRUZXh0IiwiY2hhckNvdW50IiwibmV4dENoYXJDb3VudCIsImNoYXJEaWZmIiwidGV4dGFyZWFTZWxlY3Rpb24iLCJiYWNrRGVsZXRlIiwiY29waWVkVGV4dCIsImNvcGllZFRleHRTdHlsZSIsImNvbXBvc2l0aW9uRW5kIiwiX2dldENsaXBib2FyZERhdGEiLCJjbGlwYm9hcmREYXRhIiwiX2dldFdpZHRoQmVmb3JlQ3Vyc29yIiwid2lkdGhCZWZvcmVDdXJzb3IiLCJnZXREb3duQ3Vyc29yT2Zmc2V0IiwiaXNSaWdodCIsInNlbGVjdGlvblByb3AiLCJfZ2V0U2VsZWN0aW9uRm9yT2Zmc2V0IiwiaW5kZXhPbk90aGVyTGluZSIsIl9nZXRJbmRleE9uTGluZSIsImdldFVwQ3Vyc29yT2Zmc2V0IiwidGV4dEJlZm9yZUN1cnNvciIsImNoYXJXaWR0aCIsImZvdW5kTWF0Y2giLCJ3aWR0aE9mQ2hhcnNPbkxpbmUiLCJpbmRleE9uTGluZSIsImxlZnRFZGdlIiwicmlnaHRFZGdlIiwib2Zmc2V0RnJvbUxlZnRFZGdlIiwibW92ZUN1cnNvckRvd24iLCJfbW92ZUN1cnNvclVwT3JEb3duIiwibW92ZUN1cnNvclVwIiwibW92ZUN1cnNvcldpdGhTaGlmdCIsIm1vdmVDdXJzb3JXaXRob3V0U2hpZnQiLCJtb3ZlQ3Vyc29yTGVmdCIsIl9tb3ZlQ3Vyc29yTGVmdE9yUmlnaHQiLCJfbW92ZSIsIl9tb3ZlTGVmdCIsIl9tb3ZlUmlnaHQiLCJtb3ZlQ3Vyc29yTGVmdFdpdGhvdXRTaGlmdCIsImNoYW5nZSIsIm1vdmVDdXJzb3JMZWZ0V2l0aFNoaWZ0IiwibW92ZUN1cnNvclJpZ2h0IiwibW92ZUN1cnNvclJpZ2h0V2l0aFNoaWZ0IiwibW92ZUN1cnNvclJpZ2h0V2l0aG91dFNoaWZ0IiwiY2hhbmdlZCIsInJlbW92ZUNoYXJzIiwiaW5zZXJ0Q2hhcnMiLCJfZ2V0U1ZHTGVmdFRvcE9mZnNldHMiLCJ0ZXh0QW5kQmciLCJfZ2V0U1ZHVGV4dEFuZEJnIiwidGV4dFRvcCIsInRleHRMZWZ0IiwiX3dyYXBTVkdUZXh0QW5kQmciLCJsaW5lVG9wIiwidGV4dFNwYW5zIiwidGV4dFRvcE9mZnNldCIsInRleHRMZWZ0T2Zmc2V0IiwiX3NldFNWR1RleHRMaW5lQmciLCJfc2V0U1ZHVGV4dExpbmVUZXh0IiwiX2NyZWF0ZVRleHRDaGFyU3BhbiIsInN0eWxlRGVjbCIsInNob3VsZFVzZVdoaXRlc3BhY2UiLCJzdHlsZVByb3BzIiwiZmlsbFN0eWxlcyIsImR5U3BhbiIsIl9wdXNoVGV4dEJnUmVjdCIsImZpbGxDb2xvciIsIl9nZXRTVkdMaW5lVG9wT2Zmc2V0IiwibGFzdEhlaWdodCIsIlRleHRib3giLCJtaW5XaWR0aCIsImR5bmFtaWNNaW5XaWR0aCIsIl9fY2FjaGVkTGluZXMiLCJfd29yZEpvaW5lcnMiLCJzcGxpdEJ5R3JhcGhlbWUiLCJfc3R5bGVNYXAiLCJfZ2VuZXJhdGVTdHlsZU1hcCIsInRleHRJbmZvIiwicmVhbExpbmVDb3VudCIsInJlYWxMaW5lQ2hhckNvdW50IiwiaXNXcmFwcGluZyIsIm5leHRPZmZzZXQiLCJzaG91bGRMaW1pdCIsIm1hcE5leHRMaW5lIiwiX3dyYXBUZXh0IiwiZGVzaXJlZFdpZHRoIiwid3JhcHBlZCIsIl93cmFwTGluZSIsIl9tZWFzdXJlV29yZCIsIndvcmQiLCJjaGFyT2Zmc2V0IiwiX2xpbmUiLCJyZXNlcnZlZFNwYWNlIiwid29yZHMiLCJpbmZpeCIsIndvcmRXaWR0aCIsImluZml4V2lkdGgiLCJsYXJnZXN0V29yZFdpZHRoIiwibGluZUp1c3RTdGFydGVkIiwiYWRkaXRpb25hbFNwYWNlIiwiZ2V0TWluV2lkdGgiLCJsaW5lc1RvS2VlcCIsInNjYWxlU2tld1N0eWxlSGFuZGxlciIsInNjYWxlU3R5bGVIYW5kbGVyIiwib2JqZWN0Q29udHJvbHMiLCJtbCIsIm1yIiwibWIiLCJtdHIiLCJ0ZXh0Qm94Q29udHJvbHMiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJsb2NhbHMiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjcmVhdGVUZXh0Tm9kZSIsImdldERhdGEiLCJnZXRDb2xvcnMiLCJfdXBiYXIiLCJfb2JqZWN0UHJvcGVydGllc0JhciIsImxvYWRGb250cyIsImZvbnRzIiwiaW5uZXJIVE1MIiwiY3JlYXRlU2VsZWN0IiwiZ2V0Q2FudmFzIiwibW91bnRFbGVtZW50IiwiX2Rvd25sb2FkZXIiLCJuYW1lIiwiZnVuYyIsImFkZFRleHQiLCJpY29uIiwiX3NlbGVjdGVkT2JqZWN0cyIsImFsaWduT2JqZWN0IiwiZG93bG9hZCIsImRlbGV0ZUxhc3RBY3RpdmVPYmplY3QiLCJtb3VudFBsYWNlIiwicmVuZGVyQ29udHJvbHMiLCJfY2FudmFzRWxlbWVudCIsImJsb2JJbWFnZSIsImhyZWYiLCJkb3dubG9hZCIsImNsaWNrIiwiY29sb3JzIiwiY29sb3JLZXkiLCJ2YWx1ZXMiLCJjaGFuZ2VTaGFkb3ciLCJ1cGRhdGVWaXNpYmlsaXR5Iiwib3B0aW9uVGV4dCIsIm9wdGlvbkNvbG9ycyIsIm9wdGlvbkZvbnRzIiwib3B0aW9uUHJpY2UiLCJhZGRPcHRpb25EaXYiLCJvcHRpb25EaXYiLCJhZGRPcHRpb24iLCJsYWJlbFRleHQiLCJsYWJlbCIsImFkZFJhbmdlIiwic3RlcCIsInJhbmdlIiwic2hvd1ByaWNlIiwib3B0aW9uRWxlbWVudCIsImlucHV0IiwicGxhY2Vob2xkZXIiLCJyb3dzIiwib25pbnB1dCIsImNoYW5nZVRleHQiLCJjb2xvclBpY2tCdXR0b25zIiwiY2hhbmdlRm9udCIsInByaWNlRGl2IiwicHJpY2UiLCJFUFNJTE9OIiwiZ2V0VGV4dCIsImdldFByaWNlVGV4dFNpemUiLCJnZXRQcmljZUVsZW1lbnQiLCJzaGFkb3dTdHJlbmd0aCIsImNvbG9yT2ZTaGFkb3ciLCJfY29sb3JPZlNoYWRvdyIsInRleHRPYmoiLCJvbmNsaWNrIiwiX29uQ2xpY2siLCJfYnV0dG9uRGl2IiwiX3NwYW5FbGVtZW50Iiwib25Ib3ZlclNob3dIaWdoZXIiLCJodG1sRWwiLCJvbmhvdmVyWmluZGV4Iiwibm9ob3ZlclppbmRleCIsInpJbmRleCIsImZvbnRGb3JDb250cm9scyIsInNpemVUb1N0cmluZyIsImNvbG9yU2NoZW1lIiwidGV4dFdpZHRoIiwiY2FudmFzQ2xhc3MiLCJtYWtlQ2FudmFzRGl2IiwicmVzaXplIiwiZ2V0U2l6ZSIsImFkZFRvU2NlbmUiLCJhZGRSZWN0IiwidGV4dEVsZW1lbnQiLCJ2ZXJ0aWNhbCIsIndpZGdldCIsImJhc2VMb2NhdGlvbiIsInNlcnZlclVybCIsInByaWNlcyIsInByaWNlMW1tIiwicHJpY2Vmb3JFbGVtZW50IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInJlc3BvbnNlIiwiY29sIiwiZmV0Y2giLCJzZXRJdGVtIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJuYyJdLCJzb3VyY2VSb290IjoiIn0=